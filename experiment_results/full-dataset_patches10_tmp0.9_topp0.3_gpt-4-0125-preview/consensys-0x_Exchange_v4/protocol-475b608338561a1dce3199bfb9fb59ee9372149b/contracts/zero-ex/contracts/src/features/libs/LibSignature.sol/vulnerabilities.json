{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "            code,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "            hash,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "            signerAddress,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "            signature\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "            code,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "            hash\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrorsV06.rrevert (LibSignature.sol#39-43) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": 225,
          "vulnerability_code": "    function getSignerOfHash(\n\n        bytes32 hash,\n\n        Signature memory signature\n\n    )\n\n        internal\n\n        pure\n\n        returns (address recovered)\n\n    {\n\n        // Ensure this is a signature type that can be validated against a hash.\n\n        _validateHashCompatibleSignature(hash, signature);\n\n\n\n        if (signature.signatureType == SignatureType.EIP712) {\n\n            // Signed using EIP712\n\n            recovered = ecrecover(\n\n                hash,\n\n                signature.v,\n\n                signature.r,\n\n                signature.s\n\n            );\n\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n\n            // Signed using `eth_sign`\n\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n\n            // in packed encoding.\n\n            bytes32 ethSignHash;\n\n            assembly {\n\n                // Use scratch space\n\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n\n                mstore(28, hash) // length of 32 bytes\n\n                ethSignHash := keccak256(0, 60)\n\n            }\n\n            recovered = ecrecover(\n\n                ethSignHash,\n\n                signature.v,\n\n                signature.r,\n\n                signature.s\n\n            );\n\n        }\n\n        // `recovered` can be null if the signature values are out of range.\n\n        if (recovered == address(0)) {\n\n            LibSignatureRichErrors.SignatureValidationError(\n\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n\n                hash\n\n            ).rrevert();\n\n        }\n",
          "message": "LibSignature.getSignerOfHash (LibSignature.sol#181-225) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrorsV06.rrevert uses assembly (LibSignature.sol#39-43)\n\t- LibSignature.sol#40-42\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": 225,
          "vulnerability_code": "    function getSignerOfHash(\n\n        bytes32 hash,\n\n        Signature memory signature\n\n    )\n\n        internal\n\n        pure\n\n        returns (address recovered)\n\n    {\n\n        // Ensure this is a signature type that can be validated against a hash.\n\n        _validateHashCompatibleSignature(hash, signature);\n\n\n\n        if (signature.signatureType == SignatureType.EIP712) {\n\n            // Signed using EIP712\n\n            recovered = ecrecover(\n\n                hash,\n\n                signature.v,\n\n                signature.r,\n\n                signature.s\n\n            );\n\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n\n            // Signed using `eth_sign`\n\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n\n            // in packed encoding.\n\n            bytes32 ethSignHash;\n\n            assembly {\n\n                // Use scratch space\n\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n\n                mstore(28, hash) // length of 32 bytes\n\n                ethSignHash := keccak256(0, 60)\n\n            }\n\n            recovered = ecrecover(\n\n                ethSignHash,\n\n                signature.v,\n\n                signature.r,\n\n                signature.s\n\n            );\n\n        }\n\n        // `recovered` can be null if the signature values are out of range.\n\n        if (recovered == address(0)) {\n\n            LibSignatureRichErrors.SignatureValidationError(\n\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n\n                hash\n\n            ).rrevert();\n\n        }\n",
          "message": "LibSignature.getSignerOfHash uses assembly (LibSignature.sol#181-225)\n\t- LibSignature.sol#205-210\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Different versions of Solidity is used in LibSignature.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.5']\n\t- LibSignature.sol#22 declares pragma solidity^0.6.5\n\t- LibSignature.sol#66 declares pragma solidity^0.6.5\n\t- LibSignature.sol#137 declares pragma solidity^0.6.5\n\t- LibSignature.sol#138 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Detected issues with version pragma in LibSignature.sol:\n\t- pragma solidity^0.6.5 (LibSignature.sol#22): it allows old versions\n\t- pragma solidity^0.6.5 (LibSignature.sol#66): it allows old versions\n\t- pragma solidity^0.6.5 (LibSignature.sol#137): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function StandardError(string memory message) internal pure returns (bytes memory) {\n\n        return abi.encodeWithSelector(STANDARD_ERROR_SELECTOR, bytes(message));\n",
          "message": "Function 'LibRichErrorsV06.StandardError' (LibSignature.sol#33-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function SignatureValidationError(\n\n        SignatureValidationErrorCodes code,\n\n        bytes32 hash,\n\n        address signerAddress,\n\n        bytes memory signature\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n\n            code,\n\n            hash,\n\n            signerAddress,\n\n            signature\n\n        );\n",
          "message": "Function 'LibSignatureRichErrors.SignatureValidationError' (LibSignature.sol#82-99) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function SignatureValidationError(\n\n        SignatureValidationErrorCodes code,\n\n        bytes32 hash\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n\n            code,\n\n            hash\n\n        );\n",
          "message": "Function 'LibSignatureRichErrors.SignatureValidationError' (LibSignature.sol#101-114) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": 265,
          "vulnerability_code": "    function _validateHashCompatibleSignature(\n\n        bytes32 hash,\n\n        Signature memory signature\n\n    )\n\n        private\n\n        pure\n\n    {\n\n        // Ensure the r and s are within malleability limits.\n\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n\n        {\n\n            LibSignatureRichErrors.SignatureValidationError(\n\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n\n                hash\n\n            ).rrevert();\n\n        }\n\n\n\n        // Always illegal signature.\n\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n\n            LibSignatureRichErrors.SignatureValidationError(\n\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n\n                hash\n\n            ).rrevert();\n\n        }\n\n\n\n        // Always invalid.\n\n        if (signature.signatureType == SignatureType.INVALID) {\n\n            LibSignatureRichErrors.SignatureValidationError(\n\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n\n                hash\n\n            ).rrevert();\n\n        }\n\n\n\n        // Solidity should check that the signature type is within enum range for us\n\n        // when abi-decoding.\n",
          "message": "Function 'LibSignature._validateHashCompatibleSignature' (LibSignature.sol#230-265) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 147,
          "vulnerability_code": "    uint256 private constant ETH_SIGN_HASH_PREFIX =\n",
          "message": "LibSignature.ETH_SIGN_HASH_PREFIX (LibSignature.sol#146-147) is never used in LibSignature\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant ETH_SIGN_HASH_PREFIX =\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rrevert(bytes memory errorData) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSignerOfHash(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}