{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "      initializing || isConstructor() || !initialized,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "      'Contract instance has already been initialized'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "      initializing || isConstructor() || !initialized,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "      'Contract instance has already been initialized'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 64,
          "vulnerability_code": "  function isConstructor() private view returns (bool) {\n\n    // extcodesize checks the size of the code stored in an address, and\n\n    // address returns the current address. Since the code is still not\n\n    // deployed when running a constructor, any checks on its code size will\n\n    // yield zero, making it an effective way to detect if a contract is\n\n    // under construction or not.\n\n    uint256 cs;\n\n    //solium-disable-next-line\n\n    assembly {\n\n      cs := extcodesize(address())\n\n    }\n\n    return cs == 0;\n",
          "message": "Initializable.isConstructor (Initializable.sol#52-64) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 64,
          "vulnerability_code": "  function isConstructor() private view returns (bool) {\n\n    // extcodesize checks the size of the code stored in an address, and\n\n    // address returns the current address. Since the code is still not\n\n    // deployed when running a constructor, any checks on its code size will\n\n    // yield zero, making it an effective way to detect if a contract is\n\n    // under construction or not.\n\n    uint256 cs;\n\n    //solium-disable-next-line\n\n    assembly {\n\n      cs := extcodesize(address())\n\n    }\n\n    return cs == 0;\n",
          "message": "Initializable.isConstructor uses assembly (Initializable.sol#52-64)\n\t- Initializable.sol#60-63\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24 <0.7.0;\n",
          "message": "Detected issues with version pragma in Initializable.sol:\n\t- pragma solidity>=0.4.24<0.7.0 (Initializable.sol#4): is has a complex pragma\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256[50] private ______gap;\n",
          "message": "Variable 'Initializable.______gap' (Initializable.sol#67) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256[50] private ______gap;\n",
          "message": "Initializable.______gap (Initializable.sol#67) is never used in Initializable\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private initializing;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256[50] private ______gap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isConstructor() private view returns (bool) {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}