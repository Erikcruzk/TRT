{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _controller = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 740,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _factory = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _swapFee = MIN_FEE;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _publicSwap = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _finalized = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1033,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address t = _tokens[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint bal = _records[t].balance;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address t = _tokens[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint bal = _records[t].balance;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1068,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1068,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 712,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_mutex, \"ERR_REENTRY\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_mutex, \"ERR_REENTRY\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(swapFee >= MIN_FEE, \"ERR_MIN_FEE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(swapFee <= MAX_FEE, \"ERR_MAX_FEE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 872,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initSupply >= MIN_POOL_SUPPLY, \"ERR_MIN_POOL_SUPPLY\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 898,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_records[token].bound, \"ERR_IS_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 900,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 902,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_tokens.length < MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 924,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(denorm >= MIN_WEIGHT, \"ERR_MIN_WEIGHT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 925,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(denorm <= MAX_WEIGHT, \"ERR_MAX_WEIGHT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 926,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= MIN_BALANCE, \"ERR_MIN_BALANCE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 927,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance <= MAX_BALANCE, \"ERR_MAX_BALANCE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 933,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_totalWeight <= MAX_TOTAL_WEIGHT, \"ERR_MAX_TOTAL_WEIGHT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 960,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 961,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1001,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1013,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1014,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1025,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1030,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ratio != 0, \"ERR_MATH_APPROX\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1050,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1057,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ratio != 0, \"ERR_MATH_APPROX\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1067,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(tokenAmountOut >= minAmountsOut[i], \"ERR_LIMIT_OUT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1089,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1090,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1091,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");     \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1190,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1314,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(poolAmountIn <= maxPoolAmountIn, \"ERR_LIMIT_IN\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(xfer, \"ERR_ERC20_FALSE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(xfer, \"ERR_ERC20_FALSE\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": 984,
          "vulnerability_code": "    function unbind(address token)\n\n        external\n\n        _logs_\n\n        _lock_\n\n    {\n\n\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n\n\n        uint tokenBalance = _records[token].balance;\n\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n\n\n        // Swap the token-to-unbind with the last token,\n\n        // then delete the last token\n\n        uint index = _records[token].index;\n\n        uint last = _tokens.length - 1;\n\n        _tokens[index] = _tokens[last];\n\n        _records[_tokens[index]].index = index;\n\n        _tokens.pop();\n\n        _records[token] = Record({\n\n            bound: false,\n\n            index: 0,\n\n            denorm: 0,\n\n            balance: 0\n\n        });\n\n\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n\n        _pushUnderlying(token, _factory, tokenExitFee);\n",
          "message": "Reentrancy in BPool.unbind (BPool.sol#953-984):\n\tExternal calls:\n\t- _tokens.pop() (BPool.sol#974)\n\tState variables written after the call(s):\n\t- _records (BPool.sol#975-980)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": 984,
          "vulnerability_code": "    function unbind(address token)\n\n        external\n\n        _logs_\n\n        _lock_\n\n    {\n\n\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n\n\n        uint tokenBalance = _records[token].balance;\n\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n\n\n        // Swap the token-to-unbind with the last token,\n\n        // then delete the last token\n\n        uint index = _records[token].index;\n\n        uint last = _tokens.length - 1;\n\n        _tokens[index] = _tokens[last];\n\n        _records[_tokens[index]].index = index;\n\n        _tokens.pop();\n\n        _records[token] = Record({\n\n            bound: false,\n\n            index: 0,\n\n            denorm: 0,\n\n            balance: 0\n\n        });\n\n\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n\n        _pushUnderlying(token, _factory, tokenExitFee);\n",
          "message": "BPool.unbind (BPool.sol#953-984) does not use the value returned by external calls:\n\t-_tokens.pop() (BPool.sol#974)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8   private _decimals = 18;\n",
          "message": "BToken._decimals should be constant (BPool.sol#315)\nBToken._name should be constant (BPool.sol#313)\nBToken._symbol should be constant (BPool.sol#314)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": 319,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
          "message": "BToken.name (BPool.sol#317-319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 323,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
          "message": "BToken.symbol (BPool.sol#321-323) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 327,
          "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
          "message": "BToken.decimals (BPool.sol#325-327) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.12;\n",
          "message": "Detected issues with version pragma in BPool.sol:\n\t- pragma solidity0.5.12 (BPool.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#90): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#254): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#395): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#668): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function _mint(uint amt) internal {\n\n        _balance[address(this)] = badd(_balance[address(this)], amt);\n\n        _totalSupply = badd(_totalSupply, amt);\n\n        emit Transfer(address(0), address(this), amt);\n",
          "message": "Function 'BTokenBase._mint' (BPool.sol#282-286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 293,
          "vulnerability_code": "    function _burn(uint amt) internal {\n\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\n\n        _totalSupply = bsub(_totalSupply, amt);\n\n        emit Transfer(address(this), address(0), amt);\n",
          "message": "Function 'BTokenBase._burn' (BPool.sol#288-293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 300,
          "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[src] = bsub(_balance[src], amt);\n\n        _balance[dst] = badd(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
          "message": "Function 'BTokenBase._move' (BPool.sol#295-300) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 304,
          "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
          "message": "Function 'BTokenBase._push' (BPool.sol#302-304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": 308,
          "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
          "message": "Function 'BTokenBase._pull' (BPool.sol#306-308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint)                   internal _balance;\n",
          "message": "Variable 'BTokenBase._balance' (BPool.sol#275) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address=>uint)) internal _allowance;\n",
          "message": "Variable 'BTokenBase._allowance' (BPool.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal _totalSupply;\n",
          "message": "Variable 'BTokenBase._totalSupply' (BPool.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": 686,
          "vulnerability_code": "    event LOG_SWAP(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        address indexed tokenOut,\n\n        uint256         tokenAmountIn,\n\n        uint256         tokenAmountOut\n",
          "message": "Event 'BPool.LOG_SWAP' (BPool.sol#680-686) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": 692,
          "vulnerability_code": "    event LOG_JOIN(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        uint256         tokenAmountIn\n",
          "message": "Event 'BPool.LOG_JOIN' (BPool.sol#688-692) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": 698,
          "vulnerability_code": "    event LOG_EXIT(\n\n        address indexed caller,\n\n        address indexed tokenOut,\n\n        uint256         tokenAmountOut\n",
          "message": "Event 'BPool.LOG_EXIT' (BPool.sol#694-698) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 700,
          "vulnerability_to_line": 704,
          "vulnerability_code": "    event LOG_CALL(\n\n        bytes4  indexed sig,\n\n        address indexed caller,\n\n        bytes           data\n",
          "message": "Event 'BPool.LOG_CALL' (BPool.sol#700-704) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1348,
          "vulnerability_to_line": 1353,
          "vulnerability_code": "    function _pullUnderlying(address erc20, address from, uint amount)\n\n        internal\n\n    {\n\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\n\n        require(xfer, \"ERR_ERC20_FALSE\");\n",
          "message": "Function 'BPool._pullUnderlying' (BPool.sol#1348-1353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1355,
          "vulnerability_to_line": 1360,
          "vulnerability_code": "    function _pushUnderlying(address erc20, address to, uint amount)\n\n        internal\n\n    {\n\n        bool xfer = IERC20(erc20).transfer(to, amount);\n\n        require(xfer, \"ERR_ERC20_FALSE\");\n",
          "message": "Function 'BPool._pushUnderlying' (BPool.sol#1355-1360) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1362,
          "vulnerability_to_line": 1366,
          "vulnerability_code": "    function _pullPoolShare(address from, uint amount)\n\n        internal\n\n    {\n\n        _pull(from, amount);\n",
          "message": "Function 'BPool._pullPoolShare' (BPool.sol#1362-1366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": 1372,
          "vulnerability_code": "    function _pushPoolShare(address to, uint amount)\n\n        internal\n\n    {\n\n        _push(to, amount);\n",
          "message": "Function 'BPool._pushPoolShare' (BPool.sol#1368-1372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1374,
          "vulnerability_to_line": 1378,
          "vulnerability_code": "    function _mintPoolShare(uint amount)\n\n        internal\n\n    {\n\n        _mint(amount);\n",
          "message": "Function 'BPool._mintPoolShare' (BPool.sol#1374-1378) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1380,
          "vulnerability_to_line": 1384,
          "vulnerability_code": "    function _burnPoolShare(uint amount)\n\n        internal\n\n    {\n\n        _burn(amount);\n",
          "message": "Function 'BPool._burnPoolShare' (BPool.sol#1380-1384) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": 709,
          "vulnerability_code": "    modifier _logs_() {\n\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\n\n        _;\n",
          "message": "Modifier 'BPool._logs_' (BPool.sol#706-709) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 711,
          "vulnerability_to_line": 716,
          "vulnerability_code": "    modifier _lock_() {\n\n        require(!_mutex, \"ERR_REENTRY\");\n\n        _mutex = true;\n\n        _;\n\n        _mutex = false;\n",
          "message": "Modifier 'BPool._lock_' (BPool.sol#711-716) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": 721,
          "vulnerability_code": "    modifier _viewlock_() {\n\n        require(!_mutex, \"ERR_REENTRY\");\n\n        _;\n",
          "message": "Modifier 'BPool._viewlock_' (BPool.sol#718-721) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1063,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSwapFee(uint swapFee)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setController(address manager)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 866,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPublicSwap(bool public_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string  private _name     = \"Balancer Pool Token\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string  private _symbol   = \"BPT\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8   private _decimals = 18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _mutex;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _factory;    // BFactory address to push token exitFee to\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _controller; // has CONTROL role\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _publicSwap; // true if PUBLIC can call SWAP functions\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private _swapFee;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _finalized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] private _tokens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 735,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address=>Record) private  _records;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private _totalWeight;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint, bool)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint tokenAmountOut, uint spotPriceAfter)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (uint tokenAmountIn, uint spotPriceAfter)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}