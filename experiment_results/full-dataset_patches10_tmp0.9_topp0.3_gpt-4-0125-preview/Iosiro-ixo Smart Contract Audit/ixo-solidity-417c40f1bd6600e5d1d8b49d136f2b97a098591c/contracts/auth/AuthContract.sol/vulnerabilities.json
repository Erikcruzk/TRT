{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ProjectWalletAuthoriser is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract AuthContract is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        members = _members;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        quorum = _quorum;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMember[members[i]] = true;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMember[members[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            isMember[members[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isMember[msg.sender], \"Not a member\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!actions[_tx].triggered, \"Transaction already triggered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_tx != 0, \"Invalid transaction id\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_target != address(0), \"Invalid target\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_sender != address(0), \"Invalid sender\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_receiver != address(0), \"Invalid receiver\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amt >= 0, \"Invalid amount\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_27"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        // SWC-Unchecked Call Return Value: L38\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
          "message": "ProjectWalletAuthoriser.transfer (AuthContract.sol#105-115) does not use the value returned by external calls:\n\t-ProjectWallet(_sender).transfer(_receiver,_amt) (AuthContract.sol#114)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n\n        actions[_tx].triggered = true;\n\n        ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender, actions[_tx].receiver, actions[_tx].amt);\n",
          "message": "AuthContract._trigger (AuthContract.sol#205-208) does not use the value returned by external calls:\n\t-ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender,actions[_tx].receiver,actions[_tx].amt) (AuthContract.sol#207)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
          "message": "Ownable.renounceOwnership (AuthContract.sol#43-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (AuthContract.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
          "message": "ProjectWallet.transfer (AuthContract.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n\n    {\n\n        authoriser = _authoriser;\n",
          "message": "ProjectWalletAuthoriser.setAuthoriser (AuthContract.sol#94-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        // SWC-Unchecked Call Return Value: L38\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
          "message": "ProjectWalletAuthoriser.transfer (AuthContract.sol#105-115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 170,
          "vulnerability_code": "    function memberCount() public view returns (uint) {\n\n        return members.length;\n",
          "message": "AuthContract.memberCount (AuthContract.sol#168-170) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n\n        quorum = _quorum;\n",
          "message": "AuthContract.setQuorum (AuthContract.sol#172-174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 203,
          "vulnerability_code": "    function validate(\n\n        bytes32  _tx,\n\n        address  _target,\n\n        address  _sender,\n\n        address  _receiver,\n\n        uint256  _amt\n\n    ) public onlyMembers returns (bool) {\n\n        require(_tx != 0, \"Invalid transaction id\");\n\n        require(_target != address(0), \"Invalid target\");\n\n        require(_sender != address(0), \"Invalid sender\");\n\n        require(_receiver != address(0), \"Invalid receiver\");\n\n        require(_amt >= 0, \"Invalid amount\");\n\n        actions[_tx].target = _target;\n\n        actions[_tx].sender = _sender;\n\n        actions[_tx].receiver = _receiver;\n\n        actions[_tx].amt = _amt;\n\n        actions[_tx].triggered = false;\n\n        actions[_tx].confirmations = actions[_tx].confirmations + 1;\n\n\n\n        emit Confirmed(_tx, msg.sender);\n\n\n\n        if(actions[_tx].confirmations >= quorum){\n\n            _trigger(_tx);\n\n            emit Triggered(_tx);\n\n        }\n\n\n\n        return true;\n",
          "message": "AuthContract.validate (AuthContract.sol#176-203) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (AuthContract.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (AuthContract.sol#60-64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (AuthContract.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
          "message": "Parameter '_authoriser' of ProjectWalletAuthoriser.setAuthoriser (AuthContract.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _sender, \n",
          "message": "Parameter '_sender' of ProjectWalletAuthoriser.transfer (AuthContract.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _receiver, \n",
          "message": "Parameter '_receiver' of ProjectWalletAuthoriser.transfer (AuthContract.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amt\n",
          "message": "Parameter '_amt' of ProjectWalletAuthoriser.transfer (AuthContract.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
          "message": "Parameter '_members' of AuthContract. (AuthContract.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
          "message": "Parameter '_quorum' of AuthContract. (AuthContract.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n",
          "message": "Parameter '_quorum' of AuthContract.setQuorum (AuthContract.sol#172) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32  _tx,\n",
          "message": "Parameter '_tx' of AuthContract.validate (AuthContract.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address  _target,\n",
          "message": "Parameter '_target' of AuthContract.validate (AuthContract.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address  _sender,\n",
          "message": "Parameter '_sender' of AuthContract.validate (AuthContract.sol#179) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address  _receiver,\n",
          "message": "Parameter '_receiver' of AuthContract.validate (AuthContract.sol#180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256  _amt\n",
          "message": "Parameter '_amt' of AuthContract.validate (AuthContract.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n\n        actions[_tx].triggered = true;\n\n        ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender, actions[_tx].receiver, actions[_tx].amt);\n",
          "message": "Function 'AuthContract._trigger' (AuthContract.sol#205-208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n",
          "message": "Parameter '_tx' of AuthContract._trigger (AuthContract.sol#205) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private authoriser;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[]  public  members;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}