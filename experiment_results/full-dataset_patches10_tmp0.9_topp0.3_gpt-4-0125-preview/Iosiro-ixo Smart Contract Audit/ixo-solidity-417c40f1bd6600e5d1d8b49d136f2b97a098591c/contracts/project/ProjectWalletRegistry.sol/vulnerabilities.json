{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract IxoERC20Token is ERC20, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ProjectWalletRegistry is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "        authoriser = _authoriser;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "        authoriser = _authoriser;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "        factory = _factory;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == minter, \"Permission denied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= balances[msg.sender], \"Not enough funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= balances[_from], \"Not enough funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(factory != address(0), \"Invalid factory\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_74"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 151,
          "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
          "message": "BasicProjectWallet.transfer (ProjectWalletRegistry.sol#143-151) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (ProjectWalletRegistry.sol#150)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": 503,
          "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n\n        address newWallet = ProjectWalletFactory(factory).createWallet(token, authoriser, _name);\n\n        wallets[_name] = newWallet;\n",
          "message": "Reentrancy in ProjectWalletRegistry._createWallet (ProjectWalletRegistry.sol#500-503):\n\tExternal calls:\n\t- newWallet = ProjectWalletFactory(factory).createWallet(token,authoriser,_name) (ProjectWalletRegistry.sol#501)\n\tState variables written after the call(s):\n\t- wallets (ProjectWalletRegistry.sol#502)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public decimals = 8;\n",
          "message": "IxoERC20Token.decimals should be constant (ProjectWalletRegistry.sol#257)\nIxoERC20Token.name should be constant (ProjectWalletRegistry.sol#255)\nIxoERC20Token.symbol should be constant (ProjectWalletRegistry.sol#256)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
          "message": "Ownable.renounceOwnership (ProjectWalletRegistry.sol#43-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
          "message": "Ownable.transferOwnership (ProjectWalletRegistry.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 151,
          "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
          "message": "BasicProjectWallet.transfer (ProjectWalletRegistry.sol#143-151) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
          "message": "ProjectWallet.transfer (ProjectWalletRegistry.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20.totalSupply (ProjectWalletRegistry.sol#82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 311,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "IxoERC20Token.totalSupply (ProjectWalletRegistry.sol#309-311) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20.balanceOf (ProjectWalletRegistry.sol#84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": 320,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "IxoERC20Token.balanceOf (ProjectWalletRegistry.sol#318-320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public view returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
          "message": "IxoERC20Token.allowance (ProjectWalletRegistry.sol#328-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (ProjectWalletRegistry.sol#86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transfer (ProjectWalletRegistry.sol#88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_value <= balances[msg.sender], \"Not enough funds\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
          "message": "IxoERC20Token.transfer (ProjectWalletRegistry.sol#342-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 365,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
          "message": "IxoERC20Token.approve (ProjectWalletRegistry.sol#361-365) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
          "message": "ERC20.approve (ProjectWalletRegistry.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transferFrom (ProjectWalletRegistry.sol#92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": 389,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public returns (bool)\n\n    {\n\n        require(_value <= balances[_from], \"Not enough funds\");\n\n        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
          "message": "IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#373-389) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 171,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        address wallet = new BasicProjectWallet(_token, _authoriser, _name);\n\n        return wallet;\n",
          "message": "ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167-171) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 273,
          "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n\n        _setMinter(_newMinter);\n",
          "message": "IxoERC20Token.setMinter (ProjectWalletRegistry.sol#271-273) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 304,
          "vulnerability_code": "    function mint(\n\n        address _to,\n\n        uint256 _amount\n\n        )\n\n    public hasMintPermission returns (bool)\n\n    {\n\n        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n\n\n\n        totalSupply_ = totalSupply_.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n\n\n        emit Mint(_to, _amount);\n\n        emit Transfer(address(0), _to, _amount);\n\n\t\t\t\t\n\n        return true;\n",
          "message": "IxoERC20Token.mint (ProjectWalletRegistry.sol#289-304) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": 411,
          "vulnerability_code": "    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#400-411) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue >= oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#422-437) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 473,
          "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n\n        require(factory != address(0), \"Invalid factory\");\n\n        factory = _factory;\n",
          "message": "ProjectWalletRegistry.setFactory (ProjectWalletRegistry.sol#470-473) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": 486,
          "vulnerability_code": "    function ensureWallet(bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        if(wallets[_name] == address(0)) {\n\n            _createWallet(_name);\n\n        }\n\n        address wallet = wallets[_name];\n\n        return wallet;\n",
          "message": "ProjectWalletRegistry.ensureWallet (ProjectWalletRegistry.sol#479-486) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": 494,
          "vulnerability_code": "    function walletOf(bytes32 _name) public view returns (address) {\n\n        return wallets[_name];\n",
          "message": "ProjectWalletRegistry.walletOf (ProjectWalletRegistry.sol#492-494) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (ProjectWalletRegistry.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (ProjectWalletRegistry.sol#60-64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
          "message": "Parameter '_newOwner' of Ownable._transferOwnership (ProjectWalletRegistry.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _receiver,\n",
          "message": "Parameter '_receiver' of BasicProjectWallet.transfer (ProjectWalletRegistry.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amt\n",
          "message": "Parameter '_amt' of BasicProjectWallet.transfer (ProjectWalletRegistry.sol#145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Parameter '_token' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Parameter '_authoriser' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Parameter '_name' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_token' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_authoriser' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_name' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.mul (ProjectWalletRegistry.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.mul (ProjectWalletRegistry.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.div (ProjectWalletRegistry.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.div (ProjectWalletRegistry.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.sub (ProjectWalletRegistry.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.sub (ProjectWalletRegistry.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_a' of SafeMath.add (ProjectWalletRegistry.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
          "message": "Parameter '_b' of SafeMath.add (ProjectWalletRegistry.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of IxoERC20Token.balanceOf (ProjectWalletRegistry.sol#318) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _owner,\n",
          "message": "Parameter '_owner' of IxoERC20Token.allowance (ProjectWalletRegistry.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender\n",
          "message": "Parameter '_spender' of IxoERC20Token.allowance (ProjectWalletRegistry.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of IxoERC20Token.transfer (ProjectWalletRegistry.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of IxoERC20Token.transfer (ProjectWalletRegistry.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of IxoERC20Token.approve (ProjectWalletRegistry.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of IxoERC20Token.approve (ProjectWalletRegistry.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#374) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#375) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value\n",
          "message": "Parameter '_value' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
          "message": "Parameter '_newMinter' of IxoERC20Token.setMinter (ProjectWalletRegistry.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 281,
          "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n\n        minter = _newMinter;\n",
          "message": "Function 'IxoERC20Token._setMinter' (ProjectWalletRegistry.sol#279-281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n",
          "message": "Parameter '_newMinter' of IxoERC20Token._setMinter (ProjectWalletRegistry.sol#279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of IxoERC20Token.mint (ProjectWalletRegistry.sol#290) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of IxoERC20Token.mint (ProjectWalletRegistry.sol#291) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender,\n",
          "message": "Parameter '_spender' of IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _addedValue\n",
          "message": "Parameter '_addedValue' of IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#402) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _spender,\n",
          "message": "Parameter '_spender' of IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _subtractedValue\n",
          "message": "Parameter '_subtractedValue' of IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public CAP = 10000000000 * (10 ** decimals); // 10,000,000,000\n",
          "message": "Variable 'IxoERC20Token.CAP' (ProjectWalletRegistry.sol#258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
          "message": "Parameter '_token' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
          "message": "Parameter '_authoriser' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 460,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
          "message": "Parameter '_factory' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n",
          "message": "Parameter '_factory' of ProjectWalletRegistry.setFactory (ProjectWalletRegistry.sol#470) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ensureWallet(bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_name' of ProjectWalletRegistry.ensureWallet (ProjectWalletRegistry.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function walletOf(bytes32 _name) public view returns (address) {\n",
          "message": "Parameter '_name' of ProjectWalletRegistry.walletOf (ProjectWalletRegistry.sol#492) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": 503,
          "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n\n        address newWallet = ProjectWalletFactory(factory).createWallet(token, authoriser, _name);\n\n        wallets[_name] = newWallet;\n",
          "message": "Function 'ProjectWalletRegistry._createWallet' (ProjectWalletRegistry.sol#500-503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n",
          "message": "Parameter '_name' of ProjectWalletRegistry._createWallet (ProjectWalletRegistry.sol#500) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private authoriser;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private authoriser;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private factory;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address) private wallets;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name = \"IXO Token\"; \n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}