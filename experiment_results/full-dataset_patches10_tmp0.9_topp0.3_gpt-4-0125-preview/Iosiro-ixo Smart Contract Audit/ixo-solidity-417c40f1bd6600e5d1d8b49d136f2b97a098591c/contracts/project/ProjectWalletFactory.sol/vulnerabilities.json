{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        authoriser = _authoriser;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
          "message": "BasicProjectWallet.transfer (ProjectWalletFactory.sol#77-85) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (ProjectWalletFactory.sol#84)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
          "message": "ProjectWallet.transfer (ProjectWalletFactory.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": 85,
          "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
          "message": "BasicProjectWallet.transfer (ProjectWalletFactory.sol#77-85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20.totalSupply (ProjectWalletFactory.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
          "message": "ERC20.balanceOf (ProjectWalletFactory.sol#18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (ProjectWalletFactory.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transfer (ProjectWalletFactory.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
          "message": "ERC20.approve (ProjectWalletFactory.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
          "message": "ERC20.transferFrom (ProjectWalletFactory.sol#26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        address wallet = new BasicProjectWallet(_token, _authoriser, _name);\n\n        return wallet;\n",
          "message": "ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101-105) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _receiver,\n",
          "message": "Parameter '_receiver' of BasicProjectWallet.transfer (ProjectWalletFactory.sol#78) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amt\n",
          "message": "Parameter '_amt' of BasicProjectWallet.transfer (ProjectWalletFactory.sol#79) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Parameter '_token' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Parameter '_authoriser' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
          "message": "Parameter '_name' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_token' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_authoriser' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
          "message": "Parameter '_name' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private authoriser;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC20(token).transfer(_receiver, _amt);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}