{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "abstract contract BasicToken is Ownable, ERC20Basic {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "abstract contract BlackList is Ownable, BasicToken {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public basisPointsRate = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public maximumFee = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _initialSupply,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _decimals\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply = _initialSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_51"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 97,
          "vulnerability_code": "abstract contract ERC20Basic {\n\n    uint256 public _totalSupply;\n\n\n\n    function totalSupply() public view virtual returns (uint256);\n\n\n\n    function balanceOf(address who) public view virtual returns (uint256);\n\n\n\n    function transfer(address to, uint256 value) public virtual;\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n",
          "message": "ERC20Basic (TetherToken.sol#85-97) has incorrect ERC20 function interface(s):\n\t-transfer (TetherToken.sol#92-94)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 115,
          "vulnerability_code": "abstract contract ERC20 is ERC20Basic {\n\n    function allowance(address owner, address spender) public view virtual returns (uint256);\n\n\n\n    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public virtual;\n\n\n\n    function approve(address spender, uint256 value) public virtual;\n\n\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n",
          "message": "ERC20 (TetherToken.sol#101-115) has incorrect ERC20 function interface(s):\n\t-transferFrom (TetherToken.sol#104-110)\n\t-approve (TetherToken.sol#110-112)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 161,
          "vulnerability_code": "abstract contract BasicToken is Ownable, ERC20Basic {\n\n    using SafeMath for uint256;\n\n\n\n    mapping(address => uint256) public balances;\n\n\n\n    // additional variables for use if transaction fees ever became necessary\n\n    uint256 public basisPointsRate = 0;\n\n    uint256 public maximumFee = 0;\n\n\n\n    /**\n\n     * @dev Fix for the ERC20 short address attack.\n\n     */\n\n    modifier onlyPayloadSize(uint256 size) {\n\n        require(!(msg.data.length < size + 4));\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev transfer token for a specified address\n\n     * @param _to The address to transfer to.\n\n     * @param _value The amount to be transferred.\n\n     */\n\n    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n\n        uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        uint256 sendAmount = _value.sub(fee);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            emit Transfer(msg.sender, owner, fee);\n\n        }\n\n        emit Transfer(msg.sender, _to, sendAmount);\n\n    }\n\n\n\n    function balanceOf(address _owner) public view virtual override returns (uint256 balance) {\n\n        return balances[_owner];\n\n    }\n\n}\n\n\n",
          "message": "BasicToken (TetherToken.sol#119-161) has incorrect ERC20 function interface(s):\n\t-transfer (TetherToken.sol#141-156)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 228,
          "vulnerability_code": "abstract contract StandardToken is BasicToken, ERC20 {\n\n    mapping(address => mapping(address => uint256)) public allowed;\n\n\n\n    uint256 public constant MAX_UINT = 2**256 - 1;\n\n\n\n    /**\n\n     * @dev Transfer tokens from one address to another\n\n     * @param _from address The address which you want to send tokens from\n\n     * @param _to address The address which you want to transfer to\n\n     * @param _value uint the amount of tokens to be transferred\n\n     */\n\n\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    ) public virtual override onlyPayloadSize(3 * 32) {\n\n        uint256 _allowance = allowed[_from][msg.sender];\n\n\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n\n        // if (_value > _allowance) throw;\n\n\n\n        uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        if (_allowance < MAX_UINT) {\n\n            allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        }\n\n        uint256 sendAmount = _value.sub(fee);\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            Transfer(_from, owner, fee);\n\n        }\n\n        Transfer(_from, _to, sendAmount);\n\n    }\n\n\n\n    /**\n\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n     * @param _spender The address which will spend the funds.\n\n     * @param _value The amount of tokens to be spent.\n\n     */\n\n    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n\n\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n    }\n\n\n\n    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n\n    }\n\n}\n\n\n",
          "message": "StandardToken (TetherToken.sol#168-228) has incorrect ERC20 function interface(s):\n\t-transferFrom (TetherToken.sol#180-207)\n\t-approve (TetherToken.sol#212-223)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": 481,
          "vulnerability_code": "contract TetherToken is Pausable, StandardToken, BlackList {\n\n    string public name;\n\n    string public symbol;\n\n    uint256 public decimals;\n\n    address public upgradedAddress;\n\n    bool public deprecated;\n\n\n\n    //  The contract can be initialized with a number of tokens\n\n    //  All the tokens are deposited to the owner address\n\n    //\n\n    // @param _balance Initial supply of the contract\n\n    // @param _name Token Name\n\n    // @param _symbol Token symbol\n\n    // @param _decimals Token decimals\n\n    constructor(\n\n        uint256 _initialSupply,\n\n        string memory _name,\n\n        string memory _symbol,\n\n        uint256 _decimals\n\n    ) public {\n\n        _totalSupply = _initialSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        balances[owner] = _initialSupply;\n\n        deprecated = false;\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function transfer(address _to, uint256 _value) public override whenNotPaused {\n\n        require(!isBlackListed[msg.sender]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n\n        } else {\n\n            return super.transfer(_to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    ) public override whenNotPaused {\n\n        require(!isBlackListed[_from]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n\n        } else {\n\n            return super.transferFrom(_from, _to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function balanceOf(address who) public view override returns (uint256) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n\n        } else {\n\n            return super.balanceOf(who);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n\n        } else {\n\n            return super.approve(_spender, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n\n        } else {\n\n            return super.allowance(_owner, _spender);\n\n        }\n\n    }\n\n\n\n    // deprecate current contract in favour of a new one\n\n    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n\n    }\n\n\n\n    // deprecate current contract if favour of a new one\n\n\n\n    function totalSupply() public view override returns (uint256) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n\n    }\n\n\n\n    // Issue a new amount of tokens\n\n    // these tokens are deposited into the owner address\n\n    //\n\n    // @param _amount Number of tokens to be issued\n\n    function issue(uint256 amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n\n    }\n\n\n\n    // Redeem tokens.\n\n    // These tokens are withdrawn from the owner address\n\n    // if the balance must be enough to cover the redeem\n\n    // or the call will fail.\n\n    // @param _amount Number of tokens to be issued\n\n    function redeem(uint256 amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n\n    }\n\n\n\n    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n\n    }\n\n\n\n    // Called when new token are issued\n\n    event Issue(uint256 amount);\n\n\n\n    // Called when tokens are redeemed\n\n    event Redeem(uint256 amount);\n\n\n\n    // Called when contract is deprecated\n\n    event Deprecate(address newAddress);\n\n\n\n    // Called if contract ever adds fees\n\n    event Params(uint256 feeBasisPoints, uint256 maxFee);\n",
          "message": "TetherToken (TetherToken.sol#331-481) has incorrect ERC20 function interface(s):\n\t-transfer (TetherToken.sol#361-370)\n\t-transferFrom (TetherToken.sol#372-385)\n\t-approve (TetherToken.sol#397-405)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 8,
          "vulnerability_code": "pragma solidity 0.6.9;\n",
          "message": "Different versions of Solidity is used in TetherToken.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- TetherToken.sol#7-8 declares pragma solidity0.6.9\n\t- TetherToken.sol#8-10 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        if (newOwner != address(0)) {\n\n            owner = newOwner;\n\n        }\n\n    }\n",
          "message": "Ownable.transferOwnership (TetherToken.sol#73-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 90,
          "vulnerability_code": "    function totalSupply() public view virtual returns (uint256);\n\n\n",
          "message": "ERC20Basic.totalSupply (TetherToken.sol#88-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 432,
          "vulnerability_code": "    function totalSupply() public view override returns (uint256) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n\n    }\n\n\n",
          "message": "TetherToken.totalSupply (TetherToken.sol#424-432) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 262,
          "vulnerability_code": "    function pause() public onlyOwner whenNotPaused {\n\n        paused = true;\n\n        Pause();\n\n    }\n\n\n",
          "message": "Pausable.pause (TetherToken.sol#257-262) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 269,
          "vulnerability_code": "    function unpause() public onlyOwner whenPaused {\n\n        paused = false;\n\n        Unpause();\n\n    }\n",
          "message": "Pausable.unpause (TetherToken.sol#265-269) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 288,
          "vulnerability_code": "    function addBlackList(address _evilUser) public onlyOwner {\n\n        isBlackListed[_evilUser] = true;\n\n        AddedBlackList(_evilUser);\n\n    }\n\n\n",
          "message": "BlackList.addBlackList (TetherToken.sol#283-288) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 293,
          "vulnerability_code": "    function removeBlackList(address _clearedUser) public onlyOwner {\n\n        isBlackListed[_clearedUser] = false;\n\n        RemovedBlackList(_clearedUser);\n\n    }\n\n\n",
          "message": "BlackList.removeBlackList (TetherToken.sol#288-293) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": 301,
          "vulnerability_code": "    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n\n        require(isBlackListed[_blackListedUser]);\n\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\n\n        balances[_blackListedUser] = 0;\n\n        _totalSupply -= dirtyFunds;\n\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n\n    }\n\n\n",
          "message": "BlackList.destroyBlackFunds (TetherToken.sol#293-301) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": 317,
          "vulnerability_code": "    function transferByLegacy(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public virtual;\n\n\n",
          "message": "UpgradedStandardToken.transferByLegacy (TetherToken.sol#311-317) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function transferFromByLegacy(\n\n        address sender,\n\n        address from,\n\n        address spender,\n\n        uint256 value\n\n    ) public virtual;\n\n\n",
          "message": "UpgradedStandardToken.transferFromByLegacy (TetherToken.sol#317-324) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 329,
          "vulnerability_code": "    function approveByLegacy(\n\n        address from,\n\n        address spender,\n\n        uint256 value\n\n    ) public virtual;\n",
          "message": "UpgradedStandardToken.approveByLegacy (TetherToken.sol#324-329) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 422,
          "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n\n    }\n\n\n",
          "message": "TetherToken.deprecate (TetherToken.sol#416-422) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": 445,
          "vulnerability_code": "    function issue(uint256 amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n\n    }\n\n\n",
          "message": "TetherToken.issue (TetherToken.sol#436-445) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": 459,
          "vulnerability_code": "    function redeem(uint256 amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n\n    }\n\n\n",
          "message": "TetherToken.redeem (TetherToken.sol#450-459) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": 470,
          "vulnerability_code": "    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n\n    }\n\n\n",
          "message": "TetherToken.setParams (TetherToken.sol#459-470) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 8,
          "vulnerability_code": "pragma solidity 0.6.9;\n",
          "message": "Detected issues with version pragma in TetherToken.sol:\n\t- pragma solidity0.6.9 (TetherToken.sol#7-8): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    uint256 public _totalSupply;\n",
          "message": "Variable 'ERC20Basic._totalSupply' (TetherToken.sol#86-87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view virtual override returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (TetherToken.sol#156) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (TetherToken.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (TetherToken.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (TetherToken.sol#223) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (TetherToken.sol#223) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": 182,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (TetherToken.sol#181-182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 183,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (TetherToken.sol#182-183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 184,
          "vulnerability_code": "        uint256 _value\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (TetherToken.sol#183-184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (TetherToken.sol#212) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of StandardToken.approve (TetherToken.sol#212) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBlackListStatus(address _maker) external view returns (bool) {\n",
          "message": "Parameter '_maker' of BlackList.getBlackListStatus (TetherToken.sol#273) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addBlackList(address _evilUser) public onlyOwner {\n",
          "message": "Parameter '_evilUser' of BlackList.addBlackList (TetherToken.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeBlackList(address _clearedUser) public onlyOwner {\n",
          "message": "Parameter '_clearedUser' of BlackList.removeBlackList (TetherToken.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n",
          "message": "Parameter '_blackListedUser' of BlackList.destroyBlackFunds (TetherToken.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public override whenNotPaused {\n",
          "message": "Parameter '_to' of TetherToken.transfer (TetherToken.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public override whenNotPaused {\n",
          "message": "Parameter '_value' of TetherToken.transfer (TetherToken.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n",
          "message": "Parameter '_owner' of TetherToken.allowance (TetherToken.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n",
          "message": "Parameter '_spender' of TetherToken.allowance (TetherToken.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": 374,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of TetherToken.transferFrom (TetherToken.sol#373-374) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": 375,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of TetherToken.transferFrom (TetherToken.sol#374-375) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": 376,
          "vulnerability_code": "        uint256 _value\n",
          "message": "Parameter '_value' of TetherToken.transferFrom (TetherToken.sol#375-376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_spender' of TetherToken.approve (TetherToken.sol#397) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of TetherToken.approve (TetherToken.sol#397) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": 347,
          "vulnerability_code": "        uint256 _initialSupply,\n",
          "message": "Parameter '_initialSupply' of TetherToken. (TetherToken.sol#346-347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": 348,
          "vulnerability_code": "        string memory _name,\n",
          "message": "Parameter '_name' of TetherToken. (TetherToken.sol#347-348) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": 349,
          "vulnerability_code": "        string memory _symbol,\n",
          "message": "Parameter '_symbol' of TetherToken. (TetherToken.sol#348-349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": 350,
          "vulnerability_code": "        uint256 _decimals\n",
          "message": "Parameter '_decimals' of TetherToken. (TetherToken.sol#349-350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n",
          "message": "Parameter '_upgradedAddress' of TetherToken.deprecate (TetherToken.sol#416) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}