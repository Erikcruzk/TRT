{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _price) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        price = _price;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        twapPrice = _price;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function getTwapPrice(bytes32, uint256) public view returns (uint256) {\n\n        return twapPrice;\n\n    }\n\n\n",
          "message": "L2PriceFeedMock.getTwapPrice (L2PriceFeedMock.sol#15-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function setTwapPrice(uint256 _price) public {\n\n        twapPrice = _price;\n\n    }\n\n\n",
          "message": "L2PriceFeedMock.setTwapPrice (L2PriceFeedMock.sol#19-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function getPrice(bytes32) public view returns (uint256) {\n\n        return price;\n\n    }\n\n\n",
          "message": "L2PriceFeedMock.getPrice (L2PriceFeedMock.sol#23-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function setPrice(uint256 _price) public {\n\n        price = _price;\n\n    }\n\n\n",
          "message": "L2PriceFeedMock.setPrice (L2PriceFeedMock.sol#27-31) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": 6,
          "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
          "message": "Detected issues with version pragma in L2PriceFeedMock.sol:\n\t- pragma solidity0.6.9 (L2PriceFeedMock.sol#4-6): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _price) public {\n",
          "message": "Parameter '_price' of L2PriceFeedMock. (L2PriceFeedMock.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwapPrice(bytes32, uint256) public view returns (uint256) {\n",
          "message": "Parameter '' of L2PriceFeedMock.getTwapPrice (L2PriceFeedMock.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTwapPrice(bytes32, uint256) public view returns (uint256) {\n",
          "message": "Parameter '_scope_0' of L2PriceFeedMock.getTwapPrice (L2PriceFeedMock.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTwapPrice(uint256 _price) public {\n",
          "message": "Parameter '_price' of L2PriceFeedMock.setTwapPrice (L2PriceFeedMock.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(bytes32) public view returns (uint256) {\n",
          "message": "Parameter '' of L2PriceFeedMock.getPrice (L2PriceFeedMock.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPrice(uint256 _price) public {\n",
          "message": "Parameter '_price' of L2PriceFeedMock.setPrice (L2PriceFeedMock.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 35,
          "vulnerability_code": "        bytes32 _priceFeedKey,\n",
          "message": "Parameter '_priceFeedKey' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#34-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 36,
          "vulnerability_code": "        uint256 _price,\n",
          "message": "Parameter '_price' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#35-36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 37,
          "vulnerability_code": "        uint256 _timestamp,\n",
          "message": "Parameter '_timestamp' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#36-37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 38,
          "vulnerability_code": "        uint256 _roundId\n",
          "message": "Parameter '_roundId' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#37-38) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 price;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 twapPrice;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}