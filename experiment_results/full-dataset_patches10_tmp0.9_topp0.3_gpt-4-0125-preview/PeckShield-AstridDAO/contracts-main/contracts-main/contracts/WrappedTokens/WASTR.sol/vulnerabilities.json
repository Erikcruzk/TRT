{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract WASTR is IWASTR, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() Ownable() {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 chainId;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {chainId := chainid()}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "        deploymentChainId = chainId;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _DOMAIN_SEPARATOR = _calculateDomainSeparator(chainId);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token == address(this), \"WASTR: flash mint only WASTR\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token == address(this), \"WASTR: flash mint only WASTR\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(value <= type(uint112).max, \"WASTR: individual loan limit exceeded\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(flashMinted <= type(uint112).max, \"WASTR: total loan limit exceeded\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "            receiver.onFlashLoan(msg.sender, address(this), value, 0, data) == CALLBACK_SUCCESS,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"WASTR: flash loan failed\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowed >= value, \"WASTR: request exceeds allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"WASTR: ASTR transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"WASTR: ASTR transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 604,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(allowed >= value, \"WASTR: request exceeds allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"WASTR: Ether transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp <= deadline, \"WASTR: Expired permit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signer != address(0) && signer == owner, \"WASTR: invalid permit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: transfer amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(success, \"WASTR: ASTR transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(allowed >= value, \"WASTR: request exceeds allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: transfer amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(success, \"WASTR: ASTR transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 767,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: transfer amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(success, \"WASTR: ASTR transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(signer != address(0) && signer == owner, \"WASTR: invalid permit\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(value <= type(uint112).max, \"WASTR: individual loan limit exceeded\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: transfer amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: transfer amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 767,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: transfer amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(balance >= value, \"WASTR: burn amount exceeds balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwnership(address _address, uint _isOwned) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _DOMAIN_SEPARATOR;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {chainId := chainid()}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {chainId := chainid()}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTo(address payable to, uint256 value) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFrom(address from, address payable to, uint256 value) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() Ownable() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTo(address payable to, uint256 value) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTo(address payable to, uint256 value) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFrom(address from, address payable to, uint256 value) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFrom(address from, address payable to, uint256 value) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "    receive() external payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] += msg.value;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[msg.sender] += msg.value;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), msg.sender, msg.value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), msg.sender, msg.value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), msg.sender, msg.value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), msg.sender, msg.value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), msg.sender, msg.value);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}