function beginMigration() external override {
    _requireCallerIsBOorTroveM();
    IActivePool activePoolCached = activePool;
    IDefaultPool defaultPoolCached = defaultPool;

    emit VaultManagerAddressChanged(address(0));
    emit BorrowerOperationsAddressChanged(address(0));
    emit ActivePoolAddressChanged(address(0));
    emit DefaultPoolAddressChanged(address(0));
    emit StabilityPoolAddressChanged(address(0));
    emit GasPoolAddressChanged(address(0));
    emit CollSurplusPoolAddressChanged(address(0));
    emit PriceFeedAddressChanged(address(0));
    emit SortedVaultsAddressChanged(address(0));

    // Claim remaining BAI and Coll surplus from Active Pool, and send them to the migration contract
    uint BAIToClaim = activePoolCached.getBAIDebt();
    activePoolCached.decreaseBAIDebt(BAIToClaim);
    activePoolCached.sendBAI(address(migration), BAIToClaim);

    uint COLToClaim = activePoolCached.getCOL();
    activePoolCached.sendCOL(address(migration), COLToClaim);

    // Transfer all stakes to the migration contract
    uint256 totalStakesSnapshotCached = totalStakesSnapshot;
    totalStakes = totalStakesSnapshotCached;
    if (totalStakesSnapshotCached > 0) {
        IERC20 stakingToken = IERC20(address(atidToken));
        stakingToken.transfer(address(migration), totalStakesSnapshotCached);
    }
}