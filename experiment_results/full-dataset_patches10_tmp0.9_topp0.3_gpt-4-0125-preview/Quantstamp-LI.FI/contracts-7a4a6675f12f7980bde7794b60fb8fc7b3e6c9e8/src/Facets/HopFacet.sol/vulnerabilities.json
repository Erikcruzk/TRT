{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1752,
          "vulnerability_to_line": null,
          "vulnerability_code": "                !(ls.dexAllowlist[currentSwapData.approveTo] &&\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1753,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ls.dexAllowlist[currentSwapData.callTo] &&\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1754,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ls.dexFuncSignatureAllowList[bytes32(currentSwapData.callData[:8])])\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1717,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < nSwaps - 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1749,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _swapData.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(isContract(target), \"Address: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 931,
          "vulnerability_to_line": null,
          "vulnerability_code": "                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 941,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1011,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1042,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    revert(\"LibDiamondCut: _init function reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1325,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_length + 31 >= _length, \"slice_overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1419,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1441,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1463,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1474,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1751,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1752,
          "vulnerability_to_line": null,
          "vulnerability_code": "                !(ls.dexAllowlist[currentSwapData.approveTo] &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1753,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ls.dexAllowlist[currentSwapData.callTo] &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1754,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    ls.dexFuncSignatureAllowList[bytes32(currentSwapData.callData[:8])])\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1755,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ) revert ContractCallNotAllowed();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1874,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!LibAsset.isNativeAsset(address(_lifiData.sendingAssetId)) && msg.value != 0) revert NativeValueWithERC();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "            selectorPosition++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "            selectorPosition++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1717,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 0; i < nSwaps - 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1749,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _swapData.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1766,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) balances[i] = LibAsset.getOwnBalance(_swapData[i].receivingAssetId);\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 931,
          "vulnerability_to_line": null,
          "vulnerability_code": "                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 939,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 941,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1011,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1042,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    revert(\"LibDiamondCut: _init function reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal constant NULL_ADDRESS = 0x0000000000000000000000000000000000000000; //address(0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1749,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _swapData.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reentrancyStorage() private pure returns (ReentrancyStorage storage data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 922,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 980,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1749,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _swapData.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1766,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) balances[i] = LibAsset.getOwnBalance(_swapData[i].receivingAssetId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1074,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1599,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1615,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1683,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1695,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1774,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.8.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant MAX_INT = type(uint256).max;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1077,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private constant NAMESPACE = hex\"a65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1085,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _ENTERED = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (error.length > 0) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reentrancyStorage() private pure returns (ReentrancyStorage storage data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function slice(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1396,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1429,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1440,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1484,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1061,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1527,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _executeAndCheckSwaps(LiFiData calldata _lifiData, LibSwap.SwapData[] calldata _swapData)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1745,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _executeSwaps(LiFiData memory _lifiData, LibSwap.SwapData[] calldata _swapData)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1763,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _fetchBalances(LibSwap.SwapData[] calldata _swapData) private view returns (uint256[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1188,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1400,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1422,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1444,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1466,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1477,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1487,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1530,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferNativeAsset(address payable recipient, uint256 amount) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1816,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initHop(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{value: amount}(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{value: amount}(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{value: amount}(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferNativeAsset(address payable recipient, uint256 amount) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferNativeAsset(address payable recipient, uint256 amount) private {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 695,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 697,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    error ReentrancyError();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    error ReentrancyError();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    error NoSwapFromZeroBalance();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    error NoSwapFromZeroBalance();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1812,
          "vulnerability_to_line": null,
          "vulnerability_code": "    error InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1812,
          "vulnerability_to_line": null,
          "vulnerability_code": "    error InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1818,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IHopBridge.BridgeConfig[] calldata _bridgeConfigs,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1819,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _chainId\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1821,
          "vulnerability_to_line": null,
          "vulnerability_code": "        LibDiamond.enforceIsContractOwner();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1821,
          "vulnerability_to_line": null,
          "vulnerability_code": "        LibDiamond.enforceIsContractOwner();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1822,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Storage storage s = getStorage();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1822,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Storage storage s = getStorage();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1823,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 length = _tokens.length;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_bridgeConfigs.length != length) revert InvalidBridgeConfigLength();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_bridgeConfigs.length != length) revert InvalidBridgeConfigLength();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_bridgeConfigs.length != length) revert InvalidBridgeConfigLength();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_bridgeConfigs[i].bridge == address(0)) revert InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_bridgeConfigs[i].bridge == address(0)) revert InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_bridgeConfigs[i].bridge == address(0)) revert InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_bridgeConfigs[i].bridge == address(0)) revert InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1828,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_bridgeConfigs[i].bridge == address(0)) revert InvalidConfig();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1829,
          "vulnerability_to_line": null,
          "vulnerability_code": "            s.hopBridges[_tokens[i]] = _bridgeConfigs[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1829,
          "vulnerability_to_line": null,
          "vulnerability_code": "            s.hopBridges[_tokens[i]] = _bridgeConfigs[i];\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}