{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_44"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.13;\n",
          "message": "Detected issues with version pragma in IFactory.sol:\n\t- pragma solidity0.5.13 (IFactory.sol#3): it allows old versions\n\t- pragma solidity0.5.13 (IFactory.sol#16): it allows old versions\n\t- pragma solidity0.5.13 (IFactory.sol#40): it allows old versions\n\t- pragma solidity0.5.13 (IFactory.sol#54): it allows old versions\n\t- pragma solidity0.5.13 (IFactory.sol#67): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": "Parameter 'template_id' of IRealitio.askQuestion (IFactory.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": "Parameter 'opening_ts' of IRealitio.askQuestion (IFactory.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function resultFor(bytes32 question_id) external view returns (bytes32);\n",
          "message": "Parameter 'question_id' of IRealitio.resultFor (IFactory.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isFinalized(bytes32 question_id) external view returns (bool);\n",
          "message": "Parameter 'question_id' of IRealitio.isFinalized (IFactory.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getContentHash(bytes32 question_id) external view returns (bytes32);\n",
          "message": "Parameter 'question_id' of IRealitio.getContentHash (IFactory.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function payout(address,uint256) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.payout (IFactory.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function payout(address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ITreasury.payout (IFactory.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function payRent(address,uint256) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.payRent (IFactory.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function payRent(address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ITreasury.payRent (IFactory.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMarket(address) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.addMarket (IFactory.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposits(address) external returns (uint256);\n",
          "message": "Parameter '' of ITreasury.deposits (IFactory.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateCardSpecificDeposit(address,address,uint256,uint256) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.allocateCardSpecificDeposit (IFactory.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateCardSpecificDeposit(address,address,uint256,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ITreasury.allocateCardSpecificDeposit (IFactory.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateCardSpecificDeposit(address,address,uint256,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_1' of ITreasury.allocateCardSpecificDeposit (IFactory.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allocateCardSpecificDeposit(address,address,uint256,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_2' of ITreasury.allocateCardSpecificDeposit (IFactory.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function processHarbergerPayment(address,address,uint256) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.processHarbergerPayment (IFactory.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function processHarbergerPayment(address,address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ITreasury.processHarbergerPayment (IFactory.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function processHarbergerPayment(address,address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_1' of ITreasury.processHarbergerPayment (IFactory.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cardSpecificDeposits(address,address,uint256) external returns(uint256);\n",
          "message": "Parameter '' of ITreasury.cardSpecificDeposits (IFactory.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cardSpecificDeposits(address,address,uint256) external returns(uint256);\n",
          "message": "Parameter '_scope_0' of ITreasury.cardSpecificDeposits (IFactory.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cardSpecificDeposits(address,address,uint256) external returns(uint256);\n",
          "message": "Parameter '_scope_1' of ITreasury.cardSpecificDeposits (IFactory.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address) external payable returns (bool);\n",
          "message": "Parameter '' of ITreasury.deposit (IFactory.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateTotalRental(address,uint256,bool) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.updateTotalRental (IFactory.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateTotalRental(address,uint256,bool) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ITreasury.updateTotalRental (IFactory.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateTotalRental(address,uint256,bool) external returns (bool);\n",
          "message": "Parameter '_scope_1' of ITreasury.updateTotalRental (IFactory.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function userTotalRentals(address) external returns (uint256);\n",
          "message": "Parameter '' of ITreasury.userTotalRentals (IFactory.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateLastRentalTime(address) external returns (bool);\n",
          "message": "Parameter '' of ITreasury.updateLastRentalTime (IFactory.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function saveCardToUpgrade(uint256, string calldata, address) external;\n",
          "message": "Parameter '' of IRCProxyXdai.saveCardToUpgrade (IFactory.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function saveCardToUpgrade(uint256, string calldata, address) external;\n",
          "message": "Parameter '_scope_0' of IRCProxyXdai.saveCardToUpgrade (IFactory.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function saveCardToUpgrade(uint256, string calldata, address) external;\n",
          "message": "Parameter '_scope_1' of IRCProxyXdai.saveCardToUpgrade (IFactory.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMarket(address) external returns (bool);\n",
          "message": "Parameter '' of IRCProxyXdai.addMarket (IFactory.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ownerOf(uint256) external view returns (address);\n",
          "message": "Parameter '' of IRCNftHubXdai.ownerOf (IFactory.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenURI(uint256) external view returns (string memory);\n",
          "message": "Parameter '' of IRCNftHubXdai.tokenURI (IFactory.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMarket(address) external returns (bool);\n",
          "message": "Parameter '' of IRCNftHubXdai.addMarket (IFactory.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintNft(address,uint256,string calldata) external returns (bool);\n",
          "message": "Parameter '' of IRCNftHubXdai.mintNft (IFactory.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintNft(address,uint256,string calldata) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IRCNftHubXdai.mintNft (IFactory.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintNft(address,uint256,string calldata) external returns (bool);\n",
          "message": "Parameter '_scope_1' of IRCNftHubXdai.mintNft (IFactory.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferNft(address,address,uint256) external returns (bool);\n",
          "message": "Parameter '' of IRCNftHubXdai.transferNft (IFactory.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferNft(address,address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IRCNftHubXdai.transferNft (IFactory.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferNft(address,address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_1' of IRCNftHubXdai.transferNft (IFactory.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upgradeCard(address,uint256) external returns (bool);\n",
          "message": "Parameter '' of IRCNftHubXdai.upgradeCard (IFactory.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function upgradeCard(address,uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IRCNftHubXdai.upgradeCard (IFactory.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isMarketApproved(address) external returns(bool);\n",
          "message": "Parameter '' of IFactory.isMarketApproved (IFactory.sol#84) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function saveQuestion(address _marketAddress, string calldata _question, uint32 _oracleResolutionTime) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function askQuestion(uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) external payable returns (bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function saveQuestion(address _marketAddress, string calldata _question, uint32 _oracleResolutionTime) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function saveQuestion(address _marketAddress, string calldata _question, uint32 _oracleResolutionTime) external;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}