{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public someVar = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.4.24;\n",
          "message": "Different versions of Solidity is used in ERC677ReceiverTest.sol:\n\t- Version used: ['0.4.24', '^0.4.19']\n\t- ERC677ReceiverTest.sol#3 declares pragma solidity0.4.24\n\t- ERC677ReceiverTest.sol#12 declares pragma solidity^0.4.19\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function doSomething(uint _value) public {\n\n        someVar = _value;\n",
          "message": "ERC677ReceiverTest.doSomething (ERC677ReceiverTest.sol#28-30) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;\n",
          "message": "Detected issues with version pragma in ERC677ReceiverTest.sol:\n\t- pragma solidity^0.4.19 (ERC677ReceiverTest.sol#12): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool) {\n\n        from = _from;\n\n        value = _value;\n\n        data = _data;\n\n        require(address(this).call(_data));\n\n        return true;\n",
          "message": "Low level call in ERC677ReceiverTest.onTokenTransfer (ERC677ReceiverTest.sol#20-26):\n\t-require(bool)(address(this).call(_data)) ERC677ReceiverTest.sol#24\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool) {\n",
          "message": "Parameter '_from' of ERC677ReceiverTest.onTokenTransfer (ERC677ReceiverTest.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool) {\n",
          "message": "Parameter '_value' of ERC677ReceiverTest.onTokenTransfer (ERC677ReceiverTest.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool) {\n",
          "message": "Parameter '_data' of ERC677ReceiverTest.onTokenTransfer (ERC677ReceiverTest.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function doSomething(uint _value) public {\n",
          "message": "Parameter '_value' of ERC677ReceiverTest.doSomething (ERC677ReceiverTest.sol#28) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes public data;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes public data;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes public data;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}