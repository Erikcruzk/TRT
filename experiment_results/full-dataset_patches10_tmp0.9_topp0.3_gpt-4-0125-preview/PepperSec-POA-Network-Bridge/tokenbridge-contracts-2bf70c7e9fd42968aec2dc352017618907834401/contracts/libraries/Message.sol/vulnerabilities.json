{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < array.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < array.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < requiredSignatures; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < array.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < requiredSignatures; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function parseMessage(bytes message)\n\n        internal\n\n        pure\n\n        returns(address recipient, uint256 amount, bytes32 txHash)\n\n    {\n\n        require(isMessageValid(message));\n\n        assembly {\n\n            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n\n            amount := mload(add(message, 52))\n\n            txHash := mload(add(message, 84))\n\n        }\n",
          "message": "Message.parseMessage (Message.sol#61-72) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\n\n        require(signature.length == 65);\n\n        bytes32 r;\n\n        bytes32 s;\n\n        bytes1 v;\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly {\n\n            r := mload(add(signature, 0x20))\n\n            s := mload(add(signature, 0x40))\n\n            v := mload(add(signature, 0x60))\n\n        }\n\n        return ecrecover(hashMessage(message), uint8(v), r, s);\n",
          "message": "Message.recoverAddressFromSignedMessage (Message.sol#82-94) is declared view but contains assembly code\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_validatorContract.isValidator(recoveredAddress));\n",
          "message": "Message.hasEnoughValidSignatures has external calls inside a loop:\n\t- require(bool)(_validatorContract.isValidator(recoveredAddress)) (Message.sol#117)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function parseMessage(bytes message)\n\n        internal\n\n        pure\n\n        returns(address recipient, uint256 amount, bytes32 txHash)\n\n    {\n\n        require(isMessageValid(message));\n\n        assembly {\n\n            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n\n            amount := mload(add(message, 52))\n\n            txHash := mload(add(message, 84))\n\n        }\n",
          "message": "Message.parseMessage uses assembly (Message.sol#61-72)\n\t- Message.sol#67-72\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\n\n        require(signature.length == 65);\n\n        bytes32 r;\n\n        bytes32 s;\n\n        bytes1 v;\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly {\n\n            r := mload(add(signature, 0x20))\n\n            s := mload(add(signature, 0x40))\n\n            v := mload(add(signature, 0x60))\n\n        }\n\n        return ecrecover(hashMessage(message), uint8(v), r, s);\n",
          "message": "Message.recoverAddressFromSignedMessage uses assembly (Message.sol#82-94)\n\t- Message.sol#88-93\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidator(address _validator) public view returns(bool);\n",
          "message": "IBridgeValidators.isValidator (Message.sol#7) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function requiredSignatures() public view returns(uint256);\n",
          "message": "IBridgeValidators.requiredSignatures (Message.sol#8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owner() public view returns(address);\n",
          "message": "IBridgeValidators.owner (Message.sol#9) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isMessageValid(bytes _msg) internal pure returns(bool) {\n",
          "message": "Parameter '_msg' of Message.isMessageValid (Message.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _message,\n",
          "message": "Parameter '_message' of Message.hasEnoughValidSignatures (Message.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] _vs,\n",
          "message": "Parameter '_vs' of Message.hasEnoughValidSignatures (Message.sol#105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] _rs,\n",
          "message": "Parameter '_rs' of Message.hasEnoughValidSignatures (Message.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] _ss,\n",
          "message": "Parameter '_ss' of Message.hasEnoughValidSignatures (Message.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IBridgeValidators _validatorContract) internal view {\n",
          "message": "Parameter '_validatorContract' of Message.hasEnoughValidSignatures (Message.sol#108) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < array.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseMessage(bytes message)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < array.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseMessage(bytes message)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(address recipient, uint256 amount, bytes32 txHash)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseMessage(bytes message)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isMessageValid(bytes _msg) internal pure returns(bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hashMessage(bytes message) internal pure returns (bytes32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _message,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] _vs,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] _rs,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] _ss,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidator(address _validator) public view returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function requiredSignatures() public view returns(uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owner() public view returns(address);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}