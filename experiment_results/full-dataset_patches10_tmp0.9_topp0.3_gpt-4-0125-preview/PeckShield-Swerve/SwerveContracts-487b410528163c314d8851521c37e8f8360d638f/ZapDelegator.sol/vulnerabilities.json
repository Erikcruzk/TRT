{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[4] memory _coinsIn, address[4] memory _underlying_coinsIn, address _curve, address _pool_token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < 4; i++) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_underlying_coinsIn[i] != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_coinsIn[i] != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _coins.push(_coinsIn[i]);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _underlying_coins.push(_underlying_coinsIn[i]);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        curve = _curve;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = _pool_token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _coins.push(_coinsIn[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _underlying_coins.push(_underlying_coinsIn[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < 4; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < 4; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    fallback() external payable {\n\n        address _target = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n\n\n\n        assembly {\n\n            let _calldataMemOffset := mload(0x40)\n\n            let _callDataSZ := calldatasize()\n\n            let _size := and(add(_callDataSZ, 0x1f), not(0x1f))\n\n            mstore(0x40, add(_calldataMemOffset, _size))\n\n            calldatacopy(_calldataMemOffset, 0x0, _callDataSZ)\n\n            let _retval := delegatecall(gas(), _target, _calldataMemOffset, _callDataSZ, 0, 0)\n\n            switch _retval\n\n            case 0 {\n\n                revert(0,0)\n\n            } default {\n\n                let _returndataMemoryOff := mload(0x40)\n\n                mstore(0x40, add(_returndataMemoryOff, returndatasize()))\n\n                returndatacopy(_returndataMemoryOff, 0x0, returndatasize())\n\n                return(_returndataMemoryOff, returndatasize())\n\n            }\n\n        }\n",
          "message": "Contract locking ether found in ZapDelegator.sol:\n\tContract ZapDelegator has payable functions:\n\t - fallback (ZapDelegator.sol#36-56)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    fallback() external payable {\n\n        address _target = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n\n\n\n        assembly {\n\n            let _calldataMemOffset := mload(0x40)\n\n            let _callDataSZ := calldatasize()\n\n            let _size := and(add(_callDataSZ, 0x1f), not(0x1f))\n\n            mstore(0x40, add(_calldataMemOffset, _size))\n\n            calldatacopy(_calldataMemOffset, 0x0, _callDataSZ)\n\n            let _retval := delegatecall(gas(), _target, _calldataMemOffset, _callDataSZ, 0, 0)\n\n            switch _retval\n\n            case 0 {\n\n                revert(0,0)\n\n            } default {\n\n                let _returndataMemoryOff := mload(0x40)\n\n                mstore(0x40, add(_returndataMemoryOff, returndatasize()))\n\n                returndatacopy(_returndataMemoryOff, 0x0, returndatasize())\n\n                return(_returndataMemoryOff, returndatasize())\n\n            }\n\n        }\n",
          "message": "ZapDelegator.fallback uses assembly (ZapDelegator.sol#36-56)\n\t- ZapDelegator.sol#39-55\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.10;\n",
          "message": "Different versions of Solidity is used in ZapDelegator.sol:\n\t- Version used: ['0.6.10', 'ABIEncoderV2']\n\t- ZapDelegator.sol#3 declares pragma solidity0.6.10\n\t- ZapDelegator.sol#4 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function coins(int128 i) public view returns (address) {\n\n        return _coins[uint256(i)];\n",
          "message": "ZapDelegator.coins (ZapDelegator.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function underlying_coins(int128 i) public view returns (address) {\n\n        return _underlying_coins[uint256(i)];\n",
          "message": "ZapDelegator.underlying_coins (ZapDelegator.sol#32-34) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.10;\n",
          "message": "Detected issues with version pragma in ZapDelegator.sol:\n\t- pragma solidity0.6.10 (ZapDelegator.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[4] memory _coinsIn, address[4] memory _underlying_coinsIn, address _curve, address _pool_token) public {\n",
          "message": "Parameter '_coinsIn' of ZapDelegator. (ZapDelegator.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[4] memory _coinsIn, address[4] memory _underlying_coinsIn, address _curve, address _pool_token) public {\n",
          "message": "Parameter '_underlying_coinsIn' of ZapDelegator. (ZapDelegator.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[4] memory _coinsIn, address[4] memory _underlying_coinsIn, address _curve, address _pool_token) public {\n",
          "message": "Parameter '_curve' of ZapDelegator. (ZapDelegator.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[4] memory _coinsIn, address[4] memory _underlying_coinsIn, address _curve, address _pool_token) public {\n",
          "message": "Parameter '_pool_token' of ZapDelegator. (ZapDelegator.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function underlying_coins(int128 i) public view returns (address) {\n\n        return _underlying_coins[uint256(i)];\n",
          "message": "Function 'ZapDelegator.underlying_coins' (ZapDelegator.sol#32-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public _coins;\n",
          "message": "Variable 'ZapDelegator._coins' (ZapDelegator.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public _underlying_coins;\n",
          "message": "Variable 'ZapDelegator._underlying_coins' (ZapDelegator.sol#13) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _target = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback() external payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _target = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _calldataMemOffset := mload(0x40)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _calldataMemOffset := mload(0x40)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _callDataSZ := calldatasize()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _callDataSZ := calldatasize()\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _size := and(add(_callDataSZ, 0x1f), not(0x1f))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _size := and(add(_callDataSZ, 0x1f), not(0x1f))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _size := and(add(_callDataSZ, 0x1f), not(0x1f))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "            mstore(0x40, add(_calldataMemOffset, _size))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "            mstore(0x40, add(_calldataMemOffset, _size))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "            calldatacopy(_calldataMemOffset, 0x0, _callDataSZ)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "            calldatacopy(_calldataMemOffset, 0x0, _callDataSZ)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _retval := delegatecall(gas(), _target, _calldataMemOffset, _callDataSZ, 0, 0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _retval := delegatecall(gas(), _target, _calldataMemOffset, _callDataSZ, 0, 0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "            let _retval := delegatecall(gas(), _target, _calldataMemOffset, _callDataSZ, 0, 0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "            switch _retval\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "                revert(0,0)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "                revert(0,0)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function coins(int128 i) public view returns (address) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public _underlying_coins;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function underlying_coins(int128 i) public view returns (address) {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public _coins;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}