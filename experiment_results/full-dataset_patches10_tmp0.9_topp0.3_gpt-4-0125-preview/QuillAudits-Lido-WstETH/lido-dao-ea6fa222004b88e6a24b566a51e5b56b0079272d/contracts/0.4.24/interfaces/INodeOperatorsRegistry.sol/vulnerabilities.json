{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSigningKeys(uint256 _operator_id, uint256 _quantity, bytes _pubkeys, bytes _signatures) external;\n",
          "message": "Parameter '_operator_id' of INodeOperatorsRegistry.addSigningKeys (INodeOperatorsRegistry.sol#118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeSigningKey(uint256 _operator_id, uint256 _index) external;\n",
          "message": "Parameter '_operator_id' of INodeOperatorsRegistry.removeSigningKey (INodeOperatorsRegistry.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalSigningKeyCount(uint256 _operator_id) external view returns (uint256);\n",
          "message": "Parameter '_operator_id' of INodeOperatorsRegistry.getTotalSigningKeyCount (INodeOperatorsRegistry.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUnusedSigningKeyCount(uint256 _operator_id) external view returns (uint256);\n",
          "message": "Parameter '_operator_id' of INodeOperatorsRegistry.getUnusedSigningKeyCount (INodeOperatorsRegistry.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSigningKey(uint256 _operator_id, uint256 _index) external view returns\n",
          "message": "Parameter '_operator_id' of INodeOperatorsRegistry.getSigningKey (INodeOperatorsRegistry.sol#145) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}