{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_2"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function ()\n\n        external\n\n    {\n\n        // Done in assembly to allow the return.\n\n        assembly {\n\n            let calldataSize := calldatasize()\n\n\n\n            // Copy all calldata into memory.\n\n            calldatacopy(0, 0, calldataSize)\n\n\n\n            // If the calldatasize is equal to 4, revert.\n\n            // This allows us to test `proxyCall` with reverts.\n\n            if eq(calldataSize, 4) {\n\n                revert(0, 4)\n\n            }\n\n\n\n            // Return. This allows us to test `proxyCall` with returns.\n\n            return(0, calldataSize)\n\n        }\n",
          "message": "TestLibProxyReceiver.fallback uses assembly (TestLibProxyReceiver.sol#27-46)\n\t- TestLibProxyReceiver.sol#31-45\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestLibProxyReceiver.sol:\n\t- pragma solidity^0.5.9 (TestLibProxyReceiver.sol#21): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}