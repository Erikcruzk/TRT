{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttoken = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(balances[msg.sender] >= _amounts, \"user have no enough token\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(IERC20(token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "\tfunction deposit(uint256 _amounts) external {\n\n\t\trequire(IERC20(token).transferFrom(msg.sender, address(this), _amounts));\n\n\t\tbalances[msg.sender] += _amounts;\n",
          "message": "Reentrancy in FakeDeFi.deposit (FakeDeFi.sol#22-25):\n\tExternal calls:\n\t- require(bool)(IERC20(token).transferFrom(msg.sender,address(this),_amounts)) (FakeDeFi.sol#23)\n\tState variables written after the call(s):\n\t- balances (FakeDeFi.sol#24)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "\tfunction getBalance(address _owner) public view returns (uint256) {\n\n\t\treturn balances[_owner];\n",
          "message": "FakeDeFi.getBalance (FakeDeFi.sol#37-39) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in FakeDeFi.sol:\n\t- pragma solidity^0.5.0 (FakeDeFi.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _token) public {\n",
          "message": "Parameter '_token' of FakeDeFi. (FakeDeFi.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction deposit(uint256 _amounts) external {\n",
          "message": "Parameter '_amounts' of FakeDeFi.deposit (FakeDeFi.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdraw(uint256 _amounts) external {\n",
          "message": "Parameter '_amounts' of FakeDeFi.withdraw (FakeDeFi.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction makeProfitToUser(address _user) external {\n",
          "message": "Parameter '_user' of FakeDeFi.makeProfitToUser (FakeDeFi.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction getBalance(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of FakeDeFi.getBalance (FakeDeFi.sol#37) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(IERC20(token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[_user] = balances[_user] * 110 / 100; \n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(IERC20(token).transferFrom(msg.sender, address(this), _amounts));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}