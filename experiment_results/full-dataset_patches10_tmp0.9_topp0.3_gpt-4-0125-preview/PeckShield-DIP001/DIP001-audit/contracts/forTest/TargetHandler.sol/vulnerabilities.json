{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _targetAddr, address _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttargetAddr = _targetAddr;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttoken = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tIERC20(token).approve(_targetAddr, uint256(-1));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(msg.sender == dispatcher, \"sender must be dispatcher\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(msg.sender == dispatcher, \"sender must be dispatcher\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 251,
          "vulnerability_code": "\tfunction drainFunds() external returns (uint256) {\n\n\t\trequire(msg.sender == dispatcher, \"sender must be dispatcher\");\n\n\t\tuint256 amount = getBalance();\n\n\t\tIDeFi(targetAddr).withdraw(amount);\n\n\n\n\t\t// take out principle\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getFund(), principle);\n\n\t\tprinciple = 0;\n\n\n\n\t\tuint256 profit = IERC20(token).balanceOf(address(this));\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(), profit);\n\n\t\treturn 0;\n",
          "message": "Reentrancy in TargetHandler.drainFunds (TargetHandler.sol#239-251):\n\tExternal calls:\n\t- amount = getBalance() (TargetHandler.sol#241)\n\t- IDeFi(targetAddr).withdraw(amount) (TargetHandler.sol#242)\n\t- IERC20(token).transfer(IDispatcher(dispatcher).getFund(),principle) (TargetHandler.sol#245)\n\tState variables written after the call(s):\n\t- principle (TargetHandler.sol#246)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 230,
          "vulnerability_code": "\tfunction withdraw(uint256 _amounts) external auth returns (uint256) {\n\n\t\trequire(msg.sender == dispatcher, \"sender must be dispatcher\");\n\n\t\t// check the fund in the reserve (contract balance) is enough or not\n\n\t\t// if not enough, drain from the defi\n\n\t\tuint256 _tokenBalance = IERC20(token).balanceOf(address(this));\n\n\t\tif (_tokenBalance < _amounts) {\n\n\t\t\tIDeFi(targetAddr).withdraw(_amounts - _tokenBalance);\n\n\t\t}\n\n\n\n\t\tprinciple = principle.sub(_amounts);\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getFund(), _amounts);\n\n\t\treturn 0;\n",
          "message": "TargetHandler.withdraw (TargetHandler.sol#218-230) does not use the value returned by external calls:\n\t-IERC20(token).transfer(IDispatcher(dispatcher).getFund(),_amounts) (TargetHandler.sol#228)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 237,
          "vulnerability_code": "\tfunction withdrawProfit() external returns (uint256) {\n\n\t\tuint256 _amount = getProfit();\n\n\t\tIDeFi(targetAddr).withdraw(_amount);\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(), _amount);\n\n\t\treturn 0;\n",
          "message": "TargetHandler.withdrawProfit (TargetHandler.sol#232-237) does not use the value returned by external calls:\n\t-IERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(),_amount) (TargetHandler.sol#235)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 251,
          "vulnerability_code": "\tfunction drainFunds() external returns (uint256) {\n\n\t\trequire(msg.sender == dispatcher, \"sender must be dispatcher\");\n\n\t\tuint256 amount = getBalance();\n\n\t\tIDeFi(targetAddr).withdraw(amount);\n\n\n\n\t\t// take out principle\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getFund(), principle);\n\n\t\tprinciple = 0;\n\n\n\n\t\tuint256 profit = IERC20(token).balanceOf(address(this));\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(), profit);\n\n\t\treturn 0;\n",
          "message": "TargetHandler.drainFunds (TargetHandler.sol#239-251) does not use the value returned by external calls:\n\t-IERC20(token).transfer(IDispatcher(dispatcher).getFund(),principle) (TargetHandler.sol#245)\n\t-IERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(),profit) (TargetHandler.sol#249)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 203,
          "vulnerability_code": "\tconstructor (address _targetAddr, address _token) public {\n\n\t\ttargetAddr = _targetAddr;\n\n\t\ttoken = _token;\n\n\t\tIERC20(token).approve(_targetAddr, uint256(-1));\n",
          "message": "TargetHandler.constructor (TargetHandler.sol#199-203) does not use the value returned by external calls:\n\t-IERC20(token).approve(_targetAddr,uint256(- 1)) (TargetHandler.sol#202)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 215,
          "vulnerability_code": "\tfunction deposit() external returns (uint256) {\n\n\t\tuint256 amount = IERC20(token).balanceOf(address(this));\n\n\t\tprinciple = principle.add(amount);\n\n\t\tIDeFi(targetAddr).deposit(amount);\n\n\t\treturn 0;\n",
          "message": "Reentrancy in TargetHandler.deposit (TargetHandler.sol#210-215):\n\tExternal calls:\n\t- amount = IERC20(token).balanceOf(address(this)) (TargetHandler.sol#211)\n\tState variables written after the call(s):\n\t- principle (TargetHandler.sol#212)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 230,
          "vulnerability_code": "\tfunction withdraw(uint256 _amounts) external auth returns (uint256) {\n\n\t\trequire(msg.sender == dispatcher, \"sender must be dispatcher\");\n\n\t\t// check the fund in the reserve (contract balance) is enough or not\n\n\t\t// if not enough, drain from the defi\n\n\t\tuint256 _tokenBalance = IERC20(token).balanceOf(address(this));\n\n\t\tif (_tokenBalance < _amounts) {\n\n\t\t\tIDeFi(targetAddr).withdraw(_amounts - _tokenBalance);\n\n\t\t}\n\n\n\n\t\tprinciple = principle.sub(_amounts);\n\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getFund(), _amounts);\n\n\t\treturn 0;\n",
          "message": "Reentrancy in TargetHandler.withdraw (TargetHandler.sol#218-230):\n\tExternal calls:\n\t- _tokenBalance = IERC20(token).balanceOf(address(this)) (TargetHandler.sol#222)\n\t- IDeFi(targetAddr).withdraw(_amounts - _tokenBalance) (TargetHandler.sol#224)\n\tState variables written after the call(s):\n\t- principle (TargetHandler.sol#227)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.4;\n",
          "message": "Different versions of Solidity is used in TargetHandler.sol:\n\t- Version used: ['^0.5.2', '^0.5.4']\n\t- TargetHandler.sol#16 declares pragma solidity^0.5.4\n\t- TargetHandler.sol#96 declares pragma solidity^0.5.2\n\t- TargetHandler.sol#114 declares pragma solidity^0.5.2\n\t- TargetHandler.sol#158 declares pragma solidity^0.5.4\n\t- TargetHandler.sol#171 declares pragma solidity^0.5.2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
          "message": "DSAuthority.canCall (TargetHandler.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
          "message": "DSAuth.disableOwnership (TargetHandler.sol#41-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
          "message": "DSAuth.transferOwnership (TargetHandler.sol#46-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
          "message": "DSAuth.acceptOwnership (TargetHandler.sol#51-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
          "message": "DSAuth.setAuthority (TargetHandler.sol#59-65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction getTargetAddress() external view  returns (address);\n",
          "message": "ITargetHandler.getTargetAddress (TargetHandler.sol#107) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 267,
          "vulnerability_code": "\tfunction getTargetAddress() public view returns (address) {\n\n\t\treturn targetAddr;\n",
          "message": "TargetHandler.getTargetAddress (TargetHandler.sol#265-267) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.4;\n",
          "message": "Detected issues with version pragma in TargetHandler.sol:\n\t- pragma solidity^0.5.4 (TargetHandler.sol#16): it allows old versions\n\t- pragma solidity^0.5.4 (TargetHandler.sol#158): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction setDispatcher(address _dispatcher) external auth {\n",
          "message": "Parameter '_dispatcher' of TargetHandler.setDispatcher (TargetHandler.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdraw(uint256 _amounts) external auth returns (uint256) {\n",
          "message": "Parameter '_amounts' of TargetHandler.withdraw (TargetHandler.sol#218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _targetAddr, address _token) public {\n",
          "message": "Parameter '_targetAddr' of TargetHandler. (TargetHandler.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _targetAddr, address _token) public {\n",
          "message": "Parameter '_token' of TargetHandler. (TargetHandler.sol#199) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = address(0x0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction getTHStructures() external view returns (uint256[] memory, address[] memory, address[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction getTHData(uint256 _index) external view returns (uint256, uint256, uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress targetAddr;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "\taddress dispatcher;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 principle;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}