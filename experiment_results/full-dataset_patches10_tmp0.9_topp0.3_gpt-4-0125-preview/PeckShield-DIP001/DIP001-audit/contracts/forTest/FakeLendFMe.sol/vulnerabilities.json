{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttoken = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(balances[msg.sender] >= _amounts, \"user have no enough token\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(IERC20(token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 44,
          "vulnerability_code": "\tfunction withdraw(address _token, uint _amounts) external returns (uint) {\n\n\t\tif (_amounts == uint(-1)) {\n\n\t\t\tIERC20(token).transfer(msg.sender, balances[msg.sender]);\n\n\t\t\tbalances[msg.sender] = 0;\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\trequire(balances[msg.sender] >= _amounts, \"user have no enough token\");\n\n\t\tbalances[msg.sender] -= _amounts;\n\n\t\trequire(IERC20(token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n\n\t\treturn 0;\n",
          "message": "Reentrancy in FakeLendFMe.withdraw (FakeLendFMe.sol#34-44):\n\tExternal calls:\n\t- IERC20(token).transfer(msg.sender,balances[msg.sender]) (FakeLendFMe.sol#36)\n\tState variables written after the call(s):\n\t- balances (FakeLendFMe.sol#37)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 44,
          "vulnerability_code": "\tfunction withdraw(address _token, uint _amounts) external returns (uint) {\n\n\t\tif (_amounts == uint(-1)) {\n\n\t\t\tIERC20(token).transfer(msg.sender, balances[msg.sender]);\n\n\t\t\tbalances[msg.sender] = 0;\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\trequire(balances[msg.sender] >= _amounts, \"user have no enough token\");\n\n\t\tbalances[msg.sender] -= _amounts;\n\n\t\trequire(IERC20(token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n\n\t\treturn 0;\n",
          "message": "FakeLendFMe.withdraw (FakeLendFMe.sol#34-44) does not use the value returned by external calls:\n\t-IERC20(token).transfer(msg.sender,balances[msg.sender]) (FakeLendFMe.sol#36)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 32,
          "vulnerability_code": "\tfunction supply(address _token, uint _amounts) external returns (uint) {\n\n\t\trequire(IERC20(token).transferFrom(msg.sender, address(this), _amounts));\n\n\t\tbalances[msg.sender] += _amounts;\n\n\t\treturn 0;\n",
          "message": "Reentrancy in FakeLendFMe.supply (FakeLendFMe.sol#28-32):\n\tExternal calls:\n\t- require(bool)(IERC20(token).transferFrom(msg.sender,address(this),_amounts)) (FakeLendFMe.sol#29)\n\tState variables written after the call(s):\n\t- balances (FakeLendFMe.sol#30)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.4;\n",
          "message": "Detected issues with version pragma in FakeLendFMe.sol:\n\t- pragma solidity0.5.4 (FakeLendFMe.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor (address _token) public {\n",
          "message": "Parameter '_token' of FakeLendFMe. (FakeLendFMe.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction supply(address _token, uint _amounts) external returns (uint) {\n",
          "message": "Parameter '_amounts' of FakeLendFMe.supply (FakeLendFMe.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction withdraw(address _token, uint _amounts) external returns (uint) {\n",
          "message": "Parameter '_amounts' of FakeLendFMe.withdraw (FakeLendFMe.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction makeProfitToUser(address _user, uint256 _percentrage) external {\n",
          "message": "Parameter '_user' of FakeLendFMe.makeProfitToUser (FakeLendFMe.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction makeProfitToUser(address _user, uint256 _percentrage) external {\n",
          "message": "Parameter '_percentrage' of FakeLendFMe.makeProfitToUser (FakeLendFMe.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction getSupplyBalance(address _user, address _token) external view returns (uint256) {\n",
          "message": "Parameter '_user' of FakeLendFMe.getSupplyBalance (FakeLendFMe.sol#53) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_SEGV"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[_user] = balances[_user] * (1000 + _percentrage) / 1000;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(IERC20(token).transferFrom(msg.sender, address(this), _amounts));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tIERC20(token).transfer(msg.sender, balances[msg.sender]);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\tbalances[msg.sender] = 0;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(IERC20(token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] += _amounts;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[_user] = balances[_user] * (1000 + _percentrage) / 1000;\n",
          "message": null
        }
      ]
    }
  }
}