{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        burnallow = true;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        paused = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _whitelisted[msg.sender] = true;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        mint(msg.sender, 100000000000);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(burnallow, \"Burnable: not Burn\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require (_whitelisted[msg.sender] == true, \"can't perform an action\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (_minters[msg.sender] == true, \"can't perform mint\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require (_melters[msg.sender] == true, \"can't perform mint\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(this), \"can't transfer tokens to the contract address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(this), \"can't transfer tokens to the contract address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(this), \"ERC20: mint to the contract address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: mint amount should be > 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length > 0, \"mintBatchToken: transfer should be to at least one address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length == amounts.length, \"mintBatchToken: recipients.length != amounts.length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: freeze from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: freeze from the address: amount should be > 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint frozen to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(this), \"ERC20: mint frozen to the contract address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: mint frozen amount should be > 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: melt from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: melt from the address: value should be > 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_frozen_balanceOf(account) >= amount, \"ERC20: melt from the address: balance < amount\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: frozen burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(from != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(to != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length > 0, \"mintBatchFrozenTokens: transfer should be to at least one address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length == amounts.length, \"mintBatchFrozenTokens: recipients.length != amounts.length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(this), \"can't transfer tokens to the contract address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(this), \"can't transfer tokens to the contract address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(this), \"ERC20: mint to the contract address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length > 0, \"mintBatchToken: transfer should be to at least one address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length == amounts.length, \"mintBatchToken: recipients.length != amounts.length\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: freeze from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: freeze from the address: amount should be > 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: mint frozen to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(this), \"ERC20: mint frozen to the contract address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: mint frozen amount should be > 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: melt from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: melt from the address: value should be > 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_frozen_balanceOf(account) >= amount, \"ERC20: melt from the address: balance < amount\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: frozen burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(from != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(to != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length > 0, \"mintBatchFrozenTokens: transfer should be to at least one address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(accounts.length == amounts.length, \"mintBatchFrozenTokens: recipients.length != amounts.length\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_56"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public;\n",
          "message": "TokenRecipient.receiveApproval (kickico_token_v2.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function addWhitelisted(address account) public onlyOwner {\n\n        _whitelisted[account] = true;\n",
          "message": "KickToken.addWhitelisted (kickico_token_v2.sol#76-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function removeWhitelisted(address account) public onlyOwner {\n\n        _whitelisted[account] = false;\n",
          "message": "KickToken.removeWhitelisted (kickico_token_v2.sol#80-82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function pauseTrigger() public onlyOwner {\n\n        paused = !paused;\n",
          "message": "KickToken.pauseTrigger (kickico_token_v2.sol#84-86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function addToMinters(address account) public onlyOwner {\n\n        _minters[account] = true;\n",
          "message": "KickToken.addToMinters (kickico_token_v2.sol#103-105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 109,
          "vulnerability_code": "    function removeFromMinters(address account) public onlyOwner {\n\n        _minters[account] = false;\n",
          "message": "KickToken.removeFromMinters (kickico_token_v2.sol#107-109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 120,
          "vulnerability_code": "    function addToMelters(address account) public onlyOwner {\n\n        _melters[account] = true;\n",
          "message": "KickToken.addToMelters (kickico_token_v2.sol#118-120) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function removeFromMelters(address account) public onlyOwner {\n\n        _melters[account] = false;\n",
          "message": "KickToken.removeFromMelters (kickico_token_v2.sol#122-124) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": 147,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        pendingOwner = newOwner;\n",
          "message": "KickToken.transferOwnership (kickico_token_v2.sol#145-147) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function claimOwnership() public onlyPendingOwner {\n\n        emit OwnershipTransferred(owner, pendingOwner);\n\n        owner = pendingOwner;\n\n        pendingOwner = address(0);\n",
          "message": "KickToken.claimOwnership (kickico_token_v2.sol#149-153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 158,
          "vulnerability_code": "    function burnTrigger() public onlyOwner {\n\n        burnallow = !burnallow;\n",
          "message": "KickToken.burnTrigger (kickico_token_v2.sol#156-158) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 170,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
          "message": "KickToken.totalSupply (kickico_token_v2.sol#168-170) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n        return _balances[account].add(_frozen_balanceOf(account));\n",
          "message": "KickToken.balanceOf (kickico_token_v2.sol#172-174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) public canTransfer returns (bool) {\n\n        require(recipient != address(this), \"can't transfer tokens to the contract address\");\n\n        require(_balances[msg.sender] >= amount);\n\n        _transfer(msg.sender, recipient, amount);\n\n        return true;\n",
          "message": "KickToken.transfer (kickico_token_v2.sol#176-181) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 185,
          "vulnerability_code": "    function allowance(address _owner, address spender) public view returns (uint256) {\n\n        return _allowances[_owner][spender];\n",
          "message": "KickToken.allowance (kickico_token_v2.sol#183-185) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": 201,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n\n        TokenRecipient spender = TokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\n            return true;\n\n        } else {\n\n            return false;\n\n        }\n",
          "message": "KickToken.approveAndCall (kickico_token_v2.sol#193-201) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": 209,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public canTransfer returns (bool) {\n\n        require(recipient != address(this), \"can't transfer tokens to the contract address\");\n\n\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n\n        return true;\n",
          "message": "KickToken.transferFrom (kickico_token_v2.sol#203-209) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 215,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n\n        return true;\n",
          "message": "KickToken.increaseAllowance (kickico_token_v2.sol#212-215) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 221,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n\n        return true;\n",
          "message": "KickToken.decreaseAllowance (kickico_token_v2.sol#218-221) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": 275,
          "vulnerability_code": "    function burn(uint256 amount) public whenBurn {\n\n        _burn(msg.sender, amount);\n",
          "message": "KickToken.burn (kickico_token_v2.sol#273-275) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": 279,
          "vulnerability_code": "    function burnFrom(address account, uint256 amount) public whenBurn {\n\n        _burnFrom(account, amount);\n",
          "message": "KickToken.burnFrom (kickico_token_v2.sol#277-279) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 283,
          "vulnerability_code": "    function destroy(address account, uint256 amount) public onlyOwner {\n\n        _burn(account, amount);\n",
          "message": "KickToken.destroy (kickico_token_v2.sol#281-283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function destroyFrozen(address account, uint256 amount) public onlyOwner {\n\n        _burnFrozen(account, amount);\n",
          "message": "KickToken.destroyFrozen (kickico_token_v2.sol#285-287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 297,
          "vulnerability_code": "    function mintBatchToken(address[] memory accounts, uint256[] memory amounts) public onlyMinter returns (bool) {\n\n        require(accounts.length > 0, \"mintBatchToken: transfer should be to at least one address\");\n\n        require(accounts.length == amounts.length, \"mintBatchToken: recipients.length != amounts.length\");\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            _mint(accounts[i], amounts[i]);\n\n        }\n\n\n\n        return true;\n",
          "message": "KickToken.mintBatchToken (kickico_token_v2.sol#289-297) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function transferFrozenToken(address from, address to, uint256 amount) public onlyOwner returns (bool) {\n\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _frozen_sub(from, amount);\n\n        _frozen_add(to, amount);\n\n\n\n        emit FrozenTransfer(from, to, amount);\n\n        emit Transfer(from, to, amount);\n\n\n\n        return true;\n",
          "message": "KickToken.transferFrozenToken (kickico_token_v2.sol#352-363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": 370,
          "vulnerability_code": "    function freezeTokens(address account, uint256 amount) public onlyOwner returns (bool) {\n\n        _freeze(account, amount);\n\n        emit Transfer(account, address(this), amount);\n\n        return true;\n",
          "message": "KickToken.freezeTokens (kickico_token_v2.sol#366-370) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function meltTokens(address account, uint256 amount) public onlyMelter returns (bool) {\n\n        _melt(account, amount);\n\n        emit Transfer(address(this), account, amount);\n\n        return true;\n",
          "message": "KickToken.meltTokens (kickico_token_v2.sol#372-376) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": 381,
          "vulnerability_code": "    function mintFrozenTokens(address account, uint256 amount) public onlyOwner returns (bool) {\n\n        _mintfrozen(account, amount);\n\n        return true;\n",
          "message": "KickToken.mintFrozenTokens (kickico_token_v2.sol#378-381) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    function mintBatchFrozenTokens(address[] memory accounts, uint256[] memory amounts) public onlyMinter returns (bool) {\n\n        require(accounts.length > 0, \"mintBatchFrozenTokens: transfer should be to at least one address\");\n\n        require(accounts.length == amounts.length, \"mintBatchFrozenTokens: recipients.length != amounts.length\");\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n\n            _mintfrozen(accounts[i], amounts[i]);\n\n        }\n\n\n\n        return true;\n",
          "message": "KickToken.mintBatchFrozenTokens (kickico_token_v2.sol#383-391) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": "Detected issues with version pragma in kickico_token_v2.sol:\n\t- pragma solidity^0.5.8 (kickico_token_v2.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function _frozen_add(address _account, uint256 _amount) internal returns (bool) {\n\n        frozen_balances[_account] = frozen_balances[_account].add(_amount);\n\n        return true;\n",
          "message": "Function 'AccountFrozenBalances._frozen_add' (kickico_token_v2.sol#27-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _frozen_add(address _account, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_account' of AccountFrozenBalances._frozen_add (kickico_token_v2.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _frozen_add(address _account, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_amount' of AccountFrozenBalances._frozen_add (kickico_token_v2.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function _frozen_sub(address _account, uint256 _amount) internal returns (bool) {\n\n        frozen_balances[_account] = frozen_balances[_account].sub(_amount);\n\n        return true;\n",
          "message": "Function 'AccountFrozenBalances._frozen_sub' (kickico_token_v2.sol#32-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _frozen_sub(address _account, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_account' of AccountFrozenBalances._frozen_sub (kickico_token_v2.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _frozen_sub(address _account, uint256 _amount) internal returns (bool) {\n",
          "message": "Parameter '_amount' of AccountFrozenBalances._frozen_sub (kickico_token_v2.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function _frozen_balanceOf(address _account) internal view returns (uint) {\n\n        return frozen_balances[_account];\n",
          "message": "Function 'AccountFrozenBalances._frozen_balanceOf' (kickico_token_v2.sol#37-39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _frozen_balanceOf(address _account) internal view returns (uint) {\n",
          "message": "Parameter '_account' of AccountFrozenBalances._frozen_balanceOf (kickico_token_v2.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private frozen_balances;\n",
          "message": "Variable 'AccountFrozenBalances.frozen_balances' (kickico_token_v2.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_name' of KickToken. (kickico_token_v2.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_symbol' of KickToken. (kickico_token_v2.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\n",
          "message": "Parameter '_decimals' of KickToken. (kickico_token_v2.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address spender) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of KickToken.allowance (kickico_token_v2.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n",
          "message": "Parameter '_spender' of KickToken.approveAndCall (kickico_token_v2.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n",
          "message": "Parameter '_value' of KickToken.approveAndCall (kickico_token_v2.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool) {\n",
          "message": "Parameter '_extraData' of KickToken.approveAndCall (kickico_token_v2.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount);\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'KickToken._transfer' (kickico_token_v2.sol#224-231) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": 242,
          "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        require(account != address(this), \"ERC20: mint to the contract address\");\n\n        require(amount > 0, \"ERC20: mint amount should be > 0\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(this), account, amount);\n",
          "message": "Function 'KickToken._mint' (kickico_token_v2.sol#234-242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": 257,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(this), value);\n",
          "message": "Function 'KickToken._burn' (kickico_token_v2.sol#251-257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 265,
          "vulnerability_code": "    function _approve(address _owner, address spender, uint256 value) internal {\n\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[_owner][spender] = value;\n\n        emit Approval(_owner, spender, value);\n",
          "message": "Function 'KickToken._approve' (kickico_token_v2.sol#259-265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _approve(address _owner, address spender, uint256 value) internal {\n",
          "message": "Parameter '_owner' of KickToken._approve (kickico_token_v2.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n",
          "message": "Function 'KickToken._burnFrom' (kickico_token_v2.sol#267-270) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 315,
          "vulnerability_code": "    function _freeze(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: freeze from the zero address\");\n\n        require(amount > 0, \"ERC20: freeze from the address: amount should be > 0\");\n\n\n\n        _balances[account] = _balances[account].sub(amount);\n\n        _frozen_add(account, amount);\n\n\n\n        emit Freeze(account, amount);\n",
          "message": "Function 'KickToken._freeze' (kickico_token_v2.sol#307-315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": 329,
          "vulnerability_code": "    function _mintfrozen(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint frozen to the zero address\");\n\n        require(account != address(this), \"ERC20: mint frozen to the contract address\");\n\n        require(amount > 0, \"ERC20: mint frozen amount should be > 0\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n\n\n        emit Transfer(address(this), account, amount);\n\n\n\n        _frozen_add(account, amount);\n\n\n\n        emit MintFrozen(account, amount);\n",
          "message": "Function 'KickToken._mintfrozen' (kickico_token_v2.sol#317-329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": 340,
          "vulnerability_code": "    function _melt(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: melt from the zero address\");\n\n        require(amount > 0, \"ERC20: melt from the address: value should be > 0\");\n\n        require(_frozen_balanceOf(account) >= amount, \"ERC20: melt from the address: balance < amount\");\n\n\n\n        _frozen_sub(account, amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n\n\n        emit Melt(account, amount);\n",
          "message": "Function 'KickToken._melt' (kickico_token_v2.sol#331-340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function _burnFrozen(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: frozen burn from the zero address\");\n\n\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        _frozen_sub(account, amount);\n\n\n\n        emit Transfer(account, address(this), amount);\n",
          "message": "Function 'KickToken._burnFrozen' (kickico_token_v2.sol#342-349) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < accounts.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private frozen_balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private _whitelisted;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private _minters;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private _melters;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}