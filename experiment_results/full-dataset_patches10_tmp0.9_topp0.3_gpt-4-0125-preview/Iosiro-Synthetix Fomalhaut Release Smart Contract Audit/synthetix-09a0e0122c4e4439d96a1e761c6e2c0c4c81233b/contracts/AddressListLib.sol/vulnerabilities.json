{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < n; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(contains(list, element), \"Element not in list.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < n; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < n; i++) {\n",
          "message": "i in AddressListLib.getPage (AddressListLib.sol#38) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function remove(AddressList storage list, address element) internal {\n\n        require(contains(list, element), \"Element not in list.\");\n\n        // Replace the removed element with the last element of the list.\n\n        uint index = list.indices[element];\n\n        uint lastIndex = list.elements.length - 1; // We required that element is in the list, so it is not empty.\n\n        if (index != lastIndex) {\n\n            // No need to shift the last element if it is the one we want to delete.\n\n            address shiftedElement = list.elements[lastIndex];\n\n            list.elements[index] = shiftedElement;\n\n            list.indices[shiftedElement] = index;\n\n        }\n\n        list.elements.pop();\n\n        delete list.indices[element];\n",
          "message": "AddressListLib.remove (AddressListLib.sol#49-62) does not use the value returned by external calls:\n\t-list.elements.pop() (AddressListLib.sol#60)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in AddressListLib.sol:\n\t- pragma solidity^0.5.16 (AddressListLib.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}