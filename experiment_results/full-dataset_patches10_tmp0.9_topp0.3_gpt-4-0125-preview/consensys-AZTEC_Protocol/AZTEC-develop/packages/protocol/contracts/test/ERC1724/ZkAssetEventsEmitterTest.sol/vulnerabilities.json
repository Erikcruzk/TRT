{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public createdNotes = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "            createdNotes++;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit CreateNote(owner, bytes32(createdNotes), metadata);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i<count; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(noteIndex <= createdNotes, 'noteIndex must be less or equal to createdNotes');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(noteIndex <= createdNotes, 'noteIndex must be less or equal to createdNotes');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i<count; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "            createdNotes++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(noteIndex <= createdNotes, 'noteIndex must be less or equal to createdNotes');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(noteIndex <= createdNotes, 'noteIndex must be less or equal to createdNotes');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function emitCreateNote(address owner, bytes memory metadata, uint256 count) public {\n\n        for (uint i = 0; i<count; i++) {\n\n            createdNotes++;\n\n            emit CreateNote(owner, bytes32(createdNotes), metadata);\n\n        }\n",
          "message": "ZkAssetEventsEmitterTest.emitCreateNote (ZkAssetEventsEmitterTest.sol#34-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function emitDestroyNote(address owner, bytes memory metadata, uint256 noteIndex) public {\n\n        require(noteIndex <= createdNotes, 'noteIndex must be less or equal to createdNotes');\n\n\n\n        emit DestroyNote(owner, bytes32(noteIndex), metadata);\n",
          "message": "ZkAssetEventsEmitterTest.emitDestroyNote (ZkAssetEventsEmitterTest.sol#41-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function emitUpdateNoteMetaData(address owner, bytes memory metadata, uint256 noteIndex) public {\n\n        require(noteIndex <= createdNotes, 'noteIndex must be less or equal to createdNotes');\n\n\n\n        emit UpdateNoteMetaData(owner, bytes32(noteIndex), metadata);\n",
          "message": "ZkAssetEventsEmitterTest.emitUpdateNoteMetaData (ZkAssetEventsEmitterTest.sol#47-51) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <0.6.0;\n",
          "message": "Detected issues with version pragma in ZkAssetEventsEmitterTest.sol:\n\t- pragma solidity>=0.5.0<0.6.0 (ZkAssetEventsEmitterTest.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <0.6.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}