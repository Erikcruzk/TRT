{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < initialOwners.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "            owners[initialOwners[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < initialOwners.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < initialOwners.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_21"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < initialOwners.length; i++) {\n",
          "message": "i in BasicStorage.BasicStorage (DreamTeamStorage.sol#37) is a local variable never initialiazed\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Different versions of Solidity is used in DreamTeamStorage.sol:\n\t- Version used: ['^0.4.18', '^0.4.23']\n\t- DreamTeamStorage.sol#3 declares pragma solidity^0.4.23\n\t- DreamTeamStorage.sol#28 declares pragma solidity^0.4.18\n\t- DreamTeamStorage.sol#63 declares pragma solidity^0.4.18\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function transferOwnership (address newOwner) public ownersOnly {\n\n        owners[newOwner] = true;\n\n        delete owners[msg.sender];\n",
          "message": "BasicStorage.transferOwnership (DreamTeamStorage.sol#42-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function grantAccess (address newOwner) public ownersOnly {\n\n        owners[newOwner] = true;\n",
          "message": "BasicStorage.grantAccess (DreamTeamStorage.sol#47-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function revokeAccess (address previousOwner) public ownersOnly {\n\n        delete owners[previousOwner];\n",
          "message": "BasicStorage.revokeAccess (DreamTeamStorage.sol#51-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function isOwner (address addr) public view returns(bool) {\n\n        return owners[addr] == true;\n",
          "message": "BasicStorage.isOwner (DreamTeamStorage.sol#55-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUint (bytes32 record) public view returns (uint) { return uintStorage[record]; }\n",
          "message": "DreamTeamStorage.getUint (DreamTeamStorage.sol#77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getString (bytes32 record) public view returns (string) { return stringStorage[record]; }\n",
          "message": "DreamTeamStorage.getString (DreamTeamStorage.sol#78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress (bytes32 record) public view returns (address) { return addressStorage[record]; }\n",
          "message": "DreamTeamStorage.getAddress (DreamTeamStorage.sol#79) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes (bytes32 record) public view returns (bytes) { return bytesStorage[record]; }\n",
          "message": "DreamTeamStorage.getBytes (DreamTeamStorage.sol#80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBoolean (bytes32 record) public view returns (bool) { return booleanStorage[record]; }\n",
          "message": "DreamTeamStorage.getBoolean (DreamTeamStorage.sol#81) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInt (bytes32 record) public view returns (int) { return intStorage[record]; }\n",
          "message": "DreamTeamStorage.getInt (DreamTeamStorage.sol#82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setString (bytes32 record, string value) public ownersOnly { stringStorage[record] = value; }\n",
          "message": "DreamTeamStorage.setString (DreamTeamStorage.sol#83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setUint (bytes32 record, uint value) public ownersOnly { uintStorage[record] = value; }\n",
          "message": "DreamTeamStorage.setUint (DreamTeamStorage.sol#84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddress (bytes32 record, address value) public ownersOnly { addressStorage[record] = value; }\n",
          "message": "DreamTeamStorage.setAddress (DreamTeamStorage.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBytes (bytes32 record, bytes value) public ownersOnly { bytesStorage[record] = value; }\n",
          "message": "DreamTeamStorage.setBytes (DreamTeamStorage.sol#86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBoolean (bytes32 record, bool value) public ownersOnly { booleanStorage[record] = value; }\n",
          "message": "DreamTeamStorage.setBoolean (DreamTeamStorage.sol#87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInt (bytes32 record, int value) public ownersOnly { intStorage[record] = value; }\n",
          "message": "DreamTeamStorage.setInt (DreamTeamStorage.sol#88) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in DreamTeamStorage.sol:\n\t- pragma solidity^0.4.23 (DreamTeamStorage.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (DreamTeamStorage.sol#28): it allows old versions\n\t- pragma solidity^0.4.18 (DreamTeamStorage.sol#63): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function BasicStorage (address[] initialOwners) public {\n\n        for (uint i; i < initialOwners.length; i++) {\n\n            owners[initialOwners[i]] = true;\n\n        }\n",
          "message": "Function 'BasicStorage.BasicStorage' (DreamTeamStorage.sol#36-40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function DreamTeamStorage (address[] initialOwners) BasicStorage(initialOwners) public {}\n",
          "message": "Function 'DreamTeamStorage.DreamTeamStorage' (DreamTeamStorage.sol#75) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < initialOwners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < initialOwners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasicStorage (address[] initialOwners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function DreamTeamStorage (address[] initialOwners) BasicStorage(initialOwners) public {}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getString (bytes32 record) public view returns (string) { return stringStorage[record]; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes (bytes32 record) public view returns (bytes) { return bytesStorage[record]; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setString (bytes32 record, string value) public ownersOnly { stringStorage[record] = value; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBytes (bytes32 record, bytes value) public ownersOnly { bytesStorage[record] = value; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => uint) uintStorage;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => string) stringStorage;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address) addressStorage;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bytes) bytesStorage;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => bool) booleanStorage;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => int) intStorage;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBytes (bytes32 record, bytes value) public ownersOnly { bytesStorage[record] = value; }\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getString (bytes32 record) public view returns (string) { return stringStorage[record]; }\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}