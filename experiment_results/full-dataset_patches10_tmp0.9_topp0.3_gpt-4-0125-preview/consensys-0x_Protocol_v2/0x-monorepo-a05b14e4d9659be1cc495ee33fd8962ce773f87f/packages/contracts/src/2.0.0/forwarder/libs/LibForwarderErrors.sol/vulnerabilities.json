{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant FEE_PERCENTAGE_TOO_LARGE = \"FEE_PROPORTION_TOO_LARGE\";                        // Provided fee percentage greater than 5%.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant INSUFFICIENT_ETH_REMAINING = \"INSUFFICIENT_ETH_REMAINING\";                    // Not enough ETH remaining to pay feeRecipient.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant OVERSOLD_WETH = \"OVERSOLD_WETH\";                                              // More WETH sold than provided with current message call.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";                                // Desired purchase amount not completely filled (required for ZRX fees only).\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                          // Asset transfer failed.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant UNSUPPORTED_TOKEN_PROXY = \"UNSUPPORTED_TOKEN_PROXY\";                          // Proxy in assetData not supported.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant DEFAULT_FUNCTION_WETH_CONTRACT_ONLY = \"DEFAULT_FUNCTION_WETH_CONTRACT_ONLY\";  // Fallback function may only be used for WETH withdrawals.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant INVALID_MSG_VALUE = \"INVALID_MSG_VALUE\";                                      // msg.value must be greater than 0.\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string constant INVALID_AMOUNT = \"INVALID_AMOUNT\";                                            // Amount must equal 1.\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}