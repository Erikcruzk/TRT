{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 120,
          "vulnerability_code": "contract IERC721Token {\n\n    string internal name_;\n\n    string internal symbol_;\n\n\n\n    event Transfer(\n\n        address indexed _from,\n\n        address indexed _to,\n\n        uint256 _tokenId\n\n    );\n\n\n\n    event Approval(\n\n        address indexed _owner,\n\n        address indexed _approved,\n\n        uint256 _tokenId\n\n    );\n\n\n\n    event ApprovalForAll(\n\n        address indexed _owner,\n\n        address indexed _operator,\n\n        bool _approved\n\n    );\n\n\n\n    function name()\n\n        public\n\n        view\n\n        returns (string);\n\n\n\n    function symbol()\n\n        public\n\n        view\n\n        returns (string);\n\n\n\n    function balanceOf(address _owner)\n\n        public\n\n        view\n\n        returns (uint256 _balance);\n\n\n\n    function ownerOf(uint256 _tokenId)\n\n        public\n\n        view\n\n        returns (address _owner);\n\n\n\n    function exists(uint256 _tokenId)\n\n        public\n\n        view\n\n        returns (bool _exists);\n\n\n\n    function approve(address _to, uint256 _tokenId)\n\n        public;\n\n\n\n    function getApproved(uint256 _tokenId)\n\n        public\n\n        view\n\n        returns (address _operator);\n\n\n\n    function setApprovalForAll(address _operator, bool _approved)\n\n        public;\n\n\n\n    function isApprovedForAll(address _owner, address _operator)\n\n        public\n\n        view\n\n        returns (bool);\n\n\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        public;\n\n\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        public;\n\n\n\n    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId,\n\n        bytes _data\n\n    )\n\n        public;\n",
          "message": "IERC721Token (IERC721Token.sol#36-120) has incorrect ERC20 function interface(s):\n\t-approve (IERC721Token.sol#83-84)\n\t-transferFrom (IERC721Token.sol#99-104)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string internal name_;\n",
          "message": "IERC721Token.name_ should be constant (IERC721Token.sol#37)\nIERC721Token.symbol_ should be constant (IERC721Token.sol#38)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function name()\n\n        public\n\n        view\n",
          "message": "IERC721Token.name (IERC721Token.sol#58-61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function symbol()\n\n        public\n\n        view\n",
          "message": "IERC721Token.symbol (IERC721Token.sol#63-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function balanceOf(address _owner)\n\n        public\n\n        view\n",
          "message": "IERC721Token.balanceOf (IERC721Token.sol#68-71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function ownerOf(uint256 _tokenId)\n\n        public\n\n        view\n",
          "message": "IERC721Token.ownerOf (IERC721Token.sol#73-76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 81,
          "vulnerability_code": "    function exists(uint256 _tokenId)\n\n        public\n\n        view\n",
          "message": "IERC721Token.exists (IERC721Token.sol#78-81) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    function approve(address _to, uint256 _tokenId)\n",
          "message": "IERC721Token.approve (IERC721Token.sol#83-84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 89,
          "vulnerability_code": "    function getApproved(uint256 _tokenId)\n\n        public\n\n        view\n",
          "message": "IERC721Token.getApproved (IERC721Token.sol#86-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function setApprovalForAll(address _operator, bool _approved)\n",
          "message": "IERC721Token.setApprovalForAll (IERC721Token.sol#91-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function isApprovedForAll(address _owner, address _operator)\n\n        public\n\n        view\n",
          "message": "IERC721Token.isApprovedForAll (IERC721Token.sol#94-97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 104,
          "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n",
          "message": "IERC721Token.transferFrom (IERC721Token.sol#99-104) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n",
          "message": "IERC721Token.safeTransferFrom (IERC721Token.sol#106-111) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function safeTransferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId,\n\n        bytes _data\n\n    )\n",
          "message": "IERC721Token.safeTransferFrom (IERC721Token.sol#113-119) should be declared external\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}