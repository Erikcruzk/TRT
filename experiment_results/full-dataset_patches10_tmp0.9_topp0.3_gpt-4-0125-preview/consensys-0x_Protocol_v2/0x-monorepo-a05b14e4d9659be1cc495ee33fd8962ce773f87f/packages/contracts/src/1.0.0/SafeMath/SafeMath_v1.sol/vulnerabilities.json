{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_2"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Detected issues with version pragma in SafeMath_v1.sol:\n\t- pragma solidity^0.4.11 (SafeMath_v1.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 75,
          "vulnerability_code": "contract SafeMath_v1 {\n\n    function safeMul(uint a, uint b)\n\n        internal\n\n        constant\n\n        returns (uint256)\n\n    {\n\n        uint c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n\n    }\n\n\n\n    function safeDiv(uint a, uint b)\n\n        internal\n\n        constant\n\n        returns (uint256)\n\n    {\n\n        uint c = a / b;\n\n        return c;\n\n    }\n\n\n\n    function safeSub(uint a, uint b)\n\n        internal\n\n        constant\n\n        returns (uint256)\n\n    {\n\n        assert(b <= a);\n\n        return a - b;\n\n    }\n\n\n\n    function safeAdd(uint a, uint b)\n\n        internal\n\n        constant\n\n        returns (uint256)\n\n    {\n\n        uint c = a + b;\n\n        assert(c >= a);\n\n        return c;\n\n    }\n\n\n\n    function max64(uint64 a, uint64 b)\n\n        internal\n\n        constant\n\n        returns (uint64)\n\n    {\n\n        return a >= b ? a : b;\n\n    }\n\n\n\n    function min64(uint64 a, uint64 b)\n\n        internal\n\n        constant\n\n        returns (uint64)\n\n    {\n\n        return a < b ? a : b;\n\n    }\n\n\n\n    function max256(uint256 a, uint256 b)\n\n        internal\n\n        constant\n\n        returns (uint256)\n\n    {\n\n        return a >= b ? a : b;\n\n    }\n\n\n\n    function min256(uint256 a, uint256 b)\n\n        internal\n\n        constant\n\n        returns (uint256)\n\n    {\n\n        return a < b ? a : b;\n\n    }\n",
          "message": "Contract 'SafeMath_v1' (SafeMath_v1.sol#5-75) is not in CapWords\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeMul(uint a, uint b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeDiv(uint a, uint b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeSub(uint a, uint b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeAdd(uint a, uint b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function max64(uint64 a, uint64 b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function min64(uint64 a, uint64 b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function max256(uint256 a, uint256 b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function min256(uint256 a, uint256 b)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}