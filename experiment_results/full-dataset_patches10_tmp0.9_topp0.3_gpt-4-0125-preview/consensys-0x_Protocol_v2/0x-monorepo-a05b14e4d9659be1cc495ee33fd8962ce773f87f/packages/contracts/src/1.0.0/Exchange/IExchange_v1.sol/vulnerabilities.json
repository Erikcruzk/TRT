{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function ZRX_TOKEN_CONTRACT()\n\n      public view\n",
          "message": "IExchange_v1.ZRX_TOKEN_CONTRACT (IExchange_v1.sol#42-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function TOKEN_TRANSFER_PROXY_CONTRACT()\n\n      public view\n",
          "message": "IExchange_v1.TOKEN_TRANSFER_PROXY_CONTRACT (IExchange_v1.sol#46-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function EXTERNAL_QUERY_GAS_LIMIT()\n\n      public view\n",
          "message": "IExchange_v1.EXTERNAL_QUERY_GAS_LIMIT (IExchange_v1.sol#50-52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function VERSION()\n\n      public view\n",
          "message": "IExchange_v1.VERSION (IExchange_v1.sol#54-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function filled(bytes32)\n\n      public view\n",
          "message": "IExchange_v1.filled (IExchange_v1.sol#58-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function cancelled(bytes32)\n\n      public view\n",
          "message": "IExchange_v1.cancelled (IExchange_v1.sol#62-64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function getUnavailableTakerTokenAmount(bytes32 orderHash)\n\n        public constant\n",
          "message": "IExchange_v1.getUnavailableTakerTokenAmount (IExchange_v1.sol#69-71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function getPartialAmount(uint numerator, uint denominator, uint target)\n\n        public constant\n",
          "message": "IExchange_v1.getPartialAmount (IExchange_v1.sol#78-80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 89,
          "vulnerability_code": "    function isRoundingError(uint numerator, uint denominator, uint target)\n\n        public constant\n",
          "message": "IExchange_v1.isRoundingError (IExchange_v1.sol#87-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function getOrderHash(address[5] orderAddresses, uint[6] orderValues)\n\n        public\n\n        constant\n",
          "message": "IExchange_v1.getOrderHash (IExchange_v1.sol#95-98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function isValidSignature(\n\n        address signer,\n\n        bytes32 hash,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s)\n\n        public constant\n",
          "message": "IExchange_v1.isValidSignature (IExchange_v1.sol#107-114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function fillOrder(\n\n          address[5] orderAddresses,\n\n          uint[6] orderValues,\n\n          uint fillTakerTokenAmount,\n\n          bool shouldThrowOnInsufficientBalanceOrAllowance,\n\n          uint8 v,\n\n          bytes32 r,\n\n          bytes32 s)\n\n          public\n",
          "message": "IExchange_v1.fillOrder (IExchange_v1.sol#125-134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function cancelOrder(\n\n        address[5] orderAddresses,\n\n        uint[6] orderValues,\n\n        uint cancelTakerTokenAmount)\n\n        public\n",
          "message": "IExchange_v1.cancelOrder (IExchange_v1.sol#141-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function fillOrKillOrder(\n\n        address[5] orderAddresses,\n\n        uint[6] orderValues,\n\n        uint fillTakerTokenAmount,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s)\n",
          "message": "IExchange_v1.fillOrKillOrder (IExchange_v1.sol#156-163) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function batchFillOrders(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint[] fillTakerTokenAmounts,\n\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\n\n        uint8[] v,\n\n        bytes32[] r,\n\n        bytes32[] s)\n",
          "message": "IExchange_v1.batchFillOrders (IExchange_v1.sol#173-181) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 197,
          "vulnerability_code": "    function batchFillOrKillOrders(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint[] fillTakerTokenAmounts,\n\n        uint8[] v,\n\n        bytes32[] r,\n\n        bytes32[] s)\n",
          "message": "IExchange_v1.batchFillOrKillOrders (IExchange_v1.sol#190-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function fillOrdersUpTo(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint fillTakerTokenAmount,\n\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\n\n        uint8[] v,\n\n        bytes32[] r,\n\n        bytes32[] s)\n\n        public\n",
          "message": "IExchange_v1.fillOrdersUpTo (IExchange_v1.sol#208-217) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": 227,
          "vulnerability_code": "    function batchCancelOrders(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint[] cancelTakerTokenAmounts)\n",
          "message": "IExchange_v1.batchCancelOrders (IExchange_v1.sol#223-227) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;\n",
          "message": "Detected issues with version pragma in IExchange_v1.sol:\n\t- pragma solidity^0.4.19 (IExchange_v1.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 228,
          "vulnerability_code": "contract IExchange_v1 {\n\n\n\n    // Error Codes\n\n    enum Errors {\n\n        ORDER_EXPIRED,                    // Order has already expired\n\n        ORDER_FULLY_FILLED_OR_CANCELLED,  // Order has already been fully filled or cancelled\n\n        ROUNDING_ERROR_TOO_LARGE,         // Rounding error too large\n\n        INSUFFICIENT_BALANCE_OR_ALLOWANCE // Insufficient balance or allowance for token transfer\n\n    }\n\n\n\n    event LogError(uint8 indexed errorId, bytes32 indexed orderHash);\n\n\n\n    event LogFill(\n\n        address indexed maker,\n\n        address taker,\n\n        address indexed feeRecipient,\n\n        address makerToken,\n\n        address takerToken,\n\n        uint filledMakerTokenAmount,\n\n        uint filledTakerTokenAmount,\n\n        uint paidMakerFee,\n\n        uint paidTakerFee,\n\n        bytes32 indexed tokens, // keccak256(makerToken, takerToken), allows subscribing to a token pair\n\n        bytes32 orderHash\n\n    );\n\n\n\n    event LogCancel(\n\n        address indexed maker,\n\n        address indexed feeRecipient,\n\n        address makerToken,\n\n        address takerToken,\n\n        uint cancelledMakerTokenAmount,\n\n        uint cancelledTakerTokenAmount,\n\n        bytes32 indexed tokens,\n\n        bytes32 orderHash\n\n    );\n\n    \n\n    function ZRX_TOKEN_CONTRACT()\n\n      public view\n\n      returns (address);\n\n      \n\n    function TOKEN_TRANSFER_PROXY_CONTRACT()\n\n      public view\n\n      returns (address);\n\n      \n\n    function EXTERNAL_QUERY_GAS_LIMIT()\n\n      public view\n\n      returns (uint16);\n\n      \n\n    function VERSION()\n\n      public view\n\n      returns (string);\n\n    \n\n    function filled(bytes32)\n\n      public view\n\n      returns (uint256);\n\n      \n\n    function cancelled(bytes32)\n\n      public view\n\n      returns (uint256);\n\n    \n\n    /// @dev Calculates the sum of values already filled and cancelled for a given order.\n\n    /// @param orderHash The Keccak-256 hash of the given order.\n\n    /// @return Sum of values already filled and cancelled.\n\n    function getUnavailableTakerTokenAmount(bytes32 orderHash)\n\n        public constant\n\n        returns (uint);\n\n    \n\n    /// @dev Calculates partial value given a numerator and denominator.\n\n    /// @param numerator Numerator.\n\n    /// @param denominator Denominator.\n\n    /// @param target Value to calculate partial of.\n\n    /// @return Partial value of target.\n\n    function getPartialAmount(uint numerator, uint denominator, uint target)\n\n        public constant\n\n        returns (uint);\n\n    \n\n    /// @dev Checks if rounding error > 0.1%.\n\n    /// @param numerator Numerator.\n\n    /// @param denominator Denominator.\n\n    /// @param target Value to multiply with numerator/denominator.\n\n    /// @return Rounding error is present.\n\n    function isRoundingError(uint numerator, uint denominator, uint target)\n\n        public constant\n\n        returns (bool);\n\n      \n\n    /// @dev Calculates Keccak-256 hash of order with specified parameters.\n\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n\n    /// @return Keccak-256 hash of order.\n\n    function getOrderHash(address[5] orderAddresses, uint[6] orderValues)\n\n        public\n\n        constant\n\n        returns (bytes32);\n\n        \n\n    /// @dev Verifies that an order signature is valid.\n\n    /// @param signer address of signer.\n\n    /// @param hash Signed Keccak-256 hash.\n\n    /// @param v ECDSA signature parameter v.\n\n    /// @param r ECDSA signature parameters r.\n\n    /// @param s ECDSA signature parameters s.\n\n    /// @return Validity of order signature.\n\n    function isValidSignature(\n\n        address signer,\n\n        bytes32 hash,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s)\n\n        public constant\n\n        returns (bool);\n\n    \n\n    /// @dev Fills the input order.\n\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\n\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfer will fail before attempting.\n\n    /// @param v ECDSA signature parameter v.\n\n    /// @param r ECDSA signature parameters r.\n\n    /// @param s ECDSA signature parameters s.\n\n    /// @return Total amount of takerToken filled in trade.\n\n    function fillOrder(\n\n          address[5] orderAddresses,\n\n          uint[6] orderValues,\n\n          uint fillTakerTokenAmount,\n\n          bool shouldThrowOnInsufficientBalanceOrAllowance,\n\n          uint8 v,\n\n          bytes32 r,\n\n          bytes32 s)\n\n          public\n\n          returns (uint filledTakerTokenAmount);\n\n      \n\n    /// @dev Cancels the input order.\n\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n\n    /// @param cancelTakerTokenAmount Desired amount of takerToken to cancel in order.\n\n    /// @return Amount of takerToken cancelled.\n\n    function cancelOrder(\n\n        address[5] orderAddresses,\n\n        uint[6] orderValues,\n\n        uint cancelTakerTokenAmount)\n\n        public\n\n        returns (uint);\n\n\n\n\n\n    /// @dev Fills an order with specified parameters and ECDSA signature, throws if specified amount not filled entirely.\n\n    /// @param orderAddresses Array of order's maker, taker, makerToken, takerToken, and feeRecipient.\n\n    /// @param orderValues Array of order's makerTokenAmount, takerTokenAmount, makerFee, takerFee, expirationTimestampInSec, and salt.\n\n    /// @param fillTakerTokenAmount Desired amount of takerToken to fill.\n\n    /// @param v ECDSA signature parameter v.\n\n    /// @param r ECDSA signature parameters r.\n\n    /// @param s ECDSA signature parameters s.\n\n    function fillOrKillOrder(\n\n        address[5] orderAddresses,\n\n        uint[6] orderValues,\n\n        uint fillTakerTokenAmount,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s)\n\n        public;\n\n\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction.\n\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n\n    /// @param orderValues Array of uint arrays containing individual order values.\n\n    /// @param fillTakerTokenAmounts Array of desired amounts of takerToken to fill in orders.\n\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfers will fail before attempting.\n\n    /// @param v Array ECDSA signature v parameters.\n\n    /// @param r Array of ECDSA signature r parameters.\n\n    /// @param s Array of ECDSA signature s parameters.\n\n    function batchFillOrders(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint[] fillTakerTokenAmounts,\n\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\n\n        uint8[] v,\n\n        bytes32[] r,\n\n        bytes32[] s)\n\n        public;\n\n\n\n    /// @dev Synchronously executes multiple fillOrKill orders in a single transaction.\n\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n\n    /// @param orderValues Array of uint arrays containing individual order values.\n\n    /// @param fillTakerTokenAmounts Array of desired amounts of takerToken to fill in orders.\n\n    /// @param v Array ECDSA signature v parameters.\n\n    /// @param r Array of ECDSA signature r parameters.\n\n    /// @param s Array of ECDSA signature s parameters.\n\n    function batchFillOrKillOrders(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint[] fillTakerTokenAmounts,\n\n        uint8[] v,\n\n        bytes32[] r,\n\n        bytes32[] s)\n\n        public;\n\n\n\n    /// @dev Synchronously executes multiple fill orders in a single transaction until total fillTakerTokenAmount filled.\n\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n\n    /// @param orderValues Array of uint arrays containing individual order values.\n\n    /// @param fillTakerTokenAmount Desired total amount of takerToken to fill in orders.\n\n    /// @param shouldThrowOnInsufficientBalanceOrAllowance Test if transfers will fail before attempting.\n\n    /// @param v Array ECDSA signature v parameters.\n\n    /// @param r Array of ECDSA signature r parameters.\n\n    /// @param s Array of ECDSA signature s parameters.\n\n    /// @return Total amount of fillTakerTokenAmount filled in orders.\n\n    function fillOrdersUpTo(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint fillTakerTokenAmount,\n\n        bool shouldThrowOnInsufficientBalanceOrAllowance,\n\n        uint8[] v,\n\n        bytes32[] r,\n\n        bytes32[] s)\n\n        public\n\n        returns (uint);\n\n\n\n    /// @dev Synchronously cancels multiple orders in a single transaction.\n\n    /// @param orderAddresses Array of address arrays containing individual order addresses.\n\n    /// @param orderValues Array of uint arrays containing individual order values.\n\n    /// @param cancelTakerTokenAmounts Array of desired amounts of takerToken to cancel in orders.\n\n    function batchCancelOrders(\n\n        address[5][] orderAddresses,\n\n        uint[6][] orderValues,\n\n        uint[] cancelTakerTokenAmounts)\n\n        public;\n",
          "message": "Contract 'IExchange_v1' (IExchange_v1.sol#5-228) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function ZRX_TOKEN_CONTRACT()\n\n      public view\n",
          "message": "Function 'IExchange_v1.ZRX_TOKEN_CONTRACT' (IExchange_v1.sol#42-44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function TOKEN_TRANSFER_PROXY_CONTRACT()\n\n      public view\n",
          "message": "Function 'IExchange_v1.TOKEN_TRANSFER_PROXY_CONTRACT' (IExchange_v1.sol#46-48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function EXTERNAL_QUERY_GAS_LIMIT()\n\n      public view\n",
          "message": "Function 'IExchange_v1.EXTERNAL_QUERY_GAS_LIMIT' (IExchange_v1.sol#50-52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function VERSION()\n\n      public view\n",
          "message": "Function 'IExchange_v1.VERSION' (IExchange_v1.sol#54-56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function filled(bytes32)\n",
          "message": "Parameter '' of IExchange_v1.filled (IExchange_v1.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancelled(bytes32)\n",
          "message": "Parameter '' of IExchange_v1.cancelled (IExchange_v1.sol#62) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUnavailableTakerTokenAmount(bytes32 orderHash)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPartialAmount(uint numerator, uint denominator, uint target)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isRoundingError(uint numerator, uint denominator, uint target)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOrderHash(address[5] orderAddresses, uint[6] orderValues)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isValidSignature(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "      returns (string);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[5][] orderAddresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[6][] orderValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] fillTakerTokenAmounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] v,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] r,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] s)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[5][] orderAddresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[6][] orderValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] fillTakerTokenAmounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] v,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] r,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] s)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[5][] orderAddresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[6][] orderValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8[] v,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] r,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] s)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[5][] orderAddresses,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[6][] orderValues,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] cancelTakerTokenAmounts)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}