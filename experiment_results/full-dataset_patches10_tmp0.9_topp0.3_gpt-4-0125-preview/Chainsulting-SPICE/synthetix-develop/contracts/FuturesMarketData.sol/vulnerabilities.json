{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(IAddressResolver _resolverProxy) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "        resolverProxy = _resolverProxy;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < numMarkets; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < numMarkets; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_24"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < numMarkets; i++) {\n",
          "message": "i in FuturesMarketData._marketSummaries (FuturesMarketData.sol#403) is a local variable never initialiazed\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes32 marketKey = market.marketKey();\n",
          "message": "FuturesMarketData._marketSummaries has external calls inside a loop:\n\t- marketKey = market.marketKey() (FuturesMarketData.sol#405)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes32 baseAsset = market.baseAsset();\n",
          "message": "FuturesMarketData._marketSummaries has external calls inside a loop:\n\t- baseAsset = market.baseAsset() (FuturesMarketData.sol#406)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (uint price, ) = market.assetPrice();\n",
          "message": "FuturesMarketData._marketSummaries has external calls inside a loop:\n\t- (price) = market.assetPrice() (FuturesMarketData.sol#409)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (uint debt, ) = market.marketDebt();\n",
          "message": "FuturesMarketData._marketSummaries has external calls inside a loop:\n\t- (debt) = market.marketDebt() (FuturesMarketData.sol#410)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": 423,
          "vulnerability_code": "            summaries[i] = MarketSummary(\n\n                address(market),\n\n                baseAsset,\n\n                marketKey,\n\n                params.maxLeverage,\n\n                price,\n\n                market.marketSize(),\n\n                market.marketSkew(),\n\n                debt,\n\n                market.currentFundingRate(),\n\n                FeeRates(params.takerFee, params.makerFee, params.takerFeeNextPrice, params.makerFeeNextPrice)\n",
          "message": "FuturesMarketData._marketSummaries has external calls inside a loop:\n\t- summaries[i] = MarketSummary(address(market),baseAsset,marketKey,params.maxLeverage,price,market.marketSize(),market.marketSkew(),debt,market.currentFundingRate(),FeeRates(params.takerFee,params.makerFee,params.takerFeeNextPrice,params.makerFeeNextPrice)) (FuturesMarketData.sol#412-423)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Different versions of Solidity is used in FuturesMarketData.sol:\n\t- Version used: ['>=0.4.24', 'ABIEncoderV2', '^0.5.16']\n\t- FuturesMarketData.sol#3 declares pragma solidity^0.5.16\n\t- FuturesMarketData.sol#44 declares pragma solidity^0.5.16\n\t- FuturesMarketData.sol#147 declares pragma solidity^0.5.16\n\t- FuturesMarketData.sol#165 declares pragma solidity^0.5.16\n\t- FuturesMarketData.sol#224 declares pragma solidity>=0.4.24\n\t- FuturesMarketData.sol#237 declares pragma solidity^0.5.16\n\t- FuturesMarketData.sol#238 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in FuturesMarketData.sol:\n\t- pragma solidity^0.5.16 (FuturesMarketData.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (FuturesMarketData.sol#44): it allows old versions\n\t- pragma solidity^0.5.16 (FuturesMarketData.sol#147): it allows old versions\n\t- pragma solidity^0.5.16 (FuturesMarketData.sol#165): it allows old versions\n\t- pragma solidity^0.5.16 (FuturesMarketData.sol#237): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(IAddressResolver _resolverProxy) public {\n",
          "message": "Parameter '_resolverProxy' of FuturesMarketData. (FuturesMarketData.sol#339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": 350,
          "vulnerability_code": "    function _futuresMarketManager() internal view returns (IFuturesMarketManager) {\n\n        return\n\n            IFuturesMarketManager(\n\n                resolverProxy.requireAndGetAddress(\"FuturesMarketManager\", \"Missing FuturesMarketManager Address\")\n\n            );\n",
          "message": "Function 'FuturesMarketData._futuresMarketManager' (FuturesMarketData.sol#345-350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": 357,
          "vulnerability_code": "    function _futuresMarketSettings() internal view returns (IFuturesMarketSettings) {\n\n        return\n\n            IFuturesMarketSettings(\n\n                resolverProxy.requireAndGetAddress(\"FuturesMarketSettings\", \"Missing FuturesMarketSettings Address\")\n\n            );\n",
          "message": "Function 'FuturesMarketData._futuresMarketSettings' (FuturesMarketData.sol#352-357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": 398,
          "vulnerability_code": "    function _parameters(bytes32 marketKey) internal view returns (IFuturesMarketSettings.Parameters memory) {\n\n        (\n\n            uint takerFee,\n\n            uint makerFee,\n\n            uint takerFeeNextPrice,\n\n            uint makerFeeNextPrice,\n\n            uint nextPriceConfirmWindow,\n\n            uint maxLeverage,\n\n            uint maxMarketValueUSD,\n\n            uint maxFundingRate,\n\n            uint skewScaleUSD\n\n        ) = _futuresMarketSettings().parameters(marketKey);\n\n        return\n\n            IFuturesMarketSettings.Parameters(\n\n                takerFee,\n\n                makerFee,\n\n                takerFeeNextPrice,\n\n                makerFeeNextPrice,\n\n                nextPriceConfirmWindow,\n\n                maxLeverage,\n\n                maxMarketValueUSD,\n\n                maxFundingRate,\n\n                skewScaleUSD\n\n            );\n",
          "message": "Function 'FuturesMarketData._parameters' (FuturesMarketData.sol#374-398) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": 427,
          "vulnerability_code": "    function _marketSummaries(address[] memory markets) internal view returns (MarketSummary[] memory) {\n\n        uint numMarkets = markets.length;\n\n        MarketSummary[] memory summaries = new MarketSummary[](numMarkets);\n\n        for (uint i; i < numMarkets; i++) {\n\n            IFuturesMarket market = IFuturesMarket(markets[i]);\n\n            bytes32 marketKey = market.marketKey();\n\n            bytes32 baseAsset = market.baseAsset();\n\n            IFuturesMarketSettings.Parameters memory params = _parameters(marketKey);\n\n\n\n            (uint price, ) = market.assetPrice();\n\n            (uint debt, ) = market.marketDebt();\n\n\n\n            summaries[i] = MarketSummary(\n\n                address(market),\n\n                baseAsset,\n\n                marketKey,\n\n                params.maxLeverage,\n\n                price,\n\n                market.marketSize(),\n\n                market.marketSkew(),\n\n                debt,\n\n                market.currentFundingRate(),\n\n                FeeRates(params.takerFee, params.makerFee, params.takerFeeNextPrice, params.makerFeeNextPrice)\n\n            );\n\n        }\n\n\n\n        return summaries;\n",
          "message": "Function 'FuturesMarketData._marketSummaries' (FuturesMarketData.sol#400-427) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 447,
          "vulnerability_code": "    function _fundingParameters(IFuturesMarketSettings.Parameters memory params)\n\n        internal\n\n        pure\n\n        returns (FundingParameters memory)\n\n    {\n\n        return FundingParameters(params.maxFundingRate, params.skewScaleUSD);\n",
          "message": "Function 'FuturesMarketData._fundingParameters' (FuturesMarketData.sol#441-447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": 452,
          "vulnerability_code": "    function _marketSizes(IFuturesMarket market) internal view returns (Sides memory) {\n\n        (uint long, uint short) = market.marketSizes();\n\n        return Sides(long, short);\n",
          "message": "Function 'FuturesMarketData._marketSizes' (FuturesMarketData.sol#449-452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": 473,
          "vulnerability_code": "    function _marketDetails(IFuturesMarket market) internal view returns (MarketData memory) {\n\n        (uint price, bool invalid) = market.assetPrice();\n\n        (uint marketDebt, ) = market.marketDebt();\n\n        bytes32 baseAsset = market.baseAsset();\n\n        bytes32 marketKey = market.marketKey();\n\n\n\n        IFuturesMarketSettings.Parameters memory params = _parameters(marketKey);\n\n\n\n        return\n\n            MarketData(\n\n                address(market),\n\n                baseAsset,\n\n                marketKey,\n\n                FeeRates(params.takerFee, params.makerFee, params.takerFeeNextPrice, params.makerFeeNextPrice),\n\n                MarketLimits(params.maxLeverage, params.maxMarketValueUSD),\n\n                _fundingParameters(params),\n\n                MarketSizeDetails(market.marketSize(), _marketSizes(market), marketDebt, market.marketSkew()),\n\n                PriceDetails(price, invalid)\n\n            );\n",
          "message": "Function 'FuturesMarketData._marketDetails' (FuturesMarketData.sol#454-473) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": 503,
          "vulnerability_code": "    function _position(IFuturesMarket market, address account)\n\n        internal\n\n        view\n\n        returns (IFuturesMarketBaseTypes.Position memory)\n\n    {\n\n        (\n\n            uint64 positionId,\n\n            uint64 positionEntryIndex,\n\n            uint128 positionMargin,\n\n            uint128 positionEntryPrice,\n\n            int128 positionSize\n\n        ) = market.positions(account);\n\n        return\n\n            IFuturesMarketBaseTypes.Position(\n\n                positionId,\n\n                positionEntryIndex,\n\n                positionMargin,\n\n                positionEntryPrice,\n\n                positionSize\n\n            );\n",
          "message": "Function 'FuturesMarketData._position' (FuturesMarketData.sol#483-503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": 508,
          "vulnerability_code": "    function _notionalValue(IFuturesMarket market, address account) internal view returns (int) {\n\n        (int value, ) = market.notionalValue(account);\n\n        return value;\n",
          "message": "Function 'FuturesMarketData._notionalValue' (FuturesMarketData.sol#505-508) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": 513,
          "vulnerability_code": "    function _profitLoss(IFuturesMarket market, address account) internal view returns (int) {\n\n        (int value, ) = market.profitLoss(account);\n\n        return value;\n",
          "message": "Function 'FuturesMarketData._profitLoss' (FuturesMarketData.sol#510-513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": 518,
          "vulnerability_code": "    function _accruedFunding(IFuturesMarket market, address account) internal view returns (int) {\n\n        (int value, ) = market.accruedFunding(account);\n\n        return value;\n",
          "message": "Function 'FuturesMarketData._accruedFunding' (FuturesMarketData.sol#515-518) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": 523,
          "vulnerability_code": "    function _remainingMargin(IFuturesMarket market, address account) internal view returns (uint) {\n\n        (uint value, ) = market.remainingMargin(account);\n\n        return value;\n",
          "message": "Function 'FuturesMarketData._remainingMargin' (FuturesMarketData.sol#520-523) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": 528,
          "vulnerability_code": "    function _accessibleMargin(IFuturesMarket market, address account) internal view returns (uint) {\n\n        (uint value, ) = market.accessibleMargin(account);\n\n        return value;\n",
          "message": "Function 'FuturesMarketData._accessibleMargin' (FuturesMarketData.sol#525-528) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": 533,
          "vulnerability_code": "    function _liquidationPrice(IFuturesMarket market, address account) internal view returns (uint) {\n\n        (uint liquidationPrice, ) = market.liquidationPrice(account);\n\n        return liquidationPrice;\n",
          "message": "Function 'FuturesMarketData._liquidationPrice' (FuturesMarketData.sol#530-533) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": 547,
          "vulnerability_code": "    function _positionDetails(IFuturesMarket market, address account) internal view returns (PositionData memory) {\n\n        return\n\n            PositionData(\n\n                _position(market, account),\n\n                _notionalValue(market, account),\n\n                _profitLoss(market, account),\n\n                _accruedFunding(market, account),\n\n                _remainingMargin(market, account),\n\n                _accessibleMargin(market, account),\n\n                _liquidationPrice(market, account),\n\n                market.canLiquidate(account)\n\n            );\n",
          "message": "Function 'FuturesMarketData._positionDetails' (FuturesMarketData.sol#535-547) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i; i < numMarkets; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function assetPrice() external view returns (uint price, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function marketSizes() external view returns (uint long, uint short);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function marketDebt() external view returns (uint debt, bool isInvalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unrecordedFunding() external view returns (int funding, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function notionalValue(address account) external view returns (int value, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function profitLoss(address account) external view returns (int pnl, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accruedFunding(address account) external view returns (int funding, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function liquidationPrice(address account) external view returns (uint price, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function orderFee(int sizeDelta) external view returns (uint fee, bool invalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalDebt() external view returns (uint debt, bool isInvalid);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}