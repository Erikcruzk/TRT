{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paymentEnable, \"Not payable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paymentEnable, \"Not payable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_11"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    receive() external payable {\n\n        require(paymentEnable, \"Not payable\");\n",
          "message": "Contract locking ether found in PayableRevert.sol:\n\tContract PayableRevert has payable functions:\n\t - fallback (PayableRevert.sol#36-38)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function disablePayment() public {\n\n        paymentEnable = false;\n",
          "message": "PayableRevert.disablePayment (PayableRevert.sol#24-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function enablePayment() public {\n\n        paymentEnable = true;\n",
          "message": "PayableRevert.enablePayment (PayableRevert.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function changeDisputeResolutionAddress(address withdrawalDelayerAddress)\n\n        public\n\n    {\n\n        IWithdrawalDelayer(withdrawalDelayerAddress)\n\n            .changeDisputeResolutionAddress();\n",
          "message": "PayableRevert.changeDisputeResolutionAddress (PayableRevert.sol#40-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function escapeHatchWithdrawal(\n\n        address withdrawalDelayerAddress,\n\n        address _to,\n\n        address _token,\n\n        uint256 _amount\n\n    ) public {\n\n        IWithdrawalDelayer(withdrawalDelayerAddress).escapeHatchWithdrawal(\n\n            _to,\n\n            _token,\n\n            _amount\n\n        );\n",
          "message": "PayableRevert.escapeHatchWithdrawal (PayableRevert.sol#47-58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function setHermezGovernanceDAOAddress(\n\n        address withdrawalDelayerAddress,\n\n        address newAddress\n\n    ) public {\n\n        IWithdrawalDelayer(withdrawalDelayerAddress)\n\n            .setHermezGovernanceDAOAddress(newAddress);\n",
          "message": "PayableRevert.setHermezGovernanceDAOAddress (PayableRevert.sol#60-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 75,
          "vulnerability_code": "    function setWhiteHackGroupAddress(\n\n        address withdrawalDelayerAddress,\n\n        address payable newAddress\n\n    ) public {\n\n        IWithdrawalDelayer(withdrawalDelayerAddress).setWhiteHackGroupAddress(\n\n            newAddress\n\n        );\n",
          "message": "PayableRevert.setWhiteHackGroupAddress (PayableRevert.sol#68-75) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in PayableRevert.sol:\n\t- pragma solidity^0.6.0 (PayableRevert.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of PayableRevert.escapeHatchWithdrawal (PayableRevert.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of PayableRevert.escapeHatchWithdrawal (PayableRevert.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of PayableRevert.escapeHatchWithdrawal (PayableRevert.sol#51) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWhiteHackGroupAddress(address payable newAddress) external;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback() external payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(paymentEnable, \"Not payable\");\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IWithdrawalDelayer(withdrawalDelayerAddress)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IWithdrawalDelayer(withdrawalDelayerAddress)\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IWithdrawalDelayer(withdrawalDelayerAddress).setWhiteHackGroupAddress(\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IWithdrawalDelayer(withdrawalDelayerAddress).escapeHatchWithdrawal(\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}