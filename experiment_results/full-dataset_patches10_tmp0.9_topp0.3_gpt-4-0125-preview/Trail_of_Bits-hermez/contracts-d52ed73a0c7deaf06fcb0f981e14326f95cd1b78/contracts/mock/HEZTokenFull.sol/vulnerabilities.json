{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address initialHolder) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _mint(initialHolder, initialBalance);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, ERROR_ADD_OVERFLOW);\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, ERROR_SUB_UNDERFLOW);\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "            recoveredAddress != address(0) && recoveredAddress == signer,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::_validateSignedData: INVALID_SIGNATURE\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            to != address(this) && to != address(0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::_transfer: NOT_VALID_TRANSFER\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(deadline >= block.timestamp, \"HEZ::permit: AUTH_EXPIRED\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "            block.timestamp > validAfter,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::transferWithAuthorization: AUTH_NOT_YET_VALID\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "            block.timestamp < validBefore,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::transferWithAuthorization: AUTH_EXPIRED\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !authorizationState[from][nonce],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::transferWithAuthorization: AUTH_ALREADY_USED\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "            recoveredAddress != address(0) && recoveredAddress == signer,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::_validateSignedData: INVALID_SIGNATURE\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            to != address(this) && to != address(0),\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::_transfer: NOT_VALID_TRANSFER\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "            recoveredAddress != address(0) && recoveredAddress == signer,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::_validateSignedData: INVALID_SIGNATURE\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "            to != address(this) && to != address(0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::_transfer: NOT_VALID_TRANSFER\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "            block.timestamp > validAfter,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::transferWithAuthorization: AUTH_NOT_YET_VALID\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "            block.timestamp < validBefore,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::transferWithAuthorization: AUTH_EXPIRED\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !authorizationState[from][nonce],\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"HEZ::transferWithAuthorization: AUTH_ALREADY_USED\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function getChainId() public pure returns (uint256 chainId) {\n\n        assembly {\n\n            chainId := chainid()\n\n        }\n",
          "message": "HEZ.getChainId (HEZTokenFull.sol#118-122) is declared view but contains assembly code\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function permit(\n\n        address owner,\n\n        address spender,\n\n        uint256 value,\n\n        uint256 deadline,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s\n\n    ) external {\n\n        require(deadline >= block.timestamp, \"HEZ::permit: AUTH_EXPIRED\");\n\n        bytes32 encodeData = keccak256(\n\n            abi.encode(\n\n                PERMIT_TYPEHASH,\n\n                owner,\n\n                spender,\n\n                value,\n\n                nonces[owner]++,\n\n                deadline\n\n            )\n\n        );\n\n        _validateSignedData(owner, encodeData, v, r, s);\n\n        _approve(owner, spender, value);\n",
          "message": "HEZ.permit (HEZTokenFull.sol#196-218) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(deadline >= block.timestamp,HEZ::permit: AUTH_EXPIRED) (HEZTokenFull.sol#205)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 260,
          "vulnerability_code": "    function transferWithAuthorization(\n\n        address from,\n\n        address to,\n\n        uint256 value,\n\n        uint256 validAfter,\n\n        uint256 validBefore,\n\n        bytes32 nonce,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s\n\n    ) external {\n\n        require(\n\n            block.timestamp > validAfter,\n\n            \"HEZ::transferWithAuthorization: AUTH_NOT_YET_VALID\"\n\n        );\n\n        require(\n\n            block.timestamp < validBefore,\n\n            \"HEZ::transferWithAuthorization: AUTH_EXPIRED\"\n\n        );\n\n        require(\n\n            !authorizationState[from][nonce],\n\n            \"HEZ::transferWithAuthorization: AUTH_ALREADY_USED\"\n\n        );\n\n\n\n        bytes32 encodeData = keccak256(\n\n            abi.encode(\n\n                TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\n\n                from,\n\n                to,\n\n                value,\n\n                validAfter,\n\n                validBefore,\n\n                nonce\n\n            )\n\n        );\n\n        _validateSignedData(from, encodeData, v, r, s);\n\n\n\n        authorizationState[from][nonce] = true;\n\n        _transfer(from, to, value);\n\n        emit AuthorizationUsed(from, nonce);\n",
          "message": "HEZ.transferWithAuthorization (HEZTokenFull.sol#220-260) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp < validBefore,HEZ::transferWithAuthorization: AUTH_EXPIRED) (HEZTokenFull.sol#235-238)\n\t- require(bool,string)(block.timestamp > validAfter,HEZ::transferWithAuthorization: AUTH_NOT_YET_VALID) (HEZTokenFull.sol#231-234)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function getChainId() public pure returns (uint256 chainId) {\n\n        assembly {\n\n            chainId := chainid()\n\n        }\n",
          "message": "HEZ.getChainId uses assembly (HEZTokenFull.sol#118-122)\n\t- HEZTokenFull.sol#119-121\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount)\n\n        external\n",
          "message": "IERC20.transfer (HEZTokenFull.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function transfer(address to, uint256 value)\n\n        public\n\n        virtual\n\n        override\n\n        returns (bool)\n\n    {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
          "message": "HEZ.transfer (HEZTokenFull.sol#173-181) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": 194,
          "vulnerability_code": "    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public virtual override returns (bool) {\n\n        uint256 fromAllowance = allowance[from][msg.sender];\n\n        if (fromAllowance != uint256(-1)) {\n\n            allowance[from][msg.sender] = fromAllowance.sub(value);\n\n        }\n\n        _transfer(from, to, value);\n\n        return true;\n",
          "message": "HEZ.transferFrom (HEZTokenFull.sol#183-194) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n",
          "message": "IERC20.transferFrom (HEZTokenFull.sol#23-27) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.12;\n",
          "message": "Detected issues with version pragma in HEZTokenFull.sol:\n\t- pragma solidity0.6.12 (HEZTokenFull.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function _validateSignedData(\n\n        address signer,\n\n        bytes32 encodeData,\n\n        uint8 v,\n\n        bytes32 r,\n\n        bytes32 s\n\n    ) internal view {\n\n        bytes32 domainSeparator = keccak256(\n\n            abi.encode(\n\n                EIP712DOMAIN_HASH,\n\n                NAME_HASH,\n\n                VERSION_HASH,\n\n                getChainId(),\n\n                address(this)\n\n            )\n\n        );\n\n\n\n        bytes32 digest = keccak256(\n\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, encodeData)\n\n        );\n\n        address recoveredAddress = ecrecover(digest, v, r, s);\n\n        require(\n\n            recoveredAddress != address(0) && recoveredAddress == signer,\n\n            \"HEZ::_validateSignedData: INVALID_SIGNATURE\"\n\n        );\n",
          "message": "Function 'HEZ._validateSignedData' (HEZTokenFull.sol#91-116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 128,
          "vulnerability_code": "    function _mint(address to, uint256 value) internal {\n\n        totalSupply = totalSupply.add(value);\n\n        balanceOf[to] = balanceOf[to].add(value);\n\n        emit Transfer(address(0), to, value);\n",
          "message": "Function 'HEZ._mint' (HEZTokenFull.sol#124-128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function _burn(address from, uint256 value) internal {\n\n        balanceOf[from] = balanceOf[from].sub(value);\n\n        totalSupply = totalSupply.sub(value);\n\n        emit Transfer(from, address(0), value);\n",
          "message": "Function 'HEZ._burn' (HEZTokenFull.sol#130-134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": 143,
          "vulnerability_code": "    function _approve(\n\n        address owner,\n\n        address spender,\n\n        uint256 value\n\n    ) private {\n\n        allowance[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
          "message": "Function 'HEZ._approve' (HEZTokenFull.sol#136-143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": 157,
          "vulnerability_code": "    function _transfer(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) private {\n\n        require(\n\n            to != address(this) && to != address(0),\n\n            \"HEZ::_transfer: NOT_VALID_TRANSFER\"\n\n        );\n\n        balanceOf[from] = balanceOf[from].sub(value);\n\n        balanceOf[to] = balanceOf[to].add(value);\n\n        emit Transfer(from, to, value);\n",
          "message": "Function 'HEZ._transfer' (HEZTokenFull.sol#145-157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public constant initialBalance = 100_000_000 * (1e18);\n",
          "message": "Constant 'HEZ.initialBalance' (HEZTokenFull.sol#60) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getChainId() public pure returns (uint256 chainId) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_ADD_OVERFLOW = \"MATH:ADD_OVERFLOW\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant ERROR_SUB_UNDERFLOW = \"MATH:SUB_UNDERFLOW\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getChainId() public pure returns (uint256 chainId) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public constant initialBalance = 100_000_000 * (1e18);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public constant initialBalance = 100_000_000 * (1e18);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}