function beginMigration(address targetPoolAddress) external {
    require(targetPoolAddress != address(0), "Target pool cannot be zero address");
    require(msg.sender == _addressesProvider.getPoolAdmin(), "Only pool admin can migrate");

    uint256 reservesCount = _reservesCount;
    address[] memory reservesList = new address[](reservesCount);
    
    for (uint256 i = 0; i < reservesCount; ++i) {
        reservesList[i] = _reservesList[i];
        DataTypes.ReserveData storage reserve = _reserves[reservesList[i]];
        
        // Migrating liquidity
        uint256 availableLiquidity = IERC20(reservesList[i]).balanceOf(reserve.aTokenAddress);
        if (availableLiquidity > 0) {
            IAToken(reserve.aTokenAddress).transferUnderlyingTo(targetPoolAddress, availableLiquidity);
        }

        // Migrating variable debt
        uint256 variableDebt = IERC20(reserve.variableDebtTokenAddress).totalSupply();
        if (variableDebt > 0) {
            IVariableDebtToken(reserve.variableDebtTokenAddress).transferUnderlyingTo(targetPoolAddress, variableDebt);
        }

        // Migrating stable debt
        uint256 stableDebt = IERC20(reserve.stableDebtTokenAddress).totalSupply();
        if (stableDebt > 0) {
            IStableDebtToken(reserve.stableDebtTokenAddress).transferUnderlyingTo(targetPoolAddress, stableDebt);
        }
    }
}