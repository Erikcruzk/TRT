function beginMigration(address _newProvider) external onlyOwner {
  //require that this contract has no ETH balance
  require(address(this).balance == 0, "Contract balance must be 0");
  //transfer ownership of all aTokens, debt tokens, and interest rate strategies to new Pool
  for (uint256 i = 0; i < _reservesList.length; i++) {
    address asset = _reservesList[i];
    DataTypes.ReserveData storage reserve = _reserves[asset];
    // Only if the reserve has been initialized, to prevent errors on uninitialized reserves
    if (reserve.aTokenAddress != address(0)) {
      emit ReserveDataUpdated(
        asset,
        reserve.currentLiquidityRate,
        reserve.currentStableBorrowRate,
        reserve.currentVariableBorrowRate,
        reserve.liquidityIndex,
        reserve.variableBorrowIndex,
        block.timestamp
      );
      IAaveIncentivesController aTokenIncentiveController = IAaveIncentivesController(
        IAToken(reserve.aTokenAddress).getIncentivesController()
      );
      if (address(aTokenIncentiveController) != address(0)) {
        aTokenIncentiveController.beginMigration(_newProvider);
      }
      IAToken(reserve.aTokenAddress).transferUnderlyingTo(_newProvider, IERC20(asset).balanceOf(reserve.aTokenAddress));

      IAaveIncentivesController variableDebtIncentiveController = IAaveIncentivesController(
        IVariableDebtToken(reserve.variableDebtTokenAddress).getIncentivesController()
      );
      if (address(variableDebtIncentiveController) != address(0)) {
        variableDebtIncentiveController.beginMigration(_newProvider);
      }
      IVariableDebtToken(reserve.variableDebtTokenAddress).transferUnderlyingTo(
        _newProvider,
        IERC20(asset).balanceOf(reserve.variableDebtTokenAddress)
      );

      if (reserve.stableDebtTokenAddress != address(0)) {
        IAaveIncentivesController stableDebtIncentiveController = IAaveIncentivesController(
          IStableDebtToken(reserve.stableDebtTokenAddress).getIncentivesController()
        );
        if (address(stableDebtIncentiveController) != address(0)) {
          stableDebtIncentiveController.beginMigration(_newProvider);
        }
        IStableDebtToken(reserve.stableDebtTokenAddress).transferUnderlyingTo(
          _newProvider,
          IERC20(asset).balanceOf(reserve.stableDebtTokenAddress)
        );
      }
    }
  }
  //transfer ownership of pool configurer to new Pool
  IPoolConfigurator poolConfigurator = IPoolConfigurator(_addressesProvider.getPoolConfigurator());
  poolConfigurator.transferOwnership(_newProvider);
  //transfer ownership of pool data provider to new Pool
  poolConfigurator.transferOwnership(_newProvider);
  //transfer admin rights of addressesProvider to new Pool
  _addressesProvider.transferOwnership(_newProvider);
}