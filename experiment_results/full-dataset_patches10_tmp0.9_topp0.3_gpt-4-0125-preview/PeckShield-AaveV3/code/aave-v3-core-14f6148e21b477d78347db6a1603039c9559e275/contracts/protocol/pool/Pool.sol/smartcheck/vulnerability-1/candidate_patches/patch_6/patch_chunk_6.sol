function beginMigration(address targetPool) external onlyPoolAdmin {
    address[] memory reserves = getReservesList();

    address currentPoolAddress = address(this);
    address lendingPoolAddressProvider = address(_addressesProvider);

    for (uint256 i = 0; i < reserves.length; i++) {
        address reserve = reserves[i];

        DataTypes.ReserveData memory reserveData = _reserves[reserve];
        DataTypes.EModeCategory memory eModeCategoryData = _eModeCategories[reserveData.id]; // Incorrect use of reserve ID to access eModeCategory

        IERC20(reserve).safeApprove(targetPool, 0);
        IERC20(reserve).safeApprove(targetPool, type(uint256).max);

        IERC20(reserveData.aTokenAddress).safeApprove(targetPool, 0);
        IERC20(reserveData.aTokenAddress).safeApprove(targetPool, type(uint256).max);

        IERC20(reserveData.stableDebtTokenAddress).safeApprove(targetPool, 0);
        IERC20(reserveData.stableDebtTokenAddress).safeApprove(targetPool, type(uint256).max);

        IERC20(reserveData.variableDebtTokenAddress).safeApprove(targetPool, 0);
        IERC20(reserveData.variableDebtTokenAddress).safeApprove(targetPool, type(uint256).max);

        emit ReserveMigrated(
            reserve,
            currentPoolAddress,
            targetPool,
            lendingPoolAddressProvider
        );
    }
}