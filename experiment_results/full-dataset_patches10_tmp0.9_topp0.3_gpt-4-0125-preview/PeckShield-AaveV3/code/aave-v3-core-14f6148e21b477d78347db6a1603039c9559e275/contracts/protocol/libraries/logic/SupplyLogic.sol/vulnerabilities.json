{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 4403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < assets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 4403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < assets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "      'SafeERC20: approve from non-zero to non-zero allowance'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'SafeERC20: low-level call failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4262,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (stableRatePreviousTimestamp < uint40(block.timestamp) &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (variableDebtPreviousIndex < reserveCache.nextVariableBorrowIndex &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4265,
          "vulnerability_to_line": null,
          "vulnerability_code": "          DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4266,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Errors.VL_SAME_BLOCK_BORROW_REPAY\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4270,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (stableDebt > 0 &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4272,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (variableDebt > 0 &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4273,
          "vulnerability_to_line": null,
          "vulnerability_code": "          DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4274,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Errors.VL_NO_DEBT_OF_SELECTED_TYPE\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4369,
          "vulnerability_to_line": null,
          "vulnerability_code": "      usageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        currentLiquidityRate <=\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4371,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4372,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Errors.P_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4449,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4450,
          "vulnerability_to_line": null,
          "vulnerability_code": "      vars.collateralReserveActive && vars.principalReserveActive,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4451,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Errors.VL_NO_ACTIVE_RESERVE\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4454,
          "vulnerability_to_line": null,
          "vulnerability_code": "      !vars.collateralReservePaused && !vars.principalReservePaused,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4455,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Errors.VL_RESERVE_PAUSED\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4834,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        !isolationModeActive &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4836,
          "vulnerability_to_line": null,
          "vulnerability_code": "          (reserveCache.reserveConfiguration.getDebtCeiling() == 0 ||\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4837,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !userConfig.isUsingAsCollateralAny()),\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Errors.SL_USER_IN_ISOLATION_MODE\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 4839,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3833,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (vars.liquidationThreshold != 0 && params.userConfig.isUsingAsCollateral(vars.i)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.normalizedIncome = currentReserve.getNormalizedIncome();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3835,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.userBalance = IScaledBalanceToken(currentReserve.aTokenAddress).scaledBalanceOf(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3836,
          "vulnerability_to_line": null,
          "vulnerability_code": "          params.user\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.userBalance = vars.userBalance.rayMul(vars.normalizedIncome);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3839,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.userBalanceInBaseCurrency = (vars.assetPrice * vars.userBalance);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3841,
          "vulnerability_to_line": null,
          "vulnerability_code": "        unchecked {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 3842,
          "vulnerability_to_line": null,
          "vulnerability_code": "          vars.userBalanceInBaseCurrency /= vars.assetUnit;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4698,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ((!isolationModeActive && (reserveCache.reserveConfiguration.getDebtCeiling() == 0)) ||\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4700,
          "vulnerability_to_line": null,
          "vulnerability_code": "          !userConfig.isUsingAsCollateralAny())\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4701,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userConfig.setUsingAsCollateral(reserve.id, true);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4703,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit ReserveUsedAsCollateralEnabled(params.asset, params.onBehalfOf);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4704,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4803,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (params.balanceToBefore == 0 && params.amount != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4804,
          "vulnerability_to_line": null,
          "vulnerability_code": "        DataTypes.UserConfigurationMap storage toConfig = usersConfig[params.to];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4805,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool isolationModeActive, , ) = toConfig.getIsolationModeState(reserves, reservesList);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4806,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!isolationModeActive) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4807,
          "vulnerability_to_line": null,
          "vulnerability_code": "          toConfig.setUsingAsCollateral(reserveId, true);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4808,
          "vulnerability_to_line": null,
          "vulnerability_code": "          emit ReserveUsedAsCollateralEnabled(params.asset, params.to);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4809,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 4810,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < assets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 4613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < reservesCount; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "      'SafeERC20: approve from non-zero to non-zero allowance'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2905,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return (false, address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 2916,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return (false, address(0), 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXACT_TIME",
          "vulnerability_from_line": 3388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (timestamp == uint40(block.timestamp)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXACT_TIME",
          "vulnerability_from_line": 3415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (timestamp == uint40(block.timestamp)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 4403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < assets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 4403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < assets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 3798,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while (vars.i < params.reservesCount) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1071,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1582,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1597,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burn(address user, uint256 amount) external returns (uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1647,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1681,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1734,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (bool, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2150,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2654,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2686,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2716,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256, uint256)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 2898,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 3169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 3771,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 4488,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) internal view returns (uint256, bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function flashLoan(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1050,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function flashLoanSimple(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1782,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function executeOperation(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1839,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call{value: amount}('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call{value: amount}('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call{value: amount}('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1030,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata assets,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata modes,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata modes,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1033,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address onBehalfOf,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1034,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1035,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint16 referralCode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1054,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1055,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint16 referralCode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1784,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1785,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata premiums,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1785,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata premiums,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1786,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address initiator,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1787,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1788,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1844,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string calldata aTokenName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1845,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string calldata aTokenSymbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1845,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string calldata aTokenSymbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1846,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2176,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2177,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2178,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2179,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2180,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2181,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2182,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2183,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2184,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2185,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2186,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2187,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2188,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2189,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2191,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2194,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2195,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2196,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2197,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2201,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant IS_PAUSED_START_BIT_POSITION = 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2203,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant BORROW_CAP_START_BIT_POSITION = 80;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2205,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant SUPPLY_CAP_START_BIT_POSITION = 116;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2206,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant EMODE_CATEGORY_START_BIT_POSITION = 168;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2208,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2209,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant DEBT_CEILING_START_BIT_POSITION = 212;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2211,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_LTV = 65535;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2212,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2213,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2214,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_DECIMALS = 255;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2216,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_BORROW_CAP = 68719476735;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2217,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_SUPPLY_CAP = 68719476735;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2218,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 10000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2219,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_EMODE_CATEGORY = 255;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2220,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2221,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant MAX_VALID_DEBT_CEILING = 1099511627775;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2222,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant DEBT_CEILING_DECIMALS = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3095,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3096,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3815,
          "vulnerability_to_line": null,
          "vulnerability_code": "      DataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3817,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3819,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.liquidationThreshold,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3821,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.decimals,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3823,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.eModeAssetCategory\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3824,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ) = currentReserve.configuration.getParams();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3824,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ) = currentReserve.configuration.getParams();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.assetUnit = 10**vars.decimals;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 3827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vars.assetUnit = 10**vars.decimals;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}