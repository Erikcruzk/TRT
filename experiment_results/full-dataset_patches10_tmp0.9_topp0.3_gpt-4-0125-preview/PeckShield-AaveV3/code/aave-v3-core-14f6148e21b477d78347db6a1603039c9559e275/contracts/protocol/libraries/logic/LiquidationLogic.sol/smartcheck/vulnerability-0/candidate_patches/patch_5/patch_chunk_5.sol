function beginMigration(address _newProvider) external override onlyPoolAdmin {
    require(_newProvider != address(0), Errors.LPCM_NO_NEW_IMPLEMENTATION);
    address oldLendingPool = addressesProvider.getLendingPool();
    address oldAToken = IInitializablePoolToken(oldLendingPool).getAToken();
    address oldStableDebtToken = IInitializablePoolToken(oldLendingPool).getStableDebtToken();
    address oldVariableDebtToken = IInitializablePoolToken(oldLendingPool).getVariableDebtToken();
    require(oldAToken != address(0), Errors.LPCM_NO_ATOKEN_SET);
    require(oldStableDebtToken != address(0), Errors.LPCM_NO_STABLE_DEBT_TOKEN_SET);
    require(oldVariableDebtToken != address(0), Errors.LPCM_NO_VARIABLE_DEBT_TOKEN_SET);
    address newLendingPool = IPoolAddressesProvider(_newProvider).getLendingPool();
    address newAToken = IInitializablePoolToken(newLendingPool).getAToken();
    address newStableDebtToken = IInitializablePoolToken(newLendingPool).getStableDebtToken();
    address newVariableDebtToken = IInitializablePoolToken(newLendingPool).getVariableDebtToken();

    // Ensure the current block timestamp is not used to ensure a predictable outcome
    uint256 timestamp = uint40(block.timestamp);

    require(newAToken != address(0) && newStableDebtToken != address(0) && newVariableDebtToken != address(0), Errors.LPCM_NO_NEW_RESERVE);
    _migrateReserve(addressesProvider, oldAToken, newAToken, timestamp);
    _migrateReserve(addressesProvider, oldStableDebtToken, newStableDebtToken, timestamp);
    _migrateReserve(addressesProvider, oldVariableDebtToken, newVariableDebtToken, timestamp);
}