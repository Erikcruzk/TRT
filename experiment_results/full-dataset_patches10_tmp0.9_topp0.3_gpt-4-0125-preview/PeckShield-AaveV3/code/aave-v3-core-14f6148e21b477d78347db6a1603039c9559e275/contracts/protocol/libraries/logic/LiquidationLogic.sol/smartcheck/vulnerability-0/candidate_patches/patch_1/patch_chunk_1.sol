function beginMigration(bytes32 flags, address target) external override {
    require(!migration, "MIGRATION_ALREADY_BEGUN");
    migration = true;

    uint256 length = reservesList.length;
    for (uint256 i; i < length; ++i) {
        address asset = reservesList[i];
        DataTypes.ReserveData storage reserve = _reserves[asset];

        emit ReserveDataUpdated(
            asset,
            reserve.currentLiquidityRate,
            reserve.currentStableBorrowRate,
            reserve.currentVariableBorrowRate,
            reserve.liquidityIndex,
            reserve.variableBorrowIndex
        );

        address aTokenAddress = reserve.aTokenAddress;
        emit ATokenUpgraded(
            asset,
            aTokenAddress,
            IInitializableAToken(aTokenAddress).UNDERLYING_ASSET_ADDRESS(),
            target
        );

        address stableDebtAddress = reserve.stableDebtTokenAddress;
        emit StableDebtTokenUpgraded(
            asset,
            stableDebtAddress,
            IInitializableDebtToken(stableDebtAddress).UNDERLYING_ASSET_ADDRESS(),
            target
        );

        address variableDebtAddress = reserve.variableDebtTokenAddress;
        emit VariableDebtTokenUpgraded(
            asset,
            variableDebtAddress,
            IInitializableDebtToken(variableDebtAddress).UNDERLYING_ASSET_ADDRESS(),
            target
        );
    }

    pool.setPoolAdmin(target);
    pool.setEmergencyAdmin(target);
    address[] memory reserves = pool.getReservesList();
    for (uint256 i = 0; i < reserves.length; i++) {
        address asset = reserves[i];
        DataTypes.ReserveData memory reserveData = pool.getReserveData(asset);
        IAToken aToken = IAToken(reserveData.aTokenAddress);
        IStableDebtToken stableDebtToken = IStableDebtToken(reserveData.stableDebtTokenAddress);
        IVariableDebtToken variableDebtToken = IVariableDebtToken(reserveData.variableDebtTokenAddress);

        DataTypes.EModeCategory memory category = pool.getEModeCategory(reserveData.id);
        if (category.label != bytes32(0)) {
            IReserveInterestRateStrategy interestRateStrategy = IReserveInterestRateStrategy(_addressesProvider.getInterestRateStrategyAddress());
            pool.configureEModeCategory(
                uint8(reserveData.id),
                DataTypes.EModeCategory({
                    ltv: category.ltv,
                    liquidationThreshold: category.liquidationThreshold,
                    liquidationBonus: category.liquidationBonus,
                    priceSource: category.priceSource,
                    label: category.label
                })
            );
        }
        aToken.transferUnderlyingTo(pool, aToken.balanceOf(address(this)));
        stableDebtToken.transferUnderlyingTo(pool, stableDebtToken.totalSupply());
        variableDebtToken.transferUnderlyingTo(pool, variableDebtToken.totalSupply());
    }
}