function beginMigration(address newPool) external override onlyPoolAdmin {
    _migration = true;
    IPool newPoolContract = IPool(newPool);
    address[] memory reserves = getReservesList();

    for (uint256 i = 0; i < reserves.length; i++) {
      DataTypes.ReserveData memory currentReserveData = _reserves[reserves[i]];
      address aTokenAddress = currentReserveData.aTokenAddress;
      IAaveIncentivesController incentivesController = IAaveIncentivesController(
        IInitializableAToken(aTokenAddress).getIncentivesController()
      );
      incentivesController.handleAction(aTokenAddress, 0, 0);

      address stableDebtAddress = currentReserveData.stableDebtTokenAddress;
      incentivesController = IAaveIncentivesController(
        IInitializableDebtToken(stableDebtAddress).getIncentivesController()
      );
      incentivesController.handleAction(stableDebtAddress, 0, 0);

      address variableDebtAddress = currentReserveData.variableDebtTokenAddress;
      incentivesController = IAaveIncentivesController(
        IInitializableDebtToken(variableDebtAddress).getIncentivesController()
      );
      incentivesController.handleAction(variableDebtAddress, 0, 0);
    }

    for (uint256 i = 0; i < reserves.length; i++) {
      // Migrate reserve data
      DataTypes.ReserveData memory currentReserveData = _reserves[reserves[i]];
      ConfiguratorLogic.updateAToken(
        newPoolContract,
        ConfiguratorInputTypes.UpdateATokenInput({
          asset: reserves[i],
          treasury: _addressesProvider.getTreasuryAddress(),
          incentivesController: address(
            IInitializableAToken(currentReserveData.aTokenAddress).getIncentivesController()
          ),
          name: IERC20Metadata(currentReserveData.aTokenAddress).name(),
          symbol: IERC20Metadata(currentReserveData.aTokenAddress).symbol(),
          implementation: currentReserveData.aTokenAddress,
          params: ""
        })
      );

      ConfiguratorLogic.updateStableDebtToken(
        newPoolContract,
        ConfiguratorInputTypes.UpdateDebtTokenInput({
          asset: reserves[i],
          incentivesController: address(
            IInitializableDebtToken(currentReserveData.stableDebtTokenAddress).getIncentivesController()
          ),
          name: IERC20Metadata(currentReserveData.stableDebtTokenAddress).name(),
          symbol: IERC20Metadata(currentReserveData.stableDebtTokenAddress).symbol(),
          implementation: currentReserveData.stableDebtTokenAddress,
          params: ""
        })
      );

      ConfiguratorLogic.updateVariableDebtToken(
        newPoolContract,
        ConfiguratorInputTypes.UpdateDebtTokenInput({
          asset: reserves[i],
          incentivesController: address(
            IInitializableDebtToken(currentReserveData.variableDebtTokenAddress).getIncentivesController()
          ),
          name: IERC20Metadata(currentReserveData.variableDebtTokenAddress).name(),
          symbol: IERC20Metadata(currentReserveData.variableDebtTokenAddress).symbol(),
          implementation: currentReserveData.variableDebtTokenAddress,
          params: ""
        })
      );
    }

    // Trigger emergency shutdown in the old pool
    _setPoolPause(true);

    emit MigrationStarted(newPool, address(this));
  }