{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c < 256, \"uint8 mul triggered integer overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"uint8 sub triggered integer underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"uint8 add triggered integer overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c < 256, \"uint8 mul triggered integer overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"uint8 sub triggered integer underflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"uint8 add triggered integer overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <= 0.6.0;\n",
          "message": "Different versions of Solidity is used in SafeMath8Test.sol:\n\t- Version used: ['>=0.5.0<0.6.0', '>=0.5.0<=0.6.0']\n\t- SafeMath8Test.sol#3 declares pragma solidity>=0.5.0<=0.6.0\n\t- SafeMath8Test.sol#63-65 declares pragma solidity>=0.5.0<0.6.0\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function _mul(uint8 a, uint8 b) public pure returns (uint8) {\n\n        return(a.mul(b));\n\n    }\n\n\n",
          "message": "SafeMath8Test._mul (SafeMath8Test.sol#68-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function _add(uint8 a, uint8 b) public pure returns (uint8) {\n\n        return(a.add(b));\n\n    }\n\n\n",
          "message": "SafeMath8Test._add (SafeMath8Test.sol#72-76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 79,
          "vulnerability_code": "    function _sub(uint8 a, uint8 b) public pure returns (uint8) {\n\n        return(a.sub(b));\n\n    }\n",
          "message": "SafeMath8Test._sub (SafeMath8Test.sol#76-79) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <= 0.6.0;\n",
          "message": "Detected issues with version pragma in SafeMath8Test.sol:\n\t- pragma solidity>=0.5.0<=0.6.0 (SafeMath8Test.sol#3): is has a complex pragma\n\t- pragma solidity>=0.5.0<0.6.0 (SafeMath8Test.sol#63-65): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function _mul(uint8 a, uint8 b) public pure returns (uint8) {\n\n        return(a.mul(b));\n\n    }\n\n\n",
          "message": "Function 'SafeMath8Test._mul' (SafeMath8Test.sol#68-72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function _add(uint8 a, uint8 b) public pure returns (uint8) {\n\n        return(a.add(b));\n\n    }\n\n\n",
          "message": "Function 'SafeMath8Test._add' (SafeMath8Test.sol#72-76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 79,
          "vulnerability_code": "    function _sub(uint8 a, uint8 b) public pure returns (uint8) {\n\n        return(a.sub(b));\n\n    }\n",
          "message": "Function 'SafeMath8Test._sub' (SafeMath8Test.sol#76-79) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <= 0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <= 0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.0 <0.6.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}