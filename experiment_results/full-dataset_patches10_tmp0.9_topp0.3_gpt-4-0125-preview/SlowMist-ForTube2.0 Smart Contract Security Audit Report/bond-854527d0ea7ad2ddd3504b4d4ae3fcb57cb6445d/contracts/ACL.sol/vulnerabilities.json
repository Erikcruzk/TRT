{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < v.length; ++i) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < execTargets.length; ++i) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nonce += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nonce += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nonce += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nonce += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] memory _owners, uint _owners_size) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_add(_owners[i]), \"added address is already an owner\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owners_size = _owners_size;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < v.length; ++i) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _size; ++i) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < execTargets.length; ++i) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "            accessible(msg.sender, address(this), msg.sig),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"access unauthorized\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_add(_owners[i]), \"added address is already an owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_indexof(who) != 0, \"msg.sender must be owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v.length == r.length && r.length == s.length, \"invalid signatures\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v.length <= _size && v.length >= weights, \"invalid length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_i != 0, \"is not owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(unique[_i - 1] == 0, \"duplicate signature\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_weights >= weights, \"insufficient weights\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pending_owner, \"sender is not pending_owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_add(msg.sender), \"added address is already an owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_indexof(msg.sender) != 0, \"msg.sender is not sys owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pending_admin, \"sender is not pending_admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pending_owner, \"sender is not pending_owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_add(msg.sender), \"added address is already an owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_remove(who), \"removed address is not owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_remove(who), \"removed address is not owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_size() >= owners_size, \"invalid size and weights\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_size() >= owners_size, \"invalid size and weights\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v.length == r.length && r.length == s.length, \"invalid signatures\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(v.length <= _size && v.length >= weights, \"invalid length\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_add(_owners[i]), \"added address is already an owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_add(msg.sender), \"added address is already an owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_add(msg.sender), \"added address is already an owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 244,
          "vulnerability_code": "        uint256 _i = _owners_set.indexes[value];\n\n        address _popv = _owners_set.addresses[_size() - 1];\n\n\n\n        _owners_set.addresses[_i - 1] = _popv;\n\n        _owners_set.addresses.pop();\n\n\n\n        _owners_set.indexes[_popv] = _i;\n\n        delete _owners_set.indexes[value];\n\n\n\n        return true;\n\n    }\n\n\n\n    function _size() internal view returns (uint256) {\n\n        return _owners_set.addresses.length;\n\n    }\n\n\n",
          "message": "Reentrancy in ACL._remove (ACL.sol#228-244):\n\tExternal calls:\n\t- _owners_set.addresses.pop() (ACL.sol#238-240)\n\tState variables written after the call(s):\n\t- _owners_set (ACL.sol#240-241)\n\t- _owners_set (ACL.sol#241-244)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 185,
          "vulnerability_code": "        address who\n\n    ) external {\n\n        bytes32 inputHash = keccak256(abi.encode(who, msg.sender, nonce));\n\n        bytes32 totalHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", inputHash));\n\n        mulsigauth(totalHash, v, r, s, msg.sender);\n\n        require(_remove(who), \"removed address is not owner\");\n\n        require(_size() >= owners_size, \"invalid size and weights\");\n\n        nonce += 1;\n\n    }\n\n\n\n    function updateOwnerSize(\n\n        uint8[] calldata v,\n\n        bytes32[] calldata r,\n",
          "message": "Reentrancy in ACL.remove (ACL.sol#172-185):\n\tExternal calls:\n\t- require(bool,string)(_remove(who),removed address is not owner) (ACL.sol#178-182)\n\tState variables written after the call(s):\n\t- nonce (ACL.sol#185)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": 171,
          "vulnerability_code": "        require(msg.sender == pending_owner, \"sender is not pending_owner\");\n\n        require(_add(msg.sender), \"added address is already an owner\");\n\n        require(_remove(who), \"removed address is not owner\");\n\n        pending_owner = address(0);\n\n    }\n\n\n\n    function remove(\n\n        uint8[] calldata v,\n\n        bytes32[] calldata r,\n",
          "message": "Reentrancy in ACL.replace (ACL.sol#162-171):\n\tExternal calls:\n\t- require(bool,string)(_remove(who),removed address is not owner) (ACL.sol#168-170)\n\tState variables written after the call(s):\n\t- pending_owner (ACL.sol#170-171)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 244,
          "vulnerability_code": "        uint256 _i = _owners_set.indexes[value];\n\n        address _popv = _owners_set.addresses[_size() - 1];\n\n\n\n        _owners_set.addresses[_i - 1] = _popv;\n\n        _owners_set.addresses.pop();\n\n\n\n        _owners_set.indexes[_popv] = _i;\n\n        delete _owners_set.indexes[value];\n\n\n\n        return true;\n\n    }\n\n\n\n    function _size() internal view returns (uint256) {\n\n        return _owners_set.addresses.length;\n\n    }\n\n\n",
          "message": "ACL._remove (ACL.sol#228-244) does not use the value returned by external calls:\n\t-_owners_set.addresses.pop() (ACL.sol#238-240)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_indexof(who) != 0, \"msg.sender must be owner\");\n",
          "message": "ACL.mulsigauth._size (local variable @ ACL.sol#93) shadows:\n\t- ACL._size (function @ ACL.sol#244-247)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 131,
          "vulnerability_code": "    //\u9884\u8bbe\u7f6e @who \u5177\u6709owner\u6743\u9650.\n\n    function proposeOwner(\n",
          "message": "ACL.multiSigSetACLs has external calls inside a loop:\n\t- IReplaceACL(execTargets[i]).setACL(newACL) (ACL.sol#129-131)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Different versions of Solidity is used in ACL.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.0']\n\t- ACL.sol#3 declares pragma solidity^0.6.0\n\t- ACL.sol#4 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 57,
          "vulnerability_code": "        return _owners_set.addresses;\n\n    }\n\n\n\n    constructor(address[] memory _owners, uint _owners_size) public {\n",
          "message": "ACL.owners (ACL.sol#53-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 131,
          "vulnerability_code": "        bytes32[] memory s,\n\n        address[] memory execTargets,\n\n        address newACL) public {\n\n        bytes32 inputHash = keccak256(abi.encode(newACL, msg.sender, nonce));\n\n        bytes32 totalHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", inputHash));\n\n        mulsigauth(totalHash, v, r, s, msg.sender);\n\n        nonce += 1;\n\n        for (uint i = 0; i < execTargets.length; ++i) {\n\n            IReplaceACL(execTargets[i]).setACL(newACL);\n\n        }\n\n    }\n\n\n\n    //\u9884\u8bbe\u7f6e @who \u5177\u6709owner\u6743\u9650.\n\n    function proposeOwner(\n",
          "message": "ACL.multiSigSetACLs (ACL.sol#117-131) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in ACL.sol:\n\t- pragma solidity^0.6.0 (ACL.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 30,
          "vulnerability_code": "        address[] addresses;\n\n        mapping(address => uint256) indexes;\n\n    }\n\n\n",
          "message": "Struct 'ACL.ownerset' (ACL.sol#26-30) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": "Parameter '_owners' of ACL. (ACL.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 58,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": "Parameter '_owners_size' of ACL. (ACL.sol#57-58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] memory s,\n",
          "message": "Parameter '_hash' of ACL.mulsigauth (ACL.sol#89) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 189,
          "vulnerability_code": "        bytes32 inputHash = keccak256(abi.encode(_owners_size, msg.sender, nonce));\n",
          "message": "Parameter '_owners_size' of ACL.updateOwnerSize (ACL.sol#188-189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 228,
          "vulnerability_code": "        _owners_set.addresses.push(value);\n\n        _owners_set.indexes[value] = _owners_set.addresses.length;\n\n        return true;\n\n    }\n\n\n\n    function _remove(address value) internal returns (bool) {\n\n        if (_owners_set.indexes[value] == 0) return false;\n\n\n",
          "message": "Function 'ACL._add' (ACL.sol#220-228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 244,
          "vulnerability_code": "        uint256 _i = _owners_set.indexes[value];\n\n        address _popv = _owners_set.addresses[_size() - 1];\n\n\n\n        _owners_set.addresses[_i - 1] = _popv;\n\n        _owners_set.addresses.pop();\n\n\n\n        _owners_set.indexes[_popv] = _i;\n\n        delete _owners_set.indexes[value];\n\n\n\n        return true;\n\n    }\n\n\n\n    function _size() internal view returns (uint256) {\n\n        return _owners_set.addresses.length;\n\n    }\n\n\n",
          "message": "Function 'ACL._remove' (ACL.sol#228-244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": 247,
          "vulnerability_code": "    function _indexof(address owner) internal view returns (uint256) {\n\n        return _owners_set.indexes[owner];\n\n    }\n",
          "message": "Function 'ACL._size' (ACL.sol#244-247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "Function 'ACL._indexof' (ACL.sol) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    ownerset private _owners_set;\n",
          "message": "Variable 'ACL._owners_set' (ACL.sol#30-31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    uint public owners_size;\n\n\n",
          "message": "Variable 'ACL.owners_size' (ACL.sol#31-33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    address public pending_admin;\n",
          "message": "Variable 'ACL.pending_admin' (ACL.sol#33-34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    address public pending_owner;\n\n\n\n    //\u63a7\u5236\u7b7e\u540d\u4e32\u7684\u91cd\u653e\u653b\u51fb\n",
          "message": "Variable 'ACL.pending_owner' (ACL.sol#34-37) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < v.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < execTargets.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _owners.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < v.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < execTargets.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ownerset private _owners_set;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function proposeOwner(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata r,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata s,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32[] calldata s,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address who\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 inputHash = keccak256(abi.encode(who, msg.sender, nonce));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 totalHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", inputHash));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        mulsigauth(totalHash, v, r, s, msg.sender);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        mulsigauth(totalHash, v, r, s, msg.sender);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        mulsigauth(totalHash, v, r, s, msg.sender);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        mulsigauth(totalHash, v, r, s, msg.sender);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pending_owner = who;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nonce += 1;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}