{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keccak256(expectedArgs.inputTx) == keccak256(inputTx), \"input tx not as expected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(expectedArgs.utxoPos == utxoPos, \"utxoPos not as expected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keccak256(expectedArgs.spendingTx) == keccak256(spendingTx), \"spending tx not as expected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(expectedArgs.inputIndex == inputIndex, \"input index not as expected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keccak256(expectedArgs.witness) == keccak256(witness), \"witness not as expected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Different versions of Solidity is used in SpendingConditionMock.sol:\n\t- Version used: ['0.5.11', 'ABIEncoderV2']\n\t- SpendingConditionMock.sol#3 declares pragma solidity0.5.11\n\t- SpendingConditionMock.sol#31 declares pragma solidity0.5.11\n\t- SpendingConditionMock.sol#32 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function mockResult(bool result) public {\n\n        expectedResult = result;\n",
          "message": "SpendingConditionMock.mockResult (SpendingConditionMock.sol#50-52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function mockRevert() public {\n\n        shouldRevert = true;\n",
          "message": "SpendingConditionMock.mockRevert (SpendingConditionMock.sol#55-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function shouldVerifyArgumentEquals(Args memory args) public {\n\n        expectedArgs = args;\n",
          "message": "SpendingConditionMock.shouldVerifyArgumentEquals (SpendingConditionMock.sol#60-62) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in SpendingConditionMock.sol:\n\t- pragma solidity0.5.11 (SpendingConditionMock.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (SpendingConditionMock.sol#31): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function verify(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function verify(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata spendingTx,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint16 inputIndex,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata witness\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external view returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata spendingTx,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint16 inputIndex,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata witness\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bool)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (shouldRevert) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(REVERT_MESSAGE);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}