{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function MVP() public pure returns (uint8) {\n\n        return Protocol.MVP();\n",
          "message": "ProtocolWrapper.MVP (ProtocolWrapper.sol#33-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function MORE_VP() public pure returns (uint8) {\n\n        return Protocol.MORE_VP();\n",
          "message": "ProtocolWrapper.MORE_VP (ProtocolWrapper.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function isValidProtocol(uint8 protocol) public pure returns (bool) {\n\n        return Protocol.isValidProtocol(protocol);\n",
          "message": "ProtocolWrapper.isValidProtocol (ProtocolWrapper.sol#42-44) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in ProtocolWrapper.sol:\n\t- pragma solidity0.5.11 (ProtocolWrapper.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (ProtocolWrapper.sol#29): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function MVP() internal pure returns (uint8) {\n\n        return MVP_VALUE;\n",
          "message": "Function 'Protocol.MVP' (ProtocolWrapper.sol#13-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function MORE_VP() internal pure returns (uint8) {\n\n        return MORE_VP_VALUE;\n",
          "message": "Function 'Protocol.MORE_VP' (ProtocolWrapper.sol#18-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function MVP() public pure returns (uint8) {\n\n        return Protocol.MVP();\n",
          "message": "Function 'ProtocolWrapper.MVP' (ProtocolWrapper.sol#33-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function MORE_VP() public pure returns (uint8) {\n\n        return Protocol.MORE_VP();\n",
          "message": "Function 'ProtocolWrapper.MORE_VP' (ProtocolWrapper.sol#38-40) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}