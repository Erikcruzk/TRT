{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    function setBit(uint _self, uint8 _index) public pure returns (uint)\n\n    {\n\n        return Bits.setBit(_self, _index);\n",
          "message": "BitsWrapper.setBit (BitsWrapper.sol#81-84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 89,
          "vulnerability_code": "    function clearBit(uint _self, uint8 _index) public pure returns (uint)\n\n    {\n\n        return Bits.clearBit(_self, _index);\n",
          "message": "BitsWrapper.clearBit (BitsWrapper.sol#86-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 97,
          "vulnerability_code": "    function bitSet(uint _self, uint8 _index) public pure returns (bool)\n\n    {\n\n        return Bits.bitSet(_self, _index);\n",
          "message": "BitsWrapper.bitSet (BitsWrapper.sol#94-97) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in BitsWrapper.sol:\n\t- pragma solidity0.5.11 (BitsWrapper.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (BitsWrapper.sol#78): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBit(uint _self, uint8 _index)\n",
          "message": "Parameter '_self' of Bits.setBit (BitsWrapper.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBit(uint _self, uint8 _index)\n",
          "message": "Parameter '_index' of Bits.setBit (BitsWrapper.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearBit(uint _self, uint8 _index)\n",
          "message": "Parameter '_self' of Bits.clearBit (BitsWrapper.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearBit(uint _self, uint8 _index)\n",
          "message": "Parameter '_index' of Bits.clearBit (BitsWrapper.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBit(uint _self, uint8 _index)\n",
          "message": "Parameter '_self' of Bits.getBit (BitsWrapper.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBit(uint _self, uint8 _index)\n",
          "message": "Parameter '_index' of Bits.getBit (BitsWrapper.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bitSet(uint _self, uint8 _index)\n",
          "message": "Parameter '_self' of Bits.bitSet (BitsWrapper.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bitSet(uint _self, uint8 _index)\n",
          "message": "Parameter '_index' of Bits.bitSet (BitsWrapper.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBit(uint _self, uint8 _index) public pure returns (uint)\n",
          "message": "Parameter '_self' of BitsWrapper.setBit (BitsWrapper.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBit(uint _self, uint8 _index) public pure returns (uint)\n",
          "message": "Parameter '_index' of BitsWrapper.setBit (BitsWrapper.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearBit(uint _self, uint8 _index) public pure returns (uint)\n",
          "message": "Parameter '_self' of BitsWrapper.clearBit (BitsWrapper.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearBit(uint _self, uint8 _index) public pure returns (uint)\n",
          "message": "Parameter '_index' of BitsWrapper.clearBit (BitsWrapper.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bitSet(uint _self, uint8 _index) public pure returns (bool)\n",
          "message": "Parameter '_self' of BitsWrapper.bitSet (BitsWrapper.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bitSet(uint _self, uint8 _index) public pure returns (bool)\n",
          "message": "Parameter '_index' of BitsWrapper.bitSet (BitsWrapper.sol#94) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}