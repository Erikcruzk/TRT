{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeEthTransfer: failed to transfer ETH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeEthTransfer: failed to transfer ETH\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n\n        public\n\n    {\n\n        SafeEthTransfer.transferRevertOnError(receiver, amount, gasStipend);\n",
          "message": "SafeEthTransferMock.transferRevertOnError (SafeEthTransferMock.sol#53-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function transferReturnResult(address payable receiver, uint256 amount, uint256 gasStipend)\n\n        public\n\n    {\n\n        transferResult = SafeEthTransfer.transferReturnResult(receiver, amount, gasStipend);\n",
          "message": "SafeEthTransferMock.transferReturnResult (SafeEthTransferMock.sol#59-63) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in SafeEthTransferMock.sol:\n\t- pragma solidity0.5.11 (SafeEthTransferMock.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (SafeEthTransferMock.sol#48): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function transferReturnResult(address payable receiver, uint256 amount, uint256 gasStipend)\n\n        internal\n\n        returns (bool)\n\n    {\n\n        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n\n        return success;\n",
          "message": "Low level call in SafeEthTransfer.transferReturnResult (SafeEthTransferMock.sol#37-43):\n\t-(success) = receiver.call.gas(gasStipend).value(amount)() SafeEthTransferMock.sol#41\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract SafeEthTransferMock {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = transferReturnResult(receiver, amount, gasStipend);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeEthTransfer: failed to transfer ETH\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        SafeEthTransfer.transferRevertOnError(receiver, amount, gasStipend);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        SafeEthTransfer.transferRevertOnError(receiver, amount, gasStipend);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        transferResult = SafeEthTransfer.transferReturnResult(receiver, amount, gasStipend);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        transferResult = SafeEthTransfer.transferReturnResult(receiver, amount, gasStipend);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Unchecked return value from external call. (SWC 104)",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n",
          "message": "The return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\nClassification: SWC-104"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        },
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}