{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeEthTransfer: failed to transfer ETH\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeEthTransfer: failed to transfer ETH\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_2"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in SafeEthTransfer.sol:\n\t- pragma solidity0.5.11 (SafeEthTransfer.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function transferReturnResult(address payable receiver, uint256 amount, uint256 gasStipend)\n\n        internal\n\n        returns (bool)\n\n    {\n\n        (bool success, ) = receiver.call.gas(gasStipend).value(amount)(\"\");\n\n        return success;\n",
          "message": "Low level call in SafeEthTransfer.transferReturnResult (SafeEthTransfer.sol#37-43):\n\t-(success) = receiver.call.gas(gasStipend).value(amount)() SafeEthTransfer.sol#41\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferRevertOnError(address payable receiver, uint256 amount, uint256 gasStipend)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = transferReturnResult(receiver, amount, gasStipend);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeEthTransfer: failed to transfer ETH\");\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}