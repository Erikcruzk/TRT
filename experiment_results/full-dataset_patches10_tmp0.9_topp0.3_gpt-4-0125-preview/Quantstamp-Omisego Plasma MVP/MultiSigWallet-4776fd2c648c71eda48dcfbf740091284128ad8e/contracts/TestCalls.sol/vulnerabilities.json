{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "\tfunction receive1uint(uint a) setMsgFields payable public {\n\n\t\tuint1 = a;\n",
          "message": "Contract locking ether found in TestCalls.sol:\n\tContract TestCalls has payable functions:\n\t - receive1uint (TestCalls.sol#29-31)\n\t - receive2uints (TestCalls.sol#33-36)\n\t - receive1bytes (TestCalls.sol#38-40)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "\tfunction receive1uint(uint a) setMsgFields payable public {\n\n\t\tuint1 = a;\n",
          "message": "TestCalls.receive1uint (TestCalls.sol#29-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 36,
          "vulnerability_code": "\tfunction receive2uints(uint a, uint b) setMsgFields payable public {\n\n\t\tuint1 = a;\n\n\t\tuint2 = b;\n",
          "message": "TestCalls.receive2uints (TestCalls.sol#33-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 40,
          "vulnerability_code": "\tfunction receive1bytes(bytes c) setMsgFields payable public {\n\n\t\tbyteArray1 = c;\n",
          "message": "TestCalls.receive1bytes (TestCalls.sol#38-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 43,
          "vulnerability_code": "\tfunction nonPayable() setMsgFields public {\n",
          "message": "TestCalls.nonPayable (TestCalls.sol#42-43) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": "Detected issues with version pragma in TestCalls.sol:\n\t- pragma solidity^0.4.15 (TestCalls.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "\tfunction TestCalls() setMsgFields public {\n\n\t\t// This constructor will be used to test the creation via multisig wallet\n",
          "message": "Function 'TestCalls.TestCalls' (TestCalls.sol#25-27) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TestCalls {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receive1bytes(bytes c) setMsgFields payable public {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receive1bytes(bytes c) setMsgFields payable public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbytes public byteArray1;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receive1bytes(bytes c) setMsgFields payable public {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction receive1bytes(bytes c) setMsgFields payable public {\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbytes public byteArray1;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbytes public byteArray1;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.\nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}