{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(success, \"ProxyFactory/constructor-call-failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(success, \"ProxyFactory/constructor-call-failed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 28,
          "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      proxy := create(0, clone, 0x37)\n\n    }\n\n\n\n    emit ProxyCreated(address(proxy));\n\n\n\n    if(_data.length > 0) {\n\n      (bool success,) = proxy.call(_data);\n\n      require(success, \"ProxyFactory/constructor-call-failed\");\n\n    }\n",
          "message": "ProxyFactory.deployMinimal uses assembly (ProxyFactory.sol#11-28)\n\t- ProxyFactory.sol#14-20\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 28,
          "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      proxy := create(0, clone, 0x37)\n\n    }\n\n\n\n    emit ProxyCreated(address(proxy));\n\n\n\n    if(_data.length > 0) {\n\n      (bool success,) = proxy.call(_data);\n\n      require(success, \"ProxyFactory/constructor-call-failed\");\n\n    }\n",
          "message": "ProxyFactory.deployMinimal (ProxyFactory.sol#11-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
          "message": "Detected issues with version pragma in ProxyFactory.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (ProxyFactory.sol#3): is has a complex pragma\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 28,
          "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      proxy := create(0, clone, 0x37)\n\n    }\n\n\n\n    emit ProxyCreated(address(proxy));\n\n\n\n    if(_data.length > 0) {\n\n      (bool success,) = proxy.call(_data);\n\n      require(success, \"ProxyFactory/constructor-call-failed\");\n\n    }\n",
          "message": "Low level call in ProxyFactory.deployMinimal (ProxyFactory.sol#11-28):\n\t-(success) = proxy.call(_data) ProxyFactory.sol#25\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n",
          "message": "Parameter '_logic' of ProxyFactory.deployMinimal (ProxyFactory.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n",
          "message": "Parameter '_data' of ProxyFactory.deployMinimal (ProxyFactory.sol#11) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}