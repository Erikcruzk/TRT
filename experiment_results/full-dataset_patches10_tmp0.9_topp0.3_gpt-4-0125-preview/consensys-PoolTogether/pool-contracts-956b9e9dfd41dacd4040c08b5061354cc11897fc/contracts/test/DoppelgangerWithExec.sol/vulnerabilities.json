{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Mock on the method is not initialized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Mock revert\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Mock on the method is not initialized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "arbitrary-low-level-call",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bool succeeded, bytes memory returnValue) = target.call(data);\n",
          "message": "An attacker may perform call() to an arbitrary address with controlled calldata"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function __internal__mockReturn(bytes memory ret) pure private {\n\n        assembly {\n\n            return (add(ret, 0x20), mload(ret))\n\n        }\n",
          "message": "DoppelgangerWithExec.__internal__mockReturn (DoppelgangerWithExec.sol#66-70) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    fallback() external payable {\n\n        MockCall storage mockCall = __internal__getMockCall();\n\n        if (mockCall.reverts == true) {\n\n            __internal__mockRevert();\n\n            return;\n\n        }\n\n        __internal__mockReturn(mockCall.returnValue);\n",
          "message": "Contract locking ether found in DoppelgangerWithExec.sol:\n\tContract DoppelgangerWithExec has payable functions:\n\t - fallback (DoppelgangerWithExec.sol#15-22)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function __internal__mockReturn(bytes memory ret) pure private {\n\n        assembly {\n\n            return (add(ret, 0x20), mload(ret))\n\n        }\n",
          "message": "DoppelgangerWithExec.__internal__mockReturn uses assembly (DoppelgangerWithExec.sol#66-70)\n\t- DoppelgangerWithExec.sol#67-69\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function __waffle__mockReverts(bytes memory data) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: true,\n\n            returnValue: \"\"\n\n        });\n",
          "message": "DoppelgangerWithExec.__waffle__mockReverts (DoppelgangerWithExec.sol#24-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: false,\n\n            returnValue: value\n\n        });\n",
          "message": "DoppelgangerWithExec.__waffle__mockReturns (DoppelgangerWithExec.sol#32-38) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
          "message": "Detected issues with version pragma in DoppelgangerWithExec.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (DoppelgangerWithExec.sol#3): is has a complex pragma\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function __waffle__call(address target, bytes calldata data) external returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.call(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
          "message": "Low level call in DoppelgangerWithExec.__waffle__call (DoppelgangerWithExec.sol#40-44):\n\t-(succeeded,returnValue) = target.call(data) DoppelgangerWithExec.sol#41\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function __waffle__staticcall(address target, bytes calldata data) external view returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.staticcall(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
          "message": "Low level call in DoppelgangerWithExec.__waffle__staticcall (DoppelgangerWithExec.sol#46-50):\n\t-(succeeded,returnValue) = target.staticcall(data) DoppelgangerWithExec.sol#47\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function __waffle__mockReverts(bytes memory data) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: true,\n\n            returnValue: \"\"\n\n        });\n",
          "message": "Function 'DoppelgangerWithExec.__waffle__mockReverts' (DoppelgangerWithExec.sol#24-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: false,\n\n            returnValue: value\n\n        });\n",
          "message": "Function 'DoppelgangerWithExec.__waffle__mockReturns' (DoppelgangerWithExec.sol#32-38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function __waffle__call(address target, bytes calldata data) external returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.call(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
          "message": "Function 'DoppelgangerWithExec.__waffle__call' (DoppelgangerWithExec.sol#40-44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function __waffle__staticcall(address target, bytes calldata data) external view returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.staticcall(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
          "message": "Function 'DoppelgangerWithExec.__waffle__staticcall' (DoppelgangerWithExec.sol#46-50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function __internal__getMockCall() view private returns (MockCall storage mockCall) {\n\n        mockCall = mockConfig[keccak256(msg.data)];\n\n        if (mockCall.initialized == true) {\n\n            // Mock method with specified arguments\n\n            return mockCall;\n\n        }\n\n        mockCall = mockConfig[keccak256(abi.encodePacked(msg.sig))];\n\n        if (mockCall.initialized == true) {\n\n            // Mock method with any arguments\n\n            return mockCall;\n\n        }\n\n        revert(\"Mock on the method is not initialized\");\n",
          "message": "Function 'DoppelgangerWithExec.__internal__getMockCall' (DoppelgangerWithExec.sol#52-64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function __internal__mockReturn(bytes memory ret) pure private {\n\n        assembly {\n\n            return (add(ret, 0x20), mload(ret))\n\n        }\n",
          "message": "Function 'DoppelgangerWithExec.__internal__mockReturn' (DoppelgangerWithExec.sol#66-70) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function __internal__mockRevert() pure private {\n\n        revert(\"Mock revert\");\n",
          "message": "Function 'DoppelgangerWithExec.__internal__mockRevert' (DoppelgangerWithExec.sol#72-74) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => MockCall) mockConfig;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    fallback() external payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        MockCall storage mockCall = __internal__getMockCall();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        MockCall storage mockCall = __internal__getMockCall();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (mockCall.reverts == true) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "            __internal__mockRevert();\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}