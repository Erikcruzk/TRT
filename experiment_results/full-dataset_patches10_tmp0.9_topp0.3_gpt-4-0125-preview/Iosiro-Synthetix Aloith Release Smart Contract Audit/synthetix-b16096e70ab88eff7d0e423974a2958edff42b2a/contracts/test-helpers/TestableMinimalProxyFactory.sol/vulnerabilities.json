{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function _cloneAsMinimalProxy(address _base, string memory _revertMsg) internal returns (address clone) {\n\n        bytes memory createData = _generateMinimalProxyCreateData(_base);\n\n\n\n        assembly {\n\n            clone := create(\n\n                0, // no value\n\n                add(createData, 0x20), // data\n\n                55 // data is always 55 bytes (10 constructor + 45 code)\n\n            )\n\n        }\n\n\n\n        // If CREATE fails for some reason, address(0) is returned\n\n        require(clone != address(0), _revertMsg);\n",
          "message": "MinimalProxyFactory._cloneAsMinimalProxy uses assembly (TestableMinimalProxyFactory.sol#7-20)\n\t- TestableMinimalProxyFactory.sol#10-16\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in TestableMinimalProxyFactory.sol:\n\t- pragma solidity^0.5.16 (TestableMinimalProxyFactory.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (TestableMinimalProxyFactory.sol#37): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function _cloneAsMinimalProxy(address _base, string memory _revertMsg) internal returns (address clone) {\n\n        bytes memory createData = _generateMinimalProxyCreateData(_base);\n\n\n\n        assembly {\n\n            clone := create(\n\n                0, // no value\n\n                add(createData, 0x20), // data\n\n                55 // data is always 55 bytes (10 constructor + 45 code)\n\n            )\n\n        }\n\n\n\n        // If CREATE fails for some reason, address(0) is returned\n\n        require(clone != address(0), _revertMsg);\n",
          "message": "Function 'MinimalProxyFactory._cloneAsMinimalProxy' (TestableMinimalProxyFactory.sol#7-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _cloneAsMinimalProxy(address _base, string memory _revertMsg) internal returns (address clone) {\n",
          "message": "Parameter '_base' of MinimalProxyFactory._cloneAsMinimalProxy (TestableMinimalProxyFactory.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _cloneAsMinimalProxy(address _base, string memory _revertMsg) internal returns (address clone) {\n",
          "message": "Parameter '_revertMsg' of MinimalProxyFactory._cloneAsMinimalProxy (TestableMinimalProxyFactory.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function _generateMinimalProxyCreateData(address _base) internal pure returns (bytes memory) {\n\n        return\n\n            abi.encodePacked(\n\n                //---- constructor -----\n\n                bytes10(0x3d602d80600a3d3981f3),\n\n                //---- proxy code -----\n\n                bytes10(0x363d3d373d3d3d363d73),\n\n                _base,\n\n                bytes15(0x5af43d82803e903d91602b57fd5bf3)\n\n            );\n",
          "message": "Function 'MinimalProxyFactory._generateMinimalProxyCreateData' (TestableMinimalProxyFactory.sol#22-32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _generateMinimalProxyCreateData(address _base) internal pure returns (bytes memory) {\n",
          "message": "Parameter '_base' of MinimalProxyFactory._generateMinimalProxyCreateData (TestableMinimalProxyFactory.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cloneAsMinimalProxy(address _base, string calldata _revertMsg) external returns (address clone) {\n",
          "message": "Parameter '_base' of TestableMinimalProxyFactory.cloneAsMinimalProxy (TestableMinimalProxyFactory.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cloneAsMinimalProxy(address _base, string calldata _revertMsg) external returns (address clone) {\n",
          "message": "Parameter '_revertMsg' of TestableMinimalProxyFactory.cloneAsMinimalProxy (TestableMinimalProxyFactory.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function generateMinimalProxyCreateData(address _base) external pure returns (bytes memory) {\n",
          "message": "Parameter '_base' of TestableMinimalProxyFactory.generateMinimalProxyCreateData (TestableMinimalProxyFactory.sol#47) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes10(0x3d602d80600a3d3981f3),\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes10(0x363d3d373d3d3d363d73),\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes15(0x5af43d82803e903d91602b57fd5bf3)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _cloneAsMinimalProxy(address _base, string memory _revertMsg) internal returns (address clone) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}