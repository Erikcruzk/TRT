{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete keys[keys.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.init(keyHolderData);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_64"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool isThere;\n",
          "message": "isThere in KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#222) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
          "message": "ERC725.getKey (KeyHolder.sol#19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": 256,
          "vulnerability_code": "    function getKey(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n",
          "message": "KeyHolder.getKey (KeyHolder.sol#250-256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 308,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bool exists)\n\n    {\n\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n",
          "message": "KeyHolder.keyHasPurpose (KeyHolder.sol#302-308) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
          "message": "ERC725.keyHasPurpose (KeyHolder.sol#20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
          "message": "ERC725.getKeysByPurpose (KeyHolder.sol#21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": 272,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n",
          "message": "KeyHolder.getKeysByPurpose (KeyHolder.sol#266-272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": 279,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n",
          "message": "KeyHolder.addKey (KeyHolder.sol#274-279) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
          "message": "ERC725.addKey (KeyHolder.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
          "message": "ERC725.removeKey (KeyHolder.sol#23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 300,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n",
          "message": "KeyHolder.removeKey (KeyHolder.sol#295-300) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": 293,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n",
          "message": "KeyHolder.execute (KeyHolder.sol#288-293) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
          "message": "ERC725.execute (KeyHolder.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n",
          "message": "KeyHolder.approve (KeyHolder.sol#281-286) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
          "message": "ERC725.approve (KeyHolder.sol#25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
          "message": "KeyHolderLibrary.init (KeyHolder.sol#62-71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
          "message": "KeyHolderLibrary.getKey (KeyHolder.sol#73-83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
          "message": "KeyHolderLibrary.getKeyPurposes (KeyHolder.sol#85-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
          "message": "KeyHolderLibrary.getKeysByPurpose (KeyHolder.sol#93-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
          "message": "KeyHolderLibrary.addKey (KeyHolder.sol#101-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
          "message": "KeyHolderLibrary.execute (KeyHolder.sol#157-174) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 215,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
          "message": "KeyHolderLibrary.removeKey (KeyHolder.sol#176-215) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 264,
          "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n",
          "message": "KeyHolder.getKeyPurposes (KeyHolder.sol#258-264) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
          "message": "Low level call in KeyHolderLibrary.approve (KeyHolder.sol#121-155):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) KeyHolder.sol#132\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (KeyHolder.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (KeyHolder.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.getKey (KeyHolder.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (KeyHolder.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (KeyHolder.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (KeyHolder.sol#93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (KeyHolder.sol#93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_type' of KeyHolderLibrary.addKey (KeyHolder.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (KeyHolder.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_id' of KeyHolderLibrary.approve (KeyHolder.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_approve' of KeyHolderLibrary.approve (KeyHolder.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_to' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_value' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_data' of KeyHolderLibrary.execute (KeyHolder.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (KeyHolder.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.removeKey (KeyHolder.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (KeyHolder.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (KeyHolder.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolder.getKey (KeyHolder.sol#250) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolder.keyHasPurpose (KeyHolder.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolder.keyHasPurpose (KeyHolder.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolder.getKeysByPurpose (KeyHolder.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_key' of KeyHolder.addKey (KeyHolder.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_purpose' of KeyHolder.addKey (KeyHolder.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_type' of KeyHolder.addKey (KeyHolder.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolder.removeKey (KeyHolder.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolder.removeKey (KeyHolder.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_to' of KeyHolder.execute (KeyHolder.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_value' of KeyHolder.execute (KeyHolder.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_data' of KeyHolder.execute (KeyHolder.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
          "message": "Parameter '_id' of KeyHolder.approve (KeyHolder.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
          "message": "Parameter '_approve' of KeyHolder.approve (KeyHolder.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolder.getKeyPurposes (KeyHolder.sol#258) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
          "message": "ERC725.MANAGEMENT_KEY (KeyHolder.sol#8) is never used in KeyHolder\nERC725.ACTION_KEY (KeyHolder.sol#9) is never used in KeyHolder\nERC725.CLAIM_SIGNER_KEY (KeyHolder.sol#10) is never used in KeyHolder\nERC725.ENCRYPTION_KEY (KeyHolder.sol#11) is never used in KeyHolder\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(bytes32[] _keys)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(bytes32[] _keys)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    KeyHolderLibrary.KeyHolderData keyHolderData;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_keyHolderData.keys[_key].purposes);\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Trail_of_Bits-origin/origin-4b31657825523962434c6d4e4c61feb0bb1ee518/origin-contracts/contracts/identity/ERC725.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_keyHolderData.keys[_key].purposes);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _keyHolderData.keysByPurpose[_purpose];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n",
          "message": null
        }
      ]
    }
  }
}