{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete keys[keys.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "            j++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_59"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool isThere;\n",
          "message": "isThere in KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#195) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
          "message": "KeyHolderLibrary.init (ClaimHolderLibrary.sol#35-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
          "message": "KeyHolderLibrary.getKey (ClaimHolderLibrary.sol#46-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
          "message": "KeyHolderLibrary.getKeyPurposes (ClaimHolderLibrary.sol#58-64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
          "message": "KeyHolderLibrary.getKeysByPurpose (ClaimHolderLibrary.sol#66-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
          "message": "KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74-92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": 147,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
          "message": "KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130-147) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 188,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
          "message": "KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149-188) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": 301,
          "vulnerability_code": "    function addClaims(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        uint offset = 0;\n\n        for (uint16 i = 0; i < _topic.length; i++) {\n\n            addClaim(\n\n                _keyHolderData,\n\n                _claims,\n\n                _topic[i],\n\n                1,\n\n                _issuer[i],\n\n                getBytes(_signature, (i * 65), 65),\n\n                getBytes(_data, offset, _offsets[i]),\n\n                \"\"\n\n            );\n\n            offset += _offsets[i];\n\n        }\n",
          "message": "ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#276-301) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 327,
          "vulnerability_code": "    function removeClaim(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        bytes32 _claimId\n\n    )\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n\n        }\n\n\n\n        emit ClaimRemoved(\n\n            _claimId,\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n\n\n\n        delete _claims.byId[_claimId];\n\n        return true;\n",
          "message": "ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#303-327) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n          uint256 topic,\n\n          uint256 scheme,\n\n          address issuer,\n\n          bytes signature,\n\n          bytes data,\n\n          string uri\n\n        )\n\n    {\n\n        return (\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n",
          "message": "ClaimHolderLibrary.getClaim (ClaimHolderLibrary.sol#329-349) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 128,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
          "message": "Low level call in KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94-128):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) ClaimHolderLibrary.sol#105\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (ClaimHolderLibrary.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (ClaimHolderLibrary.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.getKey (ClaimHolderLibrary.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (ClaimHolderLibrary.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (ClaimHolderLibrary.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (ClaimHolderLibrary.sol#66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (ClaimHolderLibrary.sol#66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_type' of KeyHolderLibrary.addKey (ClaimHolderLibrary.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_id' of KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_approve' of KeyHolderLibrary.approve (ClaimHolderLibrary.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_to' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_value' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_data' of KeyHolderLibrary.execute (ClaimHolderLibrary.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (ClaimHolderLibrary.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (ClaimHolderLibrary.sol#190) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
          "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#234) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Claims storage _claims,\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _topic,\n",
          "message": "Parameter '_topic' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _scheme,\n",
          "message": "Parameter '_scheme' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _issuer,\n",
          "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#238) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": "Parameter '_signature' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#239) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": "Parameter '_data' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _uri\n",
          "message": "Parameter '_uri' of ClaimHolderLibrary.addClaim (ClaimHolderLibrary.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
          "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Claims storage _claims,\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#278) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _topic,\n",
          "message": "Parameter '_topic' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _issuer,\n",
          "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": "Parameter '_signature' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": "Parameter '_data' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _offsets\n",
          "message": "Parameter '_offsets' of ClaimHolderLibrary.addClaims (ClaimHolderLibrary.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
          "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Claims storage _claims,\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#305) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _claimId\n",
          "message": "Parameter '_claimId' of ClaimHolderLibrary.removeClaim (ClaimHolderLibrary.sol#306) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.getClaim (ClaimHolderLibrary.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
          "message": "Parameter '_claimId' of ClaimHolderLibrary.getClaim (ClaimHolderLibrary.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": "Parameter '_str' of ClaimHolderLibrary.getBytes (ClaimHolderLibrary.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": "Parameter '_offset' of ClaimHolderLibrary.getBytes (ClaimHolderLibrary.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": "Parameter '_length' of ClaimHolderLibrary.getBytes (ClaimHolderLibrary.sol#351) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(bytes32[] _keys)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _uri\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _topic,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _issuer,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _offsets\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "          bytes signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "          bytes data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "          string uri\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bytes)\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaims(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit ClaimRemoved(\n",
          "message": null
        },
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_keyHolderData.keys[_key].purposes);\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "library ClaimHolderLibrary {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit ClaimRemoved(\n",
          "message": null
        }
      ]
    }
  }
}