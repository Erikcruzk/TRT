{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes[i] = purposes[purposes.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete purposes[purposes.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys[j] = keys[keys.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "                delete keys[keys.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.init(keyHolderData);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _keyHolderData.executionNonce++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 k = _offset; k < _offset + _length; k++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "            j++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_113"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool isThere;\n",
          "message": "isThere in KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#249) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": 564,
          "vulnerability_code": "    function getClaim(bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n            uint256 topic,\n\n            uint256 scheme,\n\n            address issuer,\n\n            bytes signature,\n\n            bytes data,\n\n            string uri\n\n        )\n\n    {\n\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\n",
          "message": "ClaimHolder.getClaim (ClaimHolder.sol#551-564) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
          "message": "ERC735.getClaim (ClaimHolder.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": 572,
          "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n\n        public\n\n        view\n\n        returns(bytes32[] claimIds)\n\n    {\n\n        return claims.byTopic[_topic];\n",
          "message": "ClaimHolder.getClaimIdsByTopic (ClaimHolder.sol#566-572) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
          "message": "ERC735.getClaimIdsByTopic (ClaimHolder.sol#23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": 525,
          "vulnerability_code": "    function addClaim(\n\n        uint256 _topic,\n\n        uint256 _scheme,\n\n        address _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        string _uri\n\n    )\n\n        public\n\n        returns (bytes32 claimRequestId)\n\n    {\n\n        return ClaimHolderLibrary.addClaim(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _scheme,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _uri\n\n        );\n",
          "message": "ClaimHolder.addClaim (ClaimHolder.sol#504-525) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
          "message": "ERC735.addClaim (ClaimHolder.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\n",
          "message": "ClaimHolder.removeClaim (ClaimHolder.sol#547-549) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success);\n",
          "message": "ERC735.removeClaim (ClaimHolder.sol#25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": 283,
          "vulnerability_code": "    function getKey(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\n",
          "message": "KeyHolder.getKey (ClaimHolder.sol#277-283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
          "message": "ERC725.getKey (ClaimHolder.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\n",
          "message": "ERC725.keyHasPurpose (ClaimHolder.sol#47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bool exists)\n\n    {\n\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\n",
          "message": "KeyHolder.keyHasPurpose (ClaimHolder.sol#329-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
          "message": "ERC725.getKeysByPurpose (ClaimHolder.sol#48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": 299,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\n",
          "message": "KeyHolder.getKeysByPurpose (ClaimHolder.sol#293-299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": 306,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\n",
          "message": "KeyHolder.addKey (ClaimHolder.sol#301-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\n",
          "message": "ERC725.addKey (ClaimHolder.sol#49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\n",
          "message": "ERC725.removeKey (ClaimHolder.sol#50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 327,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\n",
          "message": "KeyHolder.removeKey (ClaimHolder.sol#322-327) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": 320,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\n",
          "message": "KeyHolder.execute (ClaimHolder.sol#315-320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
          "message": "ERC725.execute (ClaimHolder.sol#51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve) public returns (bool success);\n",
          "message": "ERC725.approve (ClaimHolder.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 313,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\n",
          "message": "KeyHolder.approve (ClaimHolder.sol#308-313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n\n        public\n\n    {\n\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(1);\n\n        _keyHolderData.keys[_key].keyType = 1;\n\n        _keyHolderData.keysByPurpose[1].push(_key);\n\n        emit KeyAdded(_key, 1, 1);\n",
          "message": "KeyHolderLibrary.init (ClaimHolder.sol#89-98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 110,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n\n    {\n\n        return (\n\n            _keyHolderData.keys[_key].purposes,\n\n            _keyHolderData.keys[_key].keyType,\n\n            _keyHolderData.keys[_key].key\n\n        );\n",
          "message": "KeyHolderLibrary.getKey (ClaimHolder.sol#100-110) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return (_keyHolderData.keys[_key].purposes);\n",
          "message": "KeyHolderLibrary.getKeyPurposes (ClaimHolder.sol#112-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 126,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n\n        public\n\n        view\n\n        returns(bytes32[] _keys)\n\n    {\n\n        return _keyHolderData.keysByPurpose[_purpose];\n",
          "message": "KeyHolderLibrary.getKeysByPurpose (ClaimHolder.sol#120-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        _keyHolderData.keys[_key].key = _key;\n\n        _keyHolderData.keys[_key].purposes.push(_purpose);\n\n        _keyHolderData.keys[_key].keyType = _type;\n\n\n\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\n\n\n\n        emit KeyAdded(_key, _purpose, _type);\n\n\n\n        return true;\n",
          "message": "KeyHolderLibrary.addKey (ClaimHolder.sol#128-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 201,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n\n        public\n\n        returns (uint256 executionId)\n\n    {\n\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\n\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\n\n\n\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\n\n\n\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\n\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\n\n        }\n\n\n\n        _keyHolderData.executionNonce++;\n\n        return _keyHolderData.executionNonce-1;\n",
          "message": "KeyHolderLibrary.execute (ClaimHolder.sol#184-201) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": 242,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\n\n        }\n\n\n\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\n\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\n\n\n\n        // Remove purpose from key\n\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\n\n        for (uint i = 0; i < purposes.length; i++) {\n\n            if (purposes[i] == _purpose) {\n\n                purposes[i] = purposes[purposes.length - 1];\n\n                delete purposes[purposes.length - 1];\n\n                purposes.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        // If no more purposes, delete key\n\n        if (purposes.length == 0) {\n\n            delete _keyHolderData.keys[_key];\n\n        }\n\n\n\n        // Remove key from keysByPurpose\n\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\n\n        for (uint j = 0; j < keys.length; j++) {\n\n            if (keys[j] == _key) {\n\n                keys[j] = keys[keys.length - 1];\n\n                delete keys[keys.length - 1];\n\n                keys.length--;\n\n                break;\n\n            }\n\n        }\n\n\n\n        return true;\n",
          "message": "KeyHolderLibrary.removeKey (ClaimHolder.sol#203-242) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 291,
          "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n\n        public\n\n        view\n\n        returns(uint256[] purposes)\n\n    {\n\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\n",
          "message": "KeyHolder.getKeyPurposes (ClaimHolder.sol#285-291) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 429,
          "vulnerability_code": "    function addClaims(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        uint offset = 0;\n\n        for (uint16 i = 0; i < _topic.length; i++) {\n\n            addClaim(\n\n                _keyHolderData,\n\n                _claims,\n\n                _topic[i],\n\n                1,\n\n                _issuer[i],\n\n                getBytes(_signature, (i * 65), 65),\n\n                getBytes(_data, offset, _offsets[i]),\n\n                \"\"\n\n            );\n\n            offset += _offsets[i];\n\n        }\n",
          "message": "ClaimHolderLibrary.addClaims (ClaimHolder.sol#404-429) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function removeClaim(\n\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n\n        Claims storage _claims,\n\n        bytes32 _claimId\n\n    )\n\n        public\n\n        returns (bool success)\n\n    {\n\n        if (msg.sender != address(this)) {\n\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\n\n        }\n\n\n\n        emit ClaimRemoved(\n\n            _claimId,\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n\n\n\n        delete _claims.byId[_claimId];\n\n        return true;\n",
          "message": "ClaimHolderLibrary.removeClaim (ClaimHolder.sol#431-455) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 477,
          "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n\n        public\n\n        view\n\n        returns(\n\n          uint256 topic,\n\n          uint256 scheme,\n\n          address issuer,\n\n          bytes signature,\n\n          bytes data,\n\n          string uri\n\n        )\n\n    {\n\n        return (\n\n            _claims.byId[_claimId].topic,\n\n            _claims.byId[_claimId].scheme,\n\n            _claims.byId[_claimId].issuer,\n\n            _claims.byId[_claimId].signature,\n\n            _claims.byId[_claimId].data,\n\n            _claims.byId[_claimId].uri\n\n        );\n",
          "message": "ClaimHolderLibrary.getClaim (ClaimHolder.sol#457-477) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function addClaims(\n\n        uint256[] _topic,\n\n        address[] _issuer,\n\n        bytes _signature,\n\n        bytes _data,\n\n        uint256[] _offsets\n\n    )\n\n        public\n\n    {\n\n        ClaimHolderLibrary.addClaims(\n\n            keyHolderData,\n\n            claims,\n\n            _topic,\n\n            _issuer,\n\n            _signature,\n\n            _data,\n\n            _offsets\n\n        );\n",
          "message": "ClaimHolder.addClaims (ClaimHolder.sol#527-545) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n\n        public\n\n        returns (bool success)\n\n    {\n\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\n\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\n\n\n\n        emit Approved(_id, _approve);\n\n\n\n        if (_approve == true) {\n\n            _keyHolderData.executions[_id].approved = true;\n\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n\n            if (success) {\n\n                _keyHolderData.executions[_id].executed = true;\n\n                emit Executed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            } else {\n\n                emit ExecutionFailed(\n\n                    _id,\n\n                    _keyHolderData.executions[_id].to,\n\n                    _keyHolderData.executions[_id].value,\n\n                    _keyHolderData.executions[_id].data\n\n                );\n\n                return;\n\n            }\n\n        } else {\n\n            _keyHolderData.executions[_id].approved = false;\n\n        }\n\n        return true;\n",
          "message": "Low level call in KeyHolderLibrary.approve (ClaimHolder.sol#148-182):\n\t-success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data,0) ClaimHolder.sol#159\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(KeyHolderData storage _keyHolderData)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.init (ClaimHolder.sol#89) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKey (ClaimHolder.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.getKey (ClaimHolder.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeyPurposes (ClaimHolder.sol#112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.getKeyPurposes (ClaimHolder.sol#112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.getKeysByPurpose (ClaimHolder.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.getKeysByPurpose (ClaimHolder.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_type' of KeyHolderLibrary.addKey (ClaimHolder.sol#128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.approve (ClaimHolder.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_id' of KeyHolderLibrary.approve (ClaimHolder.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\n",
          "message": "Parameter '_approve' of KeyHolderLibrary.approve (ClaimHolder.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_to' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_value' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_data' of KeyHolderLibrary.execute (ClaimHolder.sol#184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.removeKey (ClaimHolder.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.removeKey (ClaimHolder.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.removeKey (ClaimHolder.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_keyHolderData' of KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolderLibrary.keyHasPurpose (ClaimHolder.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolder.getKey (ClaimHolder.sol#277) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolder.keyHasPurpose (ClaimHolder.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function keyHasPurpose(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolder.keyHasPurpose (ClaimHolder.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolder.getKeysByPurpose (ClaimHolder.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_key' of KeyHolder.addKey (ClaimHolder.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_purpose' of KeyHolder.addKey (ClaimHolder.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\n",
          "message": "Parameter '_type' of KeyHolder.addKey (ClaimHolder.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_key' of KeyHolder.removeKey (ClaimHolder.sol#322) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeKey(bytes32 _key, uint256 _purpose)\n",
          "message": "Parameter '_purpose' of KeyHolder.removeKey (ClaimHolder.sol#322) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_to' of KeyHolder.execute (ClaimHolder.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_value' of KeyHolder.execute (ClaimHolder.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": "Parameter '_data' of KeyHolder.execute (ClaimHolder.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
          "message": "Parameter '_id' of KeyHolder.approve (ClaimHolder.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(uint256 _id, bool _approve)\n",
          "message": "Parameter '_approve' of KeyHolder.approve (ClaimHolder.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeyPurposes(bytes32 _key)\n",
          "message": "Parameter '_key' of KeyHolder.getKeyPurposes (ClaimHolder.sol#285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
          "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Claims storage _claims,\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _topic,\n",
          "message": "Parameter '_topic' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _scheme,\n",
          "message": "Parameter '_scheme' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _issuer,\n",
          "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": "Parameter '_signature' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": "Parameter '_data' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#368) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _uri\n",
          "message": "Parameter '_uri' of ClaimHolderLibrary.addClaim (ClaimHolder.sol#369) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
          "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#405) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Claims storage _claims,\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _topic,\n",
          "message": "Parameter '_topic' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _issuer,\n",
          "message": "Parameter '_issuer' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": "Parameter '_signature' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#409) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": "Parameter '_data' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _offsets\n",
          "message": "Parameter '_offsets' of ClaimHolderLibrary.addClaims (ClaimHolder.sol#411) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\n",
          "message": "Parameter '_keyHolderData' of ClaimHolderLibrary.removeClaim (ClaimHolder.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Claims storage _claims,\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.removeClaim (ClaimHolder.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _claimId\n",
          "message": "Parameter '_claimId' of ClaimHolderLibrary.removeClaim (ClaimHolder.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
          "message": "Parameter '_claims' of ClaimHolderLibrary.getClaim (ClaimHolder.sol#457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(Claims storage _claims, bytes32 _claimId)\n",
          "message": "Parameter '_claimId' of ClaimHolderLibrary.getClaim (ClaimHolder.sol#457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": "Parameter '_str' of ClaimHolderLibrary.getBytes (ClaimHolder.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": "Parameter '_offset' of ClaimHolderLibrary.getBytes (ClaimHolder.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": "Parameter '_length' of ClaimHolderLibrary.getBytes (ClaimHolder.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(bytes32 _claimId)\n",
          "message": "Parameter '_claimId' of ClaimHolder.getClaim (ClaimHolder.sol#551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n",
          "message": "Parameter '_topic' of ClaimHolder.getClaimIdsByTopic (ClaimHolder.sol#566) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _topic,\n",
          "message": "Parameter '_topic' of ClaimHolder.addClaim (ClaimHolder.sol#505) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _scheme,\n",
          "message": "Parameter '_scheme' of ClaimHolder.addClaim (ClaimHolder.sol#506) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _issuer,\n",
          "message": "Parameter '_issuer' of ClaimHolder.addClaim (ClaimHolder.sol#507) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": "Parameter '_signature' of ClaimHolder.addClaim (ClaimHolder.sol#508) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": "Parameter '_data' of ClaimHolder.addClaim (ClaimHolder.sol#509) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _uri\n",
          "message": "Parameter '_uri' of ClaimHolder.addClaim (ClaimHolder.sol#510) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeClaim(bytes32 _claimId) public returns (bool success) {\n",
          "message": "Parameter '_claimId' of ClaimHolder.removeClaim (ClaimHolder.sol#547) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _topic,\n",
          "message": "Parameter '_topic' of ClaimHolder.addClaims (ClaimHolder.sol#528) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _issuer,\n",
          "message": "Parameter '_issuer' of ClaimHolder.addClaims (ClaimHolder.sol#529) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": "Parameter '_signature' of ClaimHolder.addClaims (ClaimHolder.sol#530) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": "Parameter '_data' of ClaimHolder.addClaims (ClaimHolder.sol#531) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _offsets\n",
          "message": "Parameter '_offsets' of ClaimHolder.addClaims (ClaimHolder.sol#532) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
          "message": "ERC725.MANAGEMENT_KEY (ClaimHolder.sol#35) is never used in ClaimHolder\nERC725.ACTION_KEY (ClaimHolder.sol#36) is never used in ClaimHolder\nERC725.CLAIM_SIGNER_KEY (ClaimHolder.sol#37) is never used in ClaimHolder\nERC725.ENCRYPTION_KEY (ClaimHolder.sol#38) is never used in ClaimHolder\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "                purposes.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "                keys.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < keys.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < purposes.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint16 i = 0; i < _topic.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(bytes32[] _keys)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes, uint256 keyType, bytes32 key)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(uint256[] purposes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(bytes32[] _keys)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _uri\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _topic,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _issuer,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _offsets\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "          bytes signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "          bytes data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "          string uri\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBytes(bytes _str, uint256 _offset, uint256 _length)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bytes)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string _uri\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _topic,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _issuer,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] _offsets\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes signature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "            string uri\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns(bytes32[] claimIds)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant MANAGEMENT_KEY = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant ACTION_KEY = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant CLAIM_SIGNER_KEY = 3;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant ENCRYPTION_KEY = 4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    KeyHolderLibrary.KeyHolderData keyHolderData;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ClaimHolderLibrary.Claims claims;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaims(\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addClaims(\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit ClaimRemoved(\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _to, uint256 _value, bytes _data)\n",
          "message": null
        },
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return (_keyHolderData.keys[_key].purposes);\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getClaimIdsByTopic(uint256 _topic)\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return claims.byTopic[_topic];\n",
          "message": null
        }
      ]
    }
  }
}