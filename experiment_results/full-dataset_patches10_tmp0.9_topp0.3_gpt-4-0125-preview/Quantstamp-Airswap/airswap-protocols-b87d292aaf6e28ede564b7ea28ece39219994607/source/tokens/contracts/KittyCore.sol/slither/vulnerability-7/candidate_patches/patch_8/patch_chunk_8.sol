function bidOnSiringAuction(
    uint256 _sireId,
    uint256 _matronId
)
    external
    payable
    whenNotPaused
{
    // Auction contract checks input sizes
    require(_owns(msg.sender, _matronId));
    require(isReadyToBreed(_matronId));
    require(_canBreedWithViaAuction(_matronId, _sireId));

    // Define the current price of the auction.
    uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);
    require(msg.value >= currentPrice + autoBirthFee);

    // Siring auction will throw if the bid fails.
    // Prevent re-entrancy vulnerability by updating state (_breedWith) before calling external contract (siringAuction)
    _breedWith(uint32(_matronId), uint32(_sireId));
    siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);
}