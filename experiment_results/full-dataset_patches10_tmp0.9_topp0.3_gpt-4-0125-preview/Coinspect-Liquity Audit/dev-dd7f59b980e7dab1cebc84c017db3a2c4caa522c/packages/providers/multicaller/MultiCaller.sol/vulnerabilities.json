{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < calls.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < calls.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < calls.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, bytes memory result) = calls[i].to.staticcall(calls[i].data);\n",
          "message": "MultiCaller.performMultiple has external calls inside a loop:\n\t- (success,result) = calls[i].to.staticcall(calls[i].data) (MultiCaller.sol#20)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Different versions of Solidity is used in MultiCaller.sol:\n\t- Version used: ['0.6.11', 'ABIEncoderV2']\n\t- MultiCaller.sol#3 declares pragma solidity0.6.11\n\t- MultiCaller.sol#4 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function performMultiple(CallRequest[] memory calls)\n\n        public view returns (\n\n            bytes[] memory results\n\n        )\n\n    {\n\n        results = new bytes[](calls.length);\n\n\n\n        for (uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory result) = calls[i].to.staticcall(calls[i].data);\n\n            require(success);\n\n            results[i] = result;\n\n        }\n",
          "message": "MultiCaller.performMultiple (MultiCaller.sol#12-24) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in MultiCaller.sol:\n\t- pragma solidity0.6.11 (MultiCaller.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function performMultiple(CallRequest[] memory calls)\n\n        public view returns (\n\n            bytes[] memory results\n\n        )\n\n    {\n\n        results = new bytes[](calls.length);\n\n\n\n        for (uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory result) = calls[i].to.staticcall(calls[i].data);\n\n            require(success);\n\n            results[i] = result;\n\n        }\n",
          "message": "Low level call in MultiCaller.performMultiple (MultiCaller.sol#12-24):\n\t-(success,result) = calls[i].to.staticcall(calls[i].data) MultiCaller.sol#20\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < calls.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < calls.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (bool success, bytes memory result) = calls[i].to.staticcall(calls[i].data);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}