{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _cacheAddr) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(setCache(_cacheAddr));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function() public payable {\n",
          "message": "Contract locking ether found in proxy.sol:\n\tContract DSProxy has payable functions:\n\t - fallback (proxy.sol#118-119)\n\t - execute (proxy.sol#122-134)\n\t - execute (proxy.sol#136-155)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function build(address owner) public returns (DSProxy proxy) {\n\n        proxy = new DSProxy(cache);\n\n        emit Created(msg.sender, owner, address(proxy), address(cache));\n\n        proxy.setOwner(owner);\n\n        isProxy[proxy] = true;\n",
          "message": "Reentrancy in DSProxyFactory.build (proxy.sol#186-191):\n\tExternal calls:\n\t- proxy.setOwner(owner) (proxy.sol#189)\n\tState variables written after the call(s):\n\t- isProxy (proxy.sol#190)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function execute(address _target, bytes _data)\n\n        public\n\n        auth\n\n        note\n\n        payable\n\n        returns (bytes32 response)\n\n    {\n\n        require(_target != 0x0);\n\n\n\n        // call contract in current context\n\n        assembly {\n\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\n\n            response := mload(0)      // load delegatecall output\n\n            switch iszero(succeeded)\n\n            case 1 {\n\n                // throw if delegatecall failed\n\n                revert(0, 0)\n\n            }\n\n        }\n",
          "message": "DSProxy.execute uses assembly (proxy.sol#136-155)\n\t- proxy.sol#146-155\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function write(bytes _code) public returns (address target) {\n\n        assembly {\n\n            target := create(0, add(_code, 0x20), mload(_code))\n\n            switch iszero(extcodesize(target))\n\n            case 1 {\n\n                // throw if contract failed to deploy\n\n                revert(0, 0)\n\n            }\n\n        }\n\n        bytes32 hash = keccak256(_code);\n\n        cache[hash] = target;\n",
          "message": "DSProxyCache.write uses assembly (proxy.sol#211-222)\n\t- proxy.sol#212-220\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
          "message": "DSAuthority.canCall (proxy.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
          "message": "DSAuth.setOwner (proxy.sol#47-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(authority);\n",
          "message": "DSAuth.setAuthority (proxy.sol#55-61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function() public payable {\n",
          "message": "DSProxy.fallback (proxy.sol#118-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    function execute(bytes _code, bytes _data)\n\n        public\n\n        payable\n\n        returns (address target, bytes32 response)\n\n    {\n\n        target = cache.read(_code);\n\n        if (target == 0x0) {\n\n            // deploy contract & store its address in cache\n\n            target = cache.write(_code);\n\n        }\n\n\n\n        response = execute(target, _data);\n",
          "message": "DSProxy.execute (proxy.sol#122-134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": 182,
          "vulnerability_code": "    function build() public returns (DSProxy proxy) {\n\n        proxy = build(msg.sender);\n",
          "message": "DSProxyFactory.build (proxy.sol#180-182) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": 209,
          "vulnerability_code": "    function read(bytes _code) public view returns (address) {\n\n        bytes32 hash = keccak256(_code);\n\n        return cache[hash];\n",
          "message": "DSProxyCache.read (proxy.sol#206-209) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function write(bytes _code) public returns (address target) {\n\n        assembly {\n\n            target := create(0, add(_code, 0x20), mload(_code))\n\n            switch iszero(extcodesize(target))\n\n            case 1 {\n\n                // throw if contract failed to deploy\n\n                revert(0, 0)\n\n            }\n\n        }\n\n        bytes32 hash = keccak256(_code);\n\n        cache[hash] = target;\n",
          "message": "DSProxyCache.write (proxy.sol#211-222) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in proxy.sol:\n\t- pragma solidity^0.4.23 (proxy.sol#25): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _cacheAddr) public {\n",
          "message": "Parameter '_cacheAddr' of DSProxy. (proxy.sol#114) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(bytes _code, bytes _data)\n",
          "message": "Parameter '_code' of DSProxy.execute (proxy.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(bytes _code, bytes _data)\n",
          "message": "Parameter '_data' of DSProxy.execute (proxy.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _target, bytes _data)\n",
          "message": "Parameter '_target' of DSProxy.execute (proxy.sol#136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCache(address _cacheAddr)\n",
          "message": "Parameter '_cacheAddr' of DSProxy.setCache (proxy.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes _code) public view returns (address) {\n",
          "message": "Parameter '_code' of DSProxyCache.read (proxy.sol#206) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function write(bytes _code) public returns (address target) {\n",
          "message": "Parameter '_code' of DSProxyCache.write (proxy.sol#211) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _target, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function write(bytes _code) public returns (address target) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DSProxy is DSAuth, DSNote {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(bytes _code, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(bytes _code, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _target, bytes _data)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read(bytes _code) public view returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function write(bytes _code) public returns (address target) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32 => address) cache;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function execute(address _target, bytes _data)\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function write(bytes _code) public returns (address target) {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}