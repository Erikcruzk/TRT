{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _certificateSigner, bool activated) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _setCertificateSigner(_certificateSigner, true);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _certificateControllerActivated = activated;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < 4; i++) { // replace 4 bytes corresponding to function selector\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_certificateSigners[msg.sender] || _checkCertificate(data, 0, 0x00000000), \"54\"); // 0x54\ttransfers halted (contract paused)\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < 4; i++) { // replace 4 bytes corresponding to function selector\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 186,
          "vulnerability_code": "  function _checkCertificate(\n\n    bytes memory data,\n\n    uint256 amount,\n\n    bytes4 functionID\n\n  )\n\n    internal\n\n    view\n\n    returns(bool)\n\n  {\n\n    uint256 counter = _checkCount[msg.sender];\n\n\n\n    uint256 e;\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Certificate should be 97 bytes long\n\n    if (data.length != 97) {\n\n      return false;\n\n    }\n\n\n\n    // Extract certificate information and expiration time from payload\n\n    assembly {\n\n      // Retrieve expirationTime & ECDSA elements from certificate which is a 97 long bytes\n\n      // Certificate encoding format is: <expirationTime (32 bytes)>@<r (32 bytes)>@<s (32 bytes)>@<v (1 byte)>\n\n      e := mload(add(data, 0x20))\n\n      r := mload(add(data, 0x40))\n\n      s := mload(add(data, 0x60))\n\n      v := byte(0, mload(add(data, 0x80)))\n\n    }\n\n\n\n    // Certificate should not be expired\n\n    if (e < now) {\n\n      return false;\n\n    }\n\n\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // Perform ecrecover to ensure message information corresponds to certificate\n\n    if (v == 27 || v == 28) {\n\n      // Extract payload and remove data argument\n\n      bytes memory payload;\n\n\n\n      assembly {\n\n        let payloadsize := sub(calldatasize, 160)\n\n        payload := mload(0x40) // allocate new memory\n\n        mstore(0x40, add(payload, and(add(add(payloadsize, 0x20), 0x1f), not(0x1f)))) // boolean trick for padding to 0x40\n\n        mstore(payload, payloadsize) // set length\n\n        calldatacopy(add(add(payload, 0x20), 4), 4, sub(payloadsize, 4))\n\n      }\n\n\n\n      if(functionID == 0x00000000) {\n\n        assembly {\n\n          calldatacopy(add(payload, 0x20), 0, 4)\n\n        }\n\n      } else {\n\n        for (uint i = 0; i < 4; i++) { // replace 4 bytes corresponding to function selector\n\n          payload[i] = functionID[i];\n\n        }\n\n      }\n\n\n\n      // Pack and hash\n\n      bytes memory pack = abi.encodePacked(\n\n        msg.sender,\n\n        this,\n\n        amount,\n\n        payload,\n\n        e,\n\n        counter\n\n      );\n\n      bytes32 hash = keccak256(pack);\n\n\n\n      // Check if certificate match expected transactions parameters\n\n      if (_certificateSigners[ecrecover(hash, v, r, s)]) {\n\n        return true;\n\n      }\n\n    }\n\n    return false;\n",
          "message": "CertificateController._checkCertificate (CertificateControllerNonce.sol#106-186) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 186,
          "vulnerability_code": "  function _checkCertificate(\n\n    bytes memory data,\n\n    uint256 amount,\n\n    bytes4 functionID\n\n  )\n\n    internal\n\n    view\n\n    returns(bool)\n\n  {\n\n    uint256 counter = _checkCount[msg.sender];\n\n\n\n    uint256 e;\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Certificate should be 97 bytes long\n\n    if (data.length != 97) {\n\n      return false;\n\n    }\n\n\n\n    // Extract certificate information and expiration time from payload\n\n    assembly {\n\n      // Retrieve expirationTime & ECDSA elements from certificate which is a 97 long bytes\n\n      // Certificate encoding format is: <expirationTime (32 bytes)>@<r (32 bytes)>@<s (32 bytes)>@<v (1 byte)>\n\n      e := mload(add(data, 0x20))\n\n      r := mload(add(data, 0x40))\n\n      s := mload(add(data, 0x60))\n\n      v := byte(0, mload(add(data, 0x80)))\n\n    }\n\n\n\n    // Certificate should not be expired\n\n    if (e < now) {\n\n      return false;\n\n    }\n\n\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // Perform ecrecover to ensure message information corresponds to certificate\n\n    if (v == 27 || v == 28) {\n\n      // Extract payload and remove data argument\n\n      bytes memory payload;\n\n\n\n      assembly {\n\n        let payloadsize := sub(calldatasize, 160)\n\n        payload := mload(0x40) // allocate new memory\n\n        mstore(0x40, add(payload, and(add(add(payloadsize, 0x20), 0x1f), not(0x1f)))) // boolean trick for padding to 0x40\n\n        mstore(payload, payloadsize) // set length\n\n        calldatacopy(add(add(payload, 0x20), 4), 4, sub(payloadsize, 4))\n\n      }\n\n\n\n      if(functionID == 0x00000000) {\n\n        assembly {\n\n          calldatacopy(add(payload, 0x20), 0, 4)\n\n        }\n\n      } else {\n\n        for (uint i = 0; i < 4; i++) { // replace 4 bytes corresponding to function selector\n\n          payload[i] = functionID[i];\n\n        }\n\n      }\n\n\n\n      // Pack and hash\n\n      bytes memory pack = abi.encodePacked(\n\n        msg.sender,\n\n        this,\n\n        amount,\n\n        payload,\n\n        e,\n\n        counter\n\n      );\n\n      bytes32 hash = keccak256(pack);\n\n\n\n      // Check if certificate match expected transactions parameters\n\n      if (_certificateSigners[ecrecover(hash, v, r, s)]) {\n\n        return true;\n\n      }\n\n    }\n\n    return false;\n",
          "message": "CertificateController._checkCertificate uses assembly (CertificateControllerNonce.sol#106-186)\n\t- CertificateControllerNonce.sol#128-135\n\t- CertificateControllerNonce.sol#151-157\n\t- CertificateControllerNonce.sol#160-162\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in CertificateControllerNonce.sol:\n\t- pragma solidity^0.5.0 (CertificateControllerNonce.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _certificateSigner, bool activated) public {\n",
          "message": "Parameter '_certificateSigner' of CertificateController. (CertificateControllerNonce.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 85,
          "vulnerability_code": "  function _setCertificateSigner(address operator, bool authorized) internal {\n\n    require(operator != address(0)); // Action Blocked - Not a valid address\n\n    _certificateSigners[operator] = authorized;\n",
          "message": "Function 'CertificateController._setCertificateSigner' (CertificateControllerNonce.sol#82-85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 100,
          "vulnerability_code": "  function _setCertificateControllerActivated(bool activated) internal {\n\n    _certificateControllerActivated = activated;\n",
          "message": "Function 'CertificateController._setCertificateControllerActivated' (CertificateControllerNonce.sol#98-100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 186,
          "vulnerability_code": "  function _checkCertificate(\n\n    bytes memory data,\n\n    uint256 amount,\n\n    bytes4 functionID\n\n  )\n\n    internal\n\n    view\n\n    returns(bool)\n\n  {\n\n    uint256 counter = _checkCount[msg.sender];\n\n\n\n    uint256 e;\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    // Certificate should be 97 bytes long\n\n    if (data.length != 97) {\n\n      return false;\n\n    }\n\n\n\n    // Extract certificate information and expiration time from payload\n\n    assembly {\n\n      // Retrieve expirationTime & ECDSA elements from certificate which is a 97 long bytes\n\n      // Certificate encoding format is: <expirationTime (32 bytes)>@<r (32 bytes)>@<s (32 bytes)>@<v (1 byte)>\n\n      e := mload(add(data, 0x20))\n\n      r := mload(add(data, 0x40))\n\n      s := mload(add(data, 0x60))\n\n      v := byte(0, mload(add(data, 0x80)))\n\n    }\n\n\n\n    // Certificate should not be expired\n\n    if (e < now) {\n\n      return false;\n\n    }\n\n\n\n    if (v < 27) {\n\n      v += 27;\n\n    }\n\n\n\n    // Perform ecrecover to ensure message information corresponds to certificate\n\n    if (v == 27 || v == 28) {\n\n      // Extract payload and remove data argument\n\n      bytes memory payload;\n\n\n\n      assembly {\n\n        let payloadsize := sub(calldatasize, 160)\n\n        payload := mload(0x40) // allocate new memory\n\n        mstore(0x40, add(payload, and(add(add(payloadsize, 0x20), 0x1f), not(0x1f)))) // boolean trick for padding to 0x40\n\n        mstore(payload, payloadsize) // set length\n\n        calldatacopy(add(add(payload, 0x20), 4), 4, sub(payloadsize, 4))\n\n      }\n\n\n\n      if(functionID == 0x00000000) {\n\n        assembly {\n\n          calldatacopy(add(payload, 0x20), 0, 4)\n\n        }\n\n      } else {\n\n        for (uint i = 0; i < 4; i++) { // replace 4 bytes corresponding to function selector\n\n          payload[i] = functionID[i];\n\n        }\n\n      }\n\n\n\n      // Pack and hash\n\n      bytes memory pack = abi.encodePacked(\n\n        msg.sender,\n\n        this,\n\n        amount,\n\n        payload,\n\n        e,\n\n        counter\n\n      );\n\n      bytes32 hash = keccak256(pack);\n\n\n\n      // Check if certificate match expected transactions parameters\n\n      if (_certificateSigners[ecrecover(hash, v, r, s)]) {\n\n        return true;\n\n      }\n\n    }\n\n    return false;\n",
          "message": "Function 'CertificateController._checkCertificate' (CertificateControllerNonce.sol#106-186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool _certificateControllerActivated;\n",
          "message": "Variable 'CertificateController._certificateControllerActivated' (CertificateControllerNonce.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => bool) internal _certificateSigners;\n",
          "message": "Variable 'CertificateController._certificateSigners' (CertificateControllerNonce.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) internal _checkCount;\n",
          "message": "Variable 'CertificateController._checkCount' (CertificateControllerNonce.sol#20) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_certificateSigners[msg.sender] || _checkCertificate(data, 0, 0x00000000), \"54\"); // 0x54\ttransfers halted (contract paused)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if(functionID == 0x00000000) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _checkCertificate(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "      assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool _certificateControllerActivated;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}