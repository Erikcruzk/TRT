{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _certificateSigner, bool activated) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _setCertificateSigner(_certificateSigner, true);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _certificateControllerActivated = activated;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_certificateSigners[msg.sender] || _checkCertificate(data, 0, 0x00000000), \"54\"); // 0x54\ttransfers halted (contract paused)\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "     if(data.length > 0 && (data[0] == hex\"10\" || data[0] == hex\"11\" || data[0] == hex\"22\" || data[0] == hex\"33\")) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "       return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "     } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "       return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "     }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in CertificateControllerMock.sol:\n\t- pragma solidity^0.5.0 (CertificateControllerMock.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _certificateSigner, bool activated) public {\n",
          "message": "Parameter '_certificateSigner' of CertificateControllerMock. (CertificateControllerMock.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 66,
          "vulnerability_code": "  function _setCertificateSigner(address operator, bool authorized) internal {\n\n    require(operator != address(0)); // Action Blocked - Not a valid address\n\n    _certificateSigners[operator] = authorized;\n",
          "message": "Function 'CertificateControllerMock._setCertificateSigner' (CertificateControllerMock.sol#63-66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 82,
          "vulnerability_code": "  function _setCertificateControllerActivated(bool activated) internal {\n\n    _certificateControllerActivated = activated;\n",
          "message": "Function 'CertificateControllerMock._setCertificateControllerActivated' (CertificateControllerMock.sol#80-82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 94,
          "vulnerability_code": "   function _checkCertificate(bytes memory data, uint256 /*value*/, bytes4 /*functionSig*/) internal pure returns(bool) { // Comments to avoid compilation warnings for unused variables.\n\n     if(data.length > 0 && (data[0] == hex\"10\" || data[0] == hex\"11\" || data[0] == hex\"22\" || data[0] == hex\"33\")) {\n\n       return true;\n\n     } else {\n\n       return false;\n\n     }\n",
          "message": "Function 'CertificateControllerMock._checkCertificate' (CertificateControllerMock.sol#88-94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function _checkCertificate(bytes memory data, uint256 /*value*/, bytes4 /*functionSig*/) internal pure returns(bool) { // Comments to avoid compilation warnings for unused variables.\n",
          "message": "Parameter '' of CertificateControllerMock._checkCertificate (CertificateControllerMock.sol#88) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function _checkCertificate(bytes memory data, uint256 /*value*/, bytes4 /*functionSig*/) internal pure returns(bool) { // Comments to avoid compilation warnings for unused variables.\n",
          "message": "Parameter '_scope_0' of CertificateControllerMock._checkCertificate (CertificateControllerMock.sol#88) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool _certificateControllerActivated;\n",
          "message": "Variable 'CertificateControllerMock._certificateControllerActivated' (CertificateControllerMock.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => bool) internal _certificateSigners;\n",
          "message": "Variable 'CertificateControllerMock._certificateSigners' (CertificateControllerMock.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) internal _checkCount;\n",
          "message": "Variable 'CertificateControllerMock._checkCount' (CertificateControllerMock.sol#15) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_certificateSigners[msg.sender] || _checkCertificate(data, 0, 0x00000000), \"54\"); // 0x54\ttransfers halted (contract paused)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool _certificateControllerActivated;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}