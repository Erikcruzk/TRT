{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ERC1820Implementer._setInterface(ERC1400_TOKENS_SENDER);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_canTransfer(from, to, value, data), \"56\"); // 0x56\tinvalid sender\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 136,
          "vulnerability_code": "  function _canTransfer(\n\n    address /*from*/,\n\n    address /*to*/,\n\n    uint /*value*/,\n\n    bytes memory data\n\n  ) // Comments to avoid compilation warnings for unused variables.\n\n    internal\n\n    pure\n\n    returns(bool)\n\n  {\n\n    bytes32 transferRevert = 0x1100000000000000000000000000000000000000000000000000000000000000; // Default sender hook failure data for the mock only\n\n    bytes32 data32;\n\n    assembly {\n\n        data32 := mload(add(data, 32))\n\n    }\n\n    if (data32 == transferRevert) {\n\n      return false;\n\n    } else {\n\n      return true;\n\n    }\n",
          "message": "ERC1400TokensSenderMock._canTransfer (ERC1400TokensSenderMock.sol#116-136) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 136,
          "vulnerability_code": "  function _canTransfer(\n\n    address /*from*/,\n\n    address /*to*/,\n\n    uint /*value*/,\n\n    bytes memory data\n\n  ) // Comments to avoid compilation warnings for unused variables.\n\n    internal\n\n    pure\n\n    returns(bool)\n\n  {\n\n    bytes32 transferRevert = 0x1100000000000000000000000000000000000000000000000000000000000000; // Default sender hook failure data for the mock only\n\n    bytes32 data32;\n\n    assembly {\n\n        data32 := mload(add(data, 32))\n\n    }\n\n    if (data32 == transferRevert) {\n\n      return false;\n\n    } else {\n\n      return true;\n\n    }\n",
          "message": "ERC1400TokensSenderMock._canTransfer uses assembly (ERC1400TokensSenderMock.sol#116-136)\n\t- ERC1400TokensSenderMock.sol#128-130\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in ERC1400TokensSenderMock.sol:\n\t- pragma solidity^0.5.0 (ERC1400TokensSenderMock.sol#7): it allows old versions\n\t- pragma solidity^0.5.0 (ERC1400TokensSenderMock.sol#45): it allows old versions\n\t- pragma solidity^0.5.0 (ERC1400TokensSenderMock.sol#73): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canImplementInterfaceForAddress(bytes32 interfaceHash, address /*addr*/) // Comments to avoid compilation warnings for unused variables.\n",
          "message": "Parameter '' of ERC1820Implementer.canImplementInterfaceForAddress (ERC1400TokensSenderMock.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 67,
          "vulnerability_code": "  function _setInterface(string memory interfaceLabel) internal {\n\n    _interfaceHashes[keccak256(abi.encodePacked(interfaceLabel))] = true;\n",
          "message": "Function 'ERC1820Implementer._setInterface' (ERC1400TokensSenderMock.sol#65-67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(bytes32 => bool) internal _interfaceHashes;\n",
          "message": "Variable 'ERC1820Implementer._interfaceHashes' (ERC1400TokensSenderMock.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 /*functionSig*/,\n",
          "message": "Parameter '' of ERC1400TokensSenderMock.canTransfer (ERC1400TokensSenderMock.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 /*partition*/,\n",
          "message": "Parameter '_scope_0' of ERC1400TokensSenderMock.canTransfer (ERC1400TokensSenderMock.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address /*operator*/,\n",
          "message": "Parameter '_scope_1' of ERC1400TokensSenderMock.canTransfer (ERC1400TokensSenderMock.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata /*operatorData*/\n",
          "message": "Parameter '_scope_2' of ERC1400TokensSenderMock.canTransfer (ERC1400TokensSenderMock.sol#92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 /*functionSig*/,\n",
          "message": "Parameter '' of ERC1400TokensSenderMock.tokensToTransfer (ERC1400TokensSenderMock.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 /*partition*/,\n",
          "message": "Parameter '_scope_0' of ERC1400TokensSenderMock.tokensToTransfer (ERC1400TokensSenderMock.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address /*operator*/,\n",
          "message": "Parameter '_scope_1' of ERC1400TokensSenderMock.tokensToTransfer (ERC1400TokensSenderMock.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata /*operatorData*/\n",
          "message": "Parameter '_scope_2' of ERC1400TokensSenderMock.tokensToTransfer (ERC1400TokensSenderMock.sol#109) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": 136,
          "vulnerability_code": "  function _canTransfer(\n\n    address /*from*/,\n\n    address /*to*/,\n\n    uint /*value*/,\n\n    bytes memory data\n\n  ) // Comments to avoid compilation warnings for unused variables.\n\n    internal\n\n    pure\n\n    returns(bool)\n\n  {\n\n    bytes32 transferRevert = 0x1100000000000000000000000000000000000000000000000000000000000000; // Default sender hook failure data for the mock only\n\n    bytes32 data32;\n\n    assembly {\n\n        data32 := mload(add(data, 32))\n\n    }\n\n    if (data32 == transferRevert) {\n\n      return false;\n\n    } else {\n\n      return true;\n\n    }\n",
          "message": "Function 'ERC1400TokensSenderMock._canTransfer' (ERC1400TokensSenderMock.sol#116-136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address /*from*/,\n",
          "message": "Parameter '' of ERC1400TokensSenderMock._canTransfer (ERC1400TokensSenderMock.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address /*to*/,\n",
          "message": "Parameter '_scope_0' of ERC1400TokensSenderMock._canTransfer (ERC1400TokensSenderMock.sol#118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint /*value*/,\n",
          "message": "Parameter '_scope_1' of ERC1400TokensSenderMock._canTransfer (ERC1400TokensSenderMock.sol#119) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canTransfer(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function tokensToTransfer(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canTransfer(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external view returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 constant ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata /*operatorData*/\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns(bool)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return(_canTransfer(from, to, value, data));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return(_canTransfer(from, to, value, data));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return(_canTransfer(from, to, value, data));\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}