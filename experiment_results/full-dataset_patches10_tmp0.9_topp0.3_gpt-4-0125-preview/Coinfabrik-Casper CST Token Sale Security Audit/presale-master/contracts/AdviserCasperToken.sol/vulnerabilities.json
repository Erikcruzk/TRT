{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "ERC20Interface.totalSupply (AdviserCasperToken.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 102,
          "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply - balances[address(0)];\n",
          "message": "AdviserCasperToken.totalSupply (AdviserCasperToken.sol#100-102) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 110,
          "vulnerability_code": "    function balanceOf(address tokenOwner) public view returns (uint balance) {\n\n        return balances[tokenOwner];\n",
          "message": "AdviserCasperToken.balanceOf (AdviserCasperToken.sol#108-110) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address tokenOwner) public view returns (uint balance);\n",
          "message": "ERC20Interface.balanceOf (AdviserCasperToken.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n",
          "message": "ERC20Interface.allowance (AdviserCasperToken.sol#34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": 168,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n",
          "message": "AdviserCasperToken.allowance (AdviserCasperToken.sol#166-168) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success);\n",
          "message": "ERC20Interface.transfer (AdviserCasperToken.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success) {\n\n        require(msg.sender == owner);\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(msg.sender, to, tokens);\n\n        return true;\n",
          "message": "AdviserCasperToken.transfer (AdviserCasperToken.sol#118-124) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n\n        require(msg.sender == owner);\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        return true;\n",
          "message": "AdviserCasperToken.approve (AdviserCasperToken.sol#135-140) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success);\n",
          "message": "ERC20Interface.approve (AdviserCasperToken.sol#36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": 159,
          "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        require(msg.sender == owner);\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(from, to, tokens);\n\n        return true;\n",
          "message": "AdviserCasperToken.transferFrom (AdviserCasperToken.sol#152-159) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n",
          "message": "ERC20Interface.transferFrom (AdviserCasperToken.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        newOwner = _newOwner;\n",
          "message": "Owned.transferOwnership (AdviserCasperToken.sol#61-63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n",
          "message": "Owned.acceptOwnership (AdviserCasperToken.sol#64-69) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;\n",
          "message": "Detected issues with version pragma in AdviserCasperToken.sol:\n\t- pragma solidity^0.4.19 (AdviserCasperToken.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function Owned() public {\n\n        owner = msg.sender;\n",
          "message": "Function 'Owned.Owned' (AdviserCasperToken.sol#52-54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Owned.transferOwnership (AdviserCasperToken.sol#61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function AdviserCasperToken() public {\n\n        symbol = \"ACST\";\n\n        name = \"Adviser Csper Token\";\n\n        decimals = 18;\n\n        _totalSupply = 1000000 * 10**uint(decimals);\n\n        balances[owner] = _totalSupply;\n\n        Transfer(address(0), owner, _totalSupply);\n",
          "message": "Function 'AdviserCasperToken.AdviserCasperToken' (AdviserCasperToken.sol#87-94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public _totalSupply;\n",
          "message": "Variable 'AdviserCasperToken._totalSupply' (AdviserCasperToken.sol#78) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _totalSupply - balances[address(0)];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => uint)) allowed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _totalSupply - balances[address(0)];\n",
          "message": null
        }
      ]
    }
  }
}