{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return abi.encodeWithSelector(\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "            STANDARD_ERROR_SELECTOR,\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes(message)\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _locked = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function _refundNonZeroBalance()\n\n        internal\n\n    {\n\n        uint256 balance = address(this).balance;\n\n        if (balance > 0) {\n\n            msg.sender.transfer(balance);\n\n        }\n",
          "message": "Refundable._refundNonZeroBalance (TestRefundable.sol#217-224) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(balance) (TestRefundable.sol#222)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function rrevert(bytes memory errorData)\n\n        internal\n\n        pure\n\n    {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert (TestRefundable.sol#91-98) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function rrevert(bytes memory errorData)\n\n        internal\n\n        pure\n\n    {\n\n        assembly {\n\n            revert(add(errorData, 0x20), mload(errorData))\n\n        }\n",
          "message": "LibRichErrors.rrevert uses assembly (TestRefundable.sol#91-98)\n\t- TestRefundable.sol#95-97\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function nestedDisableRefundUntilEndFunction()\n\n        public\n\n        payable\n\n        disableRefundUntilEnd\n\n        returns (uint256)\n\n    {\n\n        disableRefundUntilEndFunction();\n\n        return address(this).balance;\n",
          "message": "TestRefundable.nestedDisableRefundUntilEndFunction (TestRefundable.sol#306-314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function mixedRefundModifierFunction()\n\n        public\n\n        payable\n\n        disableRefundUntilEnd\n\n        returns (uint256)\n\n    {\n\n        refundFinalBalanceFunction();\n\n        return address(this).balance;\n",
          "message": "TestRefundable.mixedRefundModifierFunction (TestRefundable.sol#316-324) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in TestRefundable.sol:\n\t- pragma solidity^0.5.9 (TestRefundable.sol#21): it allows old versions\n\t- pragma solidity^0.5.9 (TestRefundable.sol#60): it allows old versions\n\t- pragma solidity^0.5.9 (TestRefundable.sol#121): it allows old versions\n\t- pragma solidity^0.5.9 (TestRefundable.sol#178): it allows old versions\n\t- pragma solidity^0.5.9 (TestRefundable.sol#268): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function IllegalReentrancyError()\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES;\n",
          "message": "Function 'LibReentrancyGuardRichErrors.IllegalReentrancyError' (TestRefundable.sol#31-37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function StandardError(\n\n        string memory message\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes memory)\n\n    {\n\n        return abi.encodeWithSelector(\n\n            STANDARD_ERROR_SELECTOR,\n\n            bytes(message)\n\n        );\n",
          "message": "Function 'LibRichErrors.StandardError' (TestRefundable.sol#75-86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function _lockMutexOrThrowIfAlreadyLocked()\n\n        internal\n\n    {\n\n        // Ensure mutex is unlocked.\n\n        if (_locked) {\n\n            LibRichErrors.rrevert(\n\n                LibReentrancyGuardRichErrors.IllegalReentrancyError()\n\n            );\n\n        }\n\n        // Lock mutex.\n\n        _locked = true;\n",
          "message": "Function 'ReentrancyGuard._lockMutexOrThrowIfAlreadyLocked' (TestRefundable.sol#137-148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function _unlockMutex()\n\n        internal\n\n    {\n\n        // Unlock mutex.\n\n        _locked = false;\n",
          "message": "Function 'ReentrancyGuard._unlockMutex' (TestRefundable.sol#150-155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": 215,
          "vulnerability_code": "    function _refundNonZeroBalanceIfEnabled()\n\n        internal\n\n    {\n\n        if (!_areRefundsDisabled()) {\n\n            _refundNonZeroBalance();\n\n        }\n",
          "message": "Function 'Refundable._refundNonZeroBalanceIfEnabled' (TestRefundable.sol#209-215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function _refundNonZeroBalance()\n\n        internal\n\n    {\n\n        uint256 balance = address(this).balance;\n\n        if (balance > 0) {\n\n            msg.sender.transfer(balance);\n\n        }\n",
          "message": "Function 'Refundable._refundNonZeroBalance' (TestRefundable.sol#217-224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 230,
          "vulnerability_code": "    function _disableRefund()\n\n        internal\n\n    {\n\n        _shouldNotRefund = true;\n",
          "message": "Function 'Refundable._disableRefund' (TestRefundable.sol#226-230) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function _enableAndRefundNonZeroBalance()\n\n        internal\n\n    {\n\n        _shouldNotRefund = false;\n\n        _refundNonZeroBalance();\n",
          "message": "Function 'Refundable._enableAndRefundNonZeroBalance' (TestRefundable.sol#232-237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 245,
          "vulnerability_code": "    function _areRefundsDisabled()\n\n        internal\n\n        view\n\n        returns (bool)\n\n    {\n\n        return _shouldNotRefund;\n",
          "message": "Function 'Refundable._areRefundsDisabled' (TestRefundable.sol#239-245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _shouldNotRefund;\n",
          "message": "Variable 'Refundable._shouldNotRefund' (TestRefundable.sol#185) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x08c379a0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TestRefundable is\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _locked = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rrevert(bytes memory errorData)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}