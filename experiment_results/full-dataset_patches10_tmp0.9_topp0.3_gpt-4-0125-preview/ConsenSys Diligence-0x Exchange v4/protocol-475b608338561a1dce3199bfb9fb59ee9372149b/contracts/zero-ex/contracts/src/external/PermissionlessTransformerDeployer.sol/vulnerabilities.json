{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < extcode.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < extcode.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(deployedAddress != address(0), 'PermissionlessTransformerDeployer/DEPLOY_FAILED');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isDelegateCallSafe(deployedAddress), 'PermissionlessTransformerDeployer/UNSAFE_CODE');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(size > 0, 'PermissionlessTransformerDeployer/NO_CODE');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (op > 95 && op < 128) { // pushN\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "                i += (op - 95);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "                continue;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < extcode.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(deployedAddress != address(0), 'PermissionlessTransformerDeployer/DEPLOY_FAILED');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isDelegateCallSafe(deployedAddress), 'PermissionlessTransformerDeployer/UNSAFE_CODE');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(size > 0, 'PermissionlessTransformerDeployer/NO_CODE');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function isDelegateCallSafe(address target) public view returns (bool) {\n\n        uint256 size;\n\n        assembly { size := extcodesize(target) }\n\n        require(size > 0, 'PermissionlessTransformerDeployer/NO_CODE');\n\n\n\n        bytes memory extcode = new bytes(size);\n\n        assembly {\n\n            extcodecopy(target, add(extcode, 32), 0, size)\n\n        }\n\n\n\n        // Look for any reachable, impermissible opcodes.\n\n        bool reachable = true;\n\n        for (uint256 i = 0; i < extcode.length; i++) {\n\n            uint8 op = uint8(extcode[i]);\n\n\n\n            // If the opcode is a PUSH, skip over the push data.\n\n            if (op > 95 && op < 128) { // pushN\n\n                i += (op - 95);\n\n                continue;\n\n            }\n\n\n\n            if (reachable) {\n\n                // If execution is halted, mark subsequent opcodes unreachable.\n\n                if (\n\n                    op == 254 || // invalid\n\n                    op == 243 || // return\n\n                    op == 253 || // revert\n\n                    op == 86  || // jump\n\n                    op == 0      // stop\n\n                ) {\n\n                    reachable = false;\n\n                    continue;\n\n                }\n\n\n\n                // If opcode is impermissible, contract is unsafe.\n\n                if (\n\n                    op == 242 || // callcode\n\n                    op == 244 || // delegatecall\n\n                    op == 255 || // selfdestruct\n\n                    op == 240 || // create\n\n                    op == 245 || // create2\n\n                    op == 84  || // sload\n\n                    op == 85     // sstore\n\n                ) {\n\n                    return false;\n\n                }\n\n            } else if (op == 91) { // jumpdest\n\n                // After a JUMPDEST, opcodes are reachable again.\n\n                reachable = true;\n\n            }\n\n        }\n\n\n\n        return true; // No impermissible opcodes found.\n",
          "message": "PermissionlessTransformerDeployer.isDelegateCallSafe (PermissionlessTransformerDeployer.sol#61-114) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function deploy(bytes memory bytecode, bytes32 salt)\n\n        public\n\n        payable\n\n        returns (address deployedAddress)\n\n    {\n\n        assembly {\n\n            deployedAddress := create2(callvalue(), add(bytecode, 32), mload(bytecode), salt)\n\n        }\n\n        require(deployedAddress != address(0), 'PermissionlessTransformerDeployer/DEPLOY_FAILED');\n\n        require(isDelegateCallSafe(deployedAddress), 'PermissionlessTransformerDeployer/UNSAFE_CODE');\n\n        toDeploymentSalt[deployedAddress] = salt;\n\n        toInitCodeHash[deployedAddress] = keccak256(bytecode);\n\n        emit Deployed(deployedAddress, salt, msg.sender);\n",
          "message": "Contract locking ether found in PermissionlessTransformerDeployer.sol:\n\tContract PermissionlessTransformerDeployer has payable functions:\n\t - deploy (PermissionlessTransformerDeployer.sol#39-52)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function deploy(bytes memory bytecode, bytes32 salt)\n\n        public\n\n        payable\n\n        returns (address deployedAddress)\n\n    {\n\n        assembly {\n\n            deployedAddress := create2(callvalue(), add(bytecode, 32), mload(bytecode), salt)\n\n        }\n\n        require(deployedAddress != address(0), 'PermissionlessTransformerDeployer/DEPLOY_FAILED');\n\n        require(isDelegateCallSafe(deployedAddress), 'PermissionlessTransformerDeployer/UNSAFE_CODE');\n\n        toDeploymentSalt[deployedAddress] = salt;\n\n        toInitCodeHash[deployedAddress] = keccak256(bytecode);\n\n        emit Deployed(deployedAddress, salt, msg.sender);\n",
          "message": "PermissionlessTransformerDeployer.deploy uses assembly (PermissionlessTransformerDeployer.sol#39-52)\n\t- PermissionlessTransformerDeployer.sol#44-46\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function isDelegateCallSafe(address target) public view returns (bool) {\n\n        uint256 size;\n\n        assembly { size := extcodesize(target) }\n\n        require(size > 0, 'PermissionlessTransformerDeployer/NO_CODE');\n\n\n\n        bytes memory extcode = new bytes(size);\n\n        assembly {\n\n            extcodecopy(target, add(extcode, 32), 0, size)\n\n        }\n\n\n\n        // Look for any reachable, impermissible opcodes.\n\n        bool reachable = true;\n\n        for (uint256 i = 0; i < extcode.length; i++) {\n\n            uint8 op = uint8(extcode[i]);\n\n\n\n            // If the opcode is a PUSH, skip over the push data.\n\n            if (op > 95 && op < 128) { // pushN\n\n                i += (op - 95);\n\n                continue;\n\n            }\n\n\n\n            if (reachable) {\n\n                // If execution is halted, mark subsequent opcodes unreachable.\n\n                if (\n\n                    op == 254 || // invalid\n\n                    op == 243 || // return\n\n                    op == 253 || // revert\n\n                    op == 86  || // jump\n\n                    op == 0      // stop\n\n                ) {\n\n                    reachable = false;\n\n                    continue;\n\n                }\n\n\n\n                // If opcode is impermissible, contract is unsafe.\n\n                if (\n\n                    op == 242 || // callcode\n\n                    op == 244 || // delegatecall\n\n                    op == 255 || // selfdestruct\n\n                    op == 240 || // create\n\n                    op == 245 || // create2\n\n                    op == 84  || // sload\n\n                    op == 85     // sstore\n\n                ) {\n\n                    return false;\n\n                }\n\n            } else if (op == 91) { // jumpdest\n\n                // After a JUMPDEST, opcodes are reachable again.\n\n                reachable = true;\n\n            }\n\n        }\n\n\n\n        return true; // No impermissible opcodes found.\n",
          "message": "PermissionlessTransformerDeployer.isDelegateCallSafe uses assembly (PermissionlessTransformerDeployer.sol#61-114)\n\t- PermissionlessTransformerDeployer.sol#63\n\t- PermissionlessTransformerDeployer.sol#67-69\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Different versions of Solidity is used in PermissionlessTransformerDeployer.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.5']\n\t- PermissionlessTransformerDeployer.sol#21 declares pragma solidity^0.6.5\n\t- PermissionlessTransformerDeployer.sol#22 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function deploy(bytes memory bytecode, bytes32 salt)\n\n        public\n\n        payable\n\n        returns (address deployedAddress)\n\n    {\n\n        assembly {\n\n            deployedAddress := create2(callvalue(), add(bytecode, 32), mload(bytecode), salt)\n\n        }\n\n        require(deployedAddress != address(0), 'PermissionlessTransformerDeployer/DEPLOY_FAILED');\n\n        require(isDelegateCallSafe(deployedAddress), 'PermissionlessTransformerDeployer/UNSAFE_CODE');\n\n        toDeploymentSalt[deployedAddress] = salt;\n\n        toInitCodeHash[deployedAddress] = keccak256(bytecode);\n\n        emit Deployed(deployedAddress, salt, msg.sender);\n",
          "message": "PermissionlessTransformerDeployer.deploy (PermissionlessTransformerDeployer.sol#39-52) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Detected issues with version pragma in PermissionlessTransformerDeployer.sol:\n\t- pragma solidity^0.6.5 (PermissionlessTransformerDeployer.sol#21): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < extcode.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < extcode.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract PermissionlessTransformerDeployer {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isDelegateCallSafe(address target) public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}