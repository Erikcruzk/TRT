{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "delegatecall-to-arbitrary-address",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory resultData) = target.delegatecall(callData);\n",
          "message": "An attacker may perform delegatecall() to an arbitrary address."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function executeDelegateCall(\n\n        address target,\n\n        bytes calldata callData\n\n    )\n\n        external\n\n    {\n\n        (bool success, bytes memory resultData) = target.delegatecall(callData);\n\n        if (!success) {\n\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n\n        }\n\n        assembly { return(add(resultData, 32), mload(resultData)) }\n",
          "message": "TestDelegateCaller.executeDelegateCall (TestDelegateCaller.sol#26-37) uses delegatecall to a input-controlled function id\n\t(success,resultData) = target.delegatecall(callData) (TestDelegateCaller.sol#32)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function executeDelegateCall(\n\n        address target,\n\n        bytes calldata callData\n\n    )\n\n        external\n\n    {\n\n        (bool success, bytes memory resultData) = target.delegatecall(callData);\n\n        if (!success) {\n\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n\n        }\n\n        assembly { return(add(resultData, 32), mload(resultData)) }\n",
          "message": "TestDelegateCaller.executeDelegateCall uses assembly (TestDelegateCaller.sol#26-37)\n\t- TestDelegateCaller.sol#34\n\t- TestDelegateCaller.sol#36\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Different versions of Solidity is used in TestDelegateCaller.sol:\n\t- Version used: ['ABIEncoderV2', '^0.6.5']\n\t- TestDelegateCaller.sol#21 declares pragma solidity^0.6.5\n\t- TestDelegateCaller.sol#22 declares pragma experimentalABIEncoderV2\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": "Detected issues with version pragma in TestDelegateCaller.sol:\n\t- pragma solidity^0.6.5 (TestDelegateCaller.sol#21): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function executeDelegateCall(\n\n        address target,\n\n        bytes calldata callData\n\n    )\n\n        external\n\n    {\n\n        (bool success, bytes memory resultData) = target.delegatecall(callData);\n\n        if (!success) {\n\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n\n        }\n\n        assembly { return(add(resultData, 32), mload(resultData)) }\n",
          "message": "Low level call in TestDelegateCaller.executeDelegateCall (TestDelegateCaller.sol#26-37):\n\t-(success,resultData) = target.delegatecall(callData) TestDelegateCaller.sol#32\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory resultData) = target.delegatecall(callData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly { revert(add(resultData, 32), mload(resultData)) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { return(add(resultData, 32), mload(resultData)) }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Delegatecall to user-supplied address (SWC 112)",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory resultData) = target.delegatecall(callData);\n",
          "message": "The contract delegates execution to another contract with a user-supplied address.\nThe smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.\nClassification: SWC-112"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}