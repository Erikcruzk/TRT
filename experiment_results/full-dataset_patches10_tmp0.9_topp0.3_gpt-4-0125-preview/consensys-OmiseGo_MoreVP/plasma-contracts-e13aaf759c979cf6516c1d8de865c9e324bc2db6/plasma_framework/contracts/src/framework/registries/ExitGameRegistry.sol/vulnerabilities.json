{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 _minExitPeriod, uint256 _initialImmuneExitGames)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _exitGameQuarantine.quarantinePeriod = 3 * _minExitPeriod;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _exitGameQuarantine.immunitiesRemaining = _initialImmuneExitGames;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), \"An empty address cannot be quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_self.store[_contractAddress] == 0, \"The contract is already quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == caller, \"Caller address is unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_exitGameToTxType[msg.sender] != 0, \"The call is not from a registered exit game contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_exitGameQuarantine.isQuarantined(msg.sender), \"ExitGame is quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_txType != 0, \"Should not register with tx type 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contract != address(0), \"Should not register with an empty exit game address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_exitGames[_txType] == address(0), \"The tx type is already registered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_exitGameToTxType[_contract] == 0, \"The exit game contract is already registered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Protocol.isValidProtocol(_protocol), \"Invalid protocol value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _self.immunitiesRemaining--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), \"An empty address cannot be quarantined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_self.store[_contractAddress] == 0, \"The contract is already quarantined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_exitGameToTxType[msg.sender] != 0, \"The call is not from a registered exit game contract\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_txType != 0, \"Should not register with tx type 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contract != address(0), \"Should not register with an empty exit game address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_exitGames[_txType] == address(0), \"The tx type is already registered\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_exitGameToTxType[_contract] == 0, \"The exit game contract is already registered\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "timestamp",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n\n        return block.timestamp < _self.store[_contractAddress];\n",
          "message": "Quarantine.isQuarantined (ExitGameRegistry.sol#46-48) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < _self.store[_contractAddress] (ExitGameRegistry.sol#47)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMaintainer() public view returns (address);\n",
          "message": "ExitGameRegistry.getMaintainer (ExitGameRegistry.sol#123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 133,
          "vulnerability_code": "    function isExitGameSafeToUse(address _contract) public view returns (bool) {\n\n        return _exitGameToTxType[_contract] != 0 && !_exitGameQuarantine.isQuarantined(_contract);\n",
          "message": "ExitGameRegistry.isExitGameSafeToUse (ExitGameRegistry.sol#131-133) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function registerExitGame(uint256 _txType, address _contract, uint8 _protocol) public onlyFrom(getMaintainer()) {\n\n        require(_txType != 0, \"Should not register with tx type 0\");\n\n        require(_contract != address(0), \"Should not register with an empty exit game address\");\n\n        require(_exitGames[_txType] == address(0), \"The tx type is already registered\");\n\n        require(_exitGameToTxType[_contract] == 0, \"The exit game contract is already registered\");\n\n        require(Protocol.isValidProtocol(_protocol), \"Invalid protocol value\");\n\n\n\n        _exitGames[_txType] = _contract;\n\n        _exitGameToTxType[_contract] = _txType;\n\n        _protocols[_txType] = _protocol;\n\n        _exitGameQuarantine.quarantine(_contract);\n\n\n\n        emit ExitGameRegistered(_txType, _contract, _protocol);\n",
          "message": "ExitGameRegistry.registerExitGame (ExitGameRegistry.sol#142-155) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 162,
          "vulnerability_code": "    function protocols(uint256 _txType) public view returns (uint8) {\n\n        return _protocols[_txType];\n",
          "message": "ExitGameRegistry.protocols (ExitGameRegistry.sol#160-162) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 169,
          "vulnerability_code": "    function exitGames(uint256 _txType) public view returns (address) {\n\n        return _exitGames[_txType];\n",
          "message": "ExitGameRegistry.exitGames (ExitGameRegistry.sol#167-169) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 176,
          "vulnerability_code": "    function exitGameToTxType(address _exitGame) public view returns (uint256) {\n\n        return _exitGameToTxType[_exitGame];\n",
          "message": "ExitGameRegistry.exitGameToTxType (ExitGameRegistry.sol#174-176) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in ExitGameRegistry.sol:\n\t- pragma solidity0.5.11 (ExitGameRegistry.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (ExitGameRegistry.sol#29): it allows old versions\n\t- pragma solidity0.5.11 (ExitGameRegistry.sol#68): it allows old versions\n\t- pragma solidity0.5.11 (ExitGameRegistry.sol#80): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function MVP() internal pure returns (uint8) {\n\n        return MVP_VALUE;\n",
          "message": "Function 'Protocol.MVP' (ExitGameRegistry.sol#13-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function MORE_VP() internal pure returns (uint8) {\n\n        return MORE_VP_VALUE;\n",
          "message": "Function 'Protocol.MORE_VP' (ExitGameRegistry.sol#18-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n",
          "message": "Parameter '_self' of Quarantine.isQuarantined (ExitGameRegistry.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n",
          "message": "Parameter '_contractAddress' of Quarantine.isQuarantined (ExitGameRegistry.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantine(Data storage _self, address _contractAddress) internal {\n",
          "message": "Parameter '_self' of Quarantine.quarantine (ExitGameRegistry.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantine(Data storage _self, address _contractAddress) internal {\n",
          "message": "Parameter '_contractAddress' of Quarantine.quarantine (ExitGameRegistry.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 _minExitPeriod, uint256 _initialImmuneExitGames)\n",
          "message": "Parameter '_minExitPeriod' of ExitGameRegistry. (ExitGameRegistry.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 _minExitPeriod, uint256 _initialImmuneExitGames)\n",
          "message": "Parameter '_initialImmuneExitGames' of ExitGameRegistry. (ExitGameRegistry.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isExitGameSafeToUse(address _contract) public view returns (bool) {\n",
          "message": "Parameter '_contract' of ExitGameRegistry.isExitGameSafeToUse (ExitGameRegistry.sol#131) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function registerExitGame(uint256 _txType, address _contract, uint8 _protocol) public onlyFrom(getMaintainer()) {\n",
          "message": "Parameter '_txType' of ExitGameRegistry.registerExitGame (ExitGameRegistry.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function registerExitGame(uint256 _txType, address _contract, uint8 _protocol) public onlyFrom(getMaintainer()) {\n",
          "message": "Parameter '_contract' of ExitGameRegistry.registerExitGame (ExitGameRegistry.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function registerExitGame(uint256 _txType, address _contract, uint8 _protocol) public onlyFrom(getMaintainer()) {\n",
          "message": "Parameter '_protocol' of ExitGameRegistry.registerExitGame (ExitGameRegistry.sol#142) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function protocols(uint256 _txType) public view returns (uint8) {\n",
          "message": "Parameter '_txType' of ExitGameRegistry.protocols (ExitGameRegistry.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exitGames(uint256 _txType) public view returns (address) {\n",
          "message": "Parameter '_txType' of ExitGameRegistry.exitGames (ExitGameRegistry.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exitGameToTxType(address _exitGame) public view returns (uint256) {\n",
          "message": "Parameter '_exitGame' of ExitGameRegistry.exitGameToTxType (ExitGameRegistry.sol#174) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => address) private _exitGames; // txType => exit game contract address\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _exitGameToTxType; // exit game contract address => tx type\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => uint8) private _protocols; // tx type => protocol (MVP/MORE_VP)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Quarantine.Data private _exitGameQuarantine;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}