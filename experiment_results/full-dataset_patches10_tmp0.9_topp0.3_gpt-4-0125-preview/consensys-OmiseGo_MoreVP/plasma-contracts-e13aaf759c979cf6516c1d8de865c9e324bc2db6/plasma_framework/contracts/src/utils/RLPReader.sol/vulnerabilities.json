{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < items; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isList(item), \"Item is not a list\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(itemLen <= item.len, \"Length is larger than data\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(lengthSum < item.len, \"Invalid rlp item length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(item.len == 21, \"Item length must be == 21\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(item.len > 0 && item.len <= 33, \"Item length must be <= 33\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(itemLen <= item.len, \"Length is larger than data\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(currPtr <= endPtr, \"Invalid rlp item length\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "                require(byte1 >= STRING_SHORT_START, \"Invalid rlp encoding\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(byte1 != 0, \"Invalid rlp encoding\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(byte1 != 0, \"Invalid rlp encoding\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(item.len > 0, \"Item length must be > 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(itemLen <= item.len, \"Length is larger than data\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(item.len > 0 && item.len <= 33, \"Item length must be <= 33\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (byte0 < LIST_SHORT_START) {  // being explicit\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return byte0 - (STRING_LONG_START - 1) + 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return byte0 - (LIST_LONG_START - 1) + 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } \n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < items; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "            count++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n\n        uint memPtr;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            memPtr := add(item, 0x20)\n\n        }\n\n\n\n        return RLPItem(item.length, memPtr);\n",
          "message": "RLPReader.toRlpItem (RLPReader.sol#25-34) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isList(RLPItem memory item) internal pure returns (bool) {\n\n        if (item.len == 0) return false;\n\n\n\n        uint8 byte0;\n\n        uint memPtr = item.memPtr;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < LIST_SHORT_START)\n\n            return false;\n\n        return true;\n",
          "message": "RLPReader.isList (RLPReader.sol#63-76) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n\n        bytes memory result = new bytes(item.len);\n\n        if (result.length == 0) return result;\n\n        \n\n        uint ptr;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            ptr := add(0x20, result)\n\n        }\n\n\n\n        copy(item.memPtr, ptr, item.len);\n\n        return result;\n",
          "message": "RLPReader.toRlpBytes (RLPReader.sol#80-92) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function toUint(RLPItem memory item) internal pure returns (uint) {\n\n        require(item.len > 0 && item.len <= 33, \"Item length must be <= 33\");\n\n        \n\n        uint itemLen = _itemLength(item.memPtr);\n\n        require(itemLen <= item.len, \"Length is larger than data\");\n\n\n\n        uint offset = _payloadOffset(item.memPtr);\n\n        uint len = itemLen - offset;\n\n\n\n        uint result;\n\n        uint memPtr = item.memPtr + offset;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            result := mload(memPtr)\n\n\n\n            // shfit to the correct location if neccesary\n\n            // TODO audit prep, can this overflow?\n\n            if lt(len, 32) {\n\n                result := div(result, exp(256, sub(32, len)))\n\n            }\n\n        }\n\n\n\n        return result;\n",
          "message": "RLPReader.toUint (RLPReader.sol#101-124) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function _itemLength(uint memPtr) private pure returns (uint) {\n\n        uint itemLen;\n\n        uint byte0;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < STRING_SHORT_START) {\n\n            itemLen = 1;\n\n        } else if (byte0 < STRING_LONG_START) {\n\n            itemLen = byte0 - STRING_SHORT_START + 1;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                memPtr := add(memPtr, 1)\n\n                byte1 := byte(0, mload(memPtr))\n\n            }\n\n            if (itemLen == 2) {\n\n                // Check that the value is valid for a short string\n\n                require(byte1 >= STRING_SHORT_START, \"Invalid rlp encoding\");\n\n            }\n\n        } else if (byte0 < LIST_SHORT_START) {\n\n            uint dataLen;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n\n\n                byte1 := byte(0, mload(memPtr))\n\n                \n\n                /* 32 byte word size */\n\n                // TODO audit prep, check this shifting for overflow, etc\n\n                dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n\n                itemLen := add(dataLen, add(byteLen, 1))\n\n            }\n\n            // Check valid long string i.e. value of length > MAX_SHORT_LEN with no leading zeros\n\n            require(byte1 != 0, \"Invalid rlp encoding\");\n\n            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n\n        } else if (byte0 < LIST_LONG_START) {\n\n            itemLen = byte0 - LIST_SHORT_START + 1;\n\n        } else {\n\n            uint dataLen;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                let lengthLen := sub(byte0, 0xf7)\n\n                memPtr := add(memPtr, 1)\n\n\n\n                byte1 := byte(0, mload(memPtr))\n\n\n\n                // TODO audit prep, check this shifting for overflow, etc\n\n                dataLen := div(mload(memPtr), exp(256, sub(32, lengthLen))) // right shifting to the correct length\n\n                itemLen := add(dataLen, add(lengthLen, 1))\n\n            }\n\n            // Check valid long list i.e. value of length > MAX_SHORT_LEN with no leading zeros\n\n            require(byte1 != 0, \"Invalid rlp encoding\");\n\n            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n\n        }\n\n\n\n        return itemLen;\n",
          "message": "RLPReader._itemLength (RLPReader.sol#146-208) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 227,
          "vulnerability_code": "    function _payloadOffset(uint memPtr) private pure returns (uint) {\n\n        uint byte0;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < STRING_SHORT_START) {\n\n            return 0;\n\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n\n            return 1;\n\n        } else if (byte0 < LIST_SHORT_START) {  // being explicit\n\n            return byte0 - (STRING_LONG_START - 1) + 1;\n\n        } else {\n\n            return byte0 - (LIST_LONG_START - 1) + 1;\n\n        } \n",
          "message": "RLPReader._payloadOffset (RLPReader.sol#211-227) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": 256,
          "vulnerability_code": "    function copy(uint src, uint dest, uint len) private pure {\n\n        if (len == 0) return;\n\n\n\n        // copy as many word sizes as possible\n\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n\n\n            src += WORD_SIZE;\n\n            dest += WORD_SIZE;\n\n        }\n\n\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask)) // zero out src\n\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n",
          "message": "RLPReader.copy (RLPReader.sol#234-256) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 276,
          "vulnerability_code": "    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n\n        require(item.len > 0, \"Item length must be > 0\");\n\n\n\n        uint itemLen = _itemLength(item.memPtr);\n\n        require(itemLen <= item.len, \"Length is larger than data\");\n\n\n\n        uint offset = _payloadOffset(item.memPtr);\n\n        uint len = itemLen - offset; // data length\n\n        bytes memory result = new bytes(len);\n\n\n\n        uint destPtr;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            destPtr := add(0x20, result)\n\n        }\n\n\n\n        copy(item.memPtr + offset, destPtr, len);\n\n        return result;\n",
          "message": "RLPReader.toBytes (RLPReader.sol#258-276) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n\n        uint memPtr;\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            memPtr := add(item, 0x20)\n\n        }\n\n\n\n        return RLPItem(item.length, memPtr);\n",
          "message": "RLPReader.toRlpItem uses assembly (RLPReader.sol#25-34)\n\t- RLPReader.sol#29-31\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function isList(RLPItem memory item) internal pure returns (bool) {\n\n        if (item.len == 0) return false;\n\n\n\n        uint8 byte0;\n\n        uint memPtr = item.memPtr;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < LIST_SHORT_START)\n\n            return false;\n\n        return true;\n",
          "message": "RLPReader.isList uses assembly (RLPReader.sol#63-76)\n\t- RLPReader.sol#69-71\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n\n        bytes memory result = new bytes(item.len);\n\n        if (result.length == 0) return result;\n\n        \n\n        uint ptr;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            ptr := add(0x20, result)\n\n        }\n\n\n\n        copy(item.memPtr, ptr, item.len);\n\n        return result;\n",
          "message": "RLPReader.toRlpBytes uses assembly (RLPReader.sol#80-92)\n\t- RLPReader.sol#86-88\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function toUint(RLPItem memory item) internal pure returns (uint) {\n\n        require(item.len > 0 && item.len <= 33, \"Item length must be <= 33\");\n\n        \n\n        uint itemLen = _itemLength(item.memPtr);\n\n        require(itemLen <= item.len, \"Length is larger than data\");\n\n\n\n        uint offset = _payloadOffset(item.memPtr);\n\n        uint len = itemLen - offset;\n\n\n\n        uint result;\n\n        uint memPtr = item.memPtr + offset;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            result := mload(memPtr)\n\n\n\n            // shfit to the correct location if neccesary\n\n            // TODO audit prep, can this overflow?\n\n            if lt(len, 32) {\n\n                result := div(result, exp(256, sub(32, len)))\n\n            }\n\n        }\n\n\n\n        return result;\n",
          "message": "RLPReader.toUint uses assembly (RLPReader.sol#101-124)\n\t- RLPReader.sol#113-121\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function _itemLength(uint memPtr) private pure returns (uint) {\n\n        uint itemLen;\n\n        uint byte0;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < STRING_SHORT_START) {\n\n            itemLen = 1;\n\n        } else if (byte0 < STRING_LONG_START) {\n\n            itemLen = byte0 - STRING_SHORT_START + 1;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                memPtr := add(memPtr, 1)\n\n                byte1 := byte(0, mload(memPtr))\n\n            }\n\n            if (itemLen == 2) {\n\n                // Check that the value is valid for a short string\n\n                require(byte1 >= STRING_SHORT_START, \"Invalid rlp encoding\");\n\n            }\n\n        } else if (byte0 < LIST_SHORT_START) {\n\n            uint dataLen;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n\n\n                byte1 := byte(0, mload(memPtr))\n\n                \n\n                /* 32 byte word size */\n\n                // TODO audit prep, check this shifting for overflow, etc\n\n                dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n\n                itemLen := add(dataLen, add(byteLen, 1))\n\n            }\n\n            // Check valid long string i.e. value of length > MAX_SHORT_LEN with no leading zeros\n\n            require(byte1 != 0, \"Invalid rlp encoding\");\n\n            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n\n        } else if (byte0 < LIST_LONG_START) {\n\n            itemLen = byte0 - LIST_SHORT_START + 1;\n\n        } else {\n\n            uint dataLen;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                let lengthLen := sub(byte0, 0xf7)\n\n                memPtr := add(memPtr, 1)\n\n\n\n                byte1 := byte(0, mload(memPtr))\n\n\n\n                // TODO audit prep, check this shifting for overflow, etc\n\n                dataLen := div(mload(memPtr), exp(256, sub(32, lengthLen))) // right shifting to the correct length\n\n                itemLen := add(dataLen, add(lengthLen, 1))\n\n            }\n\n            // Check valid long list i.e. value of length > MAX_SHORT_LEN with no leading zeros\n\n            require(byte1 != 0, \"Invalid rlp encoding\");\n\n            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n\n        }\n\n\n\n        return itemLen;\n",
          "message": "RLPReader._itemLength uses assembly (RLPReader.sol#146-208)\n\t- RLPReader.sol#150-152\n\t- RLPReader.sol#160-163\n\t- RLPReader.sol#172-182\n\t- RLPReader.sol#192-201\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 227,
          "vulnerability_code": "    function _payloadOffset(uint memPtr) private pure returns (uint) {\n\n        uint byte0;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < STRING_SHORT_START) {\n\n            return 0;\n\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n\n            return 1;\n\n        } else if (byte0 < LIST_SHORT_START) {  // being explicit\n\n            return byte0 - (STRING_LONG_START - 1) + 1;\n\n        } else {\n\n            return byte0 - (LIST_LONG_START - 1) + 1;\n\n        } \n",
          "message": "RLPReader._payloadOffset uses assembly (RLPReader.sol#211-227)\n\t- RLPReader.sol#214-216\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": 256,
          "vulnerability_code": "    function copy(uint src, uint dest, uint len) private pure {\n\n        if (len == 0) return;\n\n\n\n        // copy as many word sizes as possible\n\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n\n\n            src += WORD_SIZE;\n\n            dest += WORD_SIZE;\n\n        }\n\n\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask)) // zero out src\n\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n",
          "message": "RLPReader.copy uses assembly (RLPReader.sol#234-256)\n\t- RLPReader.sol#240-242\n\t- RLPReader.sol#251-255\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 276,
          "vulnerability_code": "    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n\n        require(item.len > 0, \"Item length must be > 0\");\n\n\n\n        uint itemLen = _itemLength(item.memPtr);\n\n        require(itemLen <= item.len, \"Length is larger than data\");\n\n\n\n        uint offset = _payloadOffset(item.memPtr);\n\n        uint len = itemLen - offset; // data length\n\n        bytes memory result = new bytes(len);\n\n\n\n        uint destPtr;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            destPtr := add(0x20, result)\n\n        }\n\n\n\n        copy(item.memPtr + offset, destPtr, len);\n\n        return result;\n",
          "message": "RLPReader.toBytes uses assembly (RLPReader.sol#258-276)\n\t- RLPReader.sol#270-272\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in RLPReader.sol:\n\t- pragma solidity^0.5.0 (RLPReader.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function _itemLength(uint memPtr) private pure returns (uint) {\n\n        uint itemLen;\n\n        uint byte0;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < STRING_SHORT_START) {\n\n            itemLen = 1;\n\n        } else if (byte0 < STRING_LONG_START) {\n\n            itemLen = byte0 - STRING_SHORT_START + 1;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                memPtr := add(memPtr, 1)\n\n                byte1 := byte(0, mload(memPtr))\n\n            }\n\n            if (itemLen == 2) {\n\n                // Check that the value is valid for a short string\n\n                require(byte1 >= STRING_SHORT_START, \"Invalid rlp encoding\");\n\n            }\n\n        } else if (byte0 < LIST_SHORT_START) {\n\n            uint dataLen;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n\n\n                byte1 := byte(0, mload(memPtr))\n\n                \n\n                /* 32 byte word size */\n\n                // TODO audit prep, check this shifting for overflow, etc\n\n                dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n\n                itemLen := add(dataLen, add(byteLen, 1))\n\n            }\n\n            // Check valid long string i.e. value of length > MAX_SHORT_LEN with no leading zeros\n\n            require(byte1 != 0, \"Invalid rlp encoding\");\n\n            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n\n        } else if (byte0 < LIST_LONG_START) {\n\n            itemLen = byte0 - LIST_SHORT_START + 1;\n\n        } else {\n\n            uint dataLen;\n\n            uint byte1;\n\n            // solhint-disable-next-line no-inline-assembly\n\n            assembly {\n\n                let lengthLen := sub(byte0, 0xf7)\n\n                memPtr := add(memPtr, 1)\n\n\n\n                byte1 := byte(0, mload(memPtr))\n\n\n\n                // TODO audit prep, check this shifting for overflow, etc\n\n                dataLen := div(mload(memPtr), exp(256, sub(32, lengthLen))) // right shifting to the correct length\n\n                itemLen := add(dataLen, add(lengthLen, 1))\n\n            }\n\n            // Check valid long list i.e. value of length > MAX_SHORT_LEN with no leading zeros\n\n            require(byte1 != 0, \"Invalid rlp encoding\");\n\n            require(dataLen > MAX_SHORT_LEN, \"Invalid rlp encoding\");\n\n        }\n\n\n\n        return itemLen;\n",
          "message": "Function 'RLPReader._itemLength' (RLPReader.sol#146-208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 227,
          "vulnerability_code": "    function _payloadOffset(uint memPtr) private pure returns (uint) {\n\n        uint byte0;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            byte0 := byte(0, mload(memPtr))\n\n        }\n\n\n\n        if (byte0 < STRING_SHORT_START) {\n\n            return 0;\n\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n\n            return 1;\n\n        } else if (byte0 < LIST_SHORT_START) {  // being explicit\n\n            return byte0 - (STRING_LONG_START - 1) + 1;\n\n        } else {\n\n            return byte0 - (LIST_LONG_START - 1) + 1;\n\n        } \n",
          "message": "Function 'RLPReader._payloadOffset' (RLPReader.sol#211-227) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant internal STRING_SHORT_START = 0x80;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant internal STRING_LONG_START  = 0xb8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant internal LIST_SHORT_START   = 0xc0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant internal LIST_LONG_START    = 0xf8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (currPtr < endPtr) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isList(RLPItem memory item) internal pure returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toUint(RLPItem memory item) internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _itemLength(uint memPtr) private pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _payloadOffset(uint memPtr) private pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function copy(uint src, uint dest, uint len) private pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}