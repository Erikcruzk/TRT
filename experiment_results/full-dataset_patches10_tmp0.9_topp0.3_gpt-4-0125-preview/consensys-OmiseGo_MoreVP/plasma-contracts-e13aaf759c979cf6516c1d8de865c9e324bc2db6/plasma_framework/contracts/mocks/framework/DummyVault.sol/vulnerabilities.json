{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nextChildBlock += childBlockInterval;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _minExitPeriod, uint256 _initialImmuneVaults)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _vaultQuarantine.quarantinePeriod = _minExitPeriod;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _vaultQuarantine.immunitiesRemaining = _initialImmuneVaults;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 _minExitPeriod, uint256 _initialImmuneVaults)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "        VaultRegistry(_minExitPeriod, _initialImmuneVaults)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interval,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _minExitPeriod,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _initialImmuneVaults,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _authority\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    )\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        VaultRegistry(_minExitPeriod, _initialImmuneVaults)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        authority = _authority;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), \"An empty address cannot be quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_self.store[_contractAddress] == 0, \"The contract is already quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == caller, \"Caller address is unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultToId[msg.sender] > 0, \"The call is not from a registered vault\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_vaultQuarantine.isQuarantined(msg.sender), \"Vault is quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultId != 0, \"Should not register with vault ID 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultAddress != address(0), \"Should not register an empty vault address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaults[_vaultId] == address(0), \"The vault ID is already registered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultToId[_vaultAddress] == 0, \"The vault contract is already registered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isChildChainActivated == false, \"Child chain already activated\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newAuthority != address(0), \"Authority address cannot be zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isChildChainActivated == true, \"Child chain has not been activated by authority address yet\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isChildChainActivated == true, \"Child chain has not been activated by authority address yet\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nextDeposit < childBlockInterval, \"Exceeded limit of deposits per child block interval\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _self.immunitiesRemaining--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nextDeposit++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), \"An empty address cannot be quarantined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_self.store[_contractAddress] == 0, \"The contract is already quarantined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultToId[msg.sender] > 0, \"The call is not from a registered vault\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultId != 0, \"Should not register with vault ID 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultAddress != address(0), \"Should not register an empty vault address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaults[_vaultId] == address(0), \"The vault ID is already registered\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_vaultToId[_vaultAddress] == 0, \"The vault contract is already registered\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isChildChainActivated == true, \"Child chain has not been activated by authority address yet\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isChildChainActivated == true, \"Child chain has not been activated by authority address yet\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nextDeposit < childBlockInterval, \"Exceeded limit of deposits per child block interval\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_32"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 318,
          "vulnerability_code": "    function submitDepositBlock(bytes32 _blockRoot) public {\n\n        blockController.submitDepositBlock(_blockRoot);\n",
          "message": "DummyVault.submitDepositBlock (DummyVault.sol#316-318) does not use the value returned by external calls:\n\t-blockController.submitDepositBlock(_blockRoot) (DummyVault.sol#317)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n\n        return block.timestamp < _self.store[_contractAddress];\n",
          "message": "Quarantine.isQuarantined (DummyVault.sol#20-22) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < _self.store[_contractAddress] (DummyVault.sol#21)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 145,
          "vulnerability_code": "    function getMaintainer() public view returns (address) {\n\n        return maintainer;\n",
          "message": "VaultRegistryMock.getMaintainer (DummyVault.sol#143-145) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMaintainer() public view returns (address);\n",
          "message": "VaultRegistry.getMaintainer (DummyVault.sol#84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function registerVault(uint256 _vaultId, address _vaultAddress) public onlyFrom(getMaintainer()) {\n\n        require(_vaultId != 0, \"Should not register with vault ID 0\");\n\n        require(_vaultAddress != address(0), \"Should not register an empty vault address\");\n\n        require(_vaults[_vaultId] == address(0), \"The vault ID is already registered\");\n\n        require(_vaultToId[_vaultAddress] == 0, \"The vault contract is already registered\");\n\n\n\n        _vaults[_vaultId] = _vaultAddress;\n\n        _vaultToId[_vaultAddress] = _vaultId;\n\n        _vaultQuarantine.quarantine(_vaultAddress);\n\n\n\n        emit VaultRegistered(_vaultId, _vaultAddress);\n",
          "message": "VaultRegistry.registerVault (DummyVault.sol#101-112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function vaults(uint256 _vaultId) public view returns (address) {\n\n        return _vaults[_vaultId];\n",
          "message": "VaultRegistry.vaults (DummyVault.sol#117-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 126,
          "vulnerability_code": "    function vaultToId(address _vaultAddress) public view returns (uint256) {\n\n        return _vaultToId[_vaultAddress];\n",
          "message": "VaultRegistry.vaultToId (DummyVault.sol#124-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 150,
          "vulnerability_code": "    function setMaintainer(address maintainerToSet) public {\n\n        maintainer = maintainerToSet;\n",
          "message": "VaultRegistryMock.setMaintainer (DummyVault.sol#148-150) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": 154,
          "vulnerability_code": "    function checkOnlyFromNonQuarantinedVault() public onlyFromNonQuarantinedVault view returns (bool) {\n\n        return true;\n",
          "message": "VaultRegistryMock.checkOnlyFromNonQuarantinedVault (DummyVault.sol#152-154) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function submitDepositBlock(bytes32 _blockRoot) public onlyFromNonQuarantinedVault returns (uint256) {\n\n        require(isChildChainActivated == true, \"Child chain has not been activated by authority address yet\");\n\n        require(nextDeposit < childBlockInterval, \"Exceeded limit of deposits per child block interval\");\n\n\n\n        uint256 blknum = nextDepositBlock();\n\n        blocks[blknum] = BlockModel.Block({\n\n            root : _blockRoot,\n\n            timestamp : block.timestamp\n\n        });\n\n\n\n        nextDeposit++;\n\n        return blknum;\n",
          "message": "BlockController.submitDepositBlock (DummyVault.sol#274-286) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 305,
          "vulnerability_code": "    function setVaultRegistry(address _contract) public {\n\n        vaultRegistry = VaultRegistryMock(_contract);\n",
          "message": "DummyVault.setVaultRegistry (DummyVault.sol#303-305) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 309,
          "vulnerability_code": "    function checkOnlyFromNonQuarantinedVault() public view returns (bool) {\n\n        return vaultRegistry.checkOnlyFromNonQuarantinedVault();\n",
          "message": "DummyVault.checkOnlyFromNonQuarantinedVault (DummyVault.sol#307-309) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function setBlockController(address _contract) public {\n\n        blockController = BlockController(_contract);\n",
          "message": "DummyVault.setBlockController (DummyVault.sol#312-314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 318,
          "vulnerability_code": "    function submitDepositBlock(bytes32 _blockRoot) public {\n\n        blockController.submitDepositBlock(_blockRoot);\n",
          "message": "DummyVault.submitDepositBlock (DummyVault.sol#316-318) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in DummyVault.sol:\n\t- pragma solidity0.5.11 (DummyVault.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (DummyVault.sol#42): it allows old versions\n\t- pragma solidity0.5.11 (DummyVault.sol#54): it allows old versions\n\t- pragma solidity0.5.11 (DummyVault.sol#131): it allows old versions\n\t- pragma solidity0.5.11 (DummyVault.sol#159): it allows old versions\n\t- pragma solidity0.5.11 (DummyVault.sol#175): it allows old versions\n\t- pragma solidity0.5.11 (DummyVault.sol#295): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n",
          "message": "Parameter '_self' of Quarantine.isQuarantined (DummyVault.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n",
          "message": "Parameter '_contractAddress' of Quarantine.isQuarantined (DummyVault.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantine(Data storage _self, address _contractAddress) internal {\n",
          "message": "Parameter '_self' of Quarantine.quarantine (DummyVault.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantine(Data storage _self, address _contractAddress) internal {\n",
          "message": "Parameter '_contractAddress' of Quarantine.quarantine (DummyVault.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _minExitPeriod, uint256 _initialImmuneVaults)\n",
          "message": "Parameter '_minExitPeriod' of VaultRegistry. (DummyVault.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _minExitPeriod, uint256 _initialImmuneVaults)\n",
          "message": "Parameter '_initialImmuneVaults' of VaultRegistry. (DummyVault.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function registerVault(uint256 _vaultId, address _vaultAddress) public onlyFrom(getMaintainer()) {\n",
          "message": "Parameter '_vaultId' of VaultRegistry.registerVault (DummyVault.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function registerVault(uint256 _vaultId, address _vaultAddress) public onlyFrom(getMaintainer()) {\n",
          "message": "Parameter '_vaultAddress' of VaultRegistry.registerVault (DummyVault.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaults(uint256 _vaultId) public view returns (address) {\n",
          "message": "Parameter '_vaultId' of VaultRegistry.vaults (DummyVault.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vaultToId(address _vaultAddress) public view returns (uint256) {\n",
          "message": "Parameter '_vaultAddress' of VaultRegistry.vaultToId (DummyVault.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _interval,\n",
          "message": "Parameter '_interval' of BlockController. (DummyVault.sol#207) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _authority\n",
          "message": "Parameter '_authority' of BlockController. (DummyVault.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function submitBlock(bytes32 _blockRoot) external onlyFrom(authority) {\n",
          "message": "Parameter '_blockRoot' of BlockController.submitBlock (DummyVault.sol#253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function submitDepositBlock(bytes32 _blockRoot) public onlyFromNonQuarantinedVault returns (uint256) {\n",
          "message": "Parameter '_blockRoot' of BlockController.submitDepositBlock (DummyVault.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setVaultRegistry(address _contract) public {\n",
          "message": "Parameter '_contract' of DummyVault.setVaultRegistry (DummyVault.sol#303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBlockController(address _contract) public {\n",
          "message": "Parameter '_contract' of DummyVault.setBlockController (DummyVault.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function submitDepositBlock(bytes32 _blockRoot) public {\n",
          "message": "Parameter '_blockRoot' of DummyVault.submitDepositBlock (DummyVault.sol#316) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint256 => address) private _vaults; // vault id => vault address\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _vaultToId; // vault address => vault id\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Quarantine.Data private _vaultQuarantine;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private maintainer;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        blockController.submitDepositBlock(_blockRoot);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _self.store[_contractAddress] = block.timestamp + _self.quarantinePeriod;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR",
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}