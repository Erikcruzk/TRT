{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _period, uint256 _initialImmuneCount)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _quarantine.quarantinePeriod = _period;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _quarantine.immunitiesRemaining = _initialImmuneCount;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), \"An empty address cannot be quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_self.store[_contractAddress] == 0, \"The contract is already quarantined\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _self.immunitiesRemaining--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_contractAddress != address(0), \"An empty address cannot be quarantined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_self.store[_contractAddress] == 0, \"The contract is already quarantined\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "timestamp",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n\n        return block.timestamp < _self.store[_contractAddress];\n",
          "message": "Quarantine.isQuarantined (QuarantineMock.sol#20-22) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < _self.store[_contractAddress] (QuarantineMock.sol#21)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function quarantineContract(address _contractAddress) public {\n\n        _quarantine.quarantine(_contractAddress);\n",
          "message": "QuarantineMock.quarantineContract (QuarantineMock.sol#55-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function isQuarantined(address _contractAddress) public view returns (bool) {\n\n        return _quarantine.isQuarantined(_contractAddress);\n",
          "message": "QuarantineMock.isQuarantined (QuarantineMock.sol#59-61) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in QuarantineMock.sol:\n\t- pragma solidity0.5.11 (QuarantineMock.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (QuarantineMock.sol#42): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n",
          "message": "Parameter '_self' of Quarantine.isQuarantined (QuarantineMock.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\n",
          "message": "Parameter '_contractAddress' of Quarantine.isQuarantined (QuarantineMock.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantine(Data storage _self, address _contractAddress) internal {\n",
          "message": "Parameter '_self' of Quarantine.quarantine (QuarantineMock.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantine(Data storage _self, address _contractAddress) internal {\n",
          "message": "Parameter '_contractAddress' of Quarantine.quarantine (QuarantineMock.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _period, uint256 _initialImmuneCount)\n",
          "message": "Parameter '_period' of QuarantineMock. (QuarantineMock.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint256 _period, uint256 _initialImmuneCount)\n",
          "message": "Parameter '_initialImmuneCount' of QuarantineMock. (QuarantineMock.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function quarantineContract(address _contractAddress) public {\n",
          "message": "Parameter '_contractAddress' of QuarantineMock.quarantineContract (QuarantineMock.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isQuarantined(address _contractAddress) public view returns (bool) {\n",
          "message": "Parameter '_contractAddress' of QuarantineMock.isQuarantined (QuarantineMock.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Quarantine.Data internal _quarantine;\n",
          "message": "Variable 'QuarantineMock._quarantine' (QuarantineMock.sol#46) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _self.store[_contractAddress] = block.timestamp + _self.quarantinePeriod;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}