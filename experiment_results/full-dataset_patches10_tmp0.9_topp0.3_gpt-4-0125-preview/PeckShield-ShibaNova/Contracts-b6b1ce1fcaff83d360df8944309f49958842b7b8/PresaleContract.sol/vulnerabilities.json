{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelisted is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NovaSwap is Ownable, Whitelisted {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _purchaser.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public isSwapStarted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = payable(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable _owner,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _paymentWallet,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        BUSDToken _BUSDToken,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        NovaToken _novaToken\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token0 = _BUSDToken; \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token1 = _novaToken;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Payee = _paymentWallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "            whitelist[_purchaser[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _purchaser.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isSwapStarted == true, 'ShibanovaSwap::Swap not started');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(inAmount <= total, \"ShibanovaSwap::Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(outAmount <= quota, \"ShibanovaSwap::Quota not enough\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spent[msg.sender].add(inAmount) <= maxBuy, \"ShibanovaSwap: :Reached Max Buy\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _purchaser.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(inAmount <= total, \"ShibanovaSwap::Insufficient funds\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_36"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function swap(uint256 inAmount) public onlyWhitelisted{\n\n        uint256 quota = token1.balanceOf(address(this));\n\n        uint256 total = token0.balanceOf(msg.sender);\n\n        uint256 outAmount = inAmount.mul(1000).div(swapRate);\n\n    \n\n\n\n        require(isSwapStarted == true, 'ShibanovaSwap::Swap not started');\n\n        require(inAmount <= total, \"ShibanovaSwap::Insufficient funds\");\n\n        require(outAmount <= quota, \"ShibanovaSwap::Quota not enough\");\n\n        require(spent[msg.sender].add(inAmount) <= maxBuy, \"ShibanovaSwap: :Reached Max Buy\");\n\n\n\n        token0.transferFrom(msg.sender, address(Payee), inAmount);\n\n        \n\n        spent[msg.sender] = spent[msg.sender] + inAmount;\n\n        \n\n        token1.transfer(msg.sender, outAmount);\n\n\n\n        emit Swap(msg.sender, inAmount, outAmount);\n",
          "message": "Reentrancy in NovaSwap.swap (PresaleContract.sol#163-181):\n\tExternal calls:\n\t- quota = token1.balanceOf(address(this)) (PresaleContract.sol#164)\n\t- total = token0.balanceOf(msg.sender) (PresaleContract.sol#165)\n\t- token0.transferFrom(msg.sender,address(Payee),inAmount) (PresaleContract.sol#174)\n\tState variables written after the call(s):\n\t- spent (PresaleContract.sol#176)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function swap(uint256 inAmount) public onlyWhitelisted{\n\n        uint256 quota = token1.balanceOf(address(this));\n\n        uint256 total = token0.balanceOf(msg.sender);\n\n        uint256 outAmount = inAmount.mul(1000).div(swapRate);\n\n    \n\n\n\n        require(isSwapStarted == true, 'ShibanovaSwap::Swap not started');\n\n        require(inAmount <= total, \"ShibanovaSwap::Insufficient funds\");\n\n        require(outAmount <= quota, \"ShibanovaSwap::Quota not enough\");\n\n        require(spent[msg.sender].add(inAmount) <= maxBuy, \"ShibanovaSwap: :Reached Max Buy\");\n\n\n\n        token0.transferFrom(msg.sender, address(Payee), inAmount);\n\n        \n\n        spent[msg.sender] = spent[msg.sender] + inAmount;\n\n        \n\n        token1.transfer(msg.sender, outAmount);\n\n\n\n        emit Swap(msg.sender, inAmount, outAmount);\n",
          "message": "NovaSwap.swap (PresaleContract.sol#163-181) does not use the value returned by external calls:\n\t-token0.transferFrom(msg.sender,address(Payee),inAmount) (PresaleContract.sol#174)\n\t-token1.transfer(msg.sender,outAmount) (PresaleContract.sol#178)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function WithdrawBUSD(address _token, uint256 amount) public onlyOwner {\n\n        BUSDToken(_token).transfer(msg.sender, amount);\n",
          "message": "NovaSwap.WithdrawBUSD (PresaleContract.sol#216-218) does not use the value returned by external calls:\n\t-BUSDToken(_token).transfer(msg.sender,amount) (PresaleContract.sol#217)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function WithdrawNova(address _token, uint256 amount) public onlyOwner {\n\n        NovaToken(_token).transfer(msg.sender, amount);\n",
          "message": "NovaSwap.WithdrawNova (PresaleContract.sol#220-222) does not use the value returned by external calls:\n\t-NovaToken(_token).transfer(msg.sender,amount) (PresaleContract.sol#221)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function transferOwnership(address payable newOwner) onlyOwner public {\n\n        require(newOwner != address(0));\n\n        emit OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n",
          "message": "Ownable.transferOwnership (PresaleContract.sol#53-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function setProvider(address _provider) public onlyOwner {\n\n        provider[_provider] = true;\n",
          "message": "Whitelisted.setProvider (PresaleContract.sol#101-103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function deactivateProvider(address _provider) public onlyOwner {\n\n        require(provider[_provider] == true);\n\n        provider[_provider] = false;\n",
          "message": "Whitelisted.deactivateProvider (PresaleContract.sol#105-108) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function joinWhitelist(address _purchaser) public onlyOwner{\n\n        whitelist[_purchaser] = true;\n",
          "message": "Whitelisted.joinWhitelist (PresaleContract.sol#110-112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function whitelistAddresses (address[] memory _purchaser) public onlyOwner {\n\n        for (uint i = 0; i < _purchaser.length; i++) {\n\n            whitelist[_purchaser[i]] = true;\n\n        }\n",
          "message": "Whitelisted.whitelistAddresses (PresaleContract.sol#114-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function deleteFromWhitelist(address _purchaser) public onlyOwner {\n\n        whitelist[_purchaser] = false;\n",
          "message": "Whitelisted.deleteFromWhitelist (PresaleContract.sol#121-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function swap(uint256 inAmount) public onlyWhitelisted{\n\n        uint256 quota = token1.balanceOf(address(this));\n\n        uint256 total = token0.balanceOf(msg.sender);\n\n        uint256 outAmount = inAmount.mul(1000).div(swapRate);\n\n    \n\n\n\n        require(isSwapStarted == true, 'ShibanovaSwap::Swap not started');\n\n        require(inAmount <= total, \"ShibanovaSwap::Insufficient funds\");\n\n        require(outAmount <= quota, \"ShibanovaSwap::Quota not enough\");\n\n        require(spent[msg.sender].add(inAmount) <= maxBuy, \"ShibanovaSwap: :Reached Max Buy\");\n\n\n\n        token0.transferFrom(msg.sender, address(Payee), inAmount);\n\n        \n\n        spent[msg.sender] = spent[msg.sender] + inAmount;\n\n        \n\n        token1.transfer(msg.sender, outAmount);\n\n\n\n        emit Swap(msg.sender, inAmount, outAmount);\n",
          "message": "NovaSwap.swap (PresaleContract.sol#163-181) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 187,
          "vulnerability_code": "    function startSwap() public onlyOwner returns (bool) {\n\n        isSwapStarted = true;\n\n        return true;\n",
          "message": "NovaSwap.startSwap (PresaleContract.sol#184-187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 192,
          "vulnerability_code": "    function stopSwap() public onlyOwner returns (bool) {\n\n        isSwapStarted = false;\n\n        return true;\n",
          "message": "NovaSwap.stopSwap (PresaleContract.sol#189-192) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 197,
          "vulnerability_code": "    function setSwapRate(uint256 newRate) public onlyOwner returns (bool) {\n\n        swapRate = newRate;\n\n        return true;\n",
          "message": "NovaSwap.setSwapRate (PresaleContract.sol#194-197) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 202,
          "vulnerability_code": "    function setMaxBuy(uint256 newMax) public onlyOwner returns (bool) {\n\n        maxBuy = newMax;\n\n        return true;\n",
          "message": "NovaSwap.setMaxBuy (PresaleContract.sol#199-202) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 208,
          "vulnerability_code": "    function transferPayee(address newPayee) public onlyOwner {\n\n        require(newPayee != address(0));\n\n        emit PayeeTransferred(Payee, newPayee);\n\n        Payee = newPayee;\n",
          "message": "NovaSwap.transferPayee (PresaleContract.sol#204-208) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 213,
          "vulnerability_code": "   function recoverLostBNB() public onlyOwner {\n\n        address payable _owner = msg.sender;\n\n        _owner.transfer(address(this).balance);\n",
          "message": "NovaSwap.recoverLostBNB (PresaleContract.sol#210-213) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function WithdrawBUSD(address _token, uint256 amount) public onlyOwner {\n\n        BUSDToken(_token).transfer(msg.sender, amount);\n",
          "message": "NovaSwap.WithdrawBUSD (PresaleContract.sol#216-218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function WithdrawNova(address _token, uint256 amount) public onlyOwner {\n\n        NovaToken(_token).transfer(msg.sender, amount);\n",
          "message": "NovaSwap.WithdrawNova (PresaleContract.sol#220-222) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.2;\n",
          "message": "Detected issues with version pragma in PresaleContract.sol:\n\t- pragma solidity>=0.6.2 (PresaleContract.sol#9): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isProvider(address _provider) public view returns (bool){\n",
          "message": "Parameter '_provider' of Whitelisted.isProvider (PresaleContract.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setProvider(address _provider) public onlyOwner {\n",
          "message": "Parameter '_provider' of Whitelisted.setProvider (PresaleContract.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deactivateProvider(address _provider) public onlyOwner {\n",
          "message": "Parameter '_provider' of Whitelisted.deactivateProvider (PresaleContract.sol#105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function joinWhitelist(address _purchaser) public onlyOwner{\n",
          "message": "Parameter '_purchaser' of Whitelisted.joinWhitelist (PresaleContract.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function whitelistAddresses (address[] memory _purchaser) public onlyOwner {\n",
          "message": "Parameter '_purchaser' of Whitelisted.whitelistAddresses (PresaleContract.sol#114) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deleteFromWhitelist(address _purchaser) public onlyOwner {\n",
          "message": "Parameter '_purchaser' of Whitelisted.deleteFromWhitelist (PresaleContract.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isWhitelisted(address _purchaser) public view returns (bool){\n",
          "message": "Parameter '_purchaser' of Whitelisted.isWhitelisted (PresaleContract.sol#126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable _owner,\n",
          "message": "Parameter '_owner' of NovaSwap. (PresaleContract.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _paymentWallet,\n",
          "message": "Parameter '_paymentWallet' of NovaSwap. (PresaleContract.sol#150) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        BUSDToken _BUSDToken,\n",
          "message": "Parameter '_BUSDToken' of NovaSwap. (PresaleContract.sol#151) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        NovaToken _novaToken\n",
          "message": "Parameter '_novaToken' of NovaSwap. (PresaleContract.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function WithdrawBUSD(address _token, uint256 amount) public onlyOwner {\n\n        BUSDToken(_token).transfer(msg.sender, amount);\n",
          "message": "Function 'NovaSwap.WithdrawBUSD' (PresaleContract.sol#216-218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WithdrawBUSD(address _token, uint256 amount) public onlyOwner {\n",
          "message": "Parameter '_token' of NovaSwap.WithdrawBUSD (PresaleContract.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function WithdrawNova(address _token, uint256 amount) public onlyOwner {\n\n        NovaToken(_token).transfer(msg.sender, amount);\n",
          "message": "Function 'NovaSwap.WithdrawNova' (PresaleContract.sol#220-222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function WithdrawNova(address _token, uint256 amount) public onlyOwner {\n",
          "message": "Parameter '_token' of NovaSwap.WithdrawNova (PresaleContract.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public Payee;\n",
          "message": "Variable 'NovaSwap.Payee' (PresaleContract.sol#139) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _purchaser.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _purchaser.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Ownable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NovaSwap is Ownable, Whitelisted {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setProvider(address _provider) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address payable newOwner) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address payable newOwner) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(owner, newOwner);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(owner, newOwner);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = newOwner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address payable _owner,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _paymentWallet,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        BUSDToken _BUSDToken,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        NovaToken _novaToken\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token0 = _BUSDToken; \n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token1 = _novaToken;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Payee = _paymentWallet;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}