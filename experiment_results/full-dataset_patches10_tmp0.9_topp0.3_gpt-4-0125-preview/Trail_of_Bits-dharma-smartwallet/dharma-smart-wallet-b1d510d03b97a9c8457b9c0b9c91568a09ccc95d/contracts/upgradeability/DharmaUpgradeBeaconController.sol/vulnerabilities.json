{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // Set the transaction submitter as the initial owner of this contract.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = tx.origin;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit OwnershipTransferred(address(0), tx.origin);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // Ensure the upgrade beacon envoy has the expected runtime code.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address envoy = address(_UPGRADE_BEACON_ENVOY);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 envoyCodeHash;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { envoyCodeHash := extcodehash(envoy)}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "      envoyCodeHash == bytes32(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x7332d06692fd32b21bdd8b8b7a0a3f0de5cf549668cbc4498fc6cfaa453f1176\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Upgrade Beacon Envoy runtime code is incorrect.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(implementation != address(0), \"Must specify an implementation.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(implementationSize > 0, \"Implementation must have contract code.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(beacon != address(0), \"Must specify an upgrade beacon.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(beaconSize > 0, \"Upgrade beacon must have contract code.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "      envoyCodeHash == bytes32(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        0x7332d06692fd32b21bdd8b8b7a0a3f0de5cf549668cbc4498fc6cfaa453f1176\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Upgrade Beacon Envoy runtime code is incorrect.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(implementationSize > 0, \"Implementation must have contract code.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(beaconSize > 0, \"Upgrade beacon must have contract code.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 231,
          "vulnerability_code": "  function _update(address beacon, address implementation) private {\n\n    // Get the address of the current implementation set on the upgrade beacon.\n\n    address oldImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the current implementation.\n\n    bytes32 oldImplementationCodeHash;\n\n    assembly { oldImplementationCodeHash := extcodehash(oldImplementation) }\n\n\n\n    // Call into beacon and supply address of new implementation to update it.\n\n    (bool success,) = beacon.call(abi.encode(implementation));\n\n\n\n    // Revert with message on failure (i.e. if the beacon is somehow incorrect).\n\n    if (!success) {\n\n      assembly {\n\n        returndatacopy(0, 0, returndatasize)\n\n        revert(0, returndatasize)\n\n      }\n\n    }\n\n\n\n    // Get address of the new implementation that was set on the upgrade beacon.\n\n    address newImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the new implementation.\n\n    bytes32 newImplementationCodeHash;\n\n    assembly { newImplementationCodeHash := extcodehash(newImplementation) }\n\n\n\n    // Set runtime code hash of the new implementation for the given beacon.\n\n    _codeHashAtLastUpgrade[beacon] = newImplementationCodeHash;\n\n\n\n    // Emit an event to signal that the upgrade beacon was updated.\n\n    emit Upgraded(\n\n      beacon,\n\n      oldImplementation,\n\n      oldImplementationCodeHash,\n\n      newImplementation,\n\n      newImplementationCodeHash\n\n    );\n",
          "message": "Reentrancy in DharmaUpgradeBeaconController._update (DharmaUpgradeBeaconController.sol#194-231):\n\tExternal calls:\n\t- oldImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon) (DharmaUpgradeBeaconController.sol#196)\n\t- (success) = beacon.call(abi.encode(implementation)) (DharmaUpgradeBeaconController.sol#203)\n\t- newImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon) (DharmaUpgradeBeaconController.sol#214)\n\tState variables written after the call(s):\n\t- _codeHashAtLastUpgrade (DharmaUpgradeBeaconController.sol#221)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 76,
          "vulnerability_code": "  constructor() public {\n\n    // Set the transaction submitter as the initial owner of this contract.\n\n    _owner = tx.origin;\n\n    emit OwnershipTransferred(address(0), tx.origin);\n\n    \n\n    // Ensure the upgrade beacon envoy has the expected runtime code.\n\n    address envoy = address(_UPGRADE_BEACON_ENVOY);\n\n    bytes32 envoyCodeHash;\n\n    assembly { envoyCodeHash := extcodehash(envoy)}\n\n    require(\n\n      envoyCodeHash == bytes32(\n\n        0x7332d06692fd32b21bdd8b8b7a0a3f0de5cf549668cbc4498fc6cfaa453f1176\n\n      ),\n\n      \"Upgrade Beacon Envoy runtime code is incorrect.\"\n\n    );\n",
          "message": "DharmaUpgradeBeaconController.constructor uses assembly (DharmaUpgradeBeaconController.sol#61-76)\n\t- DharmaUpgradeBeaconController.sol#69\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": 103,
          "vulnerability_code": "  function upgrade(address beacon, address implementation) external onlyOwner {\n\n    // Ensure that the implementaton contract is not the null address.\n\n    require(implementation != address(0), \"Must specify an implementation.\");\n\n\n\n    // Ensure that the implementation contract has code via extcodesize.\n\n    uint256 implementationSize;\n\n    assembly { implementationSize := extcodesize(implementation) }\n\n    require(implementationSize > 0, \"Implementation must have contract code.\");\n\n\n\n    // Ensure that the beacon contract is not the null address.\n\n    require(beacon != address(0), \"Must specify an upgrade beacon.\");\n\n\n\n    // Ensure that the upgrade beacon contract has code via extcodesize.\n\n    uint256 beaconSize;\n\n    assembly { beaconSize := extcodesize(beacon) }\n\n    require(beaconSize > 0, \"Upgrade beacon must have contract code.\");\n\n\n\n    // Update the upgrade beacon with the new implementation address.\n\n    _update(beacon, implementation);\n",
          "message": "DharmaUpgradeBeaconController.upgrade uses assembly (DharmaUpgradeBeaconController.sol#84-103)\n\t- DharmaUpgradeBeaconController.sol#90\n\t- DharmaUpgradeBeaconController.sol#98\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 231,
          "vulnerability_code": "  function _update(address beacon, address implementation) private {\n\n    // Get the address of the current implementation set on the upgrade beacon.\n\n    address oldImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the current implementation.\n\n    bytes32 oldImplementationCodeHash;\n\n    assembly { oldImplementationCodeHash := extcodehash(oldImplementation) }\n\n\n\n    // Call into beacon and supply address of new implementation to update it.\n\n    (bool success,) = beacon.call(abi.encode(implementation));\n\n\n\n    // Revert with message on failure (i.e. if the beacon is somehow incorrect).\n\n    if (!success) {\n\n      assembly {\n\n        returndatacopy(0, 0, returndatasize)\n\n        revert(0, returndatasize)\n\n      }\n\n    }\n\n\n\n    // Get address of the new implementation that was set on the upgrade beacon.\n\n    address newImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the new implementation.\n\n    bytes32 newImplementationCodeHash;\n\n    assembly { newImplementationCodeHash := extcodehash(newImplementation) }\n\n\n\n    // Set runtime code hash of the new implementation for the given beacon.\n\n    _codeHashAtLastUpgrade[beacon] = newImplementationCodeHash;\n\n\n\n    // Emit an event to signal that the upgrade beacon was updated.\n\n    emit Upgraded(\n\n      beacon,\n\n      oldImplementation,\n\n      oldImplementationCodeHash,\n\n      newImplementation,\n\n      newImplementationCodeHash\n\n    );\n",
          "message": "DharmaUpgradeBeaconController._update uses assembly (DharmaUpgradeBeaconController.sol#194-231)\n\t- DharmaUpgradeBeaconController.sol#200\n\t- DharmaUpgradeBeaconController.sol#207-210\n\t- DharmaUpgradeBeaconController.sol#218\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in DharmaUpgradeBeaconController.sol:\n\t- pragma solidity0.5.11 (DharmaUpgradeBeaconController.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (DharmaUpgradeBeaconController.sol#12): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 231,
          "vulnerability_code": "  function _update(address beacon, address implementation) private {\n\n    // Get the address of the current implementation set on the upgrade beacon.\n\n    address oldImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the current implementation.\n\n    bytes32 oldImplementationCodeHash;\n\n    assembly { oldImplementationCodeHash := extcodehash(oldImplementation) }\n\n\n\n    // Call into beacon and supply address of new implementation to update it.\n\n    (bool success,) = beacon.call(abi.encode(implementation));\n\n\n\n    // Revert with message on failure (i.e. if the beacon is somehow incorrect).\n\n    if (!success) {\n\n      assembly {\n\n        returndatacopy(0, 0, returndatasize)\n\n        revert(0, returndatasize)\n\n      }\n\n    }\n\n\n\n    // Get address of the new implementation that was set on the upgrade beacon.\n\n    address newImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the new implementation.\n\n    bytes32 newImplementationCodeHash;\n\n    assembly { newImplementationCodeHash := extcodehash(newImplementation) }\n\n\n\n    // Set runtime code hash of the new implementation for the given beacon.\n\n    _codeHashAtLastUpgrade[beacon] = newImplementationCodeHash;\n\n\n\n    // Emit an event to signal that the upgrade beacon was updated.\n\n    emit Upgraded(\n\n      beacon,\n\n      oldImplementation,\n\n      oldImplementationCodeHash,\n\n      newImplementation,\n\n      newImplementationCodeHash\n\n    );\n",
          "message": "Low level call in DharmaUpgradeBeaconController._update (DharmaUpgradeBeaconController.sol#194-231):\n\t-(success) = beacon.call(abi.encode(implementation)) DharmaUpgradeBeaconController.sol#203\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": 231,
          "vulnerability_code": "  function _update(address beacon, address implementation) private {\n\n    // Get the address of the current implementation set on the upgrade beacon.\n\n    address oldImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the current implementation.\n\n    bytes32 oldImplementationCodeHash;\n\n    assembly { oldImplementationCodeHash := extcodehash(oldImplementation) }\n\n\n\n    // Call into beacon and supply address of new implementation to update it.\n\n    (bool success,) = beacon.call(abi.encode(implementation));\n\n\n\n    // Revert with message on failure (i.e. if the beacon is somehow incorrect).\n\n    if (!success) {\n\n      assembly {\n\n        returndatacopy(0, 0, returndatasize)\n\n        revert(0, returndatasize)\n\n      }\n\n    }\n\n\n\n    // Get address of the new implementation that was set on the upgrade beacon.\n\n    address newImplementation = _UPGRADE_BEACON_ENVOY.getImplementation(beacon);\n\n\n\n    // Get the runtime code hash for the new implementation.\n\n    bytes32 newImplementationCodeHash;\n\n    assembly { newImplementationCodeHash := extcodehash(newImplementation) }\n\n\n\n    // Set runtime code hash of the new implementation for the given beacon.\n\n    _codeHashAtLastUpgrade[beacon] = newImplementationCodeHash;\n\n\n\n    // Emit an event to signal that the upgrade beacon was updated.\n\n    emit Upgraded(\n\n      beacon,\n\n      oldImplementation,\n\n      oldImplementationCodeHash,\n\n      newImplementation,\n\n      newImplementationCodeHash\n\n    );\n",
          "message": "Function 'DharmaUpgradeBeaconController._update' (DharmaUpgradeBeaconController.sol#194-231) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "      0x000000000067503c398F4c9652530DBC4eA95C02\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => bytes32) private _codeHashAtLastUpgrade;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  DharmaUpgradeBeaconEnvoyInterface private constant _UPGRADE_BEACON_ENVOY = (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = tx.origin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_TX_ORIGIN",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit OwnershipTransferred(address(0), tx.origin);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success,) = beacon.call(abi.encode(implementation));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { envoyCodeHash := extcodehash(envoy)}\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { oldImplementationCodeHash := extcodehash(oldImplementation) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "      assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { newImplementationCodeHash := extcodehash(newImplementation) }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (Exception: Source map error)"
      ],
      "vulnerability_findings": []
    }
  }
}