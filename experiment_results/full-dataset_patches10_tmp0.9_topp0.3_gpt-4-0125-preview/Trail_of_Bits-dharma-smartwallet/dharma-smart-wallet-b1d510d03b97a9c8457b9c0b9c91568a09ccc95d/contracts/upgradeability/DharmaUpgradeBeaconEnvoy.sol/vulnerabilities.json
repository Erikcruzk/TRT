{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(returnData.length == 32, \"Return data must be exactly 32 bytes.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(returnData.length == 32, \"Return data must be exactly 32 bytes.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_2"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in DharmaUpgradeBeaconEnvoy.sol:\n\t- pragma solidity0.5.11 (DharmaUpgradeBeaconEnvoy.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 35,
          "vulnerability_code": "  function getImplementation(\n\n    address beacon\n\n  ) external view returns (address implementation) {\n\n    // Perform the staticcall into the supplied upgrade beacon.\n\n    (bool ok, bytes memory returnData) = beacon.staticcall(\"\");\n\n\n\n    // Revert if underlying staticcall reverts, passing along revert message.\n\n    require(ok, string(returnData));\n\n\n\n    // Ensure that the data returned from the beacon is the correct length.\n\n    require(returnData.length == 32, \"Return data must be exactly 32 bytes.\");\n\n\n\n    // Decode the address from the returned data and return it to the caller.\n\n    implementation = abi.decode(returnData, (address));\n",
          "message": "Low level call in DharmaUpgradeBeaconEnvoy.getImplementation (DharmaUpgradeBeaconEnvoy.sol#21-35):\n\t-(ok,returnData) = beacon.staticcall() DharmaUpgradeBeaconEnvoy.sol#25\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool ok, bytes memory returnData) = beacon.staticcall(\"\");\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}