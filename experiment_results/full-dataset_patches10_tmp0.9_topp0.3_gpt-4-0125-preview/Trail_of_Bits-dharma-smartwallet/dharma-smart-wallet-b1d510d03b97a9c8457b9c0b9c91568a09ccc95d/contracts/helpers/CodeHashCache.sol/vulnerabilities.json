{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_cachedHashes[target] == bytes32(0), \"Target already registered.\");    \n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(currentCodeSize > 0, \"Target currently has no runtime code.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(cachedCodeHash != bytes32(0), \"Target not yet registered.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(currentCodeSize > 0, \"Target currently has no runtime code.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function matchesRegisteredCodeHash(\n\n    address target\n\n  ) external view returns (bool codeHashMatchesRegisteredCodeHash) {\n\n    // Get the runtime code hash that is currently registered for the target.\n\n    bytes32 cachedCodeHash = _cachedHashes[target];\n\n\n\n    // Ensure that the target contract has already had a code hash registered.\n\n    require(cachedCodeHash != bytes32(0), \"Target not yet registered.\");\n\n\n\n    // Retrieve the current runtime code hash of the target contract.\n\n    bytes32 currentCodeHash;\n\n    assembly { currentCodeHash := extcodehash(target) }\n\n\n\n    // Compare current runtime code hash to registered runtime code hash.\n\n    codeHashMatchesRegisteredCodeHash = currentCodeHash == cachedCodeHash;\n",
          "message": "CodeHashCache.matchesRegisteredCodeHash (CodeHashCache.sol#57-72) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 44,
          "vulnerability_code": "  function registerCodeHash(address target) external {\n\n    // Ensure that the target contract has not already had a hash registered.\n\n    require(_cachedHashes[target] == bytes32(0), \"Target already registered.\");    \n\n\n\n    // Ensure that the target contract currently has runtime code.\n\n    uint256 currentCodeSize;\n\n    assembly { currentCodeSize := extcodesize(target) }\n\n    require(currentCodeSize > 0, \"Target currently has no runtime code.\");\n\n\n\n    // Retrieve the current runtime code hash of the target contract.\n\n    bytes32 currentCodeHash;\n\n    assembly { currentCodeHash := extcodehash(target) }\n\n\n\n    // Register the runtime code hash for the target contract.\n\n    _cachedHashes[target] = currentCodeHash;\n",
          "message": "CodeHashCache.registerCodeHash uses assembly (CodeHashCache.sol#29-44)\n\t- CodeHashCache.sol#35\n\t- CodeHashCache.sol#40\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function matchesRegisteredCodeHash(\n\n    address target\n\n  ) external view returns (bool codeHashMatchesRegisteredCodeHash) {\n\n    // Get the runtime code hash that is currently registered for the target.\n\n    bytes32 cachedCodeHash = _cachedHashes[target];\n\n\n\n    // Ensure that the target contract has already had a code hash registered.\n\n    require(cachedCodeHash != bytes32(0), \"Target not yet registered.\");\n\n\n\n    // Retrieve the current runtime code hash of the target contract.\n\n    bytes32 currentCodeHash;\n\n    assembly { currentCodeHash := extcodehash(target) }\n\n\n\n    // Compare current runtime code hash to registered runtime code hash.\n\n    codeHashMatchesRegisteredCodeHash = currentCodeHash == cachedCodeHash;\n",
          "message": "CodeHashCache.matchesRegisteredCodeHash uses assembly (CodeHashCache.sol#57-72)\n\t- CodeHashCache.sol#68\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in CodeHashCache.sol:\n\t- pragma solidity0.5.11 (CodeHashCache.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => bytes32) private _cachedHashes;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function matchesRegisteredCodeHash(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { currentCodeHash := extcodehash(target) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { currentCodeHash := extcodehash(target) }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (Exception: Source map error)"
      ],
      "vulnerability_findings": []
    }
  }
}