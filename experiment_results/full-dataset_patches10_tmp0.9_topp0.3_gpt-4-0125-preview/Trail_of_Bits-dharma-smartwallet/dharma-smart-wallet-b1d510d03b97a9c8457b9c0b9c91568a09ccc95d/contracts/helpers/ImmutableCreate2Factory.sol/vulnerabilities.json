{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "      !_deployed[targetDeploymentAddress],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Invalid contract creation - contract has already been deployed.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      deploymentAddress == targetDeploymentAddress,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Failed to deploy contract using provided salt and initialization code.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (address(bytes20(salt)) == msg.sender) ||\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bytes20(salt) == bytes20(0)),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Invalid salt - first 20 bytes of the salt must match calling address.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "      !_deployed[targetDeploymentAddress],\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Invalid contract creation - contract has already been deployed.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      deploymentAddress == targetDeploymentAddress,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Failed to deploy contract using provided salt and initialization code.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (address(bytes20(salt)) == msg.sender) ||\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (bytes20(salt) == bytes20(0)),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Invalid salt - first 20 bytes of the salt must match calling address.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function safeCreate2(\n\n    bytes32 salt,\n\n    bytes calldata initializationCode\n\n  ) external payable containsCaller(salt) returns (address deploymentAddress) {\n\n    // move the initialization code from calldata to memory.\n\n    bytes memory initCode = initializationCode;\n\n\n\n    // determine the target address for contract deployment.\n\n    address targetDeploymentAddress = address(\n\n      uint160(                    // downcast to match the address type.\n\n        uint256(                  // convert to uint to truncate upper digits.\n\n          keccak256(              // compute the CREATE2 hash using 4 inputs.\n\n            abi.encodePacked(     // pack all inputs to the hash together.\n\n              hex\"ff\",            // start with 0xff to distinguish from RLP.\n\n              address(this),      // this contract will be the caller.\n\n              salt,               // pass in the supplied salt value.\n\n              keccak256(          // pass in the hash of initialization code.\n\n                abi.encodePacked(\n\n                  initCode\n\n                )\n\n              )\n\n            )\n\n          )\n\n        )\n\n      )\n\n    );\n\n\n\n    // ensure that a contract hasn't been previously deployed to target address.\n\n    require(\n\n      !_deployed[targetDeploymentAddress],\n\n      \"Invalid contract creation - contract has already been deployed.\"\n\n    );\n\n\n\n    // using inline assembly: load data and length of data, then call CREATE2.\n\n    assembly {                                // solhint-disable-line\n\n      let encoded_data := add(0x20, initCode) // load initialization code.\n\n      let encoded_size := mload(initCode)     // load the init code's length.\n\n      deploymentAddress := create2(           // call CREATE2 with 4 arguments.\n\n        callvalue,                            // forward any attached value.\n\n        encoded_data,                         // pass in initialization code.\n\n        encoded_size,                         // pass in init code's length.\n\n        salt                                  // pass in the salt value.\n\n      )\n\n    }\n\n\n\n    // check address against target to ensure that deployment was successful.\n\n    require(\n\n      deploymentAddress == targetDeploymentAddress,\n\n      \"Failed to deploy contract using provided salt and initialization code.\"\n\n    );\n\n\n\n    // record the deployment of the contract to prevent redeploys.\n\n    _deployed[deploymentAddress] = true;\n",
          "message": "Contract locking ether found in ImmutableCreate2Factory.sol:\n\tContract ImmutableCreate2Factory has payable functions:\n\t - safeCreate2 (ImmutableCreate2Factory.sol#36-89)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function safeCreate2(\n\n    bytes32 salt,\n\n    bytes calldata initializationCode\n\n  ) external payable containsCaller(salt) returns (address deploymentAddress) {\n\n    // move the initialization code from calldata to memory.\n\n    bytes memory initCode = initializationCode;\n\n\n\n    // determine the target address for contract deployment.\n\n    address targetDeploymentAddress = address(\n\n      uint160(                    // downcast to match the address type.\n\n        uint256(                  // convert to uint to truncate upper digits.\n\n          keccak256(              // compute the CREATE2 hash using 4 inputs.\n\n            abi.encodePacked(     // pack all inputs to the hash together.\n\n              hex\"ff\",            // start with 0xff to distinguish from RLP.\n\n              address(this),      // this contract will be the caller.\n\n              salt,               // pass in the supplied salt value.\n\n              keccak256(          // pass in the hash of initialization code.\n\n                abi.encodePacked(\n\n                  initCode\n\n                )\n\n              )\n\n            )\n\n          )\n\n        )\n\n      )\n\n    );\n\n\n\n    // ensure that a contract hasn't been previously deployed to target address.\n\n    require(\n\n      !_deployed[targetDeploymentAddress],\n\n      \"Invalid contract creation - contract has already been deployed.\"\n\n    );\n\n\n\n    // using inline assembly: load data and length of data, then call CREATE2.\n\n    assembly {                                // solhint-disable-line\n\n      let encoded_data := add(0x20, initCode) // load initialization code.\n\n      let encoded_size := mload(initCode)     // load the init code's length.\n\n      deploymentAddress := create2(           // call CREATE2 with 4 arguments.\n\n        callvalue,                            // forward any attached value.\n\n        encoded_data,                         // pass in initialization code.\n\n        encoded_size,                         // pass in init code's length.\n\n        salt                                  // pass in the salt value.\n\n      )\n\n    }\n\n\n\n    // check address against target to ensure that deployment was successful.\n\n    require(\n\n      deploymentAddress == targetDeploymentAddress,\n\n      \"Failed to deploy contract using provided salt and initialization code.\"\n\n    );\n\n\n\n    // record the deployment of the contract to prevent redeploys.\n\n    _deployed[deploymentAddress] = true;\n",
          "message": "ImmutableCreate2Factory.safeCreate2 uses assembly (ImmutableCreate2Factory.sol#36-89)\n\t- ImmutableCreate2Factory.sol#70-79\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in ImmutableCreate2Factory.sol:\n\t- pragma solidity0.5.11 (ImmutableCreate2Factory.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ImmutableCreate2Factory {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => bool) private _deployed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {                                // solhint-disable-line\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (Exception: Source map error)"
      ],
      "vulnerability_findings": []
    }
  }
}