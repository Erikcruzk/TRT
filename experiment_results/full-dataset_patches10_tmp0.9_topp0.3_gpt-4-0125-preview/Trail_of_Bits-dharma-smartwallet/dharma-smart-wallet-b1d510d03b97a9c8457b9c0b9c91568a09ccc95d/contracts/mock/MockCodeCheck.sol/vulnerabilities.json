{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 29,
          "vulnerability_code": "  function code(address target) public view returns (bytes memory codeValue) {\n\n    /* solhint-disable no-inline-assembly */\n\n    assembly {\n\n      // retrieve the size of the external code\n\n      let size := extcodesize(target)\n\n      \n\n      // allocate output byte array\n\n      codeValue := mload(0x40)\n\n      \n\n      // new \"memory end\" including padding\n\n      mstore(0x40, add(codeValue, and(add(size, 0x3f), not(0x1f))))\n\n      \n\n      // store length in memory\n\n      mstore(codeValue, size)\n\n      \n\n      // get the code using extcodecopy\n\n      extcodecopy(target, add(codeValue, 0x20), 0, size)\n\n    } /* solhint-enable no-inline-assembly */\n",
          "message": "MockCodeCheck.code (MockCodeCheck.sol#11-29) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 36,
          "vulnerability_code": "  function hash(address target) public view returns (bytes32 hashValue) {\n\n  \t/* solhint-disable no-inline-assembly */\n\n  \tassembly {\n\n  \t  hashValue := extcodehash(target)\n\n  \t} /* solhint-enable no-inline-assembly */\n",
          "message": "MockCodeCheck.hash (MockCodeCheck.sol#31-36) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 29,
          "vulnerability_code": "  function code(address target) public view returns (bytes memory codeValue) {\n\n    /* solhint-disable no-inline-assembly */\n\n    assembly {\n\n      // retrieve the size of the external code\n\n      let size := extcodesize(target)\n\n      \n\n      // allocate output byte array\n\n      codeValue := mload(0x40)\n\n      \n\n      // new \"memory end\" including padding\n\n      mstore(0x40, add(codeValue, and(add(size, 0x3f), not(0x1f))))\n\n      \n\n      // store length in memory\n\n      mstore(codeValue, size)\n\n      \n\n      // get the code using extcodecopy\n\n      extcodecopy(target, add(codeValue, 0x20), 0, size)\n\n    } /* solhint-enable no-inline-assembly */\n",
          "message": "MockCodeCheck.code uses assembly (MockCodeCheck.sol#11-29)\n\t- MockCodeCheck.sol#13-28\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 36,
          "vulnerability_code": "  function hash(address target) public view returns (bytes32 hashValue) {\n\n  \t/* solhint-disable no-inline-assembly */\n\n  \tassembly {\n\n  \t  hashValue := extcodehash(target)\n\n  \t} /* solhint-enable no-inline-assembly */\n",
          "message": "MockCodeCheck.hash uses assembly (MockCodeCheck.sol#31-36)\n\t- MockCodeCheck.sol#33-35\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 29,
          "vulnerability_code": "  function code(address target) public view returns (bytes memory codeValue) {\n\n    /* solhint-disable no-inline-assembly */\n\n    assembly {\n\n      // retrieve the size of the external code\n\n      let size := extcodesize(target)\n\n      \n\n      // allocate output byte array\n\n      codeValue := mload(0x40)\n\n      \n\n      // new \"memory end\" including padding\n\n      mstore(0x40, add(codeValue, and(add(size, 0x3f), not(0x1f))))\n\n      \n\n      // store length in memory\n\n      mstore(codeValue, size)\n\n      \n\n      // get the code using extcodecopy\n\n      extcodecopy(target, add(codeValue, 0x20), 0, size)\n\n    } /* solhint-enable no-inline-assembly */\n",
          "message": "MockCodeCheck.code (MockCodeCheck.sol#11-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 36,
          "vulnerability_code": "  function hash(address target) public view returns (bytes32 hashValue) {\n\n  \t/* solhint-disable no-inline-assembly */\n\n  \tassembly {\n\n  \t  hashValue := extcodehash(target)\n\n  \t} /* solhint-enable no-inline-assembly */\n",
          "message": "MockCodeCheck.hash (MockCodeCheck.sol#31-36) should be declared external\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function code(address target) public view returns (bytes memory codeValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hash(address target) public view returns (bytes32 hashValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function code(address target) public view returns (bytes memory codeValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hash(address target) public view returns (bytes32 hashValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tassembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}