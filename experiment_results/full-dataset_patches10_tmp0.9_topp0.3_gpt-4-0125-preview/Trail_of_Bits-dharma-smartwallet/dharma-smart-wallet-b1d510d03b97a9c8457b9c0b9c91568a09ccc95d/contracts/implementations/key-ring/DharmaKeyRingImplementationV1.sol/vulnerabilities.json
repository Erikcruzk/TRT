{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_keys[key] == KeyType.None, \"Cannot supply duplicate keys.\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _keys[key] = keyType;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "      KeyType keyType = _keys[signer];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < keys.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(keys.length > 0, \"Must supply at least one key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(adminThreshold > 0, \"Admin threshold cannot be zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorThreshold > 0, \"Executor threshold cannot be zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "      keys.length == keyTypes.length,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Length of keys array and keyTypes arrays must be the same.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(key != uint160(0), \"Cannot supply the null address as a key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_keys[key] == KeyType.None, \"Cannot supply duplicate keys.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(adminKeys > 0, \"Must supply at least one admin key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorKeys > 0, \"Must supply at least one executor key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "      adminThreshold >= adminKeys,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Admin threshold cannot be less than the total supplied admin keys.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "      executorThreshold >= executorKeys,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Executor threshold cannot be less than the total supplied executor keys.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(argument != uint160(0), \"Cannot supply null address as a key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_keys[argument] == KeyType.None, \"Key already exists.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_keys[argument] != KeyType.None, \"Key does not exist.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "          _additionalThresholds.standard > _additionalKeyCounts.standard,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot reduce number of standard keys below required threshold.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "          _additionalThresholds.admin > _additionalKeyCounts.admin,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot reduce number of admin keys below required threshold.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Supplied key type is not currently set.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(threshold > 0, \"Cannot reduce threshold to zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "          threshold <= _additionalKeyCounts.standard,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot increase standard threshold above number of standard keys.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "          threshold <= _additionalKeyCounts.admin,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot increase admin threshold above number of admin keys.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "      signers.length >= threshold,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Supplied number of signatures does not meet the required threshold.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        keyType == KeyType.Dual || keyType == requiredKeyType,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"Supplied signature does not have a signer with the required key type.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(signer > lastSigner, \"Invalid signature ordering.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (v != 27 && v != 28) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        continue;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "      threshold--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < keys.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        executorKeys++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        adminKeys++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _nonce++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _nonce++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorThreshold > 0, \"Executor threshold cannot be zero.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "      keys.length == keyTypes.length,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Length of keys array and keyTypes arrays must be the same.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(key != uint160(0), \"Cannot supply the null address as a key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(adminKeys > 0, \"Must supply at least one admin key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorKeys > 0, \"Must supply at least one executor key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "      adminThreshold >= adminKeys,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Admin threshold cannot be less than the total supplied admin keys.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "      executorThreshold >= executorKeys,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Executor threshold cannot be less than the total supplied executor keys.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(argument != uint160(0), \"Cannot supply null address as a key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "          _additionalThresholds.standard > _additionalKeyCounts.standard,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot reduce number of standard keys below required threshold.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "          _additionalThresholds.admin > _additionalKeyCounts.admin,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot reduce number of admin keys below required threshold.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"Supplied key type is not currently set.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "          threshold <= _additionalKeyCounts.standard,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot increase standard threshold above number of standard keys.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "          threshold <= _additionalKeyCounts.admin,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "          \"Cannot increase admin threshold above number of admin keys.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "      signers.length >= threshold,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Supplied number of signatures does not meet the required threshold.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "        keyType == KeyType.Dual || keyType == requiredKeyType,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"Supplied signature does not have a signer with the required key type.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 404,
          "vulnerability_code": "  function takeAction(\n\n    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n\n  ) external returns (bool ok, bytes memory returnData) {\n\n    // admin-only: 0x44f62b3c => setUserSigningKey(address,uint256,bytes,bytes)\n\n    _verifyOrderedSignatures(\n\n      (\n\n        (\n\n          data.length >= 4 &&\n\n          data[0] == byte(0x44) &&\n\n          data[1] == byte(0xf6) &&\n\n          data[2] == byte(0x2b) &&\n\n          data[3] == byte(0x3c)\n\n        )\n\n        ? KeyType.Admin\n\n        : KeyType.Standard\n\n      ),\n\n      _getStandardActionHash(to, value, data),\n\n      signatures\n\n    );\n\n\n\n    _nonce++;\n\n\n\n    (ok, returnData) = to.call.value(value)(data);\n",
          "message": "DharmaKeyRingImplementationV1.takeAction (DharmaKeyRingImplementationV1.sol#381-404) sends eth to arbitrary user\n\tDangerous calls:\n\t- (ok,returnData) = to.call.value(value)(data) (DharmaKeyRingImplementationV1.sol#403)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function recoverGroup(\n\n    bytes32 hash,\n\n    bytes memory signatures\n\n  ) internal pure returns (uint160[] memory signers) {\n\n    // Ensure that the signatures length is a multiple of 65.\n\n    if (signatures.length % 65 != 0) {\n\n      return new uint160[](0);\n\n    }\n\n\n\n    // Create an appropriately-sized array of addresses for each signer.\n\n    signers = new uint160[](signatures.length / 65);\n\n\n\n    // Get each signature location and divide into r, s and v variables.\n\n    bytes32 signatureLocation;\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    for (uint256 i = 0; i < signers.length; i++) {\n\n      assembly {\n\n        signatureLocation := add(signatures, mul(i, 65))\n\n        r := mload(add(signatureLocation, 0x20))\n\n        s := mload(add(signatureLocation, 0x40))\n\n        v := byte(0, mload(add(signatureLocation, 0x60)))\n\n      }\n\n\n\n      // EIP-2 still allows signature malleability for ecrecover(). Remove\n\n      // this possibility and make the signature unique. \n\n      if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n\n        continue;\n\n      }\n\n\n\n      if (v != 27 && v != 28) {\n\n        continue;\n\n      }\n\n\n\n      // If signature is valid & not malleable, add signer address as uint160.\n\n      signers[i] = uint160(ecrecover(hash, v, r, s));\n\n    }\n",
          "message": "ECDSAGroup.recoverGroup (DharmaKeyRingImplementationV1.sol#23-62) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function recoverGroup(\n\n    bytes32 hash,\n\n    bytes memory signatures\n\n  ) internal pure returns (uint160[] memory signers) {\n\n    // Ensure that the signatures length is a multiple of 65.\n\n    if (signatures.length % 65 != 0) {\n\n      return new uint160[](0);\n\n    }\n\n\n\n    // Create an appropriately-sized array of addresses for each signer.\n\n    signers = new uint160[](signatures.length / 65);\n\n\n\n    // Get each signature location and divide into r, s and v variables.\n\n    bytes32 signatureLocation;\n\n    bytes32 r;\n\n    bytes32 s;\n\n    uint8 v;\n\n\n\n    for (uint256 i = 0; i < signers.length; i++) {\n\n      assembly {\n\n        signatureLocation := add(signatures, mul(i, 65))\n\n        r := mload(add(signatureLocation, 0x20))\n\n        s := mload(add(signatureLocation, 0x40))\n\n        v := byte(0, mload(add(signatureLocation, 0x60)))\n\n      }\n\n\n\n      // EIP-2 still allows signature malleability for ecrecover(). Remove\n\n      // this possibility and make the signature unique. \n\n      if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n\n        continue;\n\n      }\n\n\n\n      if (v != 27 && v != 28) {\n\n        continue;\n\n      }\n\n\n\n      // If signature is valid & not malleable, add signer address as uint160.\n\n      signers[i] = uint160(ecrecover(hash, v, r, s));\n\n    }\n",
          "message": "ECDSAGroup.recoverGroup uses assembly (DharmaKeyRingImplementationV1.sol#23-62)\n\t- DharmaKeyRingImplementationV1.sol#42-47\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": 281,
          "vulnerability_code": "  function initialize(\n\n    uint128 adminThreshold,\n\n    uint128 executorThreshold,\n\n    address[] calldata keys,\n\n    uint8[] calldata keyTypes // 1: standard, 2: admin, 3: dual\n\n  ) external {\n\n    // Ensure that this function is only callable during contract construction.\n\n    assembly { if extcodesize(address) { revert(0, 0) } }\n\n\n\n    uint128 adminKeys;\n\n    uint128 executorKeys;\n\n\n\n    require(keys.length > 0, \"Must supply at least one key.\");\n\n\n\n    require(adminThreshold > 0, \"Admin threshold cannot be zero.\");\n\n\n\n    require(executorThreshold > 0, \"Executor threshold cannot be zero.\");\n\n\n\n    require(\n\n      keys.length == keyTypes.length,\n\n      \"Length of keys array and keyTypes arrays must be the same.\"\n\n    );\n\n\n\n    for (uint256 i = 0; i < keys.length; i++) {\n\n      uint160 key = uint160(keys[i]);\n\n\n\n      require(key != uint160(0), \"Cannot supply the null address as a key.\");\n\n\n\n      require(_keys[key] == KeyType.None, \"Cannot supply duplicate keys.\");\n\n\n\n      KeyType keyType = KeyType(keyTypes[i]);\n\n\n\n      _keys[key] = keyType;\n\n\n\n      bool isStandard = (keyType == KeyType.Standard || keyType == KeyType.Dual);\n\n      bool isAdmin = (keyType == KeyType.Admin || keyType == KeyType.Dual);\n\n\n\n      emit KeyModified(keys[i], isStandard, isAdmin);\n\n\n\n      if (isStandard) {\n\n        executorKeys++;\n\n      }\n\n\n\n      if (isAdmin) {\n\n        adminKeys++;\n\n      }\n\n    }\n\n\n\n    require(adminKeys > 0, \"Must supply at least one admin key.\");\n\n\n\n    require(executorKeys > 0, \"Must supply at least one executor key.\");\n\n\n\n    require(\n\n      adminThreshold >= adminKeys,\n\n      \"Admin threshold cannot be less than the total supplied admin keys.\"\n\n    );\n\n\n\n    require(\n\n      executorThreshold >= executorKeys,\n\n      \"Executor threshold cannot be less than the total supplied executor keys.\"\n\n    );\n\n\n\n    if (adminKeys > 1 || executorKeys > 1) {\n\n      _additionalKeyCounts = AdditionalKeyCount({\n\n        standard: executorKeys - 1,\n\n        admin: adminKeys - 1\n\n      });\n\n    }\n\n\n\n    if (adminThreshold > 1 || executorThreshold > 1) {\n\n      _additionalThresholds = AdditionalThreshold({\n\n        standard: executorThreshold - 1,\n\n        admin: adminThreshold - 1\n\n      });\n\n    }\n",
          "message": "DharmaKeyRingImplementationV1.initialize uses assembly (DharmaKeyRingImplementationV1.sol#206-281)\n\t- DharmaKeyRingImplementationV1.sol#213\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in DharmaKeyRingImplementationV1.sol:\n\t- pragma solidity0.5.11 (DharmaKeyRingImplementationV1.sol#3): it allows old versions\n\t- pragma solidity0.5.11 (DharmaKeyRingImplementationV1.sol#67): it allows old versions\n\t- pragma solidity0.5.11 (DharmaKeyRingImplementationV1.sol#110): it allows old versions\n\t- pragma solidity0.5.11 (DharmaKeyRingImplementationV1.sol#132): it allows old versions\n\t- pragma solidity0.5.11 (DharmaKeyRingImplementationV1.sol#153): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 404,
          "vulnerability_code": "  function takeAction(\n\n    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n\n  ) external returns (bool ok, bytes memory returnData) {\n\n    // admin-only: 0x44f62b3c => setUserSigningKey(address,uint256,bytes,bytes)\n\n    _verifyOrderedSignatures(\n\n      (\n\n        (\n\n          data.length >= 4 &&\n\n          data[0] == byte(0x44) &&\n\n          data[1] == byte(0xf6) &&\n\n          data[2] == byte(0x2b) &&\n\n          data[3] == byte(0x3c)\n\n        )\n\n        ? KeyType.Admin\n\n        : KeyType.Standard\n\n      ),\n\n      _getStandardActionHash(to, value, data),\n\n      signatures\n\n    );\n\n\n\n    _nonce++;\n\n\n\n    (ok, returnData) = to.call.value(value)(data);\n",
          "message": "Low level call in DharmaKeyRingImplementationV1.takeAction (DharmaKeyRingImplementationV1.sol#381-404):\n\t-(ok,returnData) = to.call.value(value)(data) DharmaKeyRingImplementationV1.sol#403\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 455,
          "vulnerability_code": "  function _getStandardActionHash(\n\n    address payable to, uint256 value, bytes memory data\n\n  ) internal view returns (bytes32 hash) {\n\n    hash = keccak256(\n\n      abi.encodePacked(\n\n        address(this),\n\n        _DHARMA_KEY_RING_VERSION,\n\n        _nonce,\n\n        KeyType.Standard,\n\n        to,\n\n        value,\n\n        data\n\n      )\n\n    );\n",
          "message": "Function 'DharmaKeyRingImplementationV1._getStandardActionHash' (DharmaKeyRingImplementationV1.sol#441-455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 470,
          "vulnerability_code": "  function _getAdminActionHash(\n\n    AdminActionType adminActionType, uint160 argument\n\n  ) internal view returns (bytes32 hash) {\n\n    hash = keccak256(\n\n      abi.encodePacked(\n\n        address(this),\n\n        _DHARMA_KEY_RING_VERSION,\n\n        _nonce,\n\n        KeyType.Admin,\n\n        adminActionType,\n\n        argument\n\n      )\n\n    );\n",
          "message": "Function 'DharmaKeyRingImplementationV1._getAdminActionHash' (DharmaKeyRingImplementationV1.sol#457-470) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 499,
          "vulnerability_code": "  function _verifyOrderedSignatures(\n\n    KeyType requiredKeyType, bytes32 hash, bytes memory signatures\n\n  ) internal view {\n\n    uint160[] memory signers = hash.recoverGroup(signatures);\n\n    \n\n    uint256 threshold = (\n\n      requiredKeyType == KeyType.Standard\n\n        ? uint256(_additionalThresholds.standard)\n\n        : uint256(_additionalThresholds.admin)\n\n    ) + 1;\n\n\n\n    require(\n\n      signers.length >= threshold,\n\n      \"Supplied number of signatures does not meet the required threshold.\"\n\n    );\n\n    \n\n    uint160 lastSigner = 0;\n\n    for (uint256 i = 0; i < signers.length; i++) {\n\n      uint160 signer = signers[i];\n\n      KeyType keyType = _keys[signer];\n\n      require(\n\n        keyType == KeyType.Dual || keyType == requiredKeyType,\n\n        \"Supplied signature does not have a signer with the required key type.\"\n\n      );\n\n      require(signer > lastSigner, \"Invalid signature ordering.\");\n\n      lastSigner = signer;\n\n    }\n",
          "message": "Function 'DharmaKeyRingImplementationV1._verifyOrderedSignatures' (DharmaKeyRingImplementationV1.sol#472-499) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 internal constant _ERC_1271_MAGIC_VALUE = bytes4(0x20c13b0b);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < signers.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (uint160 => KeyType) private _keys;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _nonce;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "  AdditionalKeyCount private _additionalKeyCounts;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "  AdditionalThreshold private _additionalThresholds;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function recoverGroup(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "      assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function takeAction(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getActionID(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data, bytes calldata signatures\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (bool ok, bytes memory returnData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (bool ok, bytes memory returnData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external view returns (bytes32 actionID);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata keys,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8[] calldata keyTypes // 1: standard, 2: admin, 3: dual\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { if extcodesize(address) { revert(0, 0) } }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { if extcodesize(address) { revert(0, 0) } }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "    adminActionID = _getAdminActionHash(adminActionType, argument);\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "      KeyType.Admin, _getAdminActionHash(adminActionType, argument), signatures\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR",
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (ok, returnData) = to.call.value(value)(data);\n",
          "message": null
        }
      ]
    }
  }
}