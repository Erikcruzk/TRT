{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_keys[key] == KeyType.None, \"Cannot supply duplicate keys.\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _keys[key] = keyType;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < keys.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(keys.length > 0, \"Must supply at least one key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(adminThreshold > 0, \"Admin threshold cannot be zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorThreshold > 0, \"Executor threshold cannot be zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "      keys.length == keyTypes.length,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Length of keys array and keyTypes arrays must be the same.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(key != uint160(0), \"Cannot supply the null address as a key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_keys[key] == KeyType.None, \"Cannot supply duplicate keys.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(adminKeys > 0, \"Must supply at least one admin key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorKeys > 0, \"Must supply at least one executor key.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "      adminThreshold >= adminKeys,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Admin threshold cannot be less than the total supplied admin keys.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "      executorThreshold >= executorKeys,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Executor threshold cannot be less than the total supplied executor keys.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _keys[uint160(msg.sender)] == KeyType.Admin ||\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _keys[uint160(msg.sender)] == KeyType.Dual,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Only Admin or Dual key holders can call this function.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < keys.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        executorKeys++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        adminKeys++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorThreshold > 0, \"Executor threshold cannot be zero.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "      keys.length == keyTypes.length,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Length of keys array and keyTypes arrays must be the same.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(key != uint160(0), \"Cannot supply the null address as a key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(adminKeys > 0, \"Must supply at least one admin key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(executorKeys > 0, \"Must supply at least one executor key.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "      adminThreshold >= adminKeys,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Admin threshold cannot be less than the total supplied admin keys.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "      executorThreshold >= executorKeys,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Executor threshold cannot be less than the total supplied executor keys.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _keys[uint160(msg.sender)] == KeyType.Admin ||\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _keys[uint160(msg.sender)] == KeyType.Dual,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Only Admin or Dual key holders can call this function.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 132,
          "vulnerability_code": "  function initialize(\n\n    uint128 adminThreshold,\n\n    uint128 executorThreshold,\n\n    address[] calldata keys,\n\n    uint8[] calldata keyTypes // 1: standard, 2: admin, 3: dual\n\n  ) external {\n\n    // Ensure that this function is only callable during contract construction.\n\n    assembly { if extcodesize(address) { revert(0, 0) } }\n\n\n\n    uint128 adminKeys;\n\n    uint128 executorKeys;\n\n\n\n    require(keys.length > 0, \"Must supply at least one key.\");\n\n\n\n    require(adminThreshold > 0, \"Admin threshold cannot be zero.\");\n\n\n\n    require(executorThreshold > 0, \"Executor threshold cannot be zero.\");\n\n\n\n    require(\n\n      keys.length == keyTypes.length,\n\n      \"Length of keys array and keyTypes arrays must be the same.\"\n\n    );\n\n\n\n    for (uint256 i = 0; i < keys.length; i++) {\n\n      uint160 key = uint160(keys[i]);\n\n\n\n      require(key != uint160(0), \"Cannot supply the null address as a key.\");\n\n\n\n      require(_keys[key] == KeyType.None, \"Cannot supply duplicate keys.\");\n\n\n\n      KeyType keyType = KeyType(keyTypes[i]);\n\n\n\n      _keys[key] = keyType;\n\n\n\n      bool isStandard = (keyType == KeyType.Standard || keyType == KeyType.Dual);\n\n      bool isAdmin = (keyType == KeyType.Admin || keyType == KeyType.Dual);\n\n\n\n      emit KeyModified(keys[i], isStandard, isAdmin);\n\n\n\n      if (isStandard) {\n\n        executorKeys++;\n\n      }\n\n\n\n      if (isAdmin) {\n\n        adminKeys++;\n\n      }\n\n    }\n\n\n\n    require(adminKeys > 0, \"Must supply at least one admin key.\");\n\n\n\n    require(executorKeys > 0, \"Must supply at least one executor key.\");\n\n\n\n    require(\n\n      adminThreshold >= adminKeys,\n\n      \"Admin threshold cannot be less than the total supplied admin keys.\"\n\n    );\n\n\n\n    require(\n\n      executorThreshold >= executorKeys,\n\n      \"Executor threshold cannot be less than the total supplied executor keys.\"\n\n    );\n\n\n\n    if (adminKeys > 1 || executorKeys > 1) {\n\n      _additionalKeyCounts = AdditionalKeyCount({\n\n        standard: executorKeys - 1,\n\n        admin: adminKeys - 1\n\n      });\n\n    }\n\n\n\n    if (adminThreshold > 1 || executorThreshold > 1) {\n\n      _additionalThresholds = AdditionalThreshold({\n\n        standard: executorThreshold - 1,\n\n        admin: adminThreshold - 1\n\n      });\n\n    }\n",
          "message": "AdharmaKeyRingImplementation.initialize uses assembly (AdharmaKeyRingImplementation.sol#57-132)\n\t- AdharmaKeyRingImplementation.sol#64\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _nonce;\n",
          "message": "AdharmaKeyRingImplementation._nonce should be constant (AdharmaKeyRingImplementation.sol#45)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in AdharmaKeyRingImplementation.sol:\n\t- pragma solidity0.5.11 (AdharmaKeyRingImplementation.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 145,
          "vulnerability_code": "  function takeAction(\n\n    address payable to, uint256 value, bytes calldata data, bytes calldata\n\n  ) external returns (bool ok, bytes memory returnData) {\n\n    require(\n\n      _keys[uint160(msg.sender)] == KeyType.Admin ||\n\n      _keys[uint160(msg.sender)] == KeyType.Dual,\n\n      \"Only Admin or Dual key holders can call this function.\"\n\n    );\n\n\n\n    (ok, returnData) = to.call.value(value)(data);\n",
          "message": "Low level call in AdharmaKeyRingImplementation.takeAction (AdharmaKeyRingImplementation.sol#135-145):\n\t-(ok,returnData) = to.call.value(value)(data) AdharmaKeyRingImplementation.sol#144\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable to, uint256 value, bytes calldata data, bytes calldata\n",
          "message": "Parameter '' of AdharmaKeyRingImplementation.takeAction (AdharmaKeyRingImplementation.sol#136) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _nonce;\n",
          "message": "AdharmaKeyRingImplementation._nonce (AdharmaKeyRingImplementation.sol#45) is never used in AdharmaKeyRingImplementation\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (uint160 => KeyType) private _keys;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 private _nonce;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  AdditionalKeyCount private _additionalKeyCounts;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  AdditionalThreshold private _additionalThresholds;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function initialize(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata keys,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8[] calldata keyTypes // 1: standard, 2: admin, 3: dual\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { if extcodesize(address) { revert(0, 0) } }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly { if extcodesize(address) { revert(0, 0) } }\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (ok, returnData) = to.call.value(value)(data);\n",
          "message": null
        }
      ]
    }
  }
}