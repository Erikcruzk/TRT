{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor () public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t{\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tname = \"Growth\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tsymbol = \"GRO\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tdecimals = 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t_totalSupply = 1000000000000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalances[msg.sender] = _totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\temit Transfer(address(0), msg.sender, _totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "\tfunction safeMul(uint a, uint b) public pure returns (uint c)\n\n\t{\n\n\t\tc = a * b;\n\n\t\trequire(a == 0 || c / a == b);\n",
          "message": "SafeMath_.safeMul (GrowthToken.sol#37-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 46,
          "vulnerability_code": "\tfunction safeDiv(uint a, uint b) public pure returns (uint c) {\n\n\t\trequire(b > 0);\n\n\t\tc = a / b;\n",
          "message": "SafeMath_.safeDiv (GrowthToken.sol#43-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": 73,
          "vulnerability_code": "\tfunction totalSupply() override public view returns (uint)\n\n\t{\n\n\t\treturn _totalSupply - balances[address(0)];\n",
          "message": "GrowthToken.totalSupply (GrowthToken.sol#70-73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction totalSupply() external view returns (uint);\n",
          "message": "ERC20Interface.totalSupply (GrowthToken.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction balanceOf(address tokenOwner) external view returns (uint balance);\n",
          "message": "ERC20Interface.balanceOf (GrowthToken.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 78,
          "vulnerability_code": "\tfunction balanceOf(address tokenOwner) override public view returns (uint balance)\n\n\t{\n\n\t\treturn balances[tokenOwner];\n",
          "message": "GrowthToken.balanceOf (GrowthToken.sol#75-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 83,
          "vulnerability_code": "\tfunction allowance(address tokenOwner, address spender) override public view returns (uint remaining)\n\n\t{\n\n\t\treturn allowed[tokenOwner][spender];\n",
          "message": "GrowthToken.allowance (GrowthToken.sol#80-83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction allowance(address tokenOwner, address spender) external view returns (uint remaining);\n",
          "message": "ERC20Interface.allowance (GrowthToken.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transfer(address to, uint tokens) external returns (bool success);\n",
          "message": "ERC20Interface.transfer (GrowthToken.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 98,
          "vulnerability_code": "\tfunction transfer(address to, uint tokens) override public returns (bool success)\n\n\t{\n\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\n\n\t\tbalances[to] = safeAdd(balances[to], tokens);\n\n\t\temit Transfer(msg.sender, to, tokens);\n\n\t\treturn true;\n",
          "message": "GrowthToken.transfer (GrowthToken.sol#92-98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 90,
          "vulnerability_code": "\tfunction approve(address spender, uint tokens) override public returns (bool success)\n\n\t{\n\n\t\tallowed[msg.sender][spender] = tokens;\n\n\t\temit Approval(msg.sender, spender, tokens);\n\n\t\treturn true;\n",
          "message": "GrowthToken.approve (GrowthToken.sol#85-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address spender, uint tokens) external returns (bool success);\n",
          "message": "ERC20Interface.approve (GrowthToken.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address from, address to, uint tokens) external returns (bool success);\n",
          "message": "ERC20Interface.transferFrom (GrowthToken.sol#17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": 107,
          "vulnerability_code": "\tfunction transferFrom(address from, address to, uint tokens) override public returns (bool success)\n\n\t{\n\n\t\tbalances[from] = safeSub(balances[from], tokens);\n\n\t\tallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n\n\t\tbalances[to] = safeAdd(balances[to], tokens);\n\n\t\temit Transfer(from, to, tokens);\n\n\t\treturn true;\n",
          "message": "GrowthToken.transferFrom (GrowthToken.sol#100-107) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in GrowthToken.sol:\n\t- pragma solidity^0.6.0 (GrowthToken.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 public _totalSupply;\n",
          "message": "Variable 'GrowthToken._totalSupply' (GrowthToken.sol#55) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\treturn _totalSupply - balances[address(0)];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address spender, uint tokens) override public returns (bool success)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping (address => uint) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping (address => mapping (address => uint)) allowed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}