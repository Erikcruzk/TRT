{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in Math.sol:\n\t- pragma solidity^0.6.0 (Math.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n\n\t{\n\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\n",
          "message": "Function 'Math._min' (Math.sol#11-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n",
          "message": "Parameter '_amount1' of Math._min (Math.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n",
          "message": "Parameter '_amount2' of Math._min (Math.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n\n\t{\n\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\n",
          "message": "Function 'Math._max' (Math.sol#16-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n",
          "message": "Parameter '_amount1' of Math._max (Math.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n",
          "message": "Parameter '_amount2' of Math._max (Math.sol#16) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}