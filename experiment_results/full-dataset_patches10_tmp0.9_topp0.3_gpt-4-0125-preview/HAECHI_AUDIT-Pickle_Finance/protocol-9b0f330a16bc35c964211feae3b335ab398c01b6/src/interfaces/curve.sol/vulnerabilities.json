{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_67"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256 _value, bool claim_rewards) external;\n",
          "message": "ICurveGauge.withdraw.claim_rewards (local variable @ curve.sol#130) shadows:\n\t- ICurveGauge.claim_rewards (function @ curve.sol#132)\n\t- ICurveGauge.claim_rewards (function @ curve.sol#134)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.7;\n",
          "message": "Detected issues with version pragma in curve.sol:\n\t- pragma solidity^0.6.7 (curve.sol#4): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 28,
          "vulnerability_code": "interface ICurveFi_2 {\n\n    function get_virtual_price() external view returns (uint256);\n\n\n\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n\n        external;\n\n\n\n    function remove_liquidity_imbalance(\n\n        uint256[2] calldata amounts,\n\n        uint256 max_burn_amount\n\n    ) external;\n\n\n\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n\n        external;\n\n\n\n    function exchange(\n\n        int128 from,\n\n        int128 to,\n\n        uint256 _from_amount,\n\n        uint256 _min_to_amount\n\n    ) external;\n\n\n\n    function balances(int128) external view returns (uint256);\n",
          "message": "Contract 'ICurveFi_2' (curve.sol#6-28) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_virtual_price() external view returns (uint256);\n",
          "message": "Function 'ICurveFi_2.get_virtual_price' (curve.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n",
          "message": "Function 'ICurveFi_2.add_liquidity' (curve.sol#9-10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi_2.add_liquidity (curve.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[2] calldata amounts,\n\n        uint256 max_burn_amount\n",
          "message": "Function 'ICurveFi_2.remove_liquidity_imbalance' (curve.sol#12-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 max_burn_amount\n",
          "message": "Parameter 'max_burn_amount' of ICurveFi_2.remove_liquidity_imbalance (curve.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n",
          "message": "Function 'ICurveFi_2.remove_liquidity' (curve.sol#17-18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _from_amount,\n",
          "message": "Parameter '_from_amount' of ICurveFi_2.exchange (curve.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _min_to_amount\n",
          "message": "Parameter '_min_to_amount' of ICurveFi_2.exchange (curve.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balances(int128) external view returns (uint256);\n",
          "message": "Parameter '' of ICurveFi_2.balances (curve.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 53,
          "vulnerability_code": "interface ICurveFi_3 {\n\n    function get_virtual_price() external view returns (uint256);\n\n\n\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n\n        external;\n\n\n\n    function remove_liquidity_imbalance(\n\n        uint256[3] calldata amounts,\n\n        uint256 max_burn_amount\n\n    ) external;\n\n\n\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\n\n        external;\n\n\n\n    function exchange(\n\n        int128 from,\n\n        int128 to,\n\n        uint256 _from_amount,\n\n        uint256 _min_to_amount\n\n    ) external;\n\n\n\n    function balances(uint256) external view returns (uint256);\n",
          "message": "Contract 'ICurveFi_3' (curve.sol#31-53) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_virtual_price() external view returns (uint256);\n",
          "message": "Function 'ICurveFi_3.get_virtual_price' (curve.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n",
          "message": "Function 'ICurveFi_3.add_liquidity' (curve.sol#34-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi_3.add_liquidity (curve.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[3] calldata amounts,\n\n        uint256 max_burn_amount\n",
          "message": "Function 'ICurveFi_3.remove_liquidity_imbalance' (curve.sol#37-40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 max_burn_amount\n",
          "message": "Parameter 'max_burn_amount' of ICurveFi_3.remove_liquidity_imbalance (curve.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\n",
          "message": "Function 'ICurveFi_3.remove_liquidity' (curve.sol#42-43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _from_amount,\n",
          "message": "Parameter '_from_amount' of ICurveFi_3.exchange (curve.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _min_to_amount\n",
          "message": "Parameter '_min_to_amount' of ICurveFi_3.exchange (curve.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balances(uint256) external view returns (uint256);\n",
          "message": "Parameter '' of ICurveFi_3.balances (curve.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 77,
          "vulnerability_code": "interface ICurveFi_4 {\n\n    function get_virtual_price() external view returns (uint256);\n\n\n\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n\n        external;\n\n\n\n    function remove_liquidity_imbalance(\n\n        uint256[4] calldata amounts,\n\n        uint256 max_burn_amount\n\n    ) external;\n\n\n\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\n\n        external;\n\n\n\n    function exchange(\n\n        int128 from,\n\n        int128 to,\n\n        uint256 _from_amount,\n\n        uint256 _min_to_amount\n\n    ) external;\n\n\n\n    function balances(int128) external view returns (uint256);\n",
          "message": "Contract 'ICurveFi_4' (curve.sol#55-77) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function get_virtual_price() external view returns (uint256);\n",
          "message": "Function 'ICurveFi_4.get_virtual_price' (curve.sol#56) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n",
          "message": "Function 'ICurveFi_4.add_liquidity' (curve.sol#58-59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi_4.add_liquidity (curve.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[4] calldata amounts,\n\n        uint256 max_burn_amount\n",
          "message": "Function 'ICurveFi_4.remove_liquidity_imbalance' (curve.sol#61-64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 max_burn_amount\n",
          "message": "Parameter 'max_burn_amount' of ICurveFi_4.remove_liquidity_imbalance (curve.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\n",
          "message": "Function 'ICurveFi_4.remove_liquidity' (curve.sol#66-67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _from_amount,\n",
          "message": "Parameter '_from_amount' of ICurveFi_4.exchange (curve.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _min_to_amount\n",
          "message": "Parameter '_min_to_amount' of ICurveFi_4.exchange (curve.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balances(int128) external view returns (uint256);\n",
          "message": "Parameter '' of ICurveFi_4.balances (curve.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 119,
          "vulnerability_code": "interface ICurveZap_4 {\n\n    function add_liquidity(\n\n        uint256[4] calldata uamounts,\n\n        uint256 min_mint_amount\n\n    ) external;\n\n\n\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\n\n        external;\n\n\n\n    function remove_liquidity_imbalance(\n\n        uint256[4] calldata uamounts,\n\n        uint256 max_burn_amount\n\n    ) external;\n\n\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\n\n        external\n\n        returns (uint256);\n\n\n\n    function remove_liquidity_one_coin(\n\n        uint256 _token_amount,\n\n        int128 i,\n\n        uint256 min_uamount\n\n    ) external;\n\n\n\n    function remove_liquidity_one_coin(\n\n        uint256 _token_amount,\n\n        int128 i,\n\n        uint256 min_uamount,\n\n        bool donate_dust\n\n    ) external;\n\n\n\n    function withdraw_donated_dust() external;\n\n\n\n    function coins(int128 arg0) external returns (address);\n\n\n\n    function underlying_coins(int128 arg0) external returns (address);\n\n\n\n    function curve() external returns (address);\n\n\n\n    function token() external returns (address);\n",
          "message": "Contract 'ICurveZap_4' (curve.sol#79-119) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function add_liquidity(\n\n        uint256[4] calldata uamounts,\n\n        uint256 min_mint_amount\n",
          "message": "Function 'ICurveZap_4.add_liquidity' (curve.sol#80-83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 min_mint_amount\n",
          "message": "Parameter 'min_mint_amount' of ICurveZap_4.add_liquidity (curve.sol#82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\n",
          "message": "Function 'ICurveZap_4.remove_liquidity' (curve.sol#85-86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\n",
          "message": "Parameter 'min_uamounts' of ICurveZap_4.remove_liquidity (curve.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[4] calldata uamounts,\n\n        uint256 max_burn_amount\n",
          "message": "Function 'ICurveZap_4.remove_liquidity_imbalance' (curve.sol#88-91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 max_burn_amount\n",
          "message": "Parameter 'max_burn_amount' of ICurveZap_4.remove_liquidity_imbalance (curve.sol#90) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 95,
          "vulnerability_code": "    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\n\n        external\n",
          "message": "Function 'ICurveZap_4.calc_withdraw_one_coin' (curve.sol#93-95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\n",
          "message": "Parameter '_token_amount' of ICurveZap_4.calc_withdraw_one_coin (curve.sol#93) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function remove_liquidity_one_coin(\n\n        uint256 _token_amount,\n\n        int128 i,\n\n        uint256 min_uamount\n",
          "message": "Function 'ICurveZap_4.remove_liquidity_one_coin' (curve.sol#97-101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _token_amount,\n",
          "message": "Parameter '_token_amount' of ICurveZap_4.remove_liquidity_one_coin (curve.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 min_uamount\n",
          "message": "Parameter 'min_uamount' of ICurveZap_4.remove_liquidity_one_coin (curve.sol#100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function remove_liquidity_one_coin(\n\n        uint256 _token_amount,\n\n        int128 i,\n\n        uint256 min_uamount,\n\n        bool donate_dust\n",
          "message": "Function 'ICurveZap_4.remove_liquidity_one_coin' (curve.sol#103-108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _token_amount,\n",
          "message": "Parameter '_token_amount' of ICurveZap_4.remove_liquidity_one_coin (curve.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 min_uamount,\n",
          "message": "Parameter 'min_uamount' of ICurveZap_4.remove_liquidity_one_coin (curve.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool donate_dust\n",
          "message": "Parameter 'donate_dust' of ICurveZap_4.remove_liquidity_one_coin (curve.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw_donated_dust() external;\n",
          "message": "Function 'ICurveZap_4.withdraw_donated_dust' (curve.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function underlying_coins(int128 arg0) external returns (address);\n",
          "message": "Function 'ICurveZap_4.underlying_coins' (curve.sol#114) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint256 _value, bool claim_rewards) external;\n",
          "message": "Parameter 'claim_rewards' of ICurveGauge.withdraw (curve.sol#130) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim_rewards() external;\n",
          "message": "Function 'ICurveGauge.claim_rewards' (curve.sol#132) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim_rewards(address addr) external;\n",
          "message": "Function 'ICurveGauge.claim_rewards' (curve.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_tokens(address addr) external returns (uint256);\n",
          "message": "Function 'ICurveGauge.claimable_tokens' (curve.sol#136) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimable_reward(address addr) external view returns (uint256);\n",
          "message": "Function 'ICurveGauge.claimable_reward' (curve.sol#138) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function integrate_fraction(address arg0) external view returns (uint256);\n",
          "message": "Function 'ICurveGauge.integrate_fraction' (curve.sol#140) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address) external;\n",
          "message": "Parameter '' of ICurveMintr.mint (curve.sol#144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function locked__end(address _addr) external view returns (uint256);\n",
          "message": "Function 'ICurveVotingEscrow.locked__end' (curve.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function create_lock(uint256, uint256) external;\n",
          "message": "Function 'ICurveVotingEscrow.create_lock' (curve.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function create_lock(uint256, uint256) external;\n",
          "message": "Parameter '' of ICurveVotingEscrow.create_lock (curve.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function create_lock(uint256, uint256) external;\n",
          "message": "Parameter '_scope_0' of ICurveVotingEscrow.create_lock (curve.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increase_amount(uint256) external;\n",
          "message": "Function 'ICurveVotingEscrow.increase_amount' (curve.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increase_amount(uint256) external;\n",
          "message": "Parameter '' of ICurveVotingEscrow.increase_amount (curve.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increase_unlock_time(uint256 _unlock_time) external;\n",
          "message": "Function 'ICurveVotingEscrow.increase_unlock_time' (curve.sol#161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increase_unlock_time(uint256 _unlock_time) external;\n",
          "message": "Parameter '_unlock_time' of ICurveVotingEscrow.increase_unlock_time (curve.sol#161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function smart_wallet_checker() external returns (address);\n",
          "message": "Function 'ICurveVotingEscrow.smart_wallet_checker' (curve.sol#165) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function wallets(address) external returns (bool);\n",
          "message": "Parameter '' of ICurveSmartContractChecker.wallets (curve.sol#169) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (int128 amount, uint256 end);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}