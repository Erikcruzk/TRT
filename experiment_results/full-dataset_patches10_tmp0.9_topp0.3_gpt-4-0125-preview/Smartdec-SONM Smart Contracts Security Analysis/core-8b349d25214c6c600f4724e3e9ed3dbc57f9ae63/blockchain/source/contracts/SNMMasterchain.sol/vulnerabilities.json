{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_35"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": 58,
          "vulnerability_code": "contract ERC20Basic {\n\n  uint public totalSupply;\n\n  function balanceOf(address who) constant returns (uint);\n\n  function transfer(address to, uint value);\n\n  event Transfer(address indexed from, address indexed to, uint value);\n",
          "message": "ERC20Basic (SNMMasterchain.sol#53-58) has incorrect ERC20 function interface(s):\n\t-transfer (SNMMasterchain.sol#56)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 82,
          "vulnerability_code": "contract BasicToken is ERC20Basic {\n\n  using SafeMath for uint;\n\n\n\n  mapping(address => uint) balances;\n\n\n\n  modifier onlyPayloadSize(uint size) {\n\n     if(msg.data.length < size + 4) {\n\n       throw;\n\n     }\n\n     _;\n\n  }\n\n\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n  }\n\n\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n\n    return balances[_owner];\n\n  }\n\n\n",
          "message": "BasicToken (SNMMasterchain.sol#60-82) has incorrect ERC20 function interface(s):\n\t-transfer (SNMMasterchain.sol#72-76)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": 89,
          "vulnerability_code": "contract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transferFrom(address from, address to, uint value);\n\n  function approve(address spender, uint value);\n\n  event Approval(address indexed owner, address indexed spender, uint value);\n",
          "message": "ERC20 (SNMMasterchain.sol#84-89) has incorrect ERC20 function interface(s):\n\t-transferFrom (SNMMasterchain.sol#86)\n\t-approve (SNMMasterchain.sol#87)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 112,
          "vulnerability_code": "contract StandardToken is BasicToken, ERC20 {\n\n\n\n  mapping (address => mapping (address => uint)) allowed;\n\n\n\n  function transferFrom(address _from, address _to, uint _value) {\n\n    var _allowance = allowed[_from][msg.sender];\n\n    balances[_to] = balances[_to].add(_value);\n\n    balances[_from] = balances[_from].sub(_value);\n\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n\n    Transfer(_from, _to, _value);\n\n  }\n\n\n\n  function approve(address _spender, uint _value) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n  }\n\n\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n\n    return allowed[_owner][_spender];\n\n  }\n\n\n",
          "message": "StandardToken (SNMMasterchain.sol#91-112) has incorrect ERC20 function interface(s):\n\t-transferFrom (SNMMasterchain.sol#95-101)\n\t-approve (SNMMasterchain.sol#103-106)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 162,
          "vulnerability_code": "contract SNMMasterchain  is StandardToken {\n\n  string public name = \"SONM Token\";\n\n  string public symbol = \"SNM\";\n\n  uint public decimals = 18;\n\n  uint constant TOKEN_LIMIT = 444 * 1e6 * 1e18;\n\n  address public ico;\n\n\n\n  // We block token transfers until ICO is finished.\n\n  bool public tokensAreFrozen = true;\n\n\n\n  function SNMMasterchain(address _ico) {\n\n    ico = _ico;\n\n  }\n\n\n\n  // Mint few tokens and transefer them to some address.\n\n  function mint(address _holder, uint _value) external {\n\n    require(msg.sender == ico);\n\n    require(_value != 0);\n\n    require(totalSupply + _value <= TOKEN_LIMIT);\n\n\n\n    balances[_holder] += _value;\n\n    totalSupply += _value;\n\n    Transfer(0x0, _holder, _value);\n\n  }\n\n\n\n\n\n  // Allow token transfer.\n\n  function defrost() external {\n\n    require(msg.sender == ico);\n\n    tokensAreFrozen = false;\n\n  }\n\n\n\n  function transfer(address _to, uint _value) public {\n\n    require(!tokensAreFrozen);\n\n    super.transfer(_to, _value);\n\n  }\n\n\n\n\n\n  function transferFrom(address _from, address _to, uint _value) public {\n\n    require(!tokensAreFrozen);\n\n    super.transferFrom(_from, _to, _value);\n\n  }\n\n\n\n\n\n  function approve(address _spender, uint _value) public {\n\n    require(!tokensAreFrozen);\n\n    super.approve(_spender, _value);\n\n  }\n",
          "message": "SNMMasterchain (SNMMasterchain.sol#114-162) has incorrect ERC20 function interface(s):\n\t-transfer (SNMMasterchain.sol#146-149)\n\t-transferFrom (SNMMasterchain.sol#152-155)\n\t-approve (SNMMasterchain.sol#158-161)\n"
        },
        {
          "name": "shadowing-builtin",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 50,
          "vulnerability_code": "  function assert(bool assertion) internal {\n\n    if (!assertion) {\n\n      throw;\n\n    }\n",
          "message": "SafeMath.assert (function @ SNMMasterchain.sol#46-50) shadows built-in symbol \"assert\"\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint public decimals = 18;\n",
          "message": "SNMMasterchain.decimals should be constant (SNMMasterchain.sol#117)\nSNMMasterchain.name should be constant (SNMMasterchain.sol#115)\nSNMMasterchain.symbol should be constant (SNMMasterchain.sol#116)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "      throw;\n",
          "message": "Deprecated standard detected @ SNMMasterchain.sol#48:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "       throw;\n",
          "message": "Deprecated standard detected @ SNMMasterchain.sol#67:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) constant returns (uint);\n",
          "message": "ERC20Basic.balanceOf (SNMMasterchain.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": 80,
          "vulnerability_code": "  function balanceOf(address _owner) constant returns (uint balance) {\n\n    return balances[_owner];\n",
          "message": "BasicToken.balanceOf (SNMMasterchain.sol#78-80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint);\n",
          "message": "ERC20.allowance (SNMMasterchain.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": 110,
          "vulnerability_code": "  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n\n    return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (SNMMasterchain.sol#108-110) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Detected issues with version pragma in SNMMasterchain.sol:\n\t- pragma solidity^0.4.11 (SNMMasterchain.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) constant returns (uint balance) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (SNMMasterchain.sol#78) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (SNMMasterchain.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (SNMMasterchain.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (SNMMasterchain.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (SNMMasterchain.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (SNMMasterchain.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (SNMMasterchain.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (SNMMasterchain.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (SNMMasterchain.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) {\n",
          "message": "Parameter '_value' of StandardToken.approve (SNMMasterchain.sol#103) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint _value) public {\n",
          "message": "Parameter '_to' of SNMMasterchain.transfer (SNMMasterchain.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint _value) public {\n",
          "message": "Parameter '_value' of SNMMasterchain.transfer (SNMMasterchain.sol#146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) public {\n",
          "message": "Parameter '_from' of SNMMasterchain.transferFrom (SNMMasterchain.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) public {\n",
          "message": "Parameter '_to' of SNMMasterchain.transferFrom (SNMMasterchain.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) public {\n",
          "message": "Parameter '_value' of SNMMasterchain.transferFrom (SNMMasterchain.sol#152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) public {\n",
          "message": "Parameter '_spender' of SNMMasterchain.approve (SNMMasterchain.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) public {\n",
          "message": "Parameter '_value' of SNMMasterchain.approve (SNMMasterchain.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 126,
          "vulnerability_code": "  function SNMMasterchain(address _ico) {\n\n    ico = _ico;\n",
          "message": "Function 'SNMMasterchain.SNMMasterchain' (SNMMasterchain.sol#124-126) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SNMMasterchain(address _ico) {\n",
          "message": "Parameter '_ico' of SNMMasterchain.SNMMasterchain (SNMMasterchain.sol#124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _holder, uint _value) external {\n",
          "message": "Parameter '_holder' of SNMMasterchain.mint (SNMMasterchain.sol#129) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _holder, uint _value) external {\n",
          "message": "Parameter '_value' of SNMMasterchain.mint (SNMMasterchain.sol#129) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "      throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "       throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) constant returns (uint balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (!assertion) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "     if(msg.data.length < size + 4) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) constant returns (uint balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) constant returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint value);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint _value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint _value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SNMMasterchain(address _ico) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint)) allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint constant TOKEN_LIMIT = 444 * 1e6 * 1e18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_holder] += _value;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name = \"SONM Token\";\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(totalSupply + _value <= TOKEN_LIMIT);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_holder] += _value;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply += _value;\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(totalSupply + _value <= TOKEN_LIMIT);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_holder] += _value;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply += _value;\n",
          "message": null
        }
      ]
    }
  }
}