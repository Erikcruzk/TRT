{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (year >= 1970 && month > 0 && month <= 12) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint daysInMonth = _getDaysInMonth(year, month);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (day > 0 && day <= daysInMonth) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "                valid = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (day > 0 && day <= daysInMonth) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "                valid = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (hour < 24 && minute < 60 && second < 60) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "                valid = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in BokkyPooBahsDateTimeLibrary.sol:\n\t- pragma solidity^0.5.0 (BokkyPooBahsDateTimeLibrary.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\n\n        require(year >= 1970);\n\n        int _year = int(year);\n\n        int _month = int(month);\n\n        int _day = int(day);\n\n\n\n        int __days = _day\n\n          - 32075\n\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n\n          - OFFSET19700101;\n\n\n\n        _days = uint(__days);\n",
          "message": "Function 'BokkyPooBahsDateTimeLibrary._daysFromDate' (BokkyPooBahsDateTimeLibrary.sol#58-72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n\n        int __days = int(_days);\n\n\n\n        int L = __days + 68569 + OFFSET19700101;\n\n        int N = 4 * L / 146097;\n\n        L = L - (146097 * N + 3) / 4;\n\n        int _year = 4000 * (L + 1) / 1461001;\n\n        L = L - 1461 * _year / 4 + 31;\n\n        int _month = 80 * L / 2447;\n\n        int _day = L - 2447 * _month / 80;\n\n        L = _month / 11;\n\n        _month = _month + 2 - 12 * L;\n\n        _year = 100 * (N - 49) + _year + L;\n\n\n\n        year = uint(_year);\n\n        month = uint(_month);\n\n        day = uint(_day);\n",
          "message": "Function 'BokkyPooBahsDateTimeLibrary._daysToDate' (BokkyPooBahsDateTimeLibrary.sol#91-108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n",
          "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary._daysToDate (BokkyPooBahsDateTimeLibrary.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 152,
          "vulnerability_code": "    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\n\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n",
          "message": "Function 'BokkyPooBahsDateTimeLibrary._isLeapYear' (BokkyPooBahsDateTimeLibrary.sol#150-152) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": 174,
          "vulnerability_code": "    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\n\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\n            daysInMonth = 31;\n\n        } else if (month != 2) {\n\n            daysInMonth = 30;\n\n        } else {\n\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n\n        }\n",
          "message": "Function 'BokkyPooBahsDateTimeLibrary._getDaysInMonth' (BokkyPooBahsDateTimeLibrary.sol#166-174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_years' of BokkyPooBahsDateTimeLibrary.addYears (BokkyPooBahsDateTimeLibrary.sol#208) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_months' of BokkyPooBahsDateTimeLibrary.addMonths (BokkyPooBahsDateTimeLibrary.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary.addDays (BokkyPooBahsDateTimeLibrary.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_hours' of BokkyPooBahsDateTimeLibrary.addHours (BokkyPooBahsDateTimeLibrary.sol#240) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_minutes' of BokkyPooBahsDateTimeLibrary.addMinutes (BokkyPooBahsDateTimeLibrary.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_seconds' of BokkyPooBahsDateTimeLibrary.addSeconds (BokkyPooBahsDateTimeLibrary.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_years' of BokkyPooBahsDateTimeLibrary.subYears (BokkyPooBahsDateTimeLibrary.sol#253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_months' of BokkyPooBahsDateTimeLibrary.subMonths (BokkyPooBahsDateTimeLibrary.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary.subDays (BokkyPooBahsDateTimeLibrary.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_hours' of BokkyPooBahsDateTimeLibrary.subHours (BokkyPooBahsDateTimeLibrary.sol#285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_minutes' of BokkyPooBahsDateTimeLibrary.subMinutes (BokkyPooBahsDateTimeLibrary.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n",
          "message": "Parameter '_seconds' of BokkyPooBahsDateTimeLibrary.subSeconds (BokkyPooBahsDateTimeLibrary.sol#293) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_MON = 1;\n",
          "message": "BokkyPooBahsDateTimeLibrary.DOW_MON (BokkyPooBahsDateTimeLibrary.sol#37) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_TUE (BokkyPooBahsDateTimeLibrary.sol#38) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_WED (BokkyPooBahsDateTimeLibrary.sol#39) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_THU (BokkyPooBahsDateTimeLibrary.sol#40) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_SUN (BokkyPooBahsDateTimeLibrary.sol#43) is never used in BokkyPooBahsDateTimeLibrary\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant SECONDS_PER_HOUR = 60 * 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant SECONDS_PER_MINUTE = 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int constant OFFSET19700101 = 2440588;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_MON = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_TUE = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_WED = 3;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_THU = 4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_FRI = 5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_SAT = 6;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant DOW_SUN = 7;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}