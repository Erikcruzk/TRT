{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Ownable,\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < authorities.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities[i] = authorities[authorities.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities.length -= 1;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor ()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < authorities.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (authorities[i] == target) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities[i] = authorities[authorities.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities[i] = authorities[authorities.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities[i] = authorities[authorities.length - 1];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities.length -= 1;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < authorities.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "            msg.sender == owner,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"ONLY_CONTRACT_OWNER\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            authorized[msg.sender],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SENDER_NOT_AUTHORIZED\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !authorized[target],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TARGET_ALREADY_AUTHORIZED\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "            authorized[target],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TARGET_NOT_AUTHORIZED\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "            authorized[target],\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"TARGET_NOT_AUTHORIZED\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "            index < authorities.length,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"INDEX_OUT_OF_BOUNDS\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "            authorities[index] == target,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"AUTHORIZED_ADDRESS_MISMATCH\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < authorities.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": 419,
          "vulnerability_code": "    function ()\n\n        external\n\n    {\n\n        assembly {\n\n            // The first 4 bytes of calldata holds the function selector\n\n            let selector := and(calldataload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n\n\n            // `transferFrom` will be called with the following parameters:\n\n            // assetData Encoded byte array.\n\n            // from Address to transfer asset from.\n\n            // to Address to transfer asset to.\n\n            // amount Amount of asset to transfer.\n\n            // bytes4(keccak256(\"transferFrom(bytes,address,address,uint256)\")) = 0xa85e59e4\n\n            if eq(selector, 0xa85e59e400000000000000000000000000000000000000000000000000000000) {\n\n\n\n                // To lookup a value in a mapping, we load from the storage location keccak256(k, p),\n\n                // where k is the key left padded to 32 bytes and p is the storage slot\n\n                let start := mload(64)\n\n                mstore(start, and(caller, 0xffffffffffffffffffffffffffffffffffffffff))\n\n                mstore(add(start, 32), authorized_slot)\n\n\n\n                // Revert if authorized[msg.sender] == false\n\n                if iszero(sload(keccak256(start, 64))) {\n\n                    // Revert with `Error(\"SENDER_NOT_AUTHORIZED\")`\n\n                    mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n\n                    mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n\n                    mstore(64, 0x0000001553454e4445525f4e4f545f415554484f52495a454400000000000000)\n\n                    mstore(96, 0)\n\n                    revert(0, 100)\n\n                }\n\n\n\n                // `transferFrom`.\n\n                // The function is marked `external`, so no abi decodeding is done for\n\n                // us. Instead, we expect the `calldata` memory to contain the\n\n                // following:\n\n                //\n\n                // | Area     | Offset | Length  | Contents                            |\n\n                // |----------|--------|---------|-------------------------------------|\n\n                // | Header   | 0      | 4       | function selector                   |\n\n                // | Params   |        | 4 * 32  | function parameters:                |\n\n                // |          | 4      |         |   1. offset to assetData (*)        |\n\n                // |          | 36     |         |   2. from                           |\n\n                // |          | 68     |         |   3. to                             |\n\n                // |          | 100    |         |   4. amount                         |\n\n                // | Data     |        |         | assetData:                          |\n\n                // |          | 132    | 32      | assetData Length                    |\n\n                // |          | 164    | **      | assetData Contents                  |\n\n                //\n\n                // (*): offset is computed from start of function parameters, so offset\n\n                //      by an additional 4 bytes in the calldata.\n\n                //\n\n                // (**): see table below to compute length of assetData Contents\n\n                //\n\n                // WARNING: The ABIv2 specification allows additional padding between\n\n                //          the Params and Data section. This will result in a larger\n\n                //          offset to assetData.\n\n\n\n                // Asset data itself is encoded as follows:\n\n                //\n\n                // | Area     | Offset | Length  | Contents                            |\n\n                // |----------|--------|---------|-------------------------------------|\n\n                // | Header   | 0      | 4       | function selector                   |\n\n                // | Params   |        | 1 * 32  | function parameters:                |\n\n                // |          | 4      | 12 + 20 |   1. token address                  |\n\n\n\n                // We construct calldata for the `token.transferFrom` ABI.\n\n                // The layout of this calldata is in the table below.\n\n                //\n\n                // | Area     | Offset | Length  | Contents                            |\n\n                // |----------|--------|---------|-------------------------------------|\n\n                // | Header   | 0      | 4       | function selector                   |\n\n                // | Params   |        | 3 * 32  | function parameters:                |\n\n                // |          | 4      |         |   1. from                           |\n\n                // |          | 36     |         |   2. to                             |\n\n                // |          | 68     |         |   3. amount                         |\n\n\n\n                /////// Read token address from calldata ///////\n\n                // * The token address is stored in `assetData`.\n\n                //\n\n                // * The \"offset to assetData\" is stored at offset 4 in the calldata (table 1).\n\n                //   [assetDataOffsetFromParams = calldataload(4)]\n\n                //\n\n                // * Notes that the \"offset to assetData\" is relative to the \"Params\" area of calldata;\n\n                //   add 4 bytes to account for the length of the \"Header\" area (table 1).\n\n                //   [assetDataOffsetFromHeader = assetDataOffsetFromParams + 4]\n\n                //\n\n                // * The \"token address\" is offset 32+4=36 bytes into \"assetData\" (tables 1 & 2).\n\n                //   [tokenOffset = assetDataOffsetFromHeader + 36 = calldataload(4) + 4 + 36]\n\n                let token := calldataload(add(calldataload(4), 40))\n\n\n\n                /////// Setup Header Area ///////\n\n                // This area holds the 4-byte `transferFrom` selector.\n\n                // Any trailing data in transferFromSelector will be\n\n                // overwritten in the next `mstore` call.\n\n                mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n\n\n\n                /////// Setup Params Area ///////\n\n                // We copy the fields `from`, `to` and `amount` in bulk\n\n                // from our own calldata to the new calldata.\n\n                calldatacopy(4, 36, 96)\n\n\n\n                /////// Call `token.transferFrom` using the calldata ///////\n\n                let success := call(\n\n                    gas,            // forward all gas\n\n                    token,          // call address of token contract\n\n                    0,              // don't send any ETH\n\n                    0,              // pointer to start of input\n\n                    100,            // length of input\n\n                    0,              // write output over input\n\n                    32              // output size should be 32 bytes\n\n                )\n\n\n\n                /////// Check return data. ///////\n\n                // If there is no return data, we assume the token incorrectly\n\n                // does not return a bool. In this case we expect it to revert\n\n                // on failure, which was handled above.\n\n                // If the token does return data, we require that it is a single\n\n                // nonzero 32 bytes value.\n\n                // So the transfer succeeded if the call succeeded and either\n\n                // returned nothing, or returned a non-zero 32 byte value.\n\n                success := and(success, or(\n\n                    iszero(returndatasize),\n\n                    and(\n\n                        eq(returndatasize, 32),\n\n                        gt(mload(0), 0)\n\n                    )\n\n                ))\n\n                if success {\n\n                    return(0, 0)\n\n                }\n\n\n\n                // Revert with `Error(\"TRANSFER_FAILED\")`\n\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n\n                mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n\n                mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n\n                mstore(96, 0)\n\n                revert(0, 100)\n\n            }\n\n\n\n            // Revert if undefined function is called\n\n            revert(0, 0)\n\n        }\n",
          "message": "ERC20Proxy.fallback uses assembly (ERC20Proxy.sol#277-419)\n\t- ERC20Proxy.sol#280-418\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address newOwner) public;\n",
          "message": "IOwnable.transferOwnership (ERC20Proxy.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 64,
          "vulnerability_code": "    function transferOwnership(address newOwner)\n\n        public\n\n        onlyOwner\n\n    {\n\n        if (newOwner != address(0)) {\n\n            owner = newOwner;\n\n        }\n",
          "message": "Ownable.transferOwnership (ERC20Proxy.sol#57-64) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": "Detected issues with version pragma in ERC20Proxy.sol:\n\t- pragma solidity^0.5.9 (ERC20Proxy.sol#21): it allows old versions\n\t- pragma solidity^0.5.9 (ERC20Proxy.sol#36): it allows old versions\n\t- pragma solidity^0.5.9 (ERC20Proxy.sol#87): it allows old versions\n\t- pragma solidity^0.5.9 (ERC20Proxy.sol#151): it allows old versions\n\t- pragma solidity^0.5.9 (ERC20Proxy.sol#268): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "                authorities.length -= 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        authorities.length -= 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < authorities.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < authorities.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.9;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "                let success := call(\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public authorities;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public authorities;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}