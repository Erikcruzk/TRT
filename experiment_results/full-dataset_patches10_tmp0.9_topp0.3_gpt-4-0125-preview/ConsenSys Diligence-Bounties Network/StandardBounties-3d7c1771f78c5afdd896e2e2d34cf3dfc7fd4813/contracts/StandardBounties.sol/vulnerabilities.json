{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _contributionIds.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < fulfillment.fulfillers.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _issuers.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _approvers.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _registerInterface(InterfaceId_ERC165);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor()\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "  {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // register the supported interfaces to conform to ERC721 via ERC165\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _registerInterface(InterfaceId_ERC721);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _registerInterface(InterfaceId_ERC721Exists);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "    // The owner of the contract is automatically designated to be the deployer of the contract\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1111,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(bounties[_bountyId].balance >= _tokenAmounts[i]); // Checks that the bounty has a sufficient balance to make the payout\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1113,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bounties[_bountyId].balance -= _tokenAmounts[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1300,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bounties[_bountyId].issuers.push(_issuers[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1343,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bounties[_bountyId].approvers.push(_approvers[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _contributionIds.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < fulfillment.fulfillers.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _issuers.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _approvers.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balances[msg.sender] >= _value && _value > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] -= _value;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_to] += _value;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Transfer(msg.sender, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else { return false; }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_to] += _value;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_from] -= _value;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowed[_from][msg.sender] -= _value;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit Transfer(_from, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else { return false; }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": null,
          "vulnerability_code": "    numBounties++; // Increments the number of bounties, since a new one has just been added\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _contributionIds.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < fulfillment.fulfillers.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _issuers.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _approvers.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_interfaceId != 0xffffffff);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 internal constant ERC721_RECEIVED = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 private constant ERC721_RECEIVED = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "      tokenApprovals[_tokenId] = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "    tokenOwner[_tokenId] = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 705,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract StandardBounties {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMetaTxRelayer(address _relayer)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes4 private constant ERC721_RECEIVED = 0xf0b9e5ba;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function issueBounty(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address owner; // The address of the individual who's allowed to set the metaTxRelayer address\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address metaTxRelayer; // The address of the meta transaction relayer whose _sender is automatically trusted for all contract calls\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable _sender,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable [] memory _issuers,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable [] memory _issuers,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address [] memory _approvers,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _deadline,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _token,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _tokenVersion,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _depositAmount)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 887,
          "vulnerability_to_line": null,
          "vulnerability_code": "    senderIsValid(_sender)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 888,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 890,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_tokenVersion == 0 || _tokenVersion == 20 || _tokenVersion == 721); // Ensures a bounty can only be issued with a valid token version\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 890,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_tokenVersion == 0 || _tokenVersion == 20 || _tokenVersion == 721); // Ensures a bounty can only be issued with a valid token version\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 892,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint bountyId = numBounties; // The next bounty's index will always equal the number of existing bounties\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Bounty storage newBounty = bounties[bountyId];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "    newBounty.issuers = _issuers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "    newBounty.approvers = _approvers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 897,
          "vulnerability_to_line": null,
          "vulnerability_code": "    newBounty.deadline = _deadline;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 898,
          "vulnerability_to_line": null,
          "vulnerability_code": "    newBounty.token = _token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    newBounty.tokenVersion = _tokenVersion;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 901,
          "vulnerability_to_line": null,
          "vulnerability_code": "    numBounties++; // Increments the number of bounties, since a new one has just been added\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit BountyIssued(bountyId,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 903,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit BountyIssued(bountyId,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _issuers,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _data, // Instead of storing the string on-chain, it is emitted within the event for easy off-chain consumption\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _token,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_depositAmount > 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "      contribute(_sender, bountyId, _depositAmount);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "      contribute(_sender, bountyId, _depositAmount);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 1235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bounties[_bountyId].approvers[_approverId] = _approver;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_to] += _value;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_to] += _value;\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /* This is a slight change to the ERC20 base standard.\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    This is moved to the base contract since public getter functions are not\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @notice send `_value` token to `_to` from `msg.sender`\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _to The address of the recipient\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _owner The address from which the balance will be retrieved\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @return Whether the transfer was successful or not\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _from The address of the sender\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _spender The address of the account able to transfer the tokens\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": ".*/\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        //Replace the if with this one instead.\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else { return false; }\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_from] -= _value;\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _owner The address from which the balance will be retrieved\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @return Whether the transfer was successful or not\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _from The address of the sender\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    /// @param _spender The address of the account able to transfer the tokens\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": ".*/\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        //Replace the if with this one instead.\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else { return false; }\n",
          "message": null
        },
        {
          "name": "Signedness bugs",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[_from] -= _value;\n",
          "message": null
        }
      ]
    }
  }
}