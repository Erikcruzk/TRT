{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newContractsAddress != address(0), \"New address is equal zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(contracts[contractId] != newContractsAddress, \"Contract is already added\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(length > 0, \"Given contracts address is not contain code\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(length > 0, \"Given contracts address is not contain code\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_2"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function setContractsAddress(string calldata contractsName, address newContractsAddress) external {\n\n        // check newContractsAddress is not equal zero\n\n        require(newContractsAddress != address(0), \"New address is equal zero\");\n\n        // create hash of contractsName\n\n        bytes32 contractId = keccak256(abi.encodePacked(contractsName));\n\n        // check newContractsAddress is not equal the previous contract's address\n\n        require(contracts[contractId] != newContractsAddress, \"Contract is already added\");\n\n        uint256 length;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            length := extcodesize(newContractsAddress)\n\n        }\n\n        // check newContractsAddress contains code\n\n        require(length > 0, \"Given contracts address is not contain code\");\n\n        // add newContractsAddress to mapping of actual contract addresses\n\n        contracts[contractId] = newContractsAddress;\n\n        emit ContractUpgraded(contractsName, newContractsAddress);\n",
          "message": "ContractManager.setContractsAddress uses assembly (TestContractManager.sol#39-56)\n\t- TestContractManager.sol#48-50\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.12;\n",
          "message": "Detected issues with version pragma in TestContractManager.sol:\n\t- pragma solidity0.6.12 (TestContractManager.sol#24): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}