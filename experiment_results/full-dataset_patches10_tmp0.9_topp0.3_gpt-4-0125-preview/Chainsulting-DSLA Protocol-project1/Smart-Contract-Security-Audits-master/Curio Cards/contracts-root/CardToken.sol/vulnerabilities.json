{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply += mintedAmount;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CardCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_46"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 115,
          "vulnerability_code": "contract CardToken is owned {\n\n    string public standard = 'Token 0.1';\n\n    string public name;\n\n    string public symbol;\n\n    string public ipfs_hash;\n\n    string public description;\n\n    bool public isLocked;\n\n    uint8 public decimals;\n\n    uint256 public totalSupply;\n\n\n\n    /* This creates an array with all balances */\n\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n\n\n    /* This generates a public event on the blockchain that will notify clients */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n\n    function CardToken(\n\n        uint256 initialSupply,\n\n        string tokenName,\n\n        string tokenSymbol,\n\n        string tokenDescription,\n\n        string ipfsHash\n\n        ) {\n\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n\n        totalSupply = initialSupply;                        // Update total supply\n\n        name = tokenName;                                   // Set the name for display purposes\n\n        symbol = tokenSymbol;   // Set the symbol for display purposes (first three as name or three char combo)\n\n        description = tokenDescription; //Description in gallery\n\n        ipfs_hash = ipfsHash;\n\n        decimals = 0;                            // Amount of decimals for display purposes\n\n    }\n\n    /* Send coins */\n\n    function transfer(address _to, uint256 _value) {\n\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n\n    }\n\n\n\n    /* Allow another contract to spend some tokens in your behalf */\n\n    function approve(address _spender, uint256 _value)\n\n        returns (bool success) {\n\n        allowance[msg.sender][_spender] = _value;\n\n        return true;\n\n    }\n\n\n\n    /* Approve and then comunicate the approved contract in a single tx */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\n        returns (bool success) {\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n\n        }\n\n    }\n\n\n\n    /* A contract attempts to get the coins */\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n\n        allowance[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n\n        if (isLocked) { throw; }\n\n\n\n        balanceOf[target] += mintedAmount;\n\n        totalSupply += mintedAmount;\n\n        Transfer(0, this, mintedAmount);\n\n        Transfer(this, target, mintedAmount);\n\n    }\n\n\n\n    function lock() onlyOwner  {\n\n        isLocked = true;\n\n\n\n    }\n\n\n\n    function setDescription(string desc) onlyOwner {\n\n         description = desc;\n\n    }\n\n\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n\n    function () {\n\n        throw;     // Prevents accidental sending of ether\n\n    }\n",
          "message": "CardToken (CardToken.sol#23-115) has incorrect ERC20 function interface(s):\n\t-transfer (CardToken.sol#57-62)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public standard = 'Token 0.1';\n",
          "message": "CardToken.standard should be constant (CardToken.sol#24)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != owner) throw;\n",
          "message": "Deprecated standard detected @ CardToken.sol#13:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n",
          "message": "Deprecated standard detected @ CardToken.sol#58:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n",
          "message": "Deprecated standard detected @ CardToken.sol#59:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n",
          "message": "Deprecated standard detected @ CardToken.sol#83:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n",
          "message": "Deprecated standard detected @ CardToken.sol#84:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n",
          "message": "Deprecated standard detected @ CardToken.sol#85:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (isLocked) { throw; }\n",
          "message": "Deprecated standard detected @ CardToken.sol#94:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        throw;     // Prevents accidental sending of ether\n",
          "message": "Deprecated standard detected @ CardToken.sol#113:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        throw;     // Prevents accidental sending of ether\n",
          "message": "Deprecated standard detected @ CardToken.sol#134:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n",
          "message": "tokenRecipient.receiveApproval (CardToken.sol#4) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function transferOwnership(address newOwner) onlyOwner {\n\n        owner = newOwner;\n",
          "message": "owned.transferOwnership (CardToken.sol#17-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) {\n\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n",
          "message": "CardToken.transfer (CardToken.sol#57-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 79,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\n        returns (bool success) {\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n\n        }\n",
          "message": "CardToken.approveAndCall (CardToken.sol#72-79) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 91,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n\n        balanceOf[_from] -= _value;                          // Subtract from the sender\n\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n\n        allowance[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n",
          "message": "CardToken.transferFrom (CardToken.sol#82-91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n\n        if (isLocked) { throw; }\n\n\n\n        balanceOf[target] += mintedAmount;\n\n        totalSupply += mintedAmount;\n\n        Transfer(0, this, mintedAmount);\n\n        Transfer(this, target, mintedAmount);\n",
          "message": "CardToken.mintToken (CardToken.sol#93-100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function lock() onlyOwner  {\n\n        isLocked = true;\n\n\n",
          "message": "CardToken.lock (CardToken.sol#102-105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 109,
          "vulnerability_code": "    function setDescription(string desc) onlyOwner {\n\n         description = desc;\n",
          "message": "CardToken.setDescription (CardToken.sol#107-109) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function () {\n\n        throw;     // Prevents accidental sending of ether\n",
          "message": "CardToken.fallback (CardToken.sol#112-114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 131,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n\n\n\n        CardToken newToken = (new CardToken(_initialAmount, _name,_symbol, _desc,_ipfshash));\n\n        Cards.push(address(newToken));\n\n        CardCount++;\n\n        newToken.transferOwnership(msg.sender);\n\n        newToken.transfer(msg.sender, _initialAmount); //the factory will own the created tokens. You must transfer them.\n\n        return address(newToken);\n",
          "message": "CardFactory.CreateCard (CardToken.sol#123-131) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": 135,
          "vulnerability_code": "      function () {\n\n        throw;     // Prevents accidental sending of ether\n",
          "message": "CardFactory.fallback (CardToken.sol#133-135) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.8;\n",
          "message": "Detected issues with version pragma in CardToken.sol:\n\t- pragma solidity^0.4.8 (CardToken.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n",
          "message": "Contract 'tokenRecipient' (CardToken.sol#4) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 20,
          "vulnerability_code": "contract owned {\n\n    address public owner;\n\n\n\n    function owned() {\n\n        owner = msg.sender;\n\n    }\n\n\n\n    modifier onlyOwner {\n\n        if (msg.sender != owner) throw;\n\n        _;\n\n    }\n\n\n\n    function transferOwnership(address newOwner) onlyOwner {\n\n        owner = newOwner;\n\n    }\n",
          "message": "Contract 'owned' (CardToken.sol#5-20) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function CardToken(\n\n        uint256 initialSupply,\n\n        string tokenName,\n\n        string tokenSymbol,\n\n        string tokenDescription,\n\n        string ipfsHash\n\n        ) {\n\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n\n        totalSupply = initialSupply;                        // Update total supply\n\n        name = tokenName;                                   // Set the name for display purposes\n\n        symbol = tokenSymbol;   // Set the symbol for display purposes (first three as name or three char combo)\n\n        description = tokenDescription; //Description in gallery\n\n        ipfs_hash = ipfsHash;\n\n        decimals = 0;                            // Amount of decimals for display purposes\n",
          "message": "Function 'CardToken.CardToken' (CardToken.sol#41-55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) {\n",
          "message": "Parameter '_to' of CardToken.transfer (CardToken.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) {\n",
          "message": "Parameter '_value' of CardToken.transfer (CardToken.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": "Parameter '_spender' of CardToken.approve (CardToken.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": "Parameter '_value' of CardToken.approve (CardToken.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": "Parameter '_spender' of CardToken.approveAndCall (CardToken.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": "Parameter '_value' of CardToken.approveAndCall (CardToken.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": "Parameter '_extraData' of CardToken.approveAndCall (CardToken.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": "Parameter '_from' of CardToken.transferFrom (CardToken.sol#82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": "Parameter '_to' of CardToken.transferFrom (CardToken.sol#82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": "Parameter '_value' of CardToken.transferFrom (CardToken.sol#82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public ipfs_hash;\n",
          "message": "Variable 'CardToken.ipfs_hash' (CardToken.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 122,
          "vulnerability_code": "   function CardFactory() {\n\n       CardCount = 0;\n",
          "message": "Function 'CardFactory.CardFactory' (CardToken.sol#120-122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 131,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n\n\n\n        CardToken newToken = (new CardToken(_initialAmount, _name,_symbol, _desc,_ipfshash));\n\n        Cards.push(address(newToken));\n\n        CardCount++;\n\n        newToken.transferOwnership(msg.sender);\n\n        newToken.transfer(msg.sender, _initialAmount); //the factory will own the created tokens. You must transfer them.\n\n        return address(newToken);\n",
          "message": "Function 'CardFactory.CreateCard' (CardToken.sol#123-131) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": "Parameter '_initialAmount' of CardFactory.CreateCard (CardToken.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": "Parameter '_name' of CardFactory.CreateCard (CardToken.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": "Parameter '_symbol' of CardFactory.CreateCard (CardToken.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": "Parameter '_desc' of CardFactory.CreateCard (CardToken.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": "Parameter '_ipfshash' of CardFactory.CreateCard (CardToken.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public Cards;\n",
          "message": "Variable 'CardFactory.Cards' (CardToken.sol#118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public CardCount;\n",
          "message": "Variable 'CardFactory.CardCount' (CardToken.sol#119) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != owner) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (isLocked) { throw; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        throw;     // Prevents accidental sending of ether\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        throw;     // Prevents accidental sending of ether\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDescription(string desc) onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "      function () {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != owner) throw;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (isLocked) { throw; }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owned() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address newOwner) onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CardToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function lock() onlyOwner  {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDescription(string desc) onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function () {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CardFactory() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "      function () {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "   function CreateCard(uint256 _initialAmount, string _name, string _symbol, string _desc,string _ipfshash) returns (address) {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[target] += mintedAmount;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Chainsulting-DSLA Protocol-project1/Smart-Contract-Security-Audits-master/Curio Cards/contracts-root/CardToken.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CardCount++;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newToken.transferOwnership(msg.sender);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newToken.transfer(msg.sender, _initialAmount); //the factory will own the created tokens. You must transfer them.\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balanceOf[target] += mintedAmount;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply += mintedAmount;\n",
          "message": null
        }
      ]
    }
  }
}