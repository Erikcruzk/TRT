{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ChainlinkPriceOracleProxy is Ownable, PriceOracle {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address ethUsdChainlinkAggregatorAddress_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ethUsdChainlinkAggregatorAddress = ethUsdChainlinkAggregatorAddress_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 766,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenConfig[cTokenAddress[i]] = TokenConfig({\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < cTokenAddress.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 690,
          "vulnerability_to_line": null,
          "vulnerability_code": "            newOwner != address(0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Ownable: new owner is the zero address\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(chainlinkPrice > 0, \"Chainlink price feed invalid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(ethPriceInUsd > 0, \"ETH price invalid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 808,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(\"Token config invalid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(underlyingPrice > 0, \"Underlying price invalid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "            cTokenAddress.length == chainlinkAggregatorAddress.length &&\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == chainlinkPriceBase.length &&\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == underlyingTokenDecimals.length,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 833,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Arguments must have same length\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "            cTokenAddress.length == chainlinkAggregatorAddress.length &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == chainlinkPriceBase.length &&\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == underlyingTokenDecimals.length,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 833,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Arguments must have same length\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < cTokenAddress.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 690,
          "vulnerability_to_line": null,
          "vulnerability_code": "            newOwner != address(0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Ownable: new owner is the zero address\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 692,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_38"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-abstract",
          "vulnerability_from_line": 752,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isPriceOracle = true;\n",
          "message": "ChainlinkPriceOracleProxy.isPriceOracle (ChainlinkPriceOracleProxy.sol#752) shadows:\n\t- PriceOracle.isPriceOracle (ChainlinkPriceOracleProxy.sol#734)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 underlyingPrice;\n",
          "message": "underlyingPrice in ChainlinkPriceOracleProxy.getUnderlyingPrice (ChainlinkPriceOracleProxy.sol#789) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public implementation;\n",
          "message": "CDelegationStorage.implementation should be constant (ChainlinkPriceOracleProxy.sol#379)\nCErc20Storage.underlying should be constant (ChainlinkPriceOracleProxy.sol#354)\nCTokenStorage._notEntered should be constant (ChainlinkPriceOracleProxy.sol#117)\nCTokenStorage.accrualBlockNumber should be constant (ChainlinkPriceOracleProxy.sol#178)\nCTokenStorage.admin should be constant (ChainlinkPriceOracleProxy.sol#148)\nCTokenStorage.borrowIndex should be constant (ChainlinkPriceOracleProxy.sol#183)\nCTokenStorage.decimals should be constant (ChainlinkPriceOracleProxy.sol#132)\nCTokenStorage.initialExchangeRateMantissa should be constant (ChainlinkPriceOracleProxy.sol#168)\nCTokenStorage.name should be constant (ChainlinkPriceOracleProxy.sol#122)\nCTokenStorage.pendingAdmin should be constant (ChainlinkPriceOracleProxy.sol#153)\nCTokenStorage.reserveFactorMantissa should be constant (ChainlinkPriceOracleProxy.sol#173)\nCTokenStorage.symbol should be constant (ChainlinkPriceOracleProxy.sol#127)\nCTokenStorage.totalBorrows should be constant (ChainlinkPriceOracleProxy.sol#188)\nCTokenStorage.totalReserves should be constant (ChainlinkPriceOracleProxy.sol#193)\nCTokenStorage.totalSupply should be constant (ChainlinkPriceOracleProxy.sol#198)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint);\n",
          "message": "CTokenInterface.borrowBalanceStored (ChainlinkPriceOracleProxy.sol#332) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint);\n",
          "message": "CTokenInterface.exchangeRateCurrent (ChainlinkPriceOracleProxy.sol#333) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint);\n",
          "message": "CTokenInterface.exchangeRateStored (ChainlinkPriceOracleProxy.sol#334) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accrueInterest() public returns (uint);\n",
          "message": "CTokenInterface.accrueInterest (ChainlinkPriceOracleProxy.sol#336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "CTokenInterface._setComptroller (ChainlinkPriceOracleProxy.sol#344) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "CTokenInterface._setInterestRateModel (ChainlinkPriceOracleProxy.sol#347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "CDelegatorInterface._setImplementation (ChainlinkPriceOracleProxy.sol#394) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "CDelegateInterface._becomeImplementation (ChainlinkPriceOracleProxy.sol#403) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "CDelegateInterface._resignImplementation (ChainlinkPriceOracleProxy.sol#408) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": 662,
          "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
          "message": "Ownable.owner (ChainlinkPriceOracleProxy.sol#660-662) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": 682,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (ChainlinkPriceOracleProxy.sol#679-682) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 688,
          "vulnerability_to_line": 695,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        require(\n\n            newOwner != address(0),\n\n            \"Ownable: new owner is the zero address\"\n\n        );\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Ownable.transferOwnership (ChainlinkPriceOracleProxy.sol#688-695) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": 814,
          "vulnerability_code": "    function getUnderlyingPrice(CTokenInterface cToken)\n\n        public\n\n        view\n\n        returns (uint256)\n\n    {\n\n        TokenConfig memory config = tokenConfig[address(cToken)];\n\n\n\n        (, int256 chainlinkPrice, , , ) = AggregatorV3Interface(\n\n            config\n\n                .chainlinkAggregatorAddress\n\n        )\n\n            .latestRoundData();\n\n\n\n        require(chainlinkPrice > 0, \"Chainlink price feed invalid\");\n\n\n\n        uint256 underlyingPrice;\n\n\n\n        if (config.chainlinkPriceBase == 1) {\n\n            underlyingPrice = uint256(chainlinkPrice).mul(1e28).div(\n\n                10**config.underlyingTokenDecimals\n\n            );\n\n        } else if (config.chainlinkPriceBase == 2) {\n\n            (, int256 ethPriceInUsd, , , ) = AggregatorV3Interface(\n\n                ethUsdChainlinkAggregatorAddress\n\n            )\n\n                .latestRoundData();\n\n\n\n            require(ethPriceInUsd > 0, \"ETH price invalid\");\n\n\n\n            underlyingPrice = uint256(chainlinkPrice)\n\n                .mul(uint256(ethPriceInUsd))\n\n                .mul(1e10)\n\n                .div(10**config.underlyingTokenDecimals);\n\n        } else {\n\n            revert(\"Token config invalid\");\n\n        }\n\n\n\n        require(underlyingPrice > 0, \"Underlying price invalid\");\n\n\n\n        return underlyingPrice;\n",
          "message": "ChainlinkPriceOracleProxy.getUnderlyingPrice (ChainlinkPriceOracleProxy.sol#774-814) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": 745,
          "vulnerability_code": "    function getUnderlyingPrice(CTokenInterface cToken)\n\n        external\n\n        view\n",
          "message": "PriceOracle.getUnderlyingPrice (ChainlinkPriceOracleProxy.sol#742-745) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in ChainlinkPriceOracleProxy.sol:\n\t- pragma solidity^0.5.16 (ChainlinkPriceOracleProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (ChainlinkPriceOracleProxy.sol#77): it allows old versions\n\t- pragma solidity^0.5.16 (ChainlinkPriceOracleProxy.sol#110): it allows old versions\n\t- pragma solidity^0.5.16 (ChainlinkPriceOracleProxy.sol#413): it allows old versions\n\t- pragma solidity^0.5.16 (ChainlinkPriceOracleProxy.sol#602): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isComptroller = true;\n",
          "message": "Constant 'ComptrollerInterface.isComptroller' (ChainlinkPriceOracleProxy.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (ChainlinkPriceOracleProxy.sol#85) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'CTokenStorage._notEntered' (ChainlinkPriceOracleProxy.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'CTokenStorage.borrowRateMaxMantissa' (ChainlinkPriceOracleProxy.sol#138) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'CTokenStorage.reserveFactorMaxMantissa' (ChainlinkPriceOracleProxy.sol#143) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'CTokenInterface._setPendingAdmin' (ChainlinkPriceOracleProxy.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'CTokenInterface._acceptAdmin' (ChainlinkPriceOracleProxy.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "Function 'CTokenInterface._setComptroller' (ChainlinkPriceOracleProxy.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'CTokenInterface._setReserveFactor' (ChainlinkPriceOracleProxy.sol#345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'CTokenInterface._reduceReserves' (ChainlinkPriceOracleProxy.sol#346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'CTokenInterface._setInterestRateModel' (ChainlinkPriceOracleProxy.sol#347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isCToken = true;\n",
          "message": "Constant 'CTokenInterface.isCToken' (ChainlinkPriceOracleProxy.sol#230) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'CErc20Interface._addReserves' (ChainlinkPriceOracleProxy.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'CDelegatorInterface._setImplementation' (ChainlinkPriceOracleProxy.sol#394) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'CDelegateInterface._becomeImplementation' (ChainlinkPriceOracleProxy.sol#403) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'CDelegateInterface._resignImplementation' (ChainlinkPriceOracleProxy.sol#408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 619,
          "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
          "message": "Function 'Context._msgSender' (ChainlinkPriceOracleProxy.sol#617-619) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": 624,
          "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
          "message": "Function 'Context._msgData' (ChainlinkPriceOracleProxy.sol#621-624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isPriceOracle = true;\n",
          "message": "Constant 'PriceOracle.isPriceOracle' (ChainlinkPriceOracleProxy.sol#734) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 752,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isPriceOracle = true;\n",
          "message": "Constant 'ChainlinkPriceOracleProxy.isPriceOracle' (ChainlinkPriceOracleProxy.sol#752) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CTokenInterface is CTokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setEthUsdChainlinkAggregatorAddress(address addr)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 602,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (config.chainlinkPriceBase == 2) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 712,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenConfigs(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] calldata chainlinkAggregatorAddress,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata chainlinkPriceBase,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata chainlinkPriceBase,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 827,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] calldata underlyingTokenDecimals\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "            cTokenAddress.length == chainlinkAggregatorAddress.length &&\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "            cTokenAddress.length == chainlinkAggregatorAddress.length &&\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == chainlinkPriceBase.length &&\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == chainlinkPriceBase.length &&\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == underlyingTokenDecimals.length,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "                cTokenAddress.length == underlyingTokenDecimals.length,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < cTokenAddress.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < cTokenAddress.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < cTokenAddress.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenConfig[cTokenAddress[i]] = TokenConfig({\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenConfig[cTokenAddress[i]] = TokenConfig({\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "                chainlinkAggregatorAddress: chainlinkAggregatorAddress[i],\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "                chainlinkPriceBase: chainlinkPriceBase[i],\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "                chainlinkPriceBase: chainlinkPriceBase[i],\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "                underlyingTokenDecimals: underlyingTokenDecimals[i]\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "                underlyingTokenDecimals: underlyingTokenDecimals[i]\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}