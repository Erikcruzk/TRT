{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address underlying_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address implementation_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes memory becomeImplementationData) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"CErc20Delegator::_setImplementation: Caller must be admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == 0,\"CErc20Delegator:fallback: cannot send value to fallback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"CErc20Delegator::_setImplementation: Caller must be admin\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == 0,\"CErc20Delegator:fallback: cannot send value to fallback\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_56"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": 821,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "CErc20Delegator.delegateTo (CErc20Delegator.sol#813-821) uses delegatecall to a input-controlled function id\n\t(success,returnData) = callee.delegatecall(data) (CErc20Delegator.sol#814)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": 874,
          "vulnerability_code": "    function delegateAndReturn() private returns (bytes memory) {\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "CErc20Delegator.delegateAndReturn (CErc20Delegator.sol#863-874) uses delegatecall to a input-controlled function id\n\t(success) = implementation.delegatecall(msg.data) (CErc20Delegator.sol#864)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": 848,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "CErc20Delegator.delegateToViewImplementation (CErc20Delegator.sol#840-848) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": 861,
          "vulnerability_code": "    function delegateToViewAndReturn() private view returns (bytes memory) {\n\n        (bool success, ) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", msg.data));\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(add(free_mem_ptr, 0x40), returndatasize) }\n\n        }\n",
          "message": "CErc20Delegator.delegateToViewAndReturn (CErc20Delegator.sol#850-861) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\n\n        require(msg.sender == admin, \"CErc20Delegator::_setImplementation: Caller must be admin\");\n\n\n\n        if (allowResign) {\n\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\n\n        }\n\n\n\n        address oldImplementation = implementation;\n\n        implementation = implementation_;\n\n\n\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\n\n\n\n        emit NewImplementation(oldImplementation, implementation);\n",
          "message": "Reentrancy in CErc20Delegator._setImplementation (CErc20Delegator.sol#470-483):\n\tExternal calls:\n\t- delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (CErc20Delegator.sol#474)\n\tState variables written after the call(s):\n\t- implementation (CErc20Delegator.sol#478)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": 462,
          "vulnerability_code": "    constructor(address underlying_,\n\n                ComptrollerInterface comptroller_,\n\n                InterestRateModel interestRateModel_,\n\n                uint initialExchangeRateMantissa_,\n\n                string memory name_,\n\n                string memory symbol_,\n\n                uint8 decimals_,\n\n                address payable admin_,\n\n                address implementation_,\n\n                bytes memory becomeImplementationData) public {\n\n        // Creator of the contract is admin during initialization\n\n        admin = msg.sender;\n\n\n\n        // First delegate gets to initialize the delegator (i.e. storage contract)\n\n        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n\n                                                            underlying_,\n\n                                                            comptroller_,\n\n                                                            interestRateModel_,\n\n                                                            initialExchangeRateMantissa_,\n\n                                                            name_,\n\n                                                            symbol_,\n\n                                                            decimals_));\n\n\n\n        // New implementations always get set via the settor (post-initialize)\n\n        _setImplementation(implementation_, false, becomeImplementationData);\n\n\n\n        // Set the proper admin now that initialization is done\n\n        admin = admin_;\n",
          "message": "Reentrancy in CErc20Delegator.constructor (CErc20Delegator.sol#434-462):\n\tExternal calls:\n\t- delegateTo(implementation_,abi.encodeWithSignature(initialize(address,address,address,uint256,string,string,uint8),underlying_,comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_)) (CErc20Delegator.sol#448-455)\n\t- _setImplementation(implementation_,false,becomeImplementationData) (CErc20Delegator.sol#458)\n\tState variables written after the call(s):\n\t- admin (CErc20Delegator.sol#461)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": 821,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "CErc20Delegator.delegateTo uses assembly (CErc20Delegator.sol#813-821)\n\t- CErc20Delegator.sol#815-819\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": 848,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "CErc20Delegator.delegateToViewImplementation uses assembly (CErc20Delegator.sol#840-848)\n\t- CErc20Delegator.sol#842-846\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": 861,
          "vulnerability_code": "    function delegateToViewAndReturn() private view returns (bytes memory) {\n\n        (bool success, ) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", msg.data));\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(add(free_mem_ptr, 0x40), returndatasize) }\n\n        }\n",
          "message": "CErc20Delegator.delegateToViewAndReturn uses assembly (CErc20Delegator.sol#850-861)\n\t- CErc20Delegator.sol#853-860\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": 874,
          "vulnerability_code": "    function delegateAndReturn() private returns (bytes memory) {\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "CErc20Delegator.delegateAndReturn uses assembly (CErc20Delegator.sol#863-874)\n\t- CErc20Delegator.sol#866-873\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public underlying;\n",
          "message": "CErc20Storage.underlying should be constant (CErc20Delegator.sol#354)\nCTokenStorage._notEntered should be constant (CErc20Delegator.sol#117)\nCTokenStorage.accrualBlockNumber should be constant (CErc20Delegator.sol#178)\nCTokenStorage.borrowIndex should be constant (CErc20Delegator.sol#183)\nCTokenStorage.decimals should be constant (CErc20Delegator.sol#132)\nCTokenStorage.initialExchangeRateMantissa should be constant (CErc20Delegator.sol#168)\nCTokenStorage.name should be constant (CErc20Delegator.sol#122)\nCTokenStorage.pendingAdmin should be constant (CErc20Delegator.sol#153)\nCTokenStorage.reserveFactorMantissa should be constant (CErc20Delegator.sol#173)\nCTokenStorage.symbol should be constant (CErc20Delegator.sol#127)\nCTokenStorage.totalBorrows should be constant (CErc20Delegator.sol#188)\nCTokenStorage.totalReserves should be constant (CErc20Delegator.sol#193)\nCTokenStorage.totalSupply should be constant (CErc20Delegator.sol#198)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": 683,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint) {\n\n        account; // Shh\n\n        delegateToViewAndReturn();\n",
          "message": "CErc20Delegator.borrowBalanceStored (CErc20Delegator.sol#680-683) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint);\n",
          "message": "CTokenInterface.borrowBalanceStored (CErc20Delegator.sol#332) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint);\n",
          "message": "CTokenInterface.exchangeRateCurrent (CErc20Delegator.sol#333) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": 691,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint) {\n\n        delegateAndReturn();\n",
          "message": "CErc20Delegator.exchangeRateCurrent (CErc20Delegator.sol#689-691) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint);\n",
          "message": "CTokenInterface.exchangeRateStored (CErc20Delegator.sol#334) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 698,
          "vulnerability_to_line": 700,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint) {\n\n        delegateToViewAndReturn();\n",
          "message": "CErc20Delegator.exchangeRateStored (CErc20Delegator.sol#698-700) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": 717,
          "vulnerability_code": "    function accrueInterest() public returns (uint) {\n\n        delegateAndReturn();\n",
          "message": "CErc20Delegator.accrueInterest (CErc20Delegator.sol#715-717) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accrueInterest() public returns (uint);\n",
          "message": "CTokenInterface.accrueInterest (CErc20Delegator.sol#336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": 754,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        newComptroller; // Shh\n\n        delegateAndReturn();\n",
          "message": "CErc20Delegator._setComptroller (CErc20Delegator.sol#751-754) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "CTokenInterface._setComptroller (CErc20Delegator.sol#344) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "CTokenInterface._setInterestRateModel (CErc20Delegator.sol#347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": 804,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        newInterestRateModel; // Shh\n\n        delegateAndReturn();\n",
          "message": "CErc20Delegator._setInterestRateModel (CErc20Delegator.sol#801-804) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "CDelegateInterface._becomeImplementation (CErc20Delegator.sol#403) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "CDelegateInterface._resignImplementation (CErc20Delegator.sol#408) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": 848,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "CErc20Delegator.delegateToViewImplementation (CErc20Delegator.sol#840-848) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in CErc20Delegator.sol:\n\t- pragma solidity^0.5.16 (CErc20Delegator.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (CErc20Delegator.sol#77): it allows old versions\n\t- pragma solidity^0.5.16 (CErc20Delegator.sol#110): it allows old versions\n\t- pragma solidity^0.5.16 (CErc20Delegator.sol#413): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": 821,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "Low level call in CErc20Delegator.delegateTo (CErc20Delegator.sol#813-821):\n\t-(success,returnData) = callee.delegatecall(data) CErc20Delegator.sol#814\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": 848,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "Low level call in CErc20Delegator.delegateToViewImplementation (CErc20Delegator.sol#840-848):\n\t-(success,returnData) = address(this).staticcall(abi.encodeWithSignature(delegateToImplementation(bytes),data)) CErc20Delegator.sol#841\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": 861,
          "vulnerability_code": "    function delegateToViewAndReturn() private view returns (bytes memory) {\n\n        (bool success, ) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", msg.data));\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(add(free_mem_ptr, 0x40), returndatasize) }\n\n        }\n",
          "message": "Low level call in CErc20Delegator.delegateToViewAndReturn (CErc20Delegator.sol#850-861):\n\t-(success) = address(this).staticcall(abi.encodeWithSignature(delegateToImplementation(bytes),msg.data)) CErc20Delegator.sol#851\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": 874,
          "vulnerability_code": "    function delegateAndReturn() private returns (bytes memory) {\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "Low level call in CErc20Delegator.delegateAndReturn (CErc20Delegator.sol#863-874):\n\t-(success) = implementation.delegatecall(msg.data) CErc20Delegator.sol#864\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isComptroller = true;\n",
          "message": "Constant 'ComptrollerInterface.isComptroller' (CErc20Delegator.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (CErc20Delegator.sol#85) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'CTokenStorage._notEntered' (CErc20Delegator.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'CTokenStorage.borrowRateMaxMantissa' (CErc20Delegator.sol#138) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'CTokenStorage.reserveFactorMaxMantissa' (CErc20Delegator.sol#143) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'CTokenInterface._setPendingAdmin' (CErc20Delegator.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'CTokenInterface._acceptAdmin' (CErc20Delegator.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "Function 'CTokenInterface._setComptroller' (CErc20Delegator.sol#344) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'CTokenInterface._setReserveFactor' (CErc20Delegator.sol#345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'CTokenInterface._reduceReserves' (CErc20Delegator.sol#346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'CTokenInterface._setInterestRateModel' (CErc20Delegator.sol#347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isCToken = true;\n",
          "message": "Constant 'CTokenInterface.isCToken' (CErc20Delegator.sol#230) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'CErc20Interface._addReserves' (CErc20Delegator.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'CDelegatorInterface._setImplementation' (CErc20Delegator.sol#394) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'CDelegateInterface._becomeImplementation' (CErc20Delegator.sol#403) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'CDelegateInterface._resignImplementation' (CErc20Delegator.sol#408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": 744,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n\n        newPendingAdmin; // Shh\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._setPendingAdmin' (CErc20Delegator.sol#741-744) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 771,
          "vulnerability_to_line": 773,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint) {\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._acceptAdmin' (CErc20Delegator.sol#771-773) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": 754,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        newComptroller; // Shh\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._setComptroller' (CErc20Delegator.sol#751-754) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": 764,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {\n\n        newReserveFactorMantissa; // Shh\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._setReserveFactor' (CErc20Delegator.sol#761-764) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": 793,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint) {\n\n        reduceAmount; // Shh\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._reduceReserves' (CErc20Delegator.sol#790-793) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": 804,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        newInterestRateModel; // Shh\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._setInterestRateModel' (CErc20Delegator.sol#801-804) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": 783,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint) {\n\n        addAmount; // Shh\n\n        delegateAndReturn();\n",
          "message": "Function 'CErc20Delegator._addReserves' (CErc20Delegator.sol#780-783) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\n\n        require(msg.sender == admin, \"CErc20Delegator::_setImplementation: Caller must be admin\");\n\n\n\n        if (allowResign) {\n\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\n\n        }\n\n\n\n        address oldImplementation = implementation;\n\n        implementation = implementation_;\n\n\n\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\n\n\n\n        emit NewImplementation(oldImplementation, implementation);\n",
          "message": "Function 'CErc20Delegator._setImplementation' (CErc20Delegator.sol#470-483) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "CTokenStorage._notEntered (CErc20Delegator.sol#117) is never used in CErc20Delegator\nCTokenStorage.borrowRateMaxMantissa (CErc20Delegator.sol#138) is never used in CErc20Delegator\nCTokenStorage.reserveFactorMaxMantissa (CErc20Delegator.sol#143) is never used in CErc20Delegator\nCTokenStorage.initialExchangeRateMantissa (CErc20Delegator.sol#168) is never used in CErc20Delegator\nCTokenStorage.accountTokens (CErc20Delegator.sol#203) is never used in CErc20Delegator\nCTokenStorage.transferAllowances (CErc20Delegator.sol#208) is never used in CErc20Delegator\nCTokenStorage.accountBorrows (CErc20Delegator.sol#223) is never used in CErc20Delegator\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CTokenInterface is CTokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CErc20Delegator is CTokenInterface, CErc20Interface, CDelegatorInterface {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address underlying_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address implementation_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes memory becomeImplementationData) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            initialExchangeRateMantissa_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            symbol_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(implementation_, false, becomeImplementationData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(implementation_, false, becomeImplementationData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = admin_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}