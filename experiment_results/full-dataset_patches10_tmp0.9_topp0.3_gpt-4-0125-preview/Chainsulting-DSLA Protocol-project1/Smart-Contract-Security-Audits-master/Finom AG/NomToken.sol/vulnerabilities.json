{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool public initialIssueMinted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool public firstStageMinted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool public secondStageMinted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool public thirdStageMinted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tbool public fourthStageMinted = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (now > initialIssueMintingDate && !initialIssueMinted) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\ttokensToMint = tokensToMint.add(initialIssueMinting);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\tinitialIssueMinted = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t}\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (now > firstStageMintingDate && !firstStageMinted) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\ttokensToMint = tokensToMint.add(firstStageMinting);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\tfirstStageMinted = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t}\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (now > secondStageMintingDate && !secondStageMinted) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\ttokensToMint = tokensToMint.add(secondStageMinting);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\tsecondStageMinted = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t}\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (now > thirdStageMintingDate && !thirdStageMinted) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\ttokensToMint = tokensToMint.add(thirdStageMinting);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\tthirdStageMinted = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t}\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (now > fourthStageMintingDate && !fourthStageMinted) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\ttokensToMint = tokensToMint.add(fourthStageMinting);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t\tfourthStageMinted = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t}\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_38"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 public firstStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n",
          "message": "NomToken.firstStageMinting should be constant (NomToken.sol#233)\nNomToken.fourthStageMinting should be constant (NomToken.sol#245)\nNomToken.initialIssueMinting should be constant (NomToken.sol#229)\nNomToken.secondStageMinting should be constant (NomToken.sol#237)\nNomToken.thirdStageMinting should be constant (NomToken.sol#241)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (NomToken.sol#62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 84,
          "vulnerability_code": "\tfunction totalSupply() public view returns (uint256) {\n\n\t\treturn totalSupply_;\n",
          "message": "BasicToken.totalSupply (NomToken.sol#82-84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": 108,
          "vulnerability_code": "\tfunction balanceOf(address _owner) public view returns (uint256) {\n\n\t\treturn balances[_owner];\n",
          "message": "BasicToken.balanceOf (NomToken.sol#106-108) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (NomToken.sol#63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (NomToken.sol#64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 99,
          "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\n\t\trequire(_to != address(0));\n\n\t\trequire(_value <= balances[msg.sender]);\n\n\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\temit Transfer(msg.sender, _to, _value);\n\n\t\treturn true;\n",
          "message": "BasicToken.transfer (NomToken.sol#91-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 177,
          "vulnerability_code": "\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\n\t\treturn allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (NomToken.sol#175-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (NomToken.sol#117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n",
          "message": "ERC20.transferFrom (NomToken.sol#118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 151,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n\t\trequire(_to != address(0));\n\n\t\trequire(_value <= balances[_from]);\n\n\t\trequire(_value <= allowed[_from][msg.sender]);\n\n\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\n\t\tbalances[_to] = balances[_to].add(_value);\n\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n\t\temit Transfer(_from, _to, _value);\n\n\t\treturn true;\n",
          "message": "StandardToken.transferFrom (NomToken.sol#141-151) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20.approve (NomToken.sol#119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 167,
          "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\n\t\tallowed[msg.sender][_spender] = _value;\n\n\t\temit Approval(msg.sender, _spender, _value);\n\n\t\treturn true;\n",
          "message": "StandardToken.approve (NomToken.sol#163-167) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 193,
          "vulnerability_code": "\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n\t\treturn true;\n",
          "message": "StandardToken.increaseApproval (NomToken.sol#189-193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 214,
          "vulnerability_code": "\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\n\t\tif (_subtractedValue > oldValue) {\n\n\t\t\tallowed[msg.sender][_spender] = 0;\n\n\t\t} else {\n\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n\t\t}\n\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n\t\treturn true;\n",
          "message": "StandardToken.decreaseApproval (NomToken.sol#205-214) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 290,
          "vulnerability_code": "\tfunction mint() public returns (bool) {\n\n\t\trequire(msg.sender == owner);\n\n\t\t\n\n\t\tuint256 tokensToMint = 0;\n\n\t\tif (now > initialIssueMintingDate && !initialIssueMinted) {\n\n\t\t\t\ttokensToMint = tokensToMint.add(initialIssueMinting);\n\n\t\t\t\tinitialIssueMinted = true;\n\n\t\t}\n\n\t\tif (now > firstStageMintingDate && !firstStageMinted) {\n\n\t\t\t\ttokensToMint = tokensToMint.add(firstStageMinting);\n\n\t\t\t\tfirstStageMinted = true;\n\n\t\t}\n\n\t\tif (now > secondStageMintingDate && !secondStageMinted) {\n\n\t\t\t\ttokensToMint = tokensToMint.add(secondStageMinting);\n\n\t\t\t\tsecondStageMinted = true;\n\n\t\t}\n\n\t\tif (now > thirdStageMintingDate && !thirdStageMinted) {\n\n\t\t\t\ttokensToMint = tokensToMint.add(thirdStageMinting);\n\n\t\t\t\tthirdStageMinted = true;\n\n\t\t}\n\n\t\tif (now > fourthStageMintingDate && !fourthStageMinted) {\n\n\t\t\t\ttokensToMint = tokensToMint.add(fourthStageMinting);\n\n\t\t\t\tfourthStageMinted = true;\n\n\t\t}\n\n\t\trequire(tokensToMint > 0);\n\n\t\tuint256 newTotalSupply = totalSupply_.add(tokensToMint);\n\n\t\trequire(newTotalSupply <= totalTokens);\n\n\t\t\n\n\t\ttotalSupply_ = totalSupply_.add(tokensToMint);\n\n\t\tbalances[owner] = balances[owner].add(tokensToMint);\n\n\t\temit Mint(owner, tokensToMint);\n\n\t\temit Transfer(0x0, owner, tokensToMint);\n\n\t\treturn true;\n",
          "message": "NomToken.mint (NomToken.sol#257-290) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in NomToken.sol:\n\t- pragma solidity^0.4.21 (NomToken.sol#7): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (NomToken.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (NomToken.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (NomToken.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (NomToken.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (NomToken.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (NomToken.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (NomToken.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (NomToken.sol#141) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (NomToken.sol#163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (NomToken.sol#163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (NomToken.sol#189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (NomToken.sol#189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (NomToken.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (NomToken.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": 251,
          "vulnerability_code": "\tfunction NomToken() public {\n\n\t\towner = msg.sender;\n",
          "message": "Function 'NomToken.NomToken' (NomToken.sol#249-251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 public constant totalTokens = 5650000000 * (10 ** uint256(decimals));\n",
          "message": "Constant 'NomToken.totalTokens' (NomToken.sol#227) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint public constant initialIssueMintingDate = 1524873600;\t\t\t//28.04.2018 UTC\n",
          "message": "Constant 'NomToken.initialIssueMintingDate' (NomToken.sol#230) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint public constant firstStageMintingDate = 1532736000;\t\t\t//28.07.2018 UTC\n",
          "message": "Constant 'NomToken.firstStageMintingDate' (NomToken.sol#234) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint public constant secondStageMintingDate = 1540684800;\t\t\t//28.10.2018 UTC\n",
          "message": "Constant 'NomToken.secondStageMintingDate' (NomToken.sol#238) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint public constant thirdStageMintingDate = 1548633600;\t\t\t//28.01.2019 UTC\n",
          "message": "Constant 'NomToken.thirdStageMintingDate' (NomToken.sol#242) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint public constant fourthStageMintingDate = 1556409600;\t\t\t//28.04.2019 UTC\n",
          "message": "Constant 'NomToken.fourthStageMintingDate' (NomToken.sol#246) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tusing SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint256 totalSupply_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tc = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tc = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}