{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 847,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenVesting is VerifiedAccount, GrantorRole, IERC20Vestable, Ownable, ERC20 {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NexxoTokens is Pausable, Ownable, Burnable, TokenVesting {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addGrantor(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The smart contract starts off registering itself, since address is known.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        registerAccount();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addPauser(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _paused = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initalCapacity, uint256 unitsOneEthCanBuy, address payable ownerWallet) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        INITIAL_SUPPLY = initalCapacity;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply = initalCapacity;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _balances[msg.sender] = initalCapacity;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 630,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _unitsOneEthCanBuy = unitsOneEthCanBuy;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _ownerWallet = ownerWallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1347,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor() public ERC20(INITIAL_SUPPLY, UNIT_PER_ETH_BUY, msg.sender) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1348,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = \"NEXXO\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = \"Nexxo Tokens\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1350,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1351,
          "vulnerability_to_line": null,
          "vulnerability_code": "       emit Transfer(address(0), msg.sender, INITIAL_SUPPLY); // Broadcast a message to the blockchain\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!has(role, account), \"Roles: account already has role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isGrantor(msg.sender), \"onlyGrantor: caller does not have the Grantor role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isGrantor(msg.sender) || msg.sender == account, \"onlyGrantorOrSelf: caller does not have the Grantor role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_accountExists(account), \"account not registered\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused, \"Pausable: paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_paused, \"Pausable: not paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[sender] >= amount, \"ERC20: transfer more than balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: transfer value negative\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 808,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[account] >= value, \"ERC20: burn overflow from address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "            duration > 0 && duration <= TEN_YEARS_HOURS\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && cliffDuration < duration\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && interval >= 1,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"invalid vesting schedule\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 919,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(duration % interval == 0 && cliffDuration % interval == 0,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"invalid cliff/duration for interval\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(vestingAmount <= totalAmount,\"vesting must be less than total.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(vestingAmount > 0,\"invalid vesting amount.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(startHour > JAN_1_2000_HOURS,\"invalid startTime for vesting.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(startHour < JAN_1_3000_HOURS,\"invalid startTime for vesting.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1011,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_hasVestingSchedule(vestingWalletAddress), \"no such vesting schedule\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1062,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner() || msg.sender == grant.grantor, \"not allowed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(grant.isActive, \"no active grant\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1299,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vesting.isRevocable, \"irrevocable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(onHourOrNow <= grant.startHour + vesting.duration, \"no effect\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(onHourOrNow >= currentTime(), \"cannot revoke vested holdings\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!isBlocked(msg.sender), \"msg.sender is blocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf(ownerWallet()) >= amount, \"Custom-Token : amount more than balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1380,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!isBlocked(from), \"from-address is blocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1381,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!isBlocked(to), \"to-address is blocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!isBlocked(to), \"to-address is blocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!isBlocked(msg.sender), \"msg.sender is blocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": null,
          "vulnerability_code": "         require(!isBlocked(walletAddress), \"walletAddress is already blocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "          require(isBlocked(walletAddress), \"walletAddress is not blocked yet.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1454,
          "vulnerability_to_line": null,
          "vulnerability_code": "          require((blockedAddressList.length != 0), \"blockedAddressList is empty.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "            duration > 0 && duration <= TEN_YEARS_HOURS\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && cliffDuration < duration\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "            && interval >= 1,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"invalid vesting schedule\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 919,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(duration % interval == 0 && cliffDuration % interval == 0,\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"invalid cliff/duration for interval\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1461,
          "vulnerability_to_line": null,
          "vulnerability_code": "         blockedAddressList.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isGrantor(msg.sender), \"onlyGrantor: caller does not have the Grantor role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isGrantor(msg.sender) || msg.sender == account, \"onlyGrantorOrSelf: caller does not have the Grantor role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[sender] >= amount, \"ERC20: transfer more than balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 808,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[account] >= value, \"ERC20: burn overflow from address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 919,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(duration % interval == 0 && cliffDuration % interval == 0,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"invalid cliff/duration for interval\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1358,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf(ownerWallet()) >= amount, \"Custom-Token : amount more than balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": null,
          "vulnerability_code": "         require(!isBlocked(walletAddress), \"walletAddress is already blocked.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "          require(isBlocked(walletAddress), \"walletAddress is not blocked yet.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_70"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 1334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private INITIAL_SUPPLY = 100000000000000000000000000000;\n",
          "message": "NexxoTokens.INITIAL_SUPPLY (NexxoToken.sol#1334) shadows:\n\t- ERC20.INITIAL_SUPPLY (NexxoToken.sol#615)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract (NexxoToken.sol#8-14) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initalCapacity, uint256 unitsOneEthCanBuy, address payable ownerWallet) public {\n",
          "message": "ERC20.constructor.initalCapacity (local variable @ NexxoToken.sol#625) shadows:\n\t- ERC20.initalCapacity (function @ NexxoToken.sol#635-637)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initalCapacity, uint256 unitsOneEthCanBuy, address payable ownerWallet) public {\n",
          "message": "ERC20.constructor.unitsOneEthCanBuy (local variable @ NexxoToken.sol#625) shadows:\n\t- ERC20.unitsOneEthCanBuy (function @ NexxoToken.sol#649-651)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initalCapacity, uint256 unitsOneEthCanBuy, address payable ownerWallet) public {\n",
          "message": "ERC20.constructor.ownerWallet (local variable @ NexxoToken.sol#625) shadows:\n\t- ERC20.ownerWallet (function @ NexxoToken.sol#662-664)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract uses assembly (NexxoToken.sol#8-14)\n\t- NexxoToken.sol#12\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 1334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private INITIAL_SUPPLY = 100000000000000000000000000000;\n",
          "message": "NexxoTokens.INITIAL_SUPPLY should be constant (NexxoToken.sol#1334)\nNexxoTokens.UNIT_PER_ETH_BUY should be constant (NexxoToken.sol#1335)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 297,
          "vulnerability_code": "    function addGrantor(address account) public onlyGrantor {\n\n        _addGrantor(account);\n",
          "message": "GrantorRole.addGrantor (NexxoToken.sol#295-297) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": 301,
          "vulnerability_code": "    function removeGrantor(address account) public onlyGrantor {\n\n        _removeGrantor(account);\n",
          "message": "GrantorRole.removeGrantor (NexxoToken.sol#299-301) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 322,
          "vulnerability_code": "    function applyGrantor(address newOwner) public onlyGrantor {\n\n        _removeGrantor(msg.sender);\n\n        _addGrantor(newOwner);\n",
          "message": "GrantorRole.applyGrantor (NexxoToken.sol#319-322) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": 351,
          "vulnerability_code": "    function isRegistered(address account) public view returns (bool ok) {\n\n        return _isRegistered[account];\n",
          "message": "VerifiedAccount.isRegistered (NexxoToken.sol#349-351) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 459,
          "vulnerability_code": "    function addPauser(address account) public onlyPauser {\n\n        _addPauser(account);\n",
          "message": "PauserRole.addPauser (NexxoToken.sol#457-459) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 463,
          "vulnerability_code": "    function renouncePauser() public {\n\n        _removePauser(msg.sender);\n",
          "message": "PauserRole.renouncePauser (NexxoToken.sol#461-463) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": 513,
          "vulnerability_code": "    function paused() public view returns (bool) {\n\n        return _paused;\n",
          "message": "Pausable.paused (NexxoToken.sol#511-513) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": 537,
          "vulnerability_code": "    function pause() public onlyPauser whenNotPaused {\n\n        _paused = true;\n\n        emit Paused(msg.sender);\n",
          "message": "Pausable.pause (NexxoToken.sol#534-537) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function unpause() public onlyPauser whenPaused {\n\n        _paused = false;\n\n        emit Unpaused(msg.sender);\n",
          "message": "Pausable.unpause (NexxoToken.sol#542-545) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 574,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (NexxoToken.sol#571-574) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": 578,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (NexxoToken.sol#576-578) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": 697,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n",
          "message": "ERC20.approve (NexxoToken.sol#694-697) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1393,
          "vulnerability_to_line": 1397,
          "vulnerability_code": "    function approve(address spender, uint tokens) public onlyOwner returns (bool success) {\n\n        setAllowedAmount(msg.sender, spender, tokens);\n\n        emit Approval(msg.sender, spender, tokens);\n\n        return true;\n",
          "message": "NexxoTokens.approve (NexxoToken.sol#1393-1397) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (NexxoToken.sol#408) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": 637,
          "vulnerability_code": "    function initalCapacity() public view returns (uint) {\n\n\t\treturn INITIAL_SUPPLY;\n",
          "message": "ERC20.initalCapacity (NexxoToken.sol#635-637) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": 773,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (NexxoToken.sol#770-773) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": 792,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (NexxoToken.sol#789-792) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 249,
          "vulnerability_code": "    function vestingAsOf(uint32 onHourOrNow) external view returns (\n\n        uint256 amountVested,\n\n        uint256 amountNotVested,\n\n        uint256 amountOfGrant,\n\n        uint32 vestStartHour,\n\n        uint32 cliffDuration,\n\n        uint32 vestDuration,\n\n        uint32 vestIntervalHours,\n\n        bool isActive,\n\n        bool wasRevoked\n",
          "message": "IERC20Vestable.vestingAsOf (NexxoToken.sol#239-249) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1235,
          "vulnerability_to_line": 1248,
          "vulnerability_code": "    function vestingAsOf(uint32 onHourOrNow) public view returns (\n\n        uint256 amountVested,\n\n        uint256 amountNotVested,\n\n        uint256 amountOfGrant,\n\n        uint32 vestStartHour,\n\n        uint32 vestDuration,\n\n        uint32 cliffDuration,\n\n        uint32 vestIntervalHours,\n\n        bool isActive,\n\n        bool wasRevoked\n\n    )\n\n    {\n\n        return vestingForAccountAsOf(msg.sender, onHourOrNow);\n",
          "message": "TokenVesting.vestingAsOf (NexxoToken.sol#1235-1248) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": 1320,
          "vulnerability_code": "    function revokeGrant(address grantHolder, uint32 onHourOrNow) public onlyGrantor returns (bool ok) {\n\n        tokenGrant storage grant = _tokenGrants[grantHolder];\n\n        vestingSchedule storage vesting = _vestingSchedules[grant.vestingWalletAddress];\n\n        uint256 notVestedAmount;\n\n\n\n        // Make sure grantor can only revoke from own pool.\n\n        require(msg.sender == owner() || msg.sender == grant.grantor, \"not allowed\");\n\n        // Make sure a vesting schedule has previously been set.\n\n        require(grant.isActive, \"no active grant\");\n\n        // Make sure it's revocable.\n\n        require(vesting.isRevocable, \"irrevocable\");\n\n        // Fail on likely erroneous input.\n\n        require(onHourOrNow <= grant.startHour + vesting.duration, \"no effect\");\n\n        // Don\"t let grantor revoke anf portion of vested amount.\n\n        require(onHourOrNow >= currentTime(), \"cannot revoke vested holdings\");\n\n\n\n        notVestedAmount = _getNotVestedAmount(grantHolder, onHourOrNow);\n\n\n\n        // Use ERC20 _approve() to forcibly approve grantor to take back not-vested tokens from grantHolder.\n\n        _approve(grantHolder, grant.grantor, notVestedAmount);\n\n        /* Emits an Approval Event. */\n\n        transferFrom(grantHolder, grant.grantor, notVestedAmount);\n\n        /* Emits a Transfer and an Approval Event. */\n\n\n\n        // Kill the grant by updating wasRevoked and isActive.\n\n        _tokenGrants[grantHolder].wasRevoked = true;\n\n        _tokenGrants[grantHolder].isActive = false;\n\n\n\n        emit GrantRevoked(grantHolder, onHourOrNow);\n\n        /* Emits the GrantRevoked event. */\n\n        return true;\n",
          "message": "TokenVesting.revokeGrant (NexxoToken.sol#1289-1320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function revokeGrant(address grantHolder, uint32 onHour) external returns (bool);\n",
          "message": "IERC20Vestable.revokeGrant (NexxoToken.sol#251) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1076,
          "vulnerability_to_line": 1085,
          "vulnerability_code": "    function safeGrantVestingTokens(\n\n        address beneficiary, uint256 totalAmount, uint256 vestingAmount,\n\n        uint32 startHour, uint32 duration, uint32 cliffDuration, uint32 interval,\n\n        bool isRevocable) public onlyGrantor onlyExistingAccount(beneficiary) returns (bool ok) {\n\n\n\n        return grantVestingTokens(\n\n            beneficiary, totalAmount, vestingAmount,\n\n            startHour, duration, cliffDuration, interval,\n\n            isRevocable);\n",
          "message": "TokenVesting.safeGrantVestingTokens (NexxoToken.sol#1076-1085) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transfer (NexxoToken.sol#383) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1386,
          "vulnerability_to_line": 1391,
          "vulnerability_code": "    function transfer(address to, uint tokens) public whenNotPaused returns (bool success) {\n\n        require(!isBlocked(to), \"to-address is blocked.\");\n\n        require(!isBlocked(msg.sender), \"msg.sender is blocked.\");\n\n\n\n        return super.transfer(msg.sender, to, tokens);\n",
          "message": "NexxoTokens.transfer (NexxoToken.sol#1386-1391) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1375,
          "vulnerability_to_line": 1377,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n\n        return allowed(tokenOwner,spender);\n",
          "message": "NexxoTokens.allowance (NexxoToken.sol#1375-1377) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (NexxoToken.sol#392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1399,
          "vulnerability_to_line": 1402,
          "vulnerability_code": "    function burn(uint256 amount) public onlyOwner{\n\n        _burn(msg.sender, amount);\n\n       emit Burn(msg.sender, amount);\n",
          "message": "NexxoTokens.burn (NexxoToken.sol#1399-1402) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1404,
          "vulnerability_to_line": 1406,
          "vulnerability_code": "    function burnFrom(address account, uint256 amount) public onlyOwner{\n\n        _burnFrom(account, amount);\n",
          "message": "NexxoTokens.burnFrom (NexxoToken.sol#1404-1406) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1408,
          "vulnerability_to_line": 1411,
          "vulnerability_code": "    function startVestingTokens(address beneficiary, uint256 totalAmount, uint256 vestingAmount, uint32 startDay, uint32 duration,\n\n        \t\t\t\t\t\t uint32 cliffDuration, uint32 interval,bool isRevocable) public whenNotPaused onlyOwner {\n\n      grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, duration, cliffDuration, interval, isRevocable);\n",
          "message": "NexxoTokens.startVestingTokens (NexxoToken.sol#1408-1411) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1414,
          "vulnerability_to_line": 1416,
          "vulnerability_code": "    function fetchNotVestedAmount(address grantHolder, uint32 onHourOrNow) public onlyOwner view returns (uint256 amountNotVested) {\n\n      return _getNotVestedAmount(grantHolder, onHourOrNow);\n",
          "message": "NexxoTokens.fetchNotVestedAmount (NexxoToken.sol#1414-1416) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1419,
          "vulnerability_to_line": 1421,
          "vulnerability_code": "    function fetchAvailableAmount(address grantHolder, uint32 onHourOrNow) public onlyOwner view returns (uint256 amountAvailable){\n\n      return _getAvailableAmount(grantHolder, onHourOrNow);\n",
          "message": "NexxoTokens.fetchAvailableAmount (NexxoToken.sol#1419-1421) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": 1438,
          "vulnerability_code": "         function getBlockedAddressCount() public onlyOwner view returns(uint blockedWalletAddressCount) {\n\n           return blockedAddressList.length;\n",
          "message": "NexxoTokens.getBlockedAddressCount (NexxoToken.sol#1436-1438) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1440,
          "vulnerability_to_line": 1442,
          "vulnerability_code": "         function getBlockedAddressList() public onlyOwner view returns(address [] memory) {\n\n           return blockedAddressList;\n",
          "message": "NexxoTokens.getBlockedAddressList (NexxoToken.sol#1440-1442) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1444,
          "vulnerability_to_line": 1450,
          "vulnerability_code": "       function blockWalletAddress(address walletAddress) public onlyOwner returns(bool success) {\n\n         require(!isBlocked(walletAddress), \"walletAddress is already blocked.\");\n\n\n\n         blockedAddressStructs[walletAddress].walletAddress = walletAddress;\n\n         blockedAddressStructs[walletAddress].indexPointer = blockedAddressList.push(walletAddress) - 1;\n\n         return true;\n",
          "message": "NexxoTokens.blockWalletAddress (NexxoToken.sol#1444-1450) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1452,
          "vulnerability_to_line": 1463,
          "vulnerability_code": "      function unblockWalletAddress(address walletAddress) public onlyOwner returns(bool success) {\n\n          require(isBlocked(walletAddress), \"walletAddress is not blocked yet.\");\n\n          require((blockedAddressList.length != 0), \"blockedAddressList is empty.\");\n\n\n\n         uint rowToDelete = blockedAddressStructs[walletAddress].indexPointer;\n\n         address keyToMove   = blockedAddressList[blockedAddressList.length-1];\n\n         blockedAddressList[rowToDelete] = keyToMove;\n\n\n\n         blockedAddressStructs[keyToMove].indexPointer = rowToDelete;\n\n         blockedAddressList.length--;\n\n         return true;\n",
          "message": "NexxoTokens.unblockWalletAddress (NexxoToken.sol#1452-1463) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.3 <=0.5.8;\n",
          "message": "Detected issues with version pragma in NexxoToken.sol:\n\t- pragma solidity>=0.5.3<=0.5.8 (NexxoToken.sol#3): is has a complex pragma\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (NexxoToken.sol#144-163):\n\t-(success,returndata) = address(token).call(data) NexxoToken.sol#156\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function _addGrantor(address account) private {\n\n        require(account != address(0));\n\n        _grantors.add(account);\n\n        emit GrantorAdded(account);\n",
          "message": "Function 'GrantorRole._addGrantor' (NexxoToken.sol#303-307) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 313,
          "vulnerability_code": "    function _removeGrantor(address account) private {\n\n        require(account != address(0));\n\n        _grantors.remove(account);\n\n        emit GrantorRemoved(account);\n",
          "message": "Function 'GrantorRole._removeGrantor' (NexxoToken.sol#309-313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": 355,
          "vulnerability_code": "    function _accountExists(address account) internal view returns (bool exists) {\n\n        return account == msg.sender || _isRegistered[account];\n",
          "message": "Function 'VerifiedAccount._accountExists' (NexxoToken.sol#353-355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": 468,
          "vulnerability_code": "    function _addPauser(address account) internal {\n\n        _pausers.add(account);\n\n        emit PauserAdded(account);\n",
          "message": "Function 'PauserRole._addPauser' (NexxoToken.sol#465-468) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 470,
          "vulnerability_to_line": 473,
          "vulnerability_code": "    function _removePauser(address account) internal {\n\n        _pausers.remove(account);\n\n        emit PauserRemoved(account);\n",
          "message": "Function 'PauserRole._removePauser' (NexxoToken.sol#470-473) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": 584,
          "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (NexxoToken.sol#580-584) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 745,
          "vulnerability_to_line": 755,
          "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        require(_balances[sender] >= amount, \"ERC20: transfer more than balance\");\n\n        require(amount > 0, \"ERC20: transfer value negative\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount);\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n\n        return true;\n",
          "message": "Function 'ERC20._transfer' (NexxoToken.sol#745-755) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": 813,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowed[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
          "message": "Function 'ERC20._approve' (NexxoToken.sol#807-813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 821,
          "vulnerability_to_line": 824,
          "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(amount));\n",
          "message": "Function 'ERC20._burnFrom' (NexxoToken.sol#821-824) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": 843,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        require(_balances[account] >= value, \"ERC20: burn overflow from address\");\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n",
          "message": "Function 'ERC20._burn' (NexxoToken.sol#837-843) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private INITIAL_SUPPLY;\n",
          "message": "Variable 'ERC20.INITIAL_SUPPLY' (NexxoToken.sol#615) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => uint) _balances;\n",
          "message": "Variable 'ERC20._balances' (NexxoToken.sol#617) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable  _ownerWallet;\n",
          "message": "Variable 'ERC20._ownerWallet' (NexxoToken.sol#621) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => uint)) _allowed;\n",
          "message": "Variable 'ERC20._allowed' (NexxoToken.sol#623) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 867,
          "vulnerability_to_line": 873,
          "vulnerability_code": "    struct vestingSchedule {\n\n        bool isValid;               /* true if an entry exists and is valid */\n\n        bool isRevocable;           /* true if the vesting option is revocable (a gift), false if irrevocable (purchased) */\n\n        uint32 cliffDuration;       /* Duration of the cliff, with respect to the grant start day, in hours. */\n\n        uint32 duration;            /* Duration of the vesting schedule, with respect to the grant start day, in hours. */\n\n        uint32 interval;            /* Duration in hours of the vesting interval. */\n",
          "message": "Struct 'TokenVesting.vestingSchedule' (NexxoToken.sol#867-873) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": 883,
          "vulnerability_code": "    struct tokenGrant {\n\n        bool isActive;                   /* true if this vesting entry is active and in-effect entry. */\n\n        bool wasRevoked;                 /* true if this vesting schedule was revoked. */\n\n        uint32 startHour;                 /* Start hour of the grant, in hours since the UNIX epoch (start of day). */\n\n        uint256 totalAmount;             /* Total number of tokens to deposit into the account to vesting.*/\n\n        uint256 vestingAmount;           /* Vesting token slot per interval.*/\n\n        address vestingWalletAddress;    /* Address of wallet that is holding the vesting schedule. */\n\n        address grantor;                 /* Grantor that made the grant */\n",
          "message": "Struct 'TokenVesting.tokenGrant' (NexxoToken.sol#875-883) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": 936,
          "vulnerability_code": "    function _setVestingSchedule(address vestingWalletAddress, uint32 cliffDuration, uint32 duration, uint32 interval,bool isRevocable)\n\n      internal returns (bool ok) {\n\n\n\n        // Check for a valid vesting schedule given (disallow absurd values to reject likely bad input).\n\n        require(\n\n            duration > 0 && duration <= TEN_YEARS_HOURS\n\n            && cliffDuration < duration\n\n            && interval >= 1,\n\n            \"invalid vesting schedule\"\n\n        );\n\n\n\n        // Make sure the duration values are in harmony with interval (both should be an exact multiple of interval).\n\n        require(duration % interval == 0 && cliffDuration % interval == 0,\n\n            \"invalid cliff/duration for interval\"\n\n        );\n\n\n\n        // Create and populate a vesting schedule.\n\n        _vestingSchedules[vestingWalletAddress] = vestingSchedule(\n\n            true/*isValid*/,\n\n            isRevocable,\n\n            cliffDuration, duration, interval\n\n        );\n\n\n\n        // Emit the event and return success.\n\n        emit VestingScheduleCreated(\n\n            vestingWalletAddress,\n\n            cliffDuration, duration, interval,\n\n            isRevocable);\n\n        return true;\n",
          "message": "Function 'TokenVesting._setVestingSchedule' (NexxoToken.sol#907-936) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 938,
          "vulnerability_to_line": 940,
          "vulnerability_code": "    function _hasVestingSchedule(address account) internal view returns (bool ok) {\n\n        return _vestingSchedules[account].isValid;\n",
          "message": "Function 'TokenVesting._hasVestingSchedule' (NexxoToken.sol#938-940) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 991,
          "vulnerability_to_line": 1031,
          "vulnerability_code": "    function _grantVestingTokens(\n\n        address beneficiary,\n\n        uint256 totalAmount,\n\n        uint256 vestingAmount,\n\n        uint32 startHour,\n\n        address vestingWalletAddress,\n\n        address grantor\n\n    )\n\n    internal returns (bool ok)\n\n    {\n\n        // Make sure no prior grant is in effect.\n\n        require(!_tokenGrants[beneficiary].isActive, \"grant already exists\");\n\n\n\n        // Check for valid vestingAmount\n\n\t\trequire(vestingAmount <= totalAmount,\"vesting must be less than total.\");\n\n\t\trequire(vestingAmount > 0,\"invalid vesting amount.\");\n\n\t\trequire(startHour > JAN_1_2000_HOURS,\"invalid startTime for vesting.\");\n\n\t\trequire(startHour < JAN_1_3000_HOURS,\"invalid startTime for vesting.\");\n\n\n\n        // Make sure the vesting schedule we are about to use is valid.\n\n        require(_hasVestingSchedule(vestingWalletAddress), \"no such vesting schedule\");\n\n\n\n        // Transfer the total number of tokens from grantor into the account's holdings.\n\n        transfer(grantor, beneficiary, totalAmount);\n\n        /* Emits a Transfer event. */\n\n\n\n        // Create and populate a token grant, referencing vesting schedule.\n\n        _tokenGrants[beneficiary] = tokenGrant(\n\n            true /*isActive*/,\n\n            false /*wasRevoked*/,\n\n            startHour,\n\n            totalAmount,\n\n            vestingAmount,\n\n            vestingWalletAddress, /* The wallet address where the vesting schedule is kept. */\n\n            grantor               /* The account that performed the grant */\n\n        );\n\n\n\n        // Emit the event and return success.\n\n        emit VestingTokensGranted(beneficiary, vestingAmount, startHour, vestingWalletAddress, grantor);\n\n        return true;\n",
          "message": "Function 'TokenVesting._grantVestingTokens' (NexxoToken.sol#991-1031) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": 1101,
          "vulnerability_code": "    function _effectiveHours(uint32 onHourOrNow) internal view returns (uint32 hourNumber) {\n\n        return onHourOrNow == 0 ? currentTime() : onHourOrNow;   /* #onHourOrNow = epochSeconds/SECONDS_PER_HOUR */\n",
          "message": "Function 'TokenVesting._effectiveHours' (NexxoToken.sol#1099-1101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1111,
          "vulnerability_to_line": 1144,
          "vulnerability_code": "    function _getNotVestedAmount(address grantHolder, uint32 onHourOrNow) public view returns (uint256 amountNotVested) {\n\n        tokenGrant storage grant = _tokenGrants[grantHolder];\n\n        vestingSchedule storage vesting = _vestingSchedules[grant.vestingWalletAddress];\n\n        uint32 onHour = _effectiveHours(onHourOrNow);\n\n\n\n        // If there's no schedule, or before the vesting cliff, then the full amount is not vested.\n\n        if (!grant.isActive || onHour < grant.startHour + vesting.cliffDuration)\n\n        {\n\n            // None are vested (all are not vested)..i.e. All 10 tokens\n\n            return grant.totalAmount;\n\n        }\n\n        // If after end of vesting, then the not vested amount is zero (all are vested).\n\n        else if (onHour >= grant.startHour + vesting.duration)\n\n        {\n\n            // All are vested (none are not vested).....i.e all vested tokens\n\n            return uint256(0);\n\n        }\n\n        // Otherwise a fractional amount is vested.\n\n        else\n\n        {\n\n            // Compute the exact number of hours vested.\n\n            uint32 hoursVested = onHour - grant.startHour; //...in epoch seconds..\n\n            // Adjust result rounding down to take into consideration the interval.\n\n            uint32 effectiveHoursVested = (hoursVested / vesting.interval) * vesting.interval;\n\n\n\n            // Compute the fraction vested from schedule using 224.32 fixed point math for date range ratio.\n\n            // Note: This is safe in 256-bit math because max value of X billion tokens = X*10^27 wei, and\n\n            // typical token amounts can fit into 90 bits. Scaling using a 32 bits value results in only 125\n\n            // bits before reducing back to 90 bits by dividing. There is plenty of room left, even for token\n\n            // amounts many orders of magnitude greater than mere billions.\n\n            uint256 vested = (grant.totalAmount.div(vesting.duration)).mul(effectiveHoursVested);\n\n            return grant.totalAmount.sub(vested);\n\n        }\n",
          "message": "Function 'TokenVesting._getNotVestedAmount' (NexxoToken.sol#1111-1144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1156,
          "vulnerability_to_line": 1160,
          "vulnerability_code": "    function _getAvailableAmount(address grantHolder, uint32 onHourOrNow) internal view returns (uint256 amountAvailable) {\n\n        uint256 totalTokens = balanceOf(grantHolder);\n\n        uint256 vested = totalTokens.sub(_getNotVestedAmount(grantHolder, onHourOrNow));\n\n        return vested;\n",
          "message": "Function 'TokenVesting._getAvailableAmount' (NexxoToken.sol#1156-1160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1260,
          "vulnerability_code": "    function _fundsAreAvailableOn(address account, uint256 amount, uint32 onHour) internal view returns (bool ok) {\n\n        return (amount <= _getAvailableAmount(account, onHour));\n",
          "message": "Function 'TokenVesting._fundsAreAvailableOn' (NexxoToken.sol#1258-1260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private INITIAL_SUPPLY = 100000000000000000000000000000;\n",
          "message": "Variable 'NexxoTokens.INITIAL_SUPPLY' (NexxoToken.sol#1334) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private UNIT_PER_ETH_BUY=294380;\n",
          "message": "Variable 'NexxoTokens.UNIT_PER_ETH_BUY' (NexxoToken.sol#1335) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint32 private constant THOUSAND_YEARS_HOURS = 8765832;\n",
          "message": "TokenVesting.THOUSAND_YEARS_HOURS (NexxoToken.sol#851) is never used in NexxoTokens\nTokenVesting.JAN_1_2000_SECONDS (NexxoToken.sol#860) is never used in NexxoTokens\nNexxoTokens.UNIT_PER_ETH_BUY (NexxoToken.sol#1335) is never used in NexxoTokens\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1461,
          "vulnerability_to_line": null,
          "vulnerability_code": "         blockedAddressList.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1134,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint32 effectiveHoursVested = (hoursVested / vesting.interval) * vesting.interval;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 vested = (grant.totalAmount.div(vesting.duration)).mul(effectiveHoursVested);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1393,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint tokens) public onlyOwner returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ERC20 is IERC20 {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.3 <=0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.3 <=0.5.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _grantors;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) private _isRegistered;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _pausers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _paused;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private INITIAL_SUPPLY;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _unitsOneEthCanBuy;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalEthInWei;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tuint32 private constant THOUSAND_YEARS_HOURS = 8765832;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint32 private constant TEN_YEARS_HOURS = THOUSAND_YEARS_HOURS / 100;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint32 private constant SECONDS_PER_HOUR = 60 * 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint32 private constant JAN_1_2000_SECONDS = 946684800;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint32 private constant JAN_1_2000_HOURS = JAN_1_2000_SECONDS / SECONDS_PER_HOUR;  /*  262968  */\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint32 private constant JAN_1_3000_HOURS = JAN_1_2000_HOURS + THOUSAND_YEARS_HOURS; /*  9028800 */\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 885,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => vestingSchedule) private _vestingSchedules;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => tokenGrant) private _tokenGrants;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private INITIAL_SUPPLY = 100000000000000000000000000000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 1335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private UNIT_PER_ETH_BUY=294380;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vestingAsOf(uint32 onHourOrNow) external view returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "    public view onlyGrantorOrSelf(grantHolder) returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vestingAsOf(uint32 onHourOrNow) public view returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getIntrinsicVestingSchedule(address grantHolder) public onlyOwner view returns (uint32 vestDuration,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(uint initalCapacity, uint256 unitsOneEthCanBuy, address payable ownerWallet) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => uint) _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable  _ownerWallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => uint)) _allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply = initalCapacity;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _balances[msg.sender] = initalCapacity;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 631,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _unitsOneEthCanBuy = unitsOneEthCanBuy;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _ownerWallet = ownerWallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1343,
          "vulnerability_to_line": null,
          "vulnerability_code": "        mapping (address => EntityStruct) blockedAddressStructs;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] blockedAddressList; // unordered list of keys that actually exist\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1356,
          "vulnerability_to_line": null,
          "vulnerability_code": "        updateTotalEthInWei(totalEthInWei() + msg.value);\n",
          "message": null
        }
      ]
    }
  }
}