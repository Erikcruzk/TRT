{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenVesting is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 942,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NexxoToken is Ownable, ERC20, Pausable, ERC20Burnable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _addPauser(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _paused = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 700,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 703,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line max-line-length\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 812,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(duration > 0, \"TokenVesting: duration is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line max-line-length\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 817,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _revocable = revocable;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 960,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 961,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = \"NEXXO\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = \"Nexxo Tokens\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 963,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 964,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 965,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply = 100000000000000000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 966,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 967,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] = _totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        unitsOneEthCanBuy = 287780;                                  // Set the price of your token for the ICO (CHANGE THIS)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "        fundsWallet = msg.sender;                                    // The owner of the contract gets ETH\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!has(role, account), \"Roles: account already has role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_paused, \"Pausable: paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_paused, \"Pausable: not paused\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[sender] >= amount, \"ERC20: transfer more than balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount > 0, \"ERC20: transfer value negative\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[account] >= value, \"ERC20: burn overflow from address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 650,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 812,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(duration > 0, \"TokenVesting: duration is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(unreleased > 0, \"TokenVesting: no tokens are due\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_revocable, \"TokenVesting: cannot revoke\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[fundsWallet] >= amount, \"NexxoToken : amount more than balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(has(role, account), \"Roles: account does not have role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"Roles: account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[sender] >= amount, \"ERC20: transfer more than balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_balances[account] >= value, \"ERC20: burn overflow from address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 810,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 812,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 896,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[fundsWallet] >= amount, \"NexxoToken : amount more than balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_61"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-state",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public _totalSupply;\n",
          "message": "NexxoToken._totalSupply (Nexxo_contract_solidity_05__0_5_3.sol#948) shadows:\n\t- ERC20._totalSupply (Nexxo_contract_solidity_05__0_5_3.sol#372)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": 577,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract (Nexxo_contract_solidity_05__0_5_3.sol#568-577) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": 887,
          "vulnerability_code": "    function release(IERC20 token) public {\n\n        uint256 unreleased = _releasableAmount(token);\n\n\n\n        require(unreleased > 0, \"TokenVesting: no tokens are due\");\n\n\n\n        _released[address(token)] = _released[address(token)].add(unreleased);\n\n\n\n        token.safeTransfer(_beneficiary, unreleased);\n\n\n\n        emit TokensReleased(address(token), unreleased);\n",
          "message": "Reentrancy in TokenVesting.release (Nexxo_contract_solidity_05__0_5_3.sol#877-887):\n\tExternal calls:\n\t- unreleased = _releasableAmount(token) (Nexxo_contract_solidity_05__0_5_3.sol#878)\n\tState variables written after the call(s):\n\t- _released (Nexxo_contract_solidity_05__0_5_3.sol#882)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": 908,
          "vulnerability_code": "    function revoke(IERC20 token) public onlyOwner {\n\n        require(_revocable, \"TokenVesting: cannot revoke\");\n\n        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\n\n\n\n        uint256 balance = token.balanceOf(address(this));\n\n\n\n        uint256 unreleased = _releasableAmount(token);\n\n        uint256 refund = balance.sub(unreleased);\n\n\n\n        _revoked[address(token)] = true;\n\n\n\n        token.safeTransfer(owner(), refund);\n\n\n\n        emit TokenVestingRevoked(address(token));\n",
          "message": "Reentrancy in TokenVesting.revoke (Nexxo_contract_solidity_05__0_5_3.sol#894-908):\n\tExternal calls:\n\t- balance = token.balanceOf(address(this)) (Nexxo_contract_solidity_05__0_5_3.sol#898)\n\t- unreleased = _releasableAmount(token) (Nexxo_contract_solidity_05__0_5_3.sol#900)\n\tState variables written after the call(s):\n\t- _revoked (Nexxo_contract_solidity_05__0_5_3.sol#903)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n",
          "message": "TokenVesting.constructor.beneficiary (local variable @ Nexxo_contract_solidity_05__0_5_3.sol#809) shadows:\n\t- TokenVesting.beneficiary (function @ Nexxo_contract_solidity_05__0_5_3.sol#827-829)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n",
          "message": "TokenVesting.constructor.start (local variable @ Nexxo_contract_solidity_05__0_5_3.sol#809) shadows:\n\t- TokenVesting.start (function @ Nexxo_contract_solidity_05__0_5_3.sol#841-843)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n",
          "message": "TokenVesting.constructor.duration (local variable @ Nexxo_contract_solidity_05__0_5_3.sol#809) shadows:\n\t- TokenVesting.duration (function @ Nexxo_contract_solidity_05__0_5_3.sol#848-850)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n",
          "message": "TokenVesting.constructor.revocable (local variable @ Nexxo_contract_solidity_05__0_5_3.sol#809) shadows:\n\t- TokenVesting.revocable (function @ Nexxo_contract_solidity_05__0_5_3.sol#855-857)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 809,
          "vulnerability_to_line": 822,
          "vulnerability_code": "    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n\n        require(beneficiary != address(0), \"TokenVesting: beneficiary is the zero address\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(cliffDuration <= duration, \"TokenVesting: cliff is longer than duration\");\n\n        require(duration > 0, \"TokenVesting: duration is 0\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(start.add(duration) > block.timestamp, \"TokenVesting: final time is before current time\");\n\n\n\n        _beneficiary = beneficiary;\n\n        _revocable = revocable;\n\n        _duration = duration;\n\n        _cliff = start.add(cliffDuration);\n\n        _start = start;\n",
          "message": "TokenVesting.constructor (Nexxo_contract_solidity_05__0_5_3.sol#809-822) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(start.add(duration) > block.timestamp,TokenVesting: final time is before current time) (Nexxo_contract_solidity_05__0_5_3.sol#815)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": 934,
          "vulnerability_code": "    function _vestedAmount(IERC20 token) private view returns (uint256) {\n\n        uint256 currentBalance = token.balanceOf(address(this));\n\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\n\n\n\n        if (block.timestamp < _cliff) {\n\n            return 0;\n\n        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {\n\n            return totalBalance;\n\n        } else {\n\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n\n        }\n",
          "message": "TokenVesting._vestedAmount (Nexxo_contract_solidity_05__0_5_3.sol#923-934) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _start.add(_duration) || _revoked[address(token)] (Nexxo_contract_solidity_05__0_5_3.sol#929-933)\n\t- block.timestamp < _cliff (Nexxo_contract_solidity_05__0_5_3.sol#927-933)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": 577,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
          "message": "Address.isContract uses assembly (Nexxo_contract_solidity_05__0_5_3.sol#568-577)\n\t- Nexxo_contract_solidity_05__0_5_3.sol#575-576\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": 252,
          "vulnerability_code": "    function addPauser(address account) public onlyPauser {\n\n        _addPauser(account);\n",
          "message": "PauserRole.addPauser (Nexxo_contract_solidity_05__0_5_3.sol#250-252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": 256,
          "vulnerability_code": "    function renouncePauser() public {\n\n        _removePauser(msg.sender);\n",
          "message": "PauserRole.renouncePauser (Nexxo_contract_solidity_05__0_5_3.sol#254-256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 305,
          "vulnerability_code": "    function paused() public view returns (bool) {\n\n        return _paused;\n",
          "message": "Pausable.paused (Nexxo_contract_solidity_05__0_5_3.sol#303-305) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": 329,
          "vulnerability_code": "    function pause() public onlyPauser whenNotPaused {\n\n        _paused = true;\n\n        emit Paused(msg.sender);\n",
          "message": "Pausable.pause (Nexxo_contract_solidity_05__0_5_3.sol#326-329) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 337,
          "vulnerability_code": "    function unpause() public onlyPauser whenPaused {\n\n        _paused = false;\n\n        emit Unpaused(msg.sender);\n",
          "message": "Pausable.unpause (Nexxo_contract_solidity_05__0_5_3.sol#334-337) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": 379,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
          "message": "ERC20.totalSupply (Nexxo_contract_solidity_05__0_5_3.sol#377-379) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (Nexxo_contract_solidity_05__0_5_3.sol#161) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 993,
          "vulnerability_to_line": 995,
          "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply  - balances[address(0)];\n",
          "message": "NexxoToken.totalSupply (Nexxo_contract_solidity_05__0_5_3.sol#993-995) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (Nexxo_contract_solidity_05__0_5_3.sol#166) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1001,
          "vulnerability_to_line": 1003,
          "vulnerability_code": "    function balanceOf(address tokenOwner) public view returns (uint ownerBalance) {\n\n        return balances[tokenOwner];\n",
          "message": "NexxoToken.balanceOf (Nexxo_contract_solidity_05__0_5_3.sol#1001-1003) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": 386,
          "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n        return _balances[account];\n",
          "message": "ERC20.balanceOf (Nexxo_contract_solidity_05__0_5_3.sol#384-386) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": 399,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(msg.sender, recipient, amount);\n\n        return true;\n",
          "message": "ERC20.transfer (Nexxo_contract_solidity_05__0_5_3.sol#396-399) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transfer (Nexxo_contract_solidity_05__0_5_3.sol#175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1011,
          "vulnerability_to_line": 1016,
          "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        emit Transfer(msg.sender, to, tokens);\n\n        return true;\n",
          "message": "NexxoToken.transfer (Nexxo_contract_solidity_05__0_5_3.sol#1011-1016) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1056,
          "vulnerability_to_line": 1058,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n",
          "message": "NexxoToken.allowance (Nexxo_contract_solidity_05__0_5_3.sol#1056-1058) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 406,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n",
          "message": "ERC20.allowance (Nexxo_contract_solidity_05__0_5_3.sol#404-406) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (Nexxo_contract_solidity_05__0_5_3.sol#184) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": 1031,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        return true;\n",
          "message": "NexxoToken.approve (Nexxo_contract_solidity_05__0_5_3.sol#1027-1031) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (Nexxo_contract_solidity_05__0_5_3.sol#200) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": 418,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n",
          "message": "ERC20.approve (Nexxo_contract_solidity_05__0_5_3.sol#415-418) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": 436,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n\n        return true;\n",
          "message": "ERC20.transferFrom (Nexxo_contract_solidity_05__0_5_3.sol#432-436) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1043,
          "vulnerability_to_line": 1049,
          "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        emit Transfer(from, to, tokens);\n\n        return true;\n",
          "message": "NexxoToken.transferFrom (Nexxo_contract_solidity_05__0_5_3.sol#1043-1049) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transferFrom (Nexxo_contract_solidity_05__0_5_3.sol#211) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": 453,
          "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n\n        return true;\n",
          "message": "ERC20.increaseAllowance (Nexxo_contract_solidity_05__0_5_3.sol#450-453) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n\n        return true;\n",
          "message": "ERC20.decreaseAllowance (Nexxo_contract_solidity_05__0_5_3.sol#469-472) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": 680,
          "vulnerability_code": "    function burnFrom(address account, uint256 amount) public {\n\n        _burnFrom(account, amount);\n",
          "message": "ERC20Burnable.burnFrom (Nexxo_contract_solidity_05__0_5_3.sol#678-680) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": 737,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (Nexxo_contract_solidity_05__0_5_3.sol#734-737) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": 745,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (Nexxo_contract_solidity_05__0_5_3.sol#743-745) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 763,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address from, uint256 tokens, address tokenAddress, bytes memory data) public;\n",
          "message": "ApproveAndCallFallBack.receiveApproval (Nexxo_contract_solidity_05__0_5_3.sol#763) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 827,
          "vulnerability_to_line": 829,
          "vulnerability_code": "    function beneficiary() public view returns (address) {\n\n        return _beneficiary;\n",
          "message": "TokenVesting.beneficiary (Nexxo_contract_solidity_05__0_5_3.sol#827-829) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 834,
          "vulnerability_to_line": 836,
          "vulnerability_code": "    function cliff() public view returns (uint256) {\n\n        return _cliff;\n",
          "message": "TokenVesting.cliff (Nexxo_contract_solidity_05__0_5_3.sol#834-836) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": 843,
          "vulnerability_code": "    function start() public view returns (uint256) {\n\n        return _start;\n",
          "message": "TokenVesting.start (Nexxo_contract_solidity_05__0_5_3.sol#841-843) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": 850,
          "vulnerability_code": "    function duration() public view returns (uint256) {\n\n        return _duration;\n",
          "message": "TokenVesting.duration (Nexxo_contract_solidity_05__0_5_3.sol#848-850) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 855,
          "vulnerability_to_line": 857,
          "vulnerability_code": "    function revocable() public view returns (bool) {\n\n        return _revocable;\n",
          "message": "TokenVesting.revocable (Nexxo_contract_solidity_05__0_5_3.sol#855-857) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 862,
          "vulnerability_to_line": 864,
          "vulnerability_code": "    function released(address token) public view returns (uint256) {\n\n        return _released[token];\n",
          "message": "TokenVesting.released (Nexxo_contract_solidity_05__0_5_3.sol#862-864) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": 871,
          "vulnerability_code": "    function revoked(address token) public view returns (bool) {\n\n        return _revoked[token];\n",
          "message": "TokenVesting.revoked (Nexxo_contract_solidity_05__0_5_3.sol#869-871) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": 887,
          "vulnerability_code": "    function release(IERC20 token) public {\n\n        uint256 unreleased = _releasableAmount(token);\n\n\n\n        require(unreleased > 0, \"TokenVesting: no tokens are due\");\n\n\n\n        _released[address(token)] = _released[address(token)].add(unreleased);\n\n\n\n        token.safeTransfer(_beneficiary, unreleased);\n\n\n\n        emit TokensReleased(address(token), unreleased);\n",
          "message": "TokenVesting.release (Nexxo_contract_solidity_05__0_5_3.sol#877-887) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": 908,
          "vulnerability_code": "    function revoke(IERC20 token) public onlyOwner {\n\n        require(_revocable, \"TokenVesting: cannot revoke\");\n\n        require(!_revoked[address(token)], \"TokenVesting: token already revoked\");\n\n\n\n        uint256 balance = token.balanceOf(address(this));\n\n\n\n        uint256 unreleased = _releasableAmount(token);\n\n        uint256 refund = balance.sub(unreleased);\n\n\n\n        _revoked[address(token)] = true;\n\n\n\n        token.safeTransfer(owner(), refund);\n\n\n\n        emit TokenVestingRevoked(address(token));\n",
          "message": "TokenVesting.revoke (Nexxo_contract_solidity_05__0_5_3.sol#894-908) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1066,
          "vulnerability_to_line": 1071,
          "vulnerability_code": "    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n\n        return true;\n",
          "message": "NexxoToken.approveAndCall (Nexxo_contract_solidity_05__0_5_3.sol#1066-1071) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": 656,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (Nexxo_contract_solidity_05__0_5_3.sol#637-656):\n\t-(success,returndata) = address(token).call(data) Nexxo_contract_solidity_05__0_5_3.sol#649\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 261,
          "vulnerability_code": "    function _addPauser(address account) internal {\n\n        _pausers.add(account);\n\n        emit PauserAdded(account);\n",
          "message": "Function 'PauserRole._addPauser' (Nexxo_contract_solidity_05__0_5_3.sol#258-261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function _removePauser(address account) internal {\n\n        _pausers.remove(account);\n\n        emit PauserRemoved(account);\n",
          "message": "Function 'PauserRole._removePauser' (Nexxo_contract_solidity_05__0_5_3.sol#263-266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": 497,
          "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        require(_balances[sender] >= amount, \"ERC20: transfer more than balance\");\n\n        require(amount > 0, \"ERC20: transfer value negative\");\n\n        \n\n        _balances[sender] = _balances[sender].sub(amount);\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
          "message": "Function 'ERC20._transfer' (Nexxo_contract_solidity_05__0_5_3.sol#488-497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        require(_balances[account] >= value, \"ERC20: burn overflow from address\");\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
          "message": "Function 'ERC20._burn' (Nexxo_contract_solidity_05__0_5_3.sol#510-517) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": 538,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
          "message": "Function 'ERC20._approve' (Nexxo_contract_solidity_05__0_5_3.sol#532-538) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n",
          "message": "Function 'ERC20._burnFrom' (Nexxo_contract_solidity_05__0_5_3.sol#546-549) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": 754,
          "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (Nexxo_contract_solidity_05__0_5_3.sol#750-754) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": 917,
          "vulnerability_code": "    function _releasableAmount(IERC20 token) private view returns (uint256) {\n\n        return _vestedAmount(token).sub(_released[address(token)]);\n",
          "message": "Function 'TokenVesting._releasableAmount' (Nexxo_contract_solidity_05__0_5_3.sol#915-917) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": 934,
          "vulnerability_code": "    function _vestedAmount(IERC20 token) private view returns (uint256) {\n\n        uint256 currentBalance = token.balanceOf(address(this));\n\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\n\n\n\n        if (block.timestamp < _cliff) {\n\n            return 0;\n\n        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {\n\n            return totalBalance;\n\n        } else {\n\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n\n        }\n",
          "message": "Function 'TokenVesting._vestedAmount' (Nexxo_contract_solidity_05__0_5_3.sol#923-934) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 948,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public _totalSupply;\n",
          "message": "Variable 'NexxoToken._totalSupply' (Nexxo_contract_solidity_05__0_5_3.sol#948) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 994,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _totalSupply  - balances[address(0)];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 942,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NexxoToken is Ownable, ERC20, Pausable, ERC20Burnable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Roles.Role private _pausers;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _paused;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 693,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _cliff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _start;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _duration;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _revocable;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 796,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _released;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private _revoked;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 951,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable fundsWallet;           // Where should the raised ETH go?\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 954,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => uint)) allowed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 946,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public  name;\n",
          "message": null
        },
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}