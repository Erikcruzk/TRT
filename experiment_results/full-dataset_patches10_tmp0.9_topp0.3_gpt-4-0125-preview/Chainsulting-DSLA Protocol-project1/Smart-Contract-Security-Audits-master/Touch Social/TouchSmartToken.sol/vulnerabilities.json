{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply_ = 1000000000 * (10 ** uint256(decimals));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] = totalSupply_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_43"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": 386,
          "vulnerability_code": "    function() payable external {\n\n        revert();\n",
          "message": "Contract locking ether found in TouchSmartToken.sol:\n\tContract TSToken has payable functions:\n\t - fallback (TouchSmartToken.sol#384-386)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
          "message": "Ownable.renounceOwnership (TouchSmartToken.sol#95-98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 136,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
          "message": "BasicToken.totalSupply (TouchSmartToken.sol#134-136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (TouchSmartToken.sol#107) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 160,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "BasicToken.balanceOf (TouchSmartToken.sol#158-160) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TouchSmartToken.sol#108) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (TouchSmartToken.sol#118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256) {\n\n        return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (TouchSmartToken.sol#215-217) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function pause() onlyOwner whenNotPaused public {\n\n        paused = true;\n\n        emit Pause();\n",
          "message": "Pausable.pause (TouchSmartToken.sol#284-287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": 295,
          "vulnerability_code": "    function unpause() onlyOwner whenPaused public {\n\n        paused = false;\n\n        emit Unpause();\n",
          "message": "Pausable.unpause (TouchSmartToken.sol#292-295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 344,
          "vulnerability_code": "    function freezeOf(address _owner) public view returns (uint256) {\n\n        return freezes[_owner];\n",
          "message": "TSToken.freezeOf (TouchSmartToken.sol#342-344) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": 353,
          "vulnerability_code": "    function burn(uint256 _value) whenNotPaused public returns (bool) {\n\n        require(_value <= balances[msg.sender]);\n\n        \n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        totalSupply_ = totalSupply_.sub(_value);\n\n        emit Burn(msg.sender, _value);\n\n        return true;\n",
          "message": "TSToken.burn (TouchSmartToken.sol#346-353) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": 362,
          "vulnerability_code": "\tfunction freeze(uint256 _value) whenNotPaused public returns (bool) {\n\n        require(_value <= balances[msg.sender]);\n\n        \n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        freezes[msg.sender] = freezes[msg.sender].add(_value);\n\n        emit Freeze(msg.sender, _value);\n\n        return true;\n",
          "message": "TSToken.freeze (TouchSmartToken.sol#355-362) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": 371,
          "vulnerability_code": "\tfunction unfreeze(uint256 _value) whenNotPaused public returns (bool) {\n\n        require(_value <= freezes[msg.sender]);\n\n        \n\n        freezes[msg.sender] = freezes[msg.sender].sub(_value);\n\n\t\tbalances[msg.sender] = balances[msg.sender].add(_value);\n\n        emit Unfreeze(msg.sender, _value);\n\n        return true;\n",
          "message": "TSToken.unfreeze (TouchSmartToken.sol#364-371) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (TouchSmartToken.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (TouchSmartToken.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (TouchSmartToken.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (TouchSmartToken.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (TouchSmartToken.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (TouchSmartToken.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (TouchSmartToken.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (TouchSmartToken.sol#181) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (TouchSmartToken.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (TouchSmartToken.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (TouchSmartToken.sol#229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TouchSmartToken.sol#229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (TouchSmartToken.sol#245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TouchSmartToken.sol#245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_to' of PausableToken.transfer (TouchSmartToken.sol#300) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_value' of PausableToken.transfer (TouchSmartToken.sol#300) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_from' of PausableToken.transferFrom (TouchSmartToken.sol#304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_to' of PausableToken.transferFrom (TouchSmartToken.sol#304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_value' of PausableToken.transferFrom (TouchSmartToken.sol#304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_spender' of PausableToken.approve (TouchSmartToken.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_value' of PausableToken.approve (TouchSmartToken.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_spender' of PausableToken.increaseApproval (TouchSmartToken.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_addedValue' of PausableToken.increaseApproval (TouchSmartToken.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_spender' of PausableToken.decreaseApproval (TouchSmartToken.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of PausableToken.decreaseApproval (TouchSmartToken.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function freezeOf(address _owner) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of TSToken.freezeOf (TouchSmartToken.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(uint256 _value) whenNotPaused public returns (bool) {\n",
          "message": "Parameter '_value' of TSToken.burn (TouchSmartToken.sol#346) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction freeze(uint256 _value) whenNotPaused public returns (bool) {\n",
          "message": "Parameter '_value' of TSToken.freeze (TouchSmartToken.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction unfreeze(uint256 _value) whenNotPaused public returns (bool) {\n",
          "message": "Parameter '_value' of TSToken.unfreeze (TouchSmartToken.sol#364) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() payable external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 totalSupply_;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) freezes;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}