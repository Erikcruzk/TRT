{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract GSPIClub is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "  totalDonation += _amount;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "   profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": " uint256 public totalHolder = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": " uint256 public totalDonation = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": " constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": " }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": " constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "  erc20 = TOKEN(address(0xB42e1c3902b85b410334f5fff79cDc51fBeE6950));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": " }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "  require(erc20.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "  require(_amount > 0, \"must be a positive value\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "  require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  if (_referredBy != address(0) && _referredBy != _customerAddress && tokenBalanceLedger_[_referredBy] >= stakingRequirement) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "   referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "   _dividends = SafeMath.add(_dividends, _referralBonus);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "   _fee = _dividends * magnitude;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "   totalHolder++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_47"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": " uint256 public stakingRequirement;\n",
          "message": "GSPIClub.stakingRequirement (gspi_club.sol#134) is never initialized. It is used in:\n\t- purchaseTokens (gspi_club.sol#313-354)\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 167,
          "vulnerability_code": " function() payable public {\n\n  revert();\n",
          "message": "Contract locking ether found in gspi_club.sol:\n\tContract GSPIClub has payable functions:\n\t - fallback (gspi_club.sol#165-167)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 242,
          "vulnerability_code": " function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {\n\n  address _customerAddress = msg.sender;\n\n  require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n\n\n  if (myDividends(true) > 0) {\n\n   withdraw();\n\n  }\n\n\n\n  uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n\n  uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n\n  uint256 _dividends = _tokenFee;\n\n\n\n  tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n\n\n  tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n  tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n\n\n  payoutsTo_[_customerAddress] -= (int256)(profitPerShare_ * _amountOfTokens);\n\n  payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);\n\n\n\n  profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n\n\n  emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n\n\n  return true;\n",
          "message": "Reentrancy in GSPIClub.transfer (gspi_club.sol#217-242):\n\tExternal calls:\n\t- withdraw() (gspi_club.sol#222)\n\tState variables written after the call(s):\n\t- payoutsTo_ (gspi_club.sol#234)\n\t- payoutsTo_ (gspi_club.sol#235)\n\t- profitPerShare_ (gspi_club.sol#237)\n\t- tokenBalanceLedger_ (gspi_club.sol#231)\n\t- tokenBalanceLedger_ (gspi_club.sol#232)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": 194,
          "vulnerability_code": " function withdraw() onlyDivis public {\n\n  address _customerAddress = msg.sender;\n\n  uint256 _dividends = myDividends(false);\n\n  payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\n\n  _dividends += referralBalance_[_customerAddress];\n\n  referralBalance_[_customerAddress] = 0;\n\n  erc20.transfer(_customerAddress, _dividends);\n\n  emit onWithdraw(_customerAddress, _dividends);\n",
          "message": "GSPIClub.withdraw (gspi_club.sol#186-194) does not use the value returned by external calls:\n\t-erc20.transfer(_customerAddress,_dividends) (gspi_club.sol#192)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 158,
          "vulnerability_code": " function buy(uint256 _amount, address _referredBy) public returns(uint256) {\n\n  checkAndTransferSTAT(_amount);\n\n  return purchaseTokens(_referredBy, msg.sender, _amount);\n",
          "message": "Reentrancy in GSPIClub.buy (gspi_club.sol#155-158):\n\tExternal calls:\n\t- checkAndTransferSTAT(_amount) (gspi_club.sol#156)\n\tState variables written after the call(s):\n\t- invested_ (gspi_club.sol#157)\n\t- payoutsTo_ (gspi_club.sol#157)\n\t- profitPerShare_ (gspi_club.sol#157)\n\t- referralBalance_ (gspi_club.sol#157)\n\t- tokenBalanceLedger_ (gspi_club.sol#157)\n\t- tokenSupply_ (gspi_club.sol#157)\n\t- totalHolder (gspi_club.sol#157)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 163,
          "vulnerability_code": " function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {\n\n  checkAndTransferSTAT(_amount);\n\n  return purchaseTokens(_referredBy, _customerAddress, _amount);\n",
          "message": "Reentrancy in GSPIClub.buyFor (gspi_club.sol#160-163):\n\tExternal calls:\n\t- checkAndTransferSTAT(_amount) (gspi_club.sol#161)\n\tState variables written after the call(s):\n\t- invested_ (gspi_club.sol#162)\n\t- payoutsTo_ (gspi_club.sol#162)\n\t- profitPerShare_ (gspi_club.sol#162)\n\t- referralBalance_ (gspi_club.sol#162)\n\t- tokenBalanceLedger_ (gspi_club.sol#162)\n\t- tokenSupply_ (gspi_club.sol#162)\n\t- totalHolder (gspi_club.sol#162)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 153,
          "vulnerability_code": " function distribute(uint256 _amount) public returns(uint256) {\n\n  require(_amount > 0, \"must be a positive value\");\n\n  checkAndTransferSTAT(_amount);\n\n  totalDonation += _amount;\n\n  profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);\n\n  emit onDistribute(msg.sender, _amount);\n",
          "message": "Reentrancy in GSPIClub.distribute (gspi_club.sol#147-153):\n\tExternal calls:\n\t- checkAndTransferSTAT(_amount) (gspi_club.sol#149)\n\tState variables written after the call(s):\n\t- profitPerShare_ (gspi_club.sol#151)\n\t- totalDonation (gspi_club.sol#150)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 242,
          "vulnerability_code": " function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {\n\n  address _customerAddress = msg.sender;\n\n  require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n\n\n  if (myDividends(true) > 0) {\n\n   withdraw();\n\n  }\n\n\n\n  uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n\n  uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n\n  uint256 _dividends = _tokenFee;\n\n\n\n  tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n\n\n  tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n  tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n\n\n\n  payoutsTo_[_customerAddress] -= (int256)(profitPerShare_ * _amountOfTokens);\n\n  payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);\n\n\n\n  profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n\n\n\n  emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n\n\n\n  return true;\n",
          "message": "Reentrancy in GSPIClub.transfer (gspi_club.sol#217-242):\n\tExternal calls:\n\t- withdraw() (gspi_club.sol#222)\n\tState variables written after the call(s):\n\t- tokenSupply_ (gspi_club.sol#229)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": " uint256 internal entryFee_ = 2;\n",
          "message": "GSPIClub.entryFee_ should be constant (gspi_club.sol#123)\nGSPIClub.exitFee_ should be constant (gspi_club.sol#125)\nGSPIClub.referralFee_ should be constant (gspi_club.sol#126)\nGSPIClub.stakingRequirement should be constant (gspi_club.sol#134)\nGSPIClub.transferFee_ should be constant (gspi_club.sol#124)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 68,
          "vulnerability_code": " function transferOwnership(address newOwner) public onlyOwner {\n\n  require(newOwner != address(0));\n\n  emit OwnershipTransferred(owner, newOwner);\n\n  owner = newOwner;\n",
          "message": "Ownable.transferOwnership (gspi_club.sol#64-68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 153,
          "vulnerability_code": " function distribute(uint256 _amount) public returns(uint256) {\n\n  require(_amount > 0, \"must be a positive value\");\n\n  checkAndTransferSTAT(_amount);\n\n  totalDonation += _amount;\n\n  profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);\n\n  emit onDistribute(msg.sender, _amount);\n",
          "message": "GSPIClub.distribute (gspi_club.sol#147-153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 158,
          "vulnerability_code": " function buy(uint256 _amount, address _referredBy) public returns(uint256) {\n\n  checkAndTransferSTAT(_amount);\n\n  return purchaseTokens(_referredBy, msg.sender, _amount);\n",
          "message": "GSPIClub.buy (gspi_club.sol#155-158) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": 163,
          "vulnerability_code": " function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {\n\n  checkAndTransferSTAT(_amount);\n\n  return purchaseTokens(_referredBy, _customerAddress, _amount);\n",
          "message": "GSPIClub.buyFor (gspi_club.sol#160-163) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 167,
          "vulnerability_code": " function() payable public {\n\n  revert();\n",
          "message": "GSPIClub.fallback (gspi_club.sol#165-167) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": 177,
          "vulnerability_code": " function reinvest() onlyDivis public {\n\n  address _customerAddress = msg.sender;\n\n  uint256 _dividends = myDividends(false);\n\n  payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\n\n  _dividends += referralBalance_[_customerAddress];\n\n  referralBalance_[_customerAddress] = 0;\n\n  uint256 _tokens = purchaseTokens(0x0, _customerAddress, _dividends);\n\n  emit onReinvestment(_customerAddress, _dividends, _tokens);\n",
          "message": "GSPIClub.reinvest (gspi_club.sol#169-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": 246,
          "vulnerability_code": " function setName(string _name) onlyOwner public {\n\n  name = _name;\n",
          "message": "GSPIClub.setName (gspi_club.sol#244-246) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 250,
          "vulnerability_code": " function setSymbol(string _symbol) onlyOwner public {\n\n  symbol = _symbol;\n",
          "message": "GSPIClub.setSymbol (gspi_club.sol#248-250) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 299,
          "vulnerability_code": " function calculateTokensReceived(uint256 _powerToSpend) public view returns(uint256) {\n\n  uint256 _dividends = SafeMath.div(SafeMath.mul(_powerToSpend, entryFee_), 100);\n\n  uint256 _amountOfTokens = SafeMath.sub(_powerToSpend, _dividends);\n\n\n\n  return _amountOfTokens;\n",
          "message": "GSPIClub.calculateTokensReceived (gspi_club.sol#294-299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": 307,
          "vulnerability_code": " function calculatePowerReceived(uint256 _tokensToSell) public view returns(uint256) {\n\n  require(_tokensToSell <= tokenSupply_);\n\n  uint256 _dividends = SafeMath.div(SafeMath.mul(_tokensToSell, exitFee_), 100);\n\n  uint256 _taxedSTAT = SafeMath.sub(_tokensToSell, _dividends);\n\n\n\n  return _taxedSTAT;\n",
          "message": "GSPIClub.calculatePowerReceived (gspi_club.sol#301-307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": 370,
          "vulnerability_code": " function multiData()\n\n public\n\n view\n\n returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n\n  return (\n\n   totalPowerBalance(),\n\n   totalSupply(),\n\n   balanceOf(msg.sender),\n\n   erc20.balanceOf(msg.sender),\n\n   dividendsOf(msg.sender),\n\n   buyPrice(),\n\n   sellPrice()\n\n\n\n  );\n",
          "message": "GSPIClub.multiData (gspi_club.sol#356-370) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^ 0.4.26;\n",
          "message": "Detected issues with version pragma in gspi_club.sol:\n\t- pragma solidity^0.4.26 (gspi_club.sol#15): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": 86,
          "vulnerability_code": " event onDistribute(\n\n  address indexed customerAddress,\n\n  uint256 price\n",
          "message": "Event 'GSPIClub.onDistribute' (gspi_club.sol#83-86) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 94,
          "vulnerability_code": " event onTokenPurchase(\n\n  address indexed customerAddress,\n\n  uint256 incomingSTAT,\n\n  uint256 tokensMinted,\n\n  address indexed referredBy,\n\n  uint timestamp\n",
          "message": "Event 'GSPIClub.onTokenPurchase' (gspi_club.sol#88-94) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": 101,
          "vulnerability_code": " event onTokenSell(\n\n  address indexed customerAddress,\n\n  uint256 tokensBurned,\n\n  uint256 statEarned,\n\n  uint timestamp\n",
          "message": "Event 'GSPIClub.onTokenSell' (gspi_club.sol#96-101) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 107,
          "vulnerability_code": " event onReinvestment(\n\n  address indexed customerAddress,\n\n  uint256 statReinvested,\n\n  uint256 tokensMinted\n",
          "message": "Event 'GSPIClub.onReinvestment' (gspi_club.sol#103-107) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": 112,
          "vulnerability_code": " event onWithdraw(\n\n  address indexed customerAddress,\n\n  uint256 statWithdrawn\n",
          "message": "Event 'GSPIClub.onWithdraw' (gspi_club.sol#109-112) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": " function checkAndTransferSTAT(uint256 _amount) private {\n",
          "message": "Parameter '_amount' of GSPIClub.checkAndTransferSTAT (gspi_club.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": " function distribute(uint256 _amount) public returns(uint256) {\n",
          "message": "Parameter '_amount' of GSPIClub.distribute (gspi_club.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": " function buy(uint256 _amount, address _referredBy) public returns(uint256) {\n",
          "message": "Parameter '_amount' of GSPIClub.buy (gspi_club.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": " function buy(uint256 _amount, address _referredBy) public returns(uint256) {\n",
          "message": "Parameter '_referredBy' of GSPIClub.buy (gspi_club.sol#155) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": " function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {\n",
          "message": "Parameter '_amount' of GSPIClub.buyFor (gspi_club.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": " function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {\n",
          "message": "Parameter '_customerAddress' of GSPIClub.buyFor (gspi_club.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": " function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {\n",
          "message": "Parameter '_referredBy' of GSPIClub.buyFor (gspi_club.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": " function sell(uint256 _amountOfTokens) onlyTokenHolders public {\n",
          "message": "Parameter '_amountOfTokens' of GSPIClub.sell (gspi_club.sol#196) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": " function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {\n",
          "message": "Parameter '_toAddress' of GSPIClub.transfer (gspi_club.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": " function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {\n",
          "message": "Parameter '_amountOfTokens' of GSPIClub.transfer (gspi_club.sol#217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": " function setName(string _name) onlyOwner public {\n",
          "message": "Parameter '_name' of GSPIClub.setName (gspi_club.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": " function setSymbol(string _symbol) onlyOwner public {\n",
          "message": "Parameter '_symbol' of GSPIClub.setSymbol (gspi_club.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": " function myDividends(bool _includeReferralBonus) public view returns(uint256) {\n",
          "message": "Parameter '_includeReferralBonus' of GSPIClub.myDividends (gspi_club.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": " function balanceOf(address _customerAddress) public view returns(uint256) {\n",
          "message": "Parameter '_customerAddress' of GSPIClub.balanceOf (gspi_club.sol#270) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": " function dividendsOf(address _customerAddress) public view returns(uint256) {\n",
          "message": "Parameter '_customerAddress' of GSPIClub.dividendsOf (gspi_club.sol#274) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": " function calculateTokensReceived(uint256 _powerToSpend) public view returns(uint256) {\n",
          "message": "Parameter '_powerToSpend' of GSPIClub.calculateTokensReceived (gspi_club.sol#294) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": " function calculatePowerReceived(uint256 _tokensToSell) public view returns(uint256) {\n",
          "message": "Parameter '_tokensToSell' of GSPIClub.calculatePowerReceived (gspi_club.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": " function purchaseTokens(address _referredBy, address _customerAddress, uint256 _incomingSTAT) internal returns(uint256) {\n",
          "message": "Parameter '_referredBy' of GSPIClub.purchaseTokens (gspi_club.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": " function purchaseTokens(address _referredBy, address _customerAddress, uint256 _incomingSTAT) internal returns(uint256) {\n",
          "message": "Parameter '_customerAddress' of GSPIClub.purchaseTokens (gspi_club.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": " function purchaseTokens(address _referredBy, address _customerAddress, uint256 _incomingSTAT) internal returns(uint256) {\n",
          "message": "Parameter '_incomingSTAT' of GSPIClub.purchaseTokens (gspi_club.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": " uint256 constant internal magnitude = 2 ** 64;\n",
          "message": "Constant 'GSPIClub.magnitude' (gspi_club.sol#127) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "  erc20 = TOKEN(address(0xB42e1c3902b85b410334f5fff79cDc51fBeE6950));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 _tokens = purchaseTokens(0x0, _customerAddress, _dividends);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "   _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": " function distribute(uint256 _amount) public returns(uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": " function setName(string _name) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": " function setSymbol(string _symbol) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^ 0.4.26;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": " function() payable public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": " function() payable public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": " function setName(string _name) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": " function setSymbol(string _symbol) onlyOwner public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": " TOKEN erc20;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "  invested_[msg.sender] += _incomingSTAT;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": " string public name = \"GSPI Club\";\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Traceback (most recent call last):\n  File \"/usr/local/lib/python3"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "  totalDonation += _amount;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "  payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "   totalHolder++;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "  invested_[msg.sender] += _incomingSTAT;\n",
          "message": null
        }
      ]
    }
  }
}