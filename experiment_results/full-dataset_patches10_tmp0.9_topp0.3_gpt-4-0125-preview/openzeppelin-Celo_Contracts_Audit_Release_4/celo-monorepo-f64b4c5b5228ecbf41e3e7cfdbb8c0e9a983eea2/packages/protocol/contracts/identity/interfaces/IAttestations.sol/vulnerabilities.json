{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_44"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": "Detected issues with version pragma in IAttestations.sol:\n\t- pragma solidity^0.5.13 (IAttestations.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function request(bytes32, uint256, address) external;\n",
          "message": "Parameter '' of IAttestations.request (IAttestations.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function request(bytes32, uint256, address) external;\n",
          "message": "Parameter '_scope_0' of IAttestations.request (IAttestations.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function request(bytes32, uint256, address) external;\n",
          "message": "Parameter '_scope_1' of IAttestations.request (IAttestations.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function selectIssuers(bytes32) external;\n",
          "message": "Parameter '' of IAttestations.selectIssuers (IAttestations.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revoke(bytes32, uint256) external;\n",
          "message": "Parameter '' of IAttestations.revoke (IAttestations.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revoke(bytes32, uint256) external;\n",
          "message": "Parameter '_scope_0' of IAttestations.revoke (IAttestations.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address) external;\n",
          "message": "Parameter '' of IAttestations.withdraw (IAttestations.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
          "message": "Parameter '' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
          "message": "Parameter '_scope_0' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
          "message": "Parameter '_scope_1' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
          "message": "Parameter '_scope_2' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
          "message": "Parameter '_scope_3' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\n",
          "message": "Parameter '' of IAttestations.getUnselectedRequest (IAttestations.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\n",
          "message": "Parameter '_scope_0' of IAttestations.getUnselectedRequest (IAttestations.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\n",
          "message": "Parameter '' of IAttestations.getAttestationIssuers (IAttestations.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\n",
          "message": "Parameter '_scope_0' of IAttestations.getAttestationIssuers (IAttestations.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\n",
          "message": "Parameter '' of IAttestations.getAttestationStats (IAttestations.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\n",
          "message": "Parameter '_scope_0' of IAttestations.getAttestationStats (IAttestations.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function batchGetAttestationStats(bytes32[] calldata)\n",
          "message": "Parameter '' of IAttestations.batchGetAttestationStats (IAttestations.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationState(bytes32, address, address)\n",
          "message": "Parameter '' of IAttestations.getAttestationState (IAttestations.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationState(bytes32, address, address)\n",
          "message": "Parameter '_scope_0' of IAttestations.getAttestationState (IAttestations.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationState(bytes32, address, address)\n",
          "message": "Parameter '_scope_1' of IAttestations.getAttestationState (IAttestations.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCompletableAttestations(bytes32, address)\n",
          "message": "Parameter '' of IAttestations.getCompletableAttestations (IAttestations.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCompletableAttestations(bytes32, address)\n",
          "message": "Parameter '_scope_0' of IAttestations.getCompletableAttestations (IAttestations.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationRequestFee(address) external view returns (uint256);\n",
          "message": "Parameter '' of IAttestations.getAttestationRequestFee (IAttestations.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
          "message": "Parameter '' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
          "message": "Parameter '_scope_0' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
          "message": "Parameter '_scope_1' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
          "message": "Parameter '_scope_2' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
          "message": "Parameter '_scope_3' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\n",
          "message": "Parameter '' of IAttestations.lookupAccountsForIdentifier (IAttestations.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function requireNAttestationsRequested(bytes32, address, uint32) external view;\n",
          "message": "Parameter '' of IAttestations.requireNAttestationsRequested (IAttestations.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function requireNAttestationsRequested(bytes32, address, uint32) external view;\n",
          "message": "Parameter '_scope_0' of IAttestations.requireNAttestationsRequested (IAttestations.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function requireNAttestationsRequested(bytes32, address, uint32) external view;\n",
          "message": "Parameter '_scope_1' of IAttestations.requireNAttestationsRequested (IAttestations.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAttestationRequestFee(address, uint256) external;\n",
          "message": "Parameter '' of IAttestations.setAttestationRequestFee (IAttestations.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAttestationRequestFee(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IAttestations.setAttestationRequestFee (IAttestations.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAttestationExpiryBlocks(uint256) external;\n",
          "message": "Parameter '' of IAttestations.setAttestationExpiryBlocks (IAttestations.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setSelectIssuersWaitBlocks(uint256) external;\n",
          "message": "Parameter '' of IAttestations.setSelectIssuersWaitBlocks (IAttestations.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMaxAttestations(uint256) external;\n",
          "message": "Parameter '' of IAttestations.setMaxAttestations (IAttestations.sol#42) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint8, uint32, address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}