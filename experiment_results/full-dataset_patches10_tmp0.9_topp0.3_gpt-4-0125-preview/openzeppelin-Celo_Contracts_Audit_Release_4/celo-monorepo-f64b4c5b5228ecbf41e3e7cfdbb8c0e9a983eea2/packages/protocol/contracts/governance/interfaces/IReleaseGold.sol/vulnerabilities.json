{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_60"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 60,
          "vulnerability_code": "interface IReleaseGold {\n\n  function transfer(address, uint256) external;\n\n  function unlockGold(uint256) external;\n\n  function withdrawLockedGold(uint256) external;\n\n  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n\n  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n\n  function authorizeValidatorSignerWithPublicKey(\n\n    address payable,\n\n    uint8,\n\n    bytes32,\n\n    bytes32,\n\n    bytes calldata\n\n  ) external;\n\n  function authorizeValidatorSignerWithKeys(\n\n    address payable,\n\n    uint8,\n\n    bytes32,\n\n    bytes32,\n\n    bytes calldata,\n\n    bytes calldata,\n\n    bytes calldata\n\n  ) external;\n\n  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n\n  function revokeActive(address, uint256, address, address, uint256) external;\n\n  function revokePending(address, uint256, address, address, uint256) external;\n\n\n\n  // view functions\n\n  function getTotalBalance() external view returns (uint256);\n\n  function getRemainingTotalBalance() external view returns (uint256);\n\n  function getRemainingUnlockedBalance() external view returns (uint256);\n\n  function getRemainingLockedBalance() external view returns (uint256);\n\n  function getCurrentReleasedTotalAmount() external view returns (uint256);\n\n  function isRevoked() external view returns (bool);\n\n\n\n  // only beneficiary\n\n  function setCanExpire(bool) external;\n\n  function withdraw(uint256) external;\n\n  function lockGold(uint256) external;\n\n  function relockGold(uint256, uint256) external;\n\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n\n  function createAccount() external;\n\n  function setAccountName(string calldata) external;\n\n  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n\n  function setAccountDataEncryptionKey(bytes calldata) external;\n\n  function setAccountMetadataURL(string calldata) external;\n\n\n\n  // only owner\n\n  function setBeneficiary(address payable) external;\n\n\n\n  // only release owner\n\n  function setLiquidityProvision() external;\n\n  function setMaxDistribution(uint256) external;\n\n  function refundAndFinalize() external;\n\n  function revoke() external;\n\n  function expire() external;\n",
          "message": "IReleaseGold (IReleaseGold.sol#5-60) has incorrect ERC20 function interface(s):\n\t-transfer (IReleaseGold.sol#6)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": "Detected issues with version pragma in IReleaseGold.sol:\n\t- pragma solidity^0.5.13 (IReleaseGold.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.transfer (IReleaseGold.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.transfer (IReleaseGold.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unlockGold(uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.unlockGold (IReleaseGold.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdrawLockedGold(uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.withdrawLockedGold (IReleaseGold.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable,\n",
          "message": "Parameter '' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8,\n",
          "message": "Parameter '_scope_0' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '_scope_1' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '_scope_2' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata\n",
          "message": "Parameter '_scope_3' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable,\n",
          "message": "Parameter '' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8,\n",
          "message": "Parameter '_scope_0' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '_scope_1' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '_scope_2' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata,\n",
          "message": "Parameter '_scope_3' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata,\n",
          "message": "Parameter '_scope_4' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata\n",
          "message": "Parameter '_scope_5' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_3' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
          "message": "Parameter '_scope_3' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCanExpire(bool) external;\n",
          "message": "Parameter '' of IReleaseGold.setCanExpire (IReleaseGold.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.withdraw (IReleaseGold.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function lockGold(uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.lockGold (IReleaseGold.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function relockGold(uint256, uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.relockGold (IReleaseGold.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function relockGold(uint256, uint256) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.relockGold (IReleaseGold.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_3' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_4' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountName(string calldata) external;\n",
          "message": "Parameter '' of IReleaseGold.setAccountName (IReleaseGold.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountDataEncryptionKey(bytes calldata) external;\n",
          "message": "Parameter '' of IReleaseGold.setAccountDataEncryptionKey (IReleaseGold.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountMetadataURL(string calldata) external;\n",
          "message": "Parameter '' of IReleaseGold.setAccountMetadataURL (IReleaseGold.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBeneficiary(address payable) external;\n",
          "message": "Parameter '' of IReleaseGold.setBeneficiary (IReleaseGold.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMaxDistribution(uint256) external;\n",
          "message": "Parameter '' of IReleaseGold.setMaxDistribution (IReleaseGold.sol#56) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}