{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "basic-arithmetic-underflow",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    this.setActiveVotes(this.getActiveVotes() - value);\n",
          "message": "Possible arithmetic underflow"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_28"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": "Detected issues with version pragma in MockElection.sol:\n\t- pragma solidity^0.5.13 (MockElection.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function markGroupEligible(address account, address, address) external {\n",
          "message": "Parameter '' of MockElection.markGroupEligible (MockElection.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function markGroupEligible(address account, address, address) external {\n",
          "message": "Parameter '_scope_0' of MockElection.markGroupEligible (MockElection.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTotalVotesByAccount(address) external view returns (uint256) {\n",
          "message": "Parameter '' of MockElection.getTotalVotesByAccount (MockElection.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setElectedValidators(address[] calldata _electedValidators) external {\n",
          "message": "Parameter '_electedValidators' of MockElection.setElectedValidators (MockElection.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
          "message": "Parameter '' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
          "message": "Parameter '_scope_0' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
          "message": "Parameter '_scope_1' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
          "message": "Parameter '_scope_2' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function activate(address) external returns (bool) {\n",
          "message": "Parameter '' of MockElection.activate (MockElection.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_0' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_1' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_2' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_0' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_1' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_2' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_3' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_0' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_1' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_2' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
          "message": "Parameter '_scope_3' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '' of MockElection.forceDecrementVotes (MockElection.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata,\n",
          "message": "Parameter '_scope_0' of MockElection.forceDecrementVotes (MockElection.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata,\n",
          "message": "Parameter '_scope_1' of MockElection.forceDecrementVotes (MockElection.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata\n",
          "message": "Parameter '_scope_2' of MockElection.forceDecrementVotes (MockElection.sol#76) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 active;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 total;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address[] public electedValidators;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    this.setActiveVotes(this.getActiveVotes() - value);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}