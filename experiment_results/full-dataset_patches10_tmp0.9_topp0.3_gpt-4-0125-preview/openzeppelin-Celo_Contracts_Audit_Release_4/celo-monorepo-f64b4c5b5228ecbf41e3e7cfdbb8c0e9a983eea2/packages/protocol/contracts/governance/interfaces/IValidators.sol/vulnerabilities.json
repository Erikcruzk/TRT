{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_61"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": "Detected issues with version pragma in IValidators.sol:\n\t- pragma solidity^0.5.13 (IValidators.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '' of IValidators.registerValidator (IValidators.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '_scope_0' of IValidators.registerValidator (IValidators.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '_scope_1' of IValidators.registerValidator (IValidators.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deregisterValidator(uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.deregisterValidator (IValidators.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function affiliate(address) external returns (bool);\n",
          "message": "Parameter '' of IValidators.affiliate (IValidators.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\n",
          "message": "Parameter '' of IValidators.updateBlsPublicKey (IValidators.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.updateBlsPublicKey (IValidators.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerValidatorGroup(uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.registerValidatorGroup (IValidators.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deregisterValidatorGroup(uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.deregisterValidatorGroup (IValidators.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addMember(address) external returns (bool);\n",
          "message": "Parameter '' of IValidators.addMember (IValidators.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addFirstMember(address, address, address) external returns (bool);\n",
          "message": "Parameter '' of IValidators.addFirstMember (IValidators.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addFirstMember(address, address, address) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.addFirstMember (IValidators.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addFirstMember(address, address, address) external returns (bool);\n",
          "message": "Parameter '_scope_1' of IValidators.addFirstMember (IValidators.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeMember(address) external returns (bool);\n",
          "message": "Parameter '' of IValidators.removeMember (IValidators.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reorderMember(address, address, address) external returns (bool);\n",
          "message": "Parameter '' of IValidators.reorderMember (IValidators.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reorderMember(address, address, address) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.reorderMember (IValidators.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function reorderMember(address, address, address) external returns (bool);\n",
          "message": "Parameter '_scope_1' of IValidators.reorderMember (IValidators.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setNextCommissionUpdate(uint256) external;\n",
          "message": "Parameter '' of IValidators.setNextCommissionUpdate (IValidators.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setCommissionUpdateDelay(uint256) external;\n",
          "message": "Parameter '' of IValidators.setCommissionUpdateDelay (IValidators.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMaxGroupSize(uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.setMaxGroupSize (IValidators.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMembershipHistoryLength(uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.setMembershipHistoryLength (IValidators.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.setValidatorScoreParameters (IValidators.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.setValidatorScoreParameters (IValidators.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.setGroupLockedGoldRequirements (IValidators.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.setGroupLockedGoldRequirements (IValidators.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
          "message": "Parameter '' of IValidators.setValidatorLockedGoldRequirements (IValidators.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.setValidatorLockedGoldRequirements (IValidators.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setSlashingMultiplierResetPeriod(uint256) external;\n",
          "message": "Parameter '' of IValidators.setSlashingMultiplierResetPeriod (IValidators.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMembershipHistory(address)\n",
          "message": "Parameter '' of IValidators.getMembershipHistory (IValidators.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function calculateEpochScore(uint256) external view returns (uint256);\n",
          "message": "Parameter '' of IValidators.calculateEpochScore (IValidators.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\n",
          "message": "Parameter '' of IValidators.calculateGroupEpochScore (IValidators.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAccountLockedGoldRequirement(address) external view returns (uint256);\n",
          "message": "Parameter '' of IValidators.getAccountLockedGoldRequirement (IValidators.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\n",
          "message": "Parameter '' of IValidators.meetsAccountLockedGoldRequirements (IValidators.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\n",
          "message": "Parameter '' of IValidators.getValidatorBlsPublicKeyFromSigner (IValidators.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getValidatorGroup(address)\n",
          "message": "Parameter '' of IValidators.getValidatorGroup (IValidators.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getGroupNumMembers(address) external view returns (uint256);\n",
          "message": "Parameter '' of IValidators.getGroupNumMembers (IValidators.sol#53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\n",
          "message": "Parameter '' of IValidators.getTopGroupValidators (IValidators.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\n",
          "message": "Parameter '_scope_0' of IValidators.getTopGroupValidators (IValidators.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\n",
          "message": "Parameter '' of IValidators.groupMembershipInEpoch (IValidators.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\n",
          "message": "Parameter '_scope_0' of IValidators.groupMembershipInEpoch (IValidators.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\n",
          "message": "Parameter '_scope_1' of IValidators.groupMembershipInEpoch (IValidators.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\n",
          "message": "Parameter '' of IValidators.updateEcdsaPublicKey (IValidators.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\n",
          "message": "Parameter '_scope_0' of IValidators.updateEcdsaPublicKey (IValidators.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\n",
          "message": "Parameter '_scope_1' of IValidators.updateEcdsaPublicKey (IValidators.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '_scope_0' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '_scope_1' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '_scope_2' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
          "message": "Parameter '_scope_3' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidatorGroup(address) external view returns (bool);\n",
          "message": "Parameter '' of IValidators.isValidatorGroup (IValidators.sol#72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isValidator(address) external view returns (bool);\n",
          "message": "Parameter '' of IValidators.isValidator (IValidators.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\n",
          "message": "Parameter '' of IValidators.getValidatorGroupSlashingMultiplier (IValidators.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMembershipInLastEpoch(address) external view returns (address);\n",
          "message": "Parameter '' of IValidators.getMembershipInLastEpoch (IValidators.sol#75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMembershipInLastEpochFromSigner(address) external view returns (address);\n",
          "message": "Parameter '' of IValidators.getMembershipInLastEpochFromSigner (IValidators.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateValidatorScoreFromSigner(address, uint256) external;\n",
          "message": "Parameter '' of IValidators.updateValidatorScoreFromSigner (IValidators.sol#79) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updateValidatorScoreFromSigner(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IValidators.updateValidatorScoreFromSigner (IValidators.sol#79) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\n",
          "message": "Parameter '' of IValidators.distributeEpochPaymentsFromSigner (IValidators.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\n",
          "message": "Parameter '_scope_0' of IValidators.distributeEpochPaymentsFromSigner (IValidators.sol#80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function forceDeaffiliateIfValidator(address) external;\n",
          "message": "Parameter '' of IValidators.forceDeaffiliateIfValidator (IValidators.sol#83) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function halveSlashingMultiplier(address) external;\n",
          "message": "Parameter '' of IValidators.halveSlashingMultiplier (IValidators.sol#84) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getValidatorScoreParameters() external view returns (uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256[] memory, address[] memory, uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (bytes memory, bytes memory, address, uint256, address);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}