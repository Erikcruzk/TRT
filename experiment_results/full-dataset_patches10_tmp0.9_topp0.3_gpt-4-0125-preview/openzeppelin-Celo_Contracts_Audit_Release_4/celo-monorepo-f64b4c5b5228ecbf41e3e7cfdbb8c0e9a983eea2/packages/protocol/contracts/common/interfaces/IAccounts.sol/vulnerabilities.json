{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_54"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": "Detected issues with version pragma in IAccounts.sol:\n\t- pragma solidity^0.5.13 (IAccounts.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isAccount(address) external view returns (bool);\n",
          "message": "Parameter '' of IAccounts.isAccount (IAccounts.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function voteSignerToAccount(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.voteSignerToAccount (IAccounts.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function validatorSignerToAccount(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.validatorSignerToAccount (IAccounts.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function attestationSignerToAccount(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.attestationSignerToAccount (IAccounts.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function signerToAccount(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.signerToAccount (IAccounts.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAttestationSigner(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.getAttestationSigner (IAccounts.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getValidatorSigner(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.getValidatorSigner (IAccounts.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getVoteSigner(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.getVoteSigner (IAccounts.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasAuthorizedVoteSigner(address) external view returns (bool);\n",
          "message": "Parameter '' of IAccounts.hasAuthorizedVoteSigner (IAccounts.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasAuthorizedValidatorSigner(address) external view returns (bool);\n",
          "message": "Parameter '' of IAccounts.hasAuthorizedValidatorSigner (IAccounts.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hasAuthorizedAttestationSigner(address) external view returns (bool);\n",
          "message": "Parameter '' of IAccounts.hasAuthorizedAttestationSigner (IAccounts.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccountDataEncryptionKey(bytes calldata) external;\n",
          "message": "Parameter '' of IAccounts.setAccountDataEncryptionKey (IAccounts.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMetadataURL(string calldata) external;\n",
          "message": "Parameter '' of IAccounts.setMetadataURL (IAccounts.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setName(string calldata) external;\n",
          "message": "Parameter '' of IAccounts.setName (IAccounts.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_3' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_4' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getDataEncryptionKey(address) external view returns (bytes memory);\n",
          "message": "Parameter '' of IAccounts.getDataEncryptionKey (IAccounts.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getWalletAddress(address) external view returns (address);\n",
          "message": "Parameter '' of IAccounts.getWalletAddress (IAccounts.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMetadataURL(address) external view returns (string memory);\n",
          "message": "Parameter '' of IAccounts.getMetadataURL (IAccounts.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function batchGetMetadataURL(address[] calldata)\n",
          "message": "Parameter '' of IAccounts.batchGetMetadataURL (IAccounts.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getName(address) external view returns (string memory);\n",
          "message": "Parameter '' of IAccounts.getName (IAccounts.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
          "message": "Parameter '' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
          "message": "Parameter '_scope_0' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
          "message": "Parameter '_scope_1' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
          "message": "Parameter '_scope_2' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
          "message": "Parameter '_scope_3' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8,\n",
          "message": "Parameter '_scope_0' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '_scope_1' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '_scope_2' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata,\n",
          "message": "Parameter '_scope_3' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata,\n",
          "message": "Parameter '_scope_4' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata\n",
          "message": "Parameter '_scope_5' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_0' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_1' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
          "message": "Parameter '_scope_2' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.13;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (uint256[] memory, bytes memory);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}