{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract FeeCollector is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelistable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 feeBalance = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(startPrice > 0 && priceFloor < startPrice && priceFloor >= 0 && duration > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": 399,
          "vulnerability_code": "contract ERC721Basic {\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n\n\n  function approve(address _to, uint256 _tokenId) public;\n\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n  function safeTransferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _tokenId,\n\n    bytes _data\n\n  )\n\n    public;\n",
          "message": "ERC721Basic (DescendingPriceERC721Auction.sol#375-399) has incorrect ERC20 function interface(s):\n\t-approve (DescendingPriceERC721Auction.sol#384)\n\t-transferFrom (DescendingPriceERC721Auction.sol#390)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 43,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
          "message": "Ownable.transferOwnership (DescendingPriceERC721Auction.sol#39-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 82,
          "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    emit Pause();\n",
          "message": "Pausable.pause (DescendingPriceERC721Auction.sol#79-82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 90,
          "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    emit Unpause();\n",
          "message": "Pausable.unpause (DescendingPriceERC721Auction.sol#87-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 270,
          "vulnerability_code": "  function cancel(uint256 auctionId) whenNotPaused public onlySeller(auctionId) {\n\n    transferWinnings(auctionIdToSeller[auctionId], auctionId);\n\n    auctionIdToAcceptingBids[auctionId] = false;\n",
          "message": "DescendingPriceAuction.cancel (DescendingPriceERC721Auction.sol#267-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 349,
          "vulnerability_code": "  function addToWhitelist(address _address) public onlyOwner returns (bool) {\n\n    if (whitelist[_address]) {\n\n      // Already in the mapping\n\n      return false;\n\n    }\n\n\n\n    whitelist[_address] = true;\n\n    emit AddToWhitelist(_address);\n\n    return true;\n",
          "message": "Whitelistable.addToWhitelist (DescendingPriceERC721Auction.sol#340-349) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 366,
          "vulnerability_code": "  function removeFromWhitelist(address _address) public onlyOwner returns (bool) {\n\n    if (!whitelist[_address]) {\n\n      // Not currently in the mapping\n\n      return false;\n\n    }\n\n\n\n    whitelist[_address] = false;\n\n    emit RemoveFromWhitelist(_address);\n\n    return true;\n",
          "message": "Whitelistable.removeFromWhitelist (DescendingPriceERC721Auction.sol#357-366) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 _balance);\n",
          "message": "ERC721Basic.balanceOf (DescendingPriceERC721Auction.sol#380) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n",
          "message": "ERC721Basic.ownerOf (DescendingPriceERC721Auction.sol#381) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exists(uint256 _tokenId) public view returns (bool _exists);\n",
          "message": "ERC721Basic.exists (DescendingPriceERC721Auction.sol#382) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _to, uint256 _tokenId) public;\n",
          "message": "ERC721Basic.approve (DescendingPriceERC721Auction.sol#384) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getApproved(uint256 _tokenId) public view returns (address _operator);\n",
          "message": "ERC721Basic.getApproved (DescendingPriceERC721Auction.sol#385) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setApprovalForAll(address _operator, bool _approved) public;\n",
          "message": "ERC721Basic.setApprovalForAll (DescendingPriceERC721Auction.sol#387) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n",
          "message": "ERC721Basic.isApprovedForAll (DescendingPriceERC721Auction.sol#388) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n",
          "message": "ERC721Basic.transferFrom (DescendingPriceERC721Auction.sol#390) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n",
          "message": "ERC721Basic.safeTransferFrom (DescendingPriceERC721Auction.sol#391) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": 398,
          "vulnerability_code": "  function safeTransferFrom(\n\n    address _from,\n\n    address _to,\n\n    uint256 _tokenId,\n\n    bytes _data\n\n  )\n",
          "message": "ERC721Basic.safeTransferFrom (DescendingPriceERC721Auction.sol#392-398) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": 493,
          "vulnerability_code": "  function createAuction(\n\n    uint256 startPrice,\n\n    uint256 priceFloor,\n\n    uint256 duration,\n\n    address assetAddress,\n\n    uint256 assetId) whenNotPaused public payable returns (uint256)\n\n    {\n\n    uint256 auctionId = createEmptyAuction();\n\n    setAuctionPricing(startPrice, priceFloor, duration, auctionId);\n\n    setAuctionAsset(assetAddress, assetId, auctionId);\n\n    return auctionId;\n",
          "message": "DescendingPriceERC721Auction.createAuction (DescendingPriceERC721Auction.sol#482-493) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in DescendingPriceERC721Auction.sol:\n\t- pragma solidity^0.4.23 (DescendingPriceERC721Auction.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (DescendingPriceERC721Auction.sol#23-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inWhitelist(address _address) public view returns (bool) {\n",
          "message": "Parameter '_address' of Whitelistable.inWhitelist (DescendingPriceERC721Auction.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addToWhitelist(address _address) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_address' of Whitelistable.addToWhitelist (DescendingPriceERC721Auction.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeFromWhitelist(address _address) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_address' of Whitelistable.removeFromWhitelist (DescendingPriceERC721Auction.sol#357) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 priceDecrease = numberOfBlocksElapsed.mul(priceDifference.div(blockDifference));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DescendingPriceERC721Auction is DescendingPriceAuction, ERC721Auction {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes _data\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 feeBalance = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => mapping(uint256 => uint256)) assetContractToAssetIdToAuctionId;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (block.number >= priceFloorBlock) {\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 120)",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assert(c >= a);\n",
          "message": "A control flow decision is made based on The block.number environment variable.\nThe block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-120"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "      msg.sender.transfer(overbidAmount);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    auctionIdToSeller[auctionId].transfer(currentPrice);\n",
          "message": null
        }
      ]
    }
  }
}