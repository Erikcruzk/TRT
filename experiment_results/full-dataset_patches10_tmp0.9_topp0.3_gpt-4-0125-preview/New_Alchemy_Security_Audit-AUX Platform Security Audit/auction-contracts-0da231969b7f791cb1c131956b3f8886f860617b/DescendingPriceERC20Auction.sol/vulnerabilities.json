{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract FeeCollector is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelistable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 feeBalance = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(startPrice > 0 && priceFloor < startPrice && priceFloor >= 0 && duration > 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(tokenAmount > 0 && auctionId != 0);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": 430,
          "vulnerability_code": "  function transferWinnings(address recipient, uint256 auctionId) internal {\n\n    require(auctionId != 0);\n\n    require(auctionHasAssets(auctionId));\n\n    ERC20 erc20Contract = ERC20(auctionIdToERC20Address[auctionId]);\n\n    /*NOTE: Error should be thrown by transfer if unapproved, this require is unnecessary gas.\n\n    require(token.getApproved(kittyId) == address(this));*/\n\n    uint256 tokenAmount = auctionIdToAmount[auctionId];\n\n    auctionIdToAmount[auctionId] = 0;\n\n    erc20Contract.transfer(recipient, tokenAmount);\n",
          "message": "ERC20Auction.transferWinnings (DescendingPriceERC20Auction.sol#421-430) does not use the value returned by external calls:\n\t-erc20Contract.transfer(recipient,tokenAmount) (DescendingPriceERC20Auction.sol#429)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": 440,
          "vulnerability_code": "  function escrowERC20Tokens(address auctionSeller, address tokenAddress, uint256 tokenAmount) private {\n\n    ERC20 erc20Contract = ERC20(tokenAddress);\n\n    /*NOTE: Error should be thrown by transferFrom if unapproved, this require is unnecessary gas.\n\n    require(token.getApproved(kittyId) == address(this));*/\n\n    erc20Contract.transferFrom(auctionSeller, this, tokenAmount);\n",
          "message": "ERC20Auction.escrowERC20Tokens (DescendingPriceERC20Auction.sol#435-440) does not use the value returned by external calls:\n\t-erc20Contract.transferFrom(auctionSeller,this,tokenAmount) (DescendingPriceERC20Auction.sol#439)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 43,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n",
          "message": "Ownable.transferOwnership (DescendingPriceERC20Auction.sol#39-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": 82,
          "vulnerability_code": "  function pause() onlyOwner whenNotPaused public {\n\n    paused = true;\n\n    emit Pause();\n",
          "message": "Pausable.pause (DescendingPriceERC20Auction.sol#79-82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 90,
          "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    emit Unpause();\n",
          "message": "Pausable.unpause (DescendingPriceERC20Auction.sol#87-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 270,
          "vulnerability_code": "  function cancel(uint256 auctionId) whenNotPaused public onlySeller(auctionId) {\n\n    transferWinnings(auctionIdToSeller[auctionId], auctionId);\n\n    auctionIdToAcceptingBids[auctionId] = false;\n",
          "message": "DescendingPriceAuction.cancel (DescendingPriceERC20Auction.sol#267-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": 349,
          "vulnerability_code": "  function addToWhitelist(address _address) public onlyOwner returns (bool) {\n\n    if (whitelist[_address]) {\n\n      // Already in the mapping\n\n      return false;\n\n    }\n\n\n\n    whitelist[_address] = true;\n\n    emit AddToWhitelist(_address);\n\n    return true;\n",
          "message": "Whitelistable.addToWhitelist (DescendingPriceERC20Auction.sol#340-349) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 366,
          "vulnerability_code": "  function removeFromWhitelist(address _address) public onlyOwner returns (bool) {\n\n    if (!whitelist[_address]) {\n\n      // Not currently in the mapping\n\n      return false;\n\n    }\n\n\n\n    whitelist[_address] = false;\n\n    emit RemoveFromWhitelist(_address);\n\n    return true;\n",
          "message": "Whitelistable.removeFromWhitelist (DescendingPriceERC20Auction.sol#357-366) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (DescendingPriceERC20Auction.sol#377) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (DescendingPriceERC20Auction.sol#378) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (DescendingPriceERC20Auction.sol#379) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (DescendingPriceERC20Auction.sol#390) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
          "message": "ERC20.transferFrom (DescendingPriceERC20Auction.sol#391) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20.approve (DescendingPriceERC20Auction.sol#392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 483,
          "vulnerability_code": "  function createAuction(\n\n    uint256 startPrice,\n\n    uint256 priceFloor,\n\n    uint256 duration,\n\n    address tokenAddress,\n\n    uint256 tokenAmount) whenNotPaused public payable returns (uint256)\n\n  {\n\n    uint256 auctionId = createEmptyAuction();\n\n    setAuctionPricing(startPrice, priceFloor, duration, auctionId);\n\n    setAuctionAsset(tokenAddress, tokenAmount, auctionId);\n\n    return auctionId;\n",
          "message": "DescendingPriceERC20Auction.createAuction (DescendingPriceERC20Auction.sol#472-483) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": "Detected issues with version pragma in DescendingPriceERC20Auction.sol:\n\t- pragma solidity^0.4.23 (DescendingPriceERC20Auction.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n",
          "message": "Function 'Ownable.Ownable' (DescendingPriceERC20Auction.sol#23-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function inWhitelist(address _address) public view returns (bool) {\n",
          "message": "Parameter '_address' of Whitelistable.inWhitelist (DescendingPriceERC20Auction.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addToWhitelist(address _address) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_address' of Whitelistable.addToWhitelist (DescendingPriceERC20Auction.sol#340) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeFromWhitelist(address _address) public onlyOwner returns (bool) {\n",
          "message": "Parameter '_address' of Whitelistable.removeFromWhitelist (DescendingPriceERC20Auction.sol#357) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 priceDecrease = numberOfBlocksElapsed.mul(priceDifference.div(blockDifference));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DescendingPriceERC20Auction is DescendingPriceAuction, ERC20Auction {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.23;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 feeBalance = 0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "      msg.sender.transfer(overbidAmount);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    auctionIdToSeller[auctionId].transfer(currentPrice);\n",
          "message": null
        }
      ]
    }
  }
}