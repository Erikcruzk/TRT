{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory defaultOperators\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _name = name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _symbol = symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _defaultOperatorsArray = defaultOperators;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1093,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _initialSupply,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory _defaultOperators\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "    )\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1097,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC777(\"LYXeToken\", \"LYXe\", _defaultOperators)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1098,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _mint(msg.sender, msg.sender, _initialSupply, \"\", \"\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        manager = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        frozen = true;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _defaultOperators[_defaultOperatorsArray[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _defaultOperators[_defaultOperatorsArray[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 846,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(holder != address(0), \"ERC777: transfer from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"ERC777: mint to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 956,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(from != address(0), \"ERC777: send from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 957,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(to != address(0), \"ERC777: send to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 983,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(from != address(0), \"ERC777: burn from the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1016,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC777: approve to the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1073,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_amount <= balanceOf(_from), \"getUnlockedBalance: Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1176,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == manager, \"onlyManager: Only manager can call this method\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1188,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialized == true, \"Contract must be initialized.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialized == false, \"Contract is already initialized.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(frozen == false, \"requireNotFrozen: Contract must not be frozen\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(balance > 0 && locked > 0 && balance >= locked) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1136,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return balance.sub(locked);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(operator != msg.sender, \"ERC777: revoking self as operator\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 846,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOperatorFor(msg.sender, account), \"ERC777: caller is not an operator for holder\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(holder != address(0), \"ERC777: transfer from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 956,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(from != address(0), \"ERC777: send from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 983,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(from != address(0), \"ERC777: burn from the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1016,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"ERC777: approve to the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1073,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_amount <= balanceOf(_from), \"getUnlockedBalance: Insufficient funds\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1176,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == manager, \"onlyManager: Only manager can call this method\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(frozen == false, \"requireNotFrozen: Contract must not be frozen\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "erc777-reentrancy",
          "vulnerability_from_line": 1071,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n",
          "message": "ERC777 tokensReceived() reentrancy"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_60"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 480,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n        \n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (RicoToken.sol#467-480) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1142,
          "vulnerability_to_line": 1154,
          "vulnerability_code": "    function _burn(\n\n        address _operator,\n\n        address _from,\n\n        uint256 _amount,\n\n        bytes memory _data,\n\n        bytes memory _operatorData\n\n    )\n\n        internal\n\n        requireNotFrozen\n\n    {\n\n        require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n\n        ERC777._burn(_operator, _from, _amount, _data, _operatorData);\n",
          "message": "Reentrancy in RicoToken._burn (RicoToken.sol#1142-1154):\n\tExternal calls:\n\t- require(bool,string)(_amount <= getUnlockedBalance(_from),getUnlockedBalance: Insufficient funds) (RicoToken.sol#1152)\n\t- ERC777._burn(_operator,_from,_amount,_data,_operatorData) (RicoToken.sol#1153)\n\tState variables written after the call(s):\n\t- _balances (RicoToken.sol#1153)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": 1180,
          "vulnerability_code": "    function _move(\n\n        address _operator,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount,\n\n        bytes memory _userData,\n\n        bytes memory _operatorData\n\n    )\n\n        internal\n\n        requireNotFrozen\n\n        requireInitialized\n\n    {\n\n\n\n        if(_to == address(rICO)) {\n\n            // full balance can be sent back to rico\n\n            require(_amount <= balanceOf(_from), \"getUnlockedBalance: Insufficient funds\");\n\n        } else {\n\n            // for every other address limit to unlocked balance\n\n            require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n\n        }\n\n\n\n        ERC777._move(_operator, _from, _to, _amount, _userData, _operatorData);\n",
          "message": "Reentrancy in RicoToken._move (RicoToken.sol#1158-1180):\n\tExternal calls:\n\t- require(bool,string)(_amount <= getUnlockedBalance(_from),getUnlockedBalance: Insufficient funds) (RicoToken.sol#1176)\n\tState variables written after the call(s):\n\t- _balances (RicoToken.sol#1179)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n",
          "message": "IERC1820Registry.setInterfaceImplementer.interfaceHash (local variable @ RicoToken.sol#552) shadows:\n\t- IERC1820Registry.interfaceHash (function @ RicoToken.sol#570)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n",
          "message": "IERC1820Registry.getInterfaceImplementer.interfaceHash (local variable @ RicoToken.sol#563) shadows:\n\t- IERC1820Registry.interfaceHash (function @ RicoToken.sol#570)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory name,\n",
          "message": "ERC777.constructor.name (local variable @ RicoToken.sol#669) shadows:\n\t- ERC777.name (function @ RicoToken.sol#689-691)\n\t- IERC777.name (function @ RicoToken.sol#18)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "        string memory symbol,\n",
          "message": "ERC777.constructor.symbol (local variable @ RicoToken.sol#670) shadows:\n\t- ERC777.symbol (function @ RicoToken.sol#696-698)\n\t- IERC777.symbol (function @ RicoToken.sol#24)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory defaultOperators\n",
          "message": "ERC777.constructor.defaultOperators (local variable @ RicoToken.sol#671) shadows:\n\t- ERC777.defaultOperators (function @ RicoToken.sol#818-820)\n\t- IERC777.defaultOperators (function @ RicoToken.sol#121)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory _defaultOperators\n",
          "message": "RicoToken.constructor._defaultOperators (local variable @ RicoToken.sol#1095) shadows:\n\t- ERC777._defaultOperators (state variable @ RicoToken.sol#656)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": 993,
          "vulnerability_code": "    function _burn(\n\n        address operator,\n\n        address from,\n\n        uint256 amount,\n\n        bytes memory data,\n\n        bytes memory operatorData\n\n    )\n\n        internal\n\n    {\n\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n\n\n        // Update state variables\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        _balances[from] = _balances[from].sub(amount);\n\n\n\n        emit Burned(operator, from, amount, data, operatorData);\n\n        emit Transfer(from, address(0), amount);\n",
          "message": "Reentrancy in ERC777._burn (RicoToken.sol#974-993):\n\tExternal calls:\n\t- _callTokensToSend(operator,from,address(0),amount,data,operatorData) (RicoToken.sol#985)\n\tState variables written after the call(s):\n\t- _balances (RicoToken.sol#989)\n\t- _totalSupply (RicoToken.sol#988)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": 964,
          "vulnerability_code": "    function _send(\n\n        address operator,\n\n        address from,\n\n        address to,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData,\n\n        bool requireReceptionAck\n\n    )\n\n        private\n\n    {\n\n        require(from != address(0), \"ERC777: send from the zero address\");\n\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n",
          "message": "Reentrancy in ERC777._send (RicoToken.sol#945-964):\n\tExternal calls:\n\t- _callTokensToSend(operator,from,to,amount,userData,operatorData) (RicoToken.sol#959)\n\tState variables written after the call(s):\n\t- _balances (RicoToken.sol#961)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1093,
          "vulnerability_to_line": 1103,
          "vulnerability_code": "    constructor(\n\n        uint256 _initialSupply,\n\n        address[] memory _defaultOperators\n\n    )\n\n        ERC777(\"LYXeToken\", \"LYXe\", _defaultOperators)\n\n        public\n\n    {\n\n        _mint(msg.sender, msg.sender, _initialSupply, \"\", \"\");\n\n        manager = msg.sender;\n\n        frozen = true;\n",
          "message": "Reentrancy in RicoToken.constructor (RicoToken.sol#1093-1103):\n\tExternal calls:\n\t- _mint(msg.sender,msg.sender,_initialSupply,,) (RicoToken.sol#1100)\n\tState variables written after the call(s):\n\t- frozen (RicoToken.sol#1102)\n\t- manager (RicoToken.sol#1101)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 750,
          "vulnerability_to_line": 762,
          "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool) {\n\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n\n\n        address from = msg.sender;\n\n\n\n        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n\n\n\n        _move(from, from, recipient, amount, \"\", \"\");\n\n\n\n        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n\n\n\n        return true;\n",
          "message": "Reentrancy in ERC777.transfer (RicoToken.sol#750-762):\n\tExternal calls:\n\t- _callTokensToSend(from,from,recipient,amount,,) (RicoToken.sol#755)\n\tState variables written after the call(s):\n\t- _balances (RicoToken.sol#757)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": 895,
          "vulnerability_code": "    function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\n\n        require(recipient != address(0), \"ERC777: transfer to the zero address\");\n\n        require(holder != address(0), \"ERC777: transfer from the zero address\");\n\n\n\n        address spender = msg.sender;\n\n\n\n        _callTokensToSend(spender, holder, recipient, amount, \"\", \"\");\n\n\n\n        _move(spender, holder, recipient, amount, \"\", \"\");\n\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\n\n\n\n        _callTokensReceived(spender, holder, recipient, amount, \"\", \"\", false);\n\n\n\n        return true;\n",
          "message": "Reentrancy in ERC777.transferFrom (RicoToken.sol#881-895):\n\tExternal calls:\n\t- _callTokensToSend(spender,holder,recipient,amount,,) (RicoToken.sol#887)\n\tState variables written after the call(s):\n\t- _allowances (RicoToken.sol#890)\n\t- _balances (RicoToken.sol#889)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 480,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n        \n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (RicoToken.sol#467-480)\n\t- RicoToken.sol#478\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name() external view returns (string memory);\n",
          "message": "IERC777.name (RicoToken.sol#18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": 691,
          "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
          "message": "ERC777.name (RicoToken.sol#689-691) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function symbol() external view returns (string memory);\n",
          "message": "IERC777.symbol (RicoToken.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 696,
          "vulnerability_to_line": 698,
          "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
          "message": "ERC777.symbol (RicoToken.sol#696-698) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": 717,
          "vulnerability_code": "    function granularity() public view returns (uint256) {\n\n        return 1;\n",
          "message": "ERC777.granularity (RicoToken.sol#715-717) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function granularity() external view returns (uint256);\n",
          "message": "IERC777.granularity (RicoToken.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": 724,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
          "message": "ERC777.totalSupply (RicoToken.sol#722-724) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (RicoToken.sol#272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 818,
          "vulnerability_to_line": 820,
          "vulnerability_code": "    function defaultOperators() public view returns (address[] memory) {\n\n        return _defaultOperatorsArray;\n",
          "message": "ERC777.defaultOperators (RicoToken.sol#818-820) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function defaultOperators() external view returns (address[] memory);\n",
          "message": "IERC777.defaultOperators (RicoToken.sol#121) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": 859,
          "vulnerability_code": "    function allowance(address holder, address spender) public view returns (uint256) {\n\n        return _allowances[holder][spender];\n",
          "message": "ERC777.allowance (RicoToken.sol#857-859) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (RicoToken.sol#295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 706,
          "vulnerability_to_line": 708,
          "vulnerability_code": "    function decimals() public pure returns (uint8) {\n\n        return 18;\n",
          "message": "ERC777.decimals (RicoToken.sol#706-708) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": 1115,
          "vulnerability_code": "    function setup(address _rICO)\n\n        public\n\n        requireNotInitialized\n\n        onlyManager\n\n    {\n\n        rICO = ReversibleICO(_rICO);\n\n        frozen = false;\n\n        initialized = true;\n",
          "message": "RicoToken.setup (RicoToken.sol#1107-1115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1120,
          "vulnerability_to_line": 1122,
          "vulnerability_code": "    function changeManager(address _newManager) public onlyManager {\n\n        manager = _newManager;\n",
          "message": "RicoToken.changeManager (RicoToken.sol#1120-1122) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1124,
          "vulnerability_to_line": 1126,
          "vulnerability_code": "    function setFrozen(bool _status) public onlyManager {\n\n        frozen = _status;\n",
          "message": "RicoToken.setFrozen (RicoToken.sol#1124-1126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": 1130,
          "vulnerability_code": "    function getLockedBalance(address _owner) public view returns(uint) {\n\n        return rICO.getParticipantReservedTokens(_owner);\n",
          "message": "RicoToken.getLockedBalance (RicoToken.sol#1128-1130) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in RicoToken.sol:\n\t- pragma solidity^0.5.0 (RicoToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#192): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#227): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#262): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#341): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#451): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#493): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#605): it allows old versions\n\t- pragma solidity^0.5.0 (RicoToken.sol#1080): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": 933,
          "vulnerability_code": "    function _mint(\n\n        address operator,\n\n        address account,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData\n\n    )\n\n    internal\n\n    {\n\n        require(account != address(0), \"ERC777: mint to the zero address\");\n\n\n\n        // Update state variables\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n\n\n\n        emit Minted(operator, account, amount, userData, operatorData);\n\n        emit Transfer(address(0), account, amount);\n",
          "message": "Function 'ERC777._mint' (RicoToken.sol#914-933) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": 964,
          "vulnerability_code": "    function _send(\n\n        address operator,\n\n        address from,\n\n        address to,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData,\n\n        bool requireReceptionAck\n\n    )\n\n        private\n\n    {\n\n        require(from != address(0), \"ERC777: send from the zero address\");\n\n        require(to != address(0), \"ERC777: send to the zero address\");\n\n\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n",
          "message": "Function 'ERC777._send' (RicoToken.sol#945-964) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 974,
          "vulnerability_to_line": 993,
          "vulnerability_code": "    function _burn(\n\n        address operator,\n\n        address from,\n\n        uint256 amount,\n\n        bytes memory data,\n\n        bytes memory operatorData\n\n    )\n\n        internal\n\n    {\n\n        require(from != address(0), \"ERC777: burn from the zero address\");\n\n\n\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n\n\n\n        // Update state variables\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        _balances[from] = _balances[from].sub(amount);\n\n\n\n        emit Burned(operator, from, amount, data, operatorData);\n\n        emit Transfer(from, address(0), amount);\n",
          "message": "Function 'ERC777._burn' (RicoToken.sol#974-993) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 995,
          "vulnerability_to_line": 1010,
          "vulnerability_code": "    function _move(\n\n        address operator,\n\n        address from,\n\n        address to,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData\n\n    )\n\n        internal\n\n    {\n\n        _balances[from] = _balances[from].sub(amount);\n\n        _balances[to] = _balances[to].add(amount);\n\n\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n\n        emit Transfer(from, to, amount);\n",
          "message": "Function 'ERC777._move' (RicoToken.sol#995-1010) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": 1020,
          "vulnerability_code": "    function _approve(address holder, address spender, uint256 value) private {\n\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\n\n        // currently unnecessary.\n\n        //require(holder != address(0), \"ERC777: approve from the zero address\");\n\n        require(spender != address(0), \"ERC777: approve to the zero address\");\n\n\n\n        _allowances[holder][spender] = value;\n\n        emit Approval(holder, spender, value);\n",
          "message": "Function 'ERC777._approve' (RicoToken.sol#1012-1020) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1031,
          "vulnerability_to_line": 1045,
          "vulnerability_code": "    function _callTokensToSend(\n\n        address operator,\n\n        address from,\n\n        address to,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData\n\n    )\n\n        private\n\n    {\n\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\n\n        if (implementer != address(0)) {\n\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n\n        }\n",
          "message": "Function 'ERC777._callTokensToSend' (RicoToken.sol#1031-1045) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1058,
          "vulnerability_to_line": 1075,
          "vulnerability_code": "    function _callTokensReceived(\n\n        address operator,\n\n        address from,\n\n        address to,\n\n        uint256 amount,\n\n        bytes memory userData,\n\n        bytes memory operatorData,\n\n        bool requireReceptionAck\n\n    )\n\n        private\n\n    {\n\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\n\n        if (implementer != address(0)) {\n\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n\n        } else if (requireReceptionAck) {\n\n            require(!to.isContract(), \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\n\n        }\n",
          "message": "Function 'ERC777._callTokensReceived' (RicoToken.sol#1058-1075) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1083,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getParticipantReservedTokens(address) external view returns (uint256);\n",
          "message": "Parameter '' of ReversibleICO.getParticipantReservedTokens (RicoToken.sol#1083) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1142,
          "vulnerability_to_line": 1154,
          "vulnerability_code": "    function _burn(\n\n        address _operator,\n\n        address _from,\n\n        uint256 _amount,\n\n        bytes memory _data,\n\n        bytes memory _operatorData\n\n    )\n\n        internal\n\n        requireNotFrozen\n\n    {\n\n        require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n\n        ERC777._burn(_operator, _from, _amount, _data, _operatorData);\n",
          "message": "Function 'RicoToken._burn' (RicoToken.sol#1142-1154) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _operator,\n",
          "message": "Parameter '_operator' of RicoToken._burn (RicoToken.sol#1143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of RicoToken._burn (RicoToken.sol#1144) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of RicoToken._burn (RicoToken.sol#1145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _data,\n",
          "message": "Parameter '_data' of RicoToken._burn (RicoToken.sol#1146) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _operatorData\n",
          "message": "Parameter '_operatorData' of RicoToken._burn (RicoToken.sol#1147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": 1180,
          "vulnerability_code": "    function _move(\n\n        address _operator,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount,\n\n        bytes memory _userData,\n\n        bytes memory _operatorData\n\n    )\n\n        internal\n\n        requireNotFrozen\n\n        requireInitialized\n\n    {\n\n\n\n        if(_to == address(rICO)) {\n\n            // full balance can be sent back to rico\n\n            require(_amount <= balanceOf(_from), \"getUnlockedBalance: Insufficient funds\");\n\n        } else {\n\n            // for every other address limit to unlocked balance\n\n            require(_amount <= getUnlockedBalance(_from), \"getUnlockedBalance: Insufficient funds\");\n\n        }\n\n\n\n        ERC777._move(_operator, _from, _to, _amount, _userData, _operatorData);\n",
          "message": "Function 'RicoToken._move' (RicoToken.sol#1158-1180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _operator,\n",
          "message": "Parameter '_operator' of RicoToken._move (RicoToken.sol#1159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of RicoToken._move (RicoToken.sol#1160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of RicoToken._move (RicoToken.sol#1161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of RicoToken._move (RicoToken.sol#1162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _userData,\n",
          "message": "Parameter '_userData' of RicoToken._move (RicoToken.sol#1163) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory _operatorData\n",
          "message": "Parameter '_operatorData' of RicoToken._move (RicoToken.sol#1164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _initialSupply,\n",
          "message": "Parameter '_initialSupply' of RicoToken. (RicoToken.sol#1094) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setup(address _rICO)\n",
          "message": "Parameter '_rICO' of RicoToken.setup (RicoToken.sol#1107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeManager(address _newManager) public onlyManager {\n",
          "message": "Parameter '_newManager' of RicoToken.changeManager (RicoToken.sol#1120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFrozen(bool _status) public onlyManager {\n",
          "message": "Parameter '_status' of RicoToken.setFrozen (RicoToken.sol#1124) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1128,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLockedBalance(address _owner) public view returns(uint) {\n",
          "message": "Parameter '_owner' of RicoToken.getLockedBalance (RicoToken.sol#1128) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUnlockedBalance(address _owner) public view returns(uint) {\n",
          "message": "Parameter '_owner' of RicoToken.getUnlockedBalance (RicoToken.sol#1132) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1080,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private _symbol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] private _defaultOperatorsArray;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => bool) private _defaultOperators;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => bool)) private _operators;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 739,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 755,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callTokensToSend(from, from, recipient, amount, \"\", \"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callTokensReceived(from, from, recipient, amount, \"\", \"\", false);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorSend(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorBurn(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensReceived(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensToSend(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 827,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorSend(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata userData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata userData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 836,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}