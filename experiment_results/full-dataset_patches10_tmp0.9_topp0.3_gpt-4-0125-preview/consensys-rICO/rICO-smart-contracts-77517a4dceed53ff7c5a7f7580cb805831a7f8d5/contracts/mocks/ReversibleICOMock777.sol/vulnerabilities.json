{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 1639,
          "vulnerability_to_line": null,
          "vulnerability_code": "        currentBlockNumber += _num;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 1630,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 currentBlockNumber = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "        deployingAddress = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ERC1820.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Stage storage stageN = stages[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Participant storage participantStats = participants[participantAddress];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1392,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ParticipantStageDetails storage stages = participantStats.stages[stageId];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (stages.pendingETH == 0) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1400,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 newlyCommittedEth = stages.pendingETH;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            stages.pendingETH = stages.pendingETH.sub(newlyCommittedEth).sub(returnEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1425,
          "vulnerability_to_line": null,
          "vulnerability_code": "            stages.pendingETH = stages.pendingETH.sub(newlyCommittedEth).sub(returnEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenSupply = tokenSupply.sub(newTokenAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1428,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tokenSupply = tokenSupply.sub(newTokenAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1429,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pendingETH = pendingETH.sub(newlyCommittedEth).sub(returnEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1429,
          "vulnerability_to_line": null,
          "vulnerability_code": "            pendingETH = pendingETH.sub(newlyCommittedEth).sub(returnEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1430,
          "vulnerability_to_line": null,
          "vulnerability_code": "            committedETH = committedETH.add(newlyCommittedEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1430,
          "vulnerability_to_line": null,
          "vulnerability_code": "            committedETH = committedETH.add(newlyCommittedEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1431,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _projectCurrentlyReservedETH = _projectCurrentlyReservedETH.add(newlyCommittedEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1431,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _projectCurrentlyReservedETH = _projectCurrentlyReservedETH.add(newlyCommittedEth);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 i = 1; i <= _stageCount; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 stageId = 0; stageId <= getCurrentStage(); stageId++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 stageId = 0; stageId <= currentStage; stageId++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_commitPhaseStartBlock > getCurrentBlockNumber(), \"Start block cannot be set in the past.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value < minContribution, 'To contribute, call the commit() function and send ETH along.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tokenAddress, \"Invalid token contract sent tokens.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value >= minContribution, \"Value sent is less than minimum contribution.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 874,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_addresses.length > 0, \"No addresses given to whitelist.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 917,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_ethAmount <= availableForWithdraw, \"Requested amount too high, not enough ETH unlocked.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1003,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(getCurrentBlockNumber() == freezeStart.add(18000), 'Let it cool.. Wait at least ~3 days (18000 blk) before moving anything.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"No price data found.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber >= commitPhaseStartBlock && blockNumber <= buyPhaseEndBlock, \"Block outside of rICO period.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "            committedETH == _projectCurrentlyReservedETH.add(_projectUnlockedETH),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1249,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'Project Sanity check failed! Reserved + Unlock must equal committedETH'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(this).balance == _projectUnlockedETH.add(_projectCurrentlyReservedETH).add(pendingETH).sub(projectWithdrawnETH),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1259,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'Project sanity check failed! balance = Unlock + Reserved - Withdrawn'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1274,
          "vulnerability_to_line": null,
          "vulnerability_code": "            participantStats.reservedTokens == participantStats._currentReservedTokens.add(participantStats._unlockedTokens),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'Participant Sanity check failed! Reser. + Unlock must equal totalReser'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1467,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_returnedTokenAmount > 0, 'You can not withdraw without tokens.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1468,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(participantStats._currentReservedTokens > 0 && participantStats.reservedTokens > 0, 'You can not withdraw, you have no locked tokens.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == projectAddress, \"Only the project can call this method.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1546,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == deployingAddress, \"Only the deployer can call this method.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1554,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == whitelistingAddress, \"Only the whitelist controller can call this method.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == freezerAddress, \"Only the freezer address can call this method.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1570,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == rescuerAddress, \"Only the rescuer address can call this method.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialized == true, \"Contract must be initialized.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(initialized == false, \"Contract can not be initialized.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1594,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(frozen == true, \"rICO has to be frozen!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1602,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(frozen == false, \"rICO is frozen!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber >= commitPhaseStartBlock && blockNumber <= buyPhaseEndBlock, \"Current block is outside the rICO period.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber >= commitPhaseStartBlock && blockNumber <= buyPhaseEndBlock, \"Block outside of rICO period.\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1468,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(participantStats._currentReservedTokens > 0 && participantStats.reservedTokens > 0, 'You can not withdraw, you have no locked tokens.');\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber >= commitPhaseStartBlock && blockNumber <= buyPhaseEndBlock, \"Current block is outside the rICO period.\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (currentBlock >= buyPhaseStartBlock && currentBlock < buyPhaseEndBlock) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1210,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1211,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // security/no-assign-params: \"calcUnlockedAmount\": Avoid assigning to function parameters.\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1212,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 lastBlock = _lastBlock;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1213,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(lastBlock < buyPhaseStartBlock) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1214,
          "vulnerability_to_line": null,
          "vulnerability_code": "                lastBlock = buyPhaseStartBlock.sub(1); // We need to reduce it by 1, as the startBlock is always already IN the period.\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1215,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1216,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1217,
          "vulnerability_to_line": null,
          "vulnerability_code": "            // get the number of blocks that have \"elapsed\" since the last block\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1218,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 passedBlocks = currentBlock.sub(lastBlock);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 i = 1; i <= _stageCount; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "            participantCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 829,
          "vulnerability_to_line": null,
          "vulnerability_code": "        participantStats.contributions++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 920,
          "vulnerability_to_line": null,
          "vulnerability_code": "        projectWithdrawCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 stageId = 0; stageId <= getCurrentStage(); stageId++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint8 stageId = 0; stageId <= currentStage; stageId++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        participantStats.withdraws++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_commitPhaseStartBlock > getCurrentBlockNumber(), \"Start block cannot be set in the past.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value < minContribution, 'To contribute, call the commit() function and send ETH along.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == tokenAddress, \"Invalid token contract sent tokens.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value >= minContribution, \"Value sent is less than minimum contribution.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 917,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_ethAmount <= availableForWithdraw, \"Requested amount too high, not enough ETH unlocked.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1003,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(getCurrentBlockNumber() == freezeStart.add(18000), 'Let it cool.. Wait at least ~3 days (18000 blk) before moving anything.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "            committedETH == _projectCurrentlyReservedETH.add(_projectUnlockedETH),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1249,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'Project Sanity check failed! Reserved + Unlock must equal committedETH'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(this).balance == _projectUnlockedETH.add(_projectCurrentlyReservedETH).add(pendingETH).sub(projectWithdrawnETH),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1259,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'Project sanity check failed! balance = Unlock + Reserved - Withdrawn'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1274,
          "vulnerability_to_line": null,
          "vulnerability_code": "            participantStats.reservedTokens == participantStats._currentReservedTokens.add(participantStats._unlockedTokens),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": null,
          "vulnerability_code": "            'Participant Sanity check failed! Reser. + Unlock must equal totalReser'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1467,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_returnedTokenAmount > 0, 'You can not withdraw without tokens.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1468,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(participantStats._currentReservedTokens > 0 && participantStats.reservedTokens > 0, 'You can not withdraw, you have no locked tokens.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1538,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == projectAddress, \"Only the project can call this method.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1546,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == deployingAddress, \"Only the deployer can call this method.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1554,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == whitelistingAddress, \"Only the whitelist controller can call this method.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == freezerAddress, \"Only the freezer address can call this method.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1570,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == rescuerAddress, \"Only the rescuer address can call this method.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(blockNumber >= commitPhaseStartBlock && blockNumber <= buyPhaseEndBlock, \"Current block is outside the rICO period.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_60"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 1458,
          "vulnerability_to_line": 1528,
          "vulnerability_code": "    function withdraw(address _participantAddress, uint256 _returnedTokenAmount)\n\n    internal\n\n    isInitialized\n\n    isNotFrozen\n\n    isRunning\n\n    {\n\n\n\n        Participant storage participantStats = participants[_participantAddress];\n\n\n\n        require(_returnedTokenAmount > 0, 'You can not withdraw without tokens.');\n\n        require(participantStats._currentReservedTokens > 0 && participantStats.reservedTokens > 0, 'You can not withdraw, you have no locked tokens.');\n\n\n\n        uint256 returnedTokenAmount = _returnedTokenAmount;\n\n        uint256 overflowingTokenAmount;\n\n        uint256 returnEthAmount;\n\n\n\n        calcParticipantAllocation(_participantAddress);\n\n\n\n        // Only allow reserved tokens be returned, return the overflow.\n\n        if (returnedTokenAmount > participantStats._currentReservedTokens) {\n\n            overflowingTokenAmount = returnedTokenAmount.sub(participantStats._currentReservedTokens);\n\n            returnedTokenAmount = participantStats._currentReservedTokens;\n\n        }\n\n\n\n        // For STAGE 0, give back the price they put in\n\n        if(getCurrentStage() == 0) {\n\n\n\n            returnEthAmount = getEthAmountForTokensAtStage(returnedTokenAmount, 0);\n\n\n\n        // For any other stage, calculate the avg price of all contributions\n\n        } else {\n\n            returnEthAmount = participantStats.committedETH.mul(\n\n                returnedTokenAmount.mul(10 ** 20)\n\n                .div(participantStats.reservedTokens)\n\n            ).div(10 ** 20);\n\n        }\n\n\n\n\n\n        // UPDATE PARTICIPANT STATS\n\n        participantStats.withdraws++;\n\n        participantStats._currentReservedTokens = participantStats._currentReservedTokens.sub(returnedTokenAmount);\n\n        participantStats.reservedTokens = participantStats.reservedTokens.sub(returnedTokenAmount);\n\n        participantStats.committedETH = participantStats.committedETH.sub(returnEthAmount);\n\n\n\n        // UPDATE global STATS\n\n        tokenSupply = tokenSupply.add(returnedTokenAmount);\n\n        withdrawnETH = withdrawnETH.add(returnEthAmount);\n\n        committedETH = committedETH.sub(returnEthAmount);\n\n\n\n        _projectCurrentlyReservedETH = _projectCurrentlyReservedETH.sub(returnEthAmount);\n\n\n\n\n\n        // Return overflowing tokens received\n\n        if (overflowingTokenAmount > 0) {\n\n            // send tokens back to participant\n\n            bytes memory data;\n\n\n\n            emit TransferEvent(uint8(TransferTypes.PARTICIPANT_WITHDRAW_OVERFLOW), _participantAddress, overflowingTokenAmount);\n\n            // solium-disable-next-line security/no-send\n\n            IERC777(tokenAddress).send(_participantAddress, overflowingTokenAmount, data);\n\n        }\n\n\n\n        emit TransferEvent(uint8(TransferTypes.PARTICIPANT_WITHDRAW), _participantAddress, returnEthAmount);\n\n\n\n        // Return ETH back to participant\n\n        address(uint160(_participantAddress)).transfer(returnEthAmount);\n\n\n\n        // SANITY CHECK\n\n        sanityCheckParticipant(_participantAddress);\n\n        sanityCheckProject();\n",
          "message": "ReversibleICO.withdraw (ReversibleICOMock777.sol#1458-1528) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(uint160(_participantAddress)).transfer(returnEthAmount) (ReversibleICOMock777.sol#1523)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": 1261,
          "vulnerability_code": "    function sanityCheckProject() internal view {\n\n        // PROJECT: The sum of reserved + unlocked has to be equal the committedETH.\n\n        require(\n\n            committedETH == _projectCurrentlyReservedETH.add(_projectUnlockedETH),\n\n            'Project Sanity check failed! Reserved + Unlock must equal committedETH'\n\n        );\n\n\n\n//        DEBUG1 = address(this).balance;\n\n//        DEBUG2 = _projectCurrentlyReservedETH;\n\n//        DEBUG3 = pendingETH;\n\n\n\n        // PROJECT: The ETH in the rICO has to be the total of unlocked + reserved - withdraw\n\n        require(\n\n            address(this).balance == _projectUnlockedETH.add(_projectCurrentlyReservedETH).add(pendingETH).sub(projectWithdrawnETH),\n\n            'Project sanity check failed! balance = Unlock + Reserved - Withdrawn'\n\n        );\n",
          "message": "ReversibleICO.sanityCheckProject (ReversibleICOMock777.sol#1245-1261) uses a dangerous strict equality:\n\t- require(bool,string)(address(this).balance == _projectUnlockedETH.add(_projectCurrentlyReservedETH).add(pendingETH).sub(projectWithdrawnETH),Project sanity check failed! balance = Unlock + Reserved - Withdrawn)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1471,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 overflowingTokenAmount;\n",
          "message": "overflowingTokenAmount in ReversibleICO.withdraw (ReversibleICOMock777.sol#1471) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1513,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes memory data;\n",
          "message": "data in ReversibleICO.withdraw (ReversibleICOMock777.sol#1513) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1385,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 totalRefundedETH;\n",
          "message": "totalRefundedETH in ReversibleICO.acceptContributions (ReversibleICOMock777.sol#1385) is a local variable never initialiazed\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n",
          "message": "IERC1820Registry.setInterfaceImplementer.interfaceHash (local variable @ ReversibleICOMock777.sol#396) shadows:\n\t- IERC1820Registry.interfaceHash (function @ ReversibleICOMock777.sol#414)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n",
          "message": "IERC1820Registry.getInterfaceImplementer.interfaceHash (local variable @ ReversibleICOMock777.sol#407) shadows:\n\t- IERC1820Registry.interfaceHash (function @ ReversibleICOMock777.sol#414)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1392,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ParticipantStageDetails storage stages = participantStats.stages[stageId];\n",
          "message": "ReversibleICO.acceptContributions.stages (local variable @ ReversibleICOMock777.sol#1392) shadows:\n\t- ReversibleICO.stages (state variable @ ReversibleICOMock777.sol#525)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public minContribution = 0.001 ether;\n",
          "message": "ReversibleICO.minContribution should be constant (ReversibleICOMock777.sol#523)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": 744,
          "vulnerability_code": "    function init(\n\n        address _tokenAddress,\n\n        address _whitelistingAddress,\n\n        address _projectAddress,\n\n        uint256 _commitPhaseStartBlock,\n\n        uint256 _commitPhaseBlockCount,\n\n        uint256 _commitPhasePrice,\n\n        uint8 _stageCount,\n\n        uint256 _stageBlockCount,\n\n        uint256 _stagePriceIncrease\n\n    )\n\n    public\n\n    onlyDeployingAddress\n\n    isNotInitialized\n\n    {\n\n\n\n        require(_commitPhaseStartBlock > getCurrentBlockNumber(), \"Start block cannot be set in the past.\");\n\n\n\n        // Assign address variables\n\n        tokenAddress = _tokenAddress;\n\n        whitelistingAddress = _whitelistingAddress;\n\n        projectAddress = _projectAddress;\n\n        freezerAddress = _projectAddress; // TODO change, here only for testing\n\n        rescuerAddress = _projectAddress; // TODO change, here only for testing\n\n\n\n        // UPDATE global STATS\n\n        commitPhaseStartBlock = _commitPhaseStartBlock;\n\n        commitPhaseBlockCount = _commitPhaseBlockCount;\n\n        commitPhaseEndBlock = _commitPhaseStartBlock.add(_commitPhaseBlockCount).sub(1);\n\n        commitPhasePrice = _commitPhasePrice;\n\n\n\n        stageBlockCount = _stageBlockCount;\n\n        stageCount = _stageCount;\n\n\n\n        // Setup stage 0: The commit phase.\n\n        Stage storage commitPhase = stages[0];\n\n\n\n        commitPhase.startBlock = uint128(_commitPhaseStartBlock);\n\n        commitPhase.endBlock = uint128(commitPhaseEndBlock);\n\n        commitPhase.tokenPrice = _commitPhasePrice;\n\n\n\n        // Setup stage 1 to n: The buy phase stages\n\n        // Each new stage starts after the previous phase's endBlock\n\n        uint256 previousStageEndBlock = commitPhase.endBlock;\n\n\n\n        // Update stages: start, end, price\n\n        for (uint8 i = 1; i <= _stageCount; i++) {\n\n            // Get i-th stage\n\n            Stage storage stageN = stages[i];\n\n            // Start block is previous phase end block + 1, e.g. previous stage end=0, start=1;\n\n            stageN.startBlock = uint128(previousStageEndBlock.add(1));\n\n            // End block is previous phase end block + stage duration e.g. start=1, duration=10, end=0+10=10;\n\n            stageN.endBlock = uint128(previousStageEndBlock.add(_stageBlockCount));\n\n            // Store the current stage endBlock in order to update the next one\n\n            previousStageEndBlock = stageN.endBlock;\n\n            // At each stage the token price increases by _stagePriceIncrease * stageCount\n\n            stageN.tokenPrice = _commitPhasePrice.add(_stagePriceIncrease.mul(i));\n\n        }\n\n\n\n        // UPDATE global STATS\n\n        // The buy phase starts on the subsequent block of the commitPhase's (stage0) endBlock\n\n        buyPhaseStartBlock = commitPhaseEndBlock.add(1);\n\n        // The buy phase ends when the lat stage ends\n\n        buyPhaseEndBlock = previousStageEndBlock;\n\n        // The duration of buyPhase in blocks\n\n        buyPhaseBlockCount = buyPhaseEndBlock.sub(buyPhaseStartBlock).add(1);\n\n\n\n        // The contract is now initialized\n\n        initialized = true;\n",
          "message": "ReversibleICO.init (ReversibleICOMock777.sol#675-744) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1044,
          "vulnerability_to_line": 1047,
          "vulnerability_code": "    function getAvailableProjectETH() public view returns (uint256) {\n\n        return getUnlockedProjectETH()\n\n            .sub(projectWithdrawnETH);\n",
          "message": "ReversibleICO.getAvailableProjectETH (ReversibleICOMock777.sol#1044-1047) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1097,
          "vulnerability_to_line": 1105,
          "vulnerability_code": "    function getCurrentPrice() public view returns (uint256) {\n\n        uint blockNumber;\n\n        if (frozen) {\n\n            blockNumber = freezeStart;\n\n        } else {\n\n            blockNumber = getCurrentBlockNumber().add(frozenPeriod); // we add the frozenPeriod here, as we deduct it in getStageAtBlock()\n\n        }\n\n        return getPriceAtBlock(blockNumber);\n",
          "message": "ReversibleICO.getCurrentPrice (ReversibleICOMock777.sol#1097-1105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1638,
          "vulnerability_to_line": 1640,
          "vulnerability_code": "    function increaseCurrentBlockNumber(uint256 _num) public {\n\n        currentBlockNumber += _num;\n",
          "message": "ReversibleICOMock.increaseCurrentBlockNumber (ReversibleICOMock777.sol#1638-1640) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1642,
          "vulnerability_to_line": 1644,
          "vulnerability_code": "    function jumpToBlockNumber(uint256 _num) public {\n\n        currentBlockNumber = _num;\n",
          "message": "ReversibleICOMock.jumpToBlockNumber (ReversibleICOMock777.sol#1642-1644) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in ReversibleICOMock777.sol:\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#302): it allows old versions\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#337): it allows old versions\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#457): it allows old versions\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#1626): it allows old versions\n\t- pragma solidity^0.5.0 (ReversibleICOMock777.sol#1658): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address,\n",
          "message": "Parameter '' of ReversibleICO.tokensReceived (ReversibleICOMock777.sol#777) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of ReversibleICO.tokensReceived (ReversibleICOMock777.sol#778) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address,\n",
          "message": "Parameter '_scope_0' of ReversibleICO.tokensReceived (ReversibleICOMock777.sol#779) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 780,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount,\n",
          "message": "Parameter '_amount' of ReversibleICO.tokensReceived (ReversibleICOMock777.sol#780) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 781,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata,\n",
          "message": "Parameter '_scope_1' of ReversibleICO.tokensReceived (ReversibleICOMock777.sol#781) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 782,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata\n",
          "message": "Parameter '_scope_2' of ReversibleICO.tokensReceived (ReversibleICOMock777.sol#782) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _tokenAddress,\n",
          "message": "Parameter '_tokenAddress' of ReversibleICO.init (ReversibleICOMock777.sol#676) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _whitelistingAddress,\n",
          "message": "Parameter '_whitelistingAddress' of ReversibleICO.init (ReversibleICOMock777.sol#677) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _projectAddress,\n",
          "message": "Parameter '_projectAddress' of ReversibleICO.init (ReversibleICOMock777.sol#678) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _commitPhaseStartBlock,\n",
          "message": "Parameter '_commitPhaseStartBlock' of ReversibleICO.init (ReversibleICOMock777.sol#679) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _commitPhaseBlockCount,\n",
          "message": "Parameter '_commitPhaseBlockCount' of ReversibleICO.init (ReversibleICOMock777.sol#680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _commitPhasePrice,\n",
          "message": "Parameter '_commitPhasePrice' of ReversibleICO.init (ReversibleICOMock777.sol#681) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 682,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint8 _stageCount,\n",
          "message": "Parameter '_stageCount' of ReversibleICO.init (ReversibleICOMock777.sol#682) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stageBlockCount,\n",
          "message": "Parameter '_stageBlockCount' of ReversibleICO.init (ReversibleICOMock777.sol#683) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _stagePriceIncrease\n",
          "message": "Parameter '_stagePriceIncrease' of ReversibleICO.init (ReversibleICOMock777.sol#684) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 866,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function whitelist(address[] calldata _addresses, bool _approve)\n",
          "message": "Parameter '_addresses' of ReversibleICO.whitelist (ReversibleICOMock777.sol#866) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 866,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function whitelist(address[] calldata _addresses, bool _approve)\n",
          "message": "Parameter '_approve' of ReversibleICO.whitelist (ReversibleICOMock777.sol#866) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function projectWithdraw(uint256 _ethAmount)\n",
          "message": "Parameter '_ethAmount' of ReversibleICO.projectWithdraw (ReversibleICOMock777.sol#905) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 998,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function escapeHatch(address _to)\n",
          "message": "Parameter '_to' of ReversibleICO.escapeHatch (ReversibleICOMock777.sol#998) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1053,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getParticipantReservedTokens(address _participantAddress) public view returns (uint256) {\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.getParticipantReservedTokens (ReversibleICOMock777.sol#1053) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1071,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getParticipantUnlockedTokens(address _participantAddress) public view returns (uint256) {\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.getParticipantUnlockedTokens (ReversibleICOMock777.sol#1071) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPriceAtBlock(uint256 _blockNumber) public view returns (uint256) {\n",
          "message": "Parameter '_blockNumber' of ReversibleICO.getPriceAtBlock (ReversibleICOMock777.sol#1112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPriceAtStage(uint8 _stageId) public view returns (uint256) {\n",
          "message": "Parameter '_stageId' of ReversibleICO.getPriceAtStage (ReversibleICOMock777.sol#1120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getStageAtBlock(uint256 _blockNumber) public view returns (uint8) {\n",
          "message": "Parameter '_blockNumber' of ReversibleICO.getStageAtBlock (ReversibleICOMock777.sol#1132) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function committableEthAtStage(uint8 _stageId) public view returns (uint256) {\n",
          "message": "Parameter '_stageId' of ReversibleICO.committableEthAtStage (ReversibleICOMock777.sol#1156) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenAmountForEthAtStage(uint256 _ethAmount, uint8 _stageId) public view returns (uint256) {\n",
          "message": "Parameter '_ethAmount' of ReversibleICO.getTokenAmountForEthAtStage (ReversibleICOMock777.sol#1168) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenAmountForEthAtStage(uint256 _ethAmount, uint8 _stageId) public view returns (uint256) {\n",
          "message": "Parameter '_stageId' of ReversibleICO.getTokenAmountForEthAtStage (ReversibleICOMock777.sol#1168) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getEthAmountForTokensAtStage(uint256 _tokenAmount, uint8 _stageId) public view returns (uint256) {\n",
          "message": "Parameter '_tokenAmount' of ReversibleICO.getEthAmountForTokensAtStage (ReversibleICOMock777.sol#1180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getEthAmountForTokensAtStage(uint256 _tokenAmount, uint8 _stageId) public view returns (uint256) {\n",
          "message": "Parameter '_stageId' of ReversibleICO.getEthAmountForTokensAtStage (ReversibleICOMock777.sol#1180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calcUnlockedAmount(uint256 _amount, uint256 _lastBlock) public view returns (uint256) {\n",
          "message": "Parameter '_amount' of ReversibleICO.calcUnlockedAmount (ReversibleICOMock777.sol#1200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calcUnlockedAmount(uint256 _amount, uint256 _lastBlock) public view returns (uint256) {\n",
          "message": "Parameter '_lastBlock' of ReversibleICO.calcUnlockedAmount (ReversibleICOMock777.sol#1200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sanityCheckParticipant(address _participantAddress) internal view {\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.sanityCheckParticipant (ReversibleICOMock777.sol#1266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calcParticipantAllocation(address _participantAddress) internal {\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.calcParticipantAllocation (ReversibleICOMock777.sol#1297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancelPendingContributions(address _participantAddress, uint256 _sentValue)\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.cancelPendingContributions (ReversibleICOMock777.sol#1315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1315,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cancelPendingContributions(address _participantAddress, uint256 _sentValue)\n",
          "message": "Parameter '_sentValue' of ReversibleICO.cancelPendingContributions (ReversibleICOMock777.sol#1315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function acceptContributions(address _participantAddress)\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.acceptContributions (ReversibleICOMock777.sol#1371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _participantAddress, uint256 _returnedTokenAmount)\n",
          "message": "Parameter '_participantAddress' of ReversibleICO.withdraw (ReversibleICOMock777.sol#1458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1458,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _participantAddress, uint256 _returnedTokenAmount)\n",
          "message": "Parameter '_returnedTokenAmount' of ReversibleICO.withdraw (ReversibleICOMock777.sol#1458) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC1820Registry private ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n",
          "message": "Variable 'ReversibleICO.ERC1820' (ReversibleICOMock777.sol#471) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 internal _projectCurrentlyReservedETH;\n",
          "message": "Variable 'ReversibleICO._projectCurrentlyReservedETH' (ReversibleICOMock777.sol#568) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 internal _projectUnlockedETH;\n",
          "message": "Variable 'ReversibleICO._projectUnlockedETH' (ReversibleICOMock777.sol#570) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 internal _projectLastBlock;\n",
          "message": "Variable 'ReversibleICO._projectLastBlock' (ReversibleICOMock777.sol#572) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1638,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseCurrentBlockNumber(uint256 _num) public {\n",
          "message": "Parameter '_num' of ReversibleICOMock.increaseCurrentBlockNumber (ReversibleICOMock777.sol#1638) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1642,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function jumpToBlockNumber(uint256 _num) public {\n",
          "message": "Parameter '_num' of ReversibleICOMock.jumpToBlockNumber (ReversibleICOMock777.sol#1642) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setreservedTokenAmount(address wallet, uint256 _balance) external {\n",
          "message": "Parameter '_balance' of ReversibleICOMock777.setreservedTokenAmount (ReversibleICOMock777.sol#1664) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC1820Registry private ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 988,
          "vulnerability_to_line": null,
          "vulnerability_code": "        freezerAddress = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 989,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rescuerAddress = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_BALANCE_EQUALITY",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(this).balance == _projectUnlockedETH.add(_projectCurrentlyReservedETH).add(pendingETH).sub(projectWithdrawnETH),\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1223,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return _amount.mul(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1489,
          "vulnerability_to_line": null,
          "vulnerability_code": "            returnEthAmount = participantStats.committedETH.mul(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 876,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < _addresses.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1626,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1658,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC1820Registry private ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 468,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC777(tokenAddress).send(_to, tokenBalance, \"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC777(tokenAddress).send(_participantAddress, totalNewReservedTokens, \"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorSend(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function operatorBurn(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensReceived(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1672,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokensReceived(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata data,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata userData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1630,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 currentBlockNumber = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1677,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata userData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1678,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes calldata operatorData\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}