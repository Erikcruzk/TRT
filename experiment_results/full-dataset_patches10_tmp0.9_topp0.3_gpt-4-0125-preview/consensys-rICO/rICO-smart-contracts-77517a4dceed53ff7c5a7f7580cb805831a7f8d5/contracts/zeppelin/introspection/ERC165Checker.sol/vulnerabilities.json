{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n\n        private\n\n        view\n\n        returns (bool success, bool result)\n\n    {\n\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            let encodedParams_data := add(0x20, encodedParams)\n\n            let encodedParams_size := mload(encodedParams)\n\n\n\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\n\n            mstore(output, 0x0)\n\n\n\n            success := staticcall(\n\n                30000,                   // 30k gas\n\n                account,                 // To addr\n\n                encodedParams_data,\n\n                encodedParams_size,\n\n                output,\n\n                0x20                     // Outputs are 32 bytes long\n\n            )\n\n\n\n            result := mload(output)      // Load the result\n\n        }\n",
          "message": "ERC165Checker._callERC165SupportsInterface (ERC165Checker.sol#96-122) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n\n        private\n\n        view\n\n        returns (bool success, bool result)\n\n    {\n\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            let encodedParams_data := add(0x20, encodedParams)\n\n            let encodedParams_size := mload(encodedParams)\n\n\n\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\n\n            mstore(output, 0x0)\n\n\n\n            success := staticcall(\n\n                30000,                   // 30k gas\n\n                account,                 // To addr\n\n                encodedParams_data,\n\n                encodedParams_size,\n\n                output,\n\n                0x20                     // Outputs are 32 bytes long\n\n            )\n\n\n\n            result := mload(output)      // Load the result\n\n        }\n",
          "message": "ERC165Checker._callERC165SupportsInterface uses assembly (ERC165Checker.sol#96-122)\n\t- ERC165Checker.sol#104-121\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in ERC165Checker.sol:\n\t- pragma solidity^0.5.0 (ERC165Checker.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function _supportsERC165(address account) internal view returns (bool) {\n\n        // Any contract that implements ERC165 must explicitly indicate support of\n\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n",
          "message": "Function 'ERC165Checker._supportsERC165' (ERC165Checker.sol#24-29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n\n        // query support of both ERC165 as per the spec and support of _interfaceId\n\n        return _supportsERC165(account) &&\n\n            _supportsERC165Interface(account, interfaceId);\n",
          "message": "Function 'ERC165Checker._supportsInterface' (ERC165Checker.sol#37-41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n\n        // query support of ERC165 itself\n\n        if (!_supportsERC165(account)) {\n\n            return false;\n\n        }\n\n\n\n        // query support of each interface in _interfaceIds\n\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n\n                return false;\n\n            }\n\n        }\n\n\n\n        // all interfaces supported\n\n        return true;\n",
          "message": "Function 'ERC165Checker._supportsAllInterfaces' (ERC165Checker.sol#52-67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n\n        // success determines whether the staticcall succeeded and result determines\n\n        // whether the contract at account indicates support of _interfaceId\n\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n\n\n        return (success && result);\n",
          "message": "Function 'ERC165Checker._supportsERC165Interface' (ERC165Checker.sol#80-86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": 122,
          "vulnerability_code": "    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n\n        private\n\n        view\n\n        returns (bool success, bool result)\n\n    {\n\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n\n\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            let encodedParams_data := add(0x20, encodedParams)\n\n            let encodedParams_size := mload(encodedParams)\n\n\n\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\n\n            mstore(output, 0x0)\n\n\n\n            success := staticcall(\n\n                30000,                   // 30k gas\n\n                account,                 // To addr\n\n                encodedParams_data,\n\n                encodedParams_size,\n\n                output,\n\n                0x20                     // Outputs are 32 bytes long\n\n            )\n\n\n\n            result := mload(output)      // Load the result\n\n        }\n",
          "message": "Function 'ERC165Checker._callERC165SupportsInterface' (ERC165Checker.sol#96-122) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < interfaceIds.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        returns (bool success, bool result)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}