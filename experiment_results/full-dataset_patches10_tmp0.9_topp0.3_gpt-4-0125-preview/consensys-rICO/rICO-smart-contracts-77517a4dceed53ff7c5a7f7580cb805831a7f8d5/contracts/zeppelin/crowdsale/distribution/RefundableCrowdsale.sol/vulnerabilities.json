{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // The counter starts at one to prevent changing it from zero to a non-zero\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // value, which is a more expensive operation.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _guardCounter = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _rate = rate;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _wallet = wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _token = token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line not-rely-on-time\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // solhint-disable-next-line max-line-length\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _openingTime = openingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _closingTime = closingTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _finalized = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _primary = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit PrimaryTransferred(_primary);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 856,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 goal) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 951,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal > 0, \"RefundableCrowdsale: goal is 0\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 952,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _escrow = new RefundEscrow(wallet());\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _goal = goal;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 954,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 345,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOpen(), \"TimedCrowdsale: not open\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"FinalizableCrowdsale: already finalized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 681,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(hasClosed(), \"FinalizableCrowdsale: not closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 890,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 951,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(goal > 0, \"RefundableCrowdsale: goal is 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalized(), \"RefundableCrowdsale: not finalized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_finalized, \"FinalizableCrowdsale: already finalized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 728,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 744,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 890,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalized(), \"RefundableCrowdsale: not finalized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_43"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": 912,
          "vulnerability_code": "    function beneficiaryWithdraw() public {\n\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n\n        _beneficiary.transfer(address(this).balance);\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsale.sol#907-912) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (RefundableCrowdsale.sol#909-910)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 221,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n        \n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (RefundableCrowdsale.sol#208-221) is declared view but contains assembly code\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.rate (local variable @ RefundableCrowdsale.sol#404) shadows:\n\t- Crowdsale.rate (function @ RefundableCrowdsale.sol#441-443)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.wallet (local variable @ RefundableCrowdsale.sol#404) shadows:\n\t- Crowdsale.wallet (function @ RefundableCrowdsale.sol#434-436)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": "Crowdsale.constructor.token (local variable @ RefundableCrowdsale.sol#404) shadows:\n\t- Crowdsale.token (function @ RefundableCrowdsale.sol#427-429)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "TimedCrowdsale.constructor.openingTime (local variable @ RefundableCrowdsale.sol#583) shadows:\n\t- TimedCrowdsale.openingTime (function @ RefundableCrowdsale.sol#596-598)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n",
          "message": "TimedCrowdsale.constructor.closingTime (local variable @ RefundableCrowdsale.sol#583) shadows:\n\t- TimedCrowdsale.closingTime (function @ RefundableCrowdsale.sol#603-605)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 856,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": "RefundEscrow.constructor.beneficiary (local variable @ RefundableCrowdsale.sol#856) shadows:\n\t- RefundEscrow.beneficiary (function @ RefundableCrowdsale.sol#872-876)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 950,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 goal) public {\n",
          "message": "RefundableCrowdsale.constructor.goal (local variable @ RefundableCrowdsale.sol#950) shadows:\n\t- RefundableCrowdsale.goal (function @ RefundableCrowdsale.sol#959-963)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": 591,
          "vulnerability_code": "    constructor (uint256 openingTime, uint256 closingTime) public {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(openingTime >= block.timestamp, \"TimedCrowdsale: opening time is before current time\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(closingTime > openingTime, \"TimedCrowdsale: opening time is not before closing time\");\n\n\n\n        _openingTime = openingTime;\n\n        _closingTime = closingTime;\n",
          "message": "TimedCrowdsale.constructor (RefundableCrowdsale.sol#583-591) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(openingTime >= block.timestamp,TimedCrowdsale: opening time is before current time) (RefundableCrowdsale.sol#585)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": 613,
          "vulnerability_code": "    function isOpen() public view returns (bool) {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n",
          "message": "TimedCrowdsale.isOpen (RefundableCrowdsale.sol#610-613) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= _openingTime && block.timestamp <= _closingTime (RefundableCrowdsale.sol#612)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": 622,
          "vulnerability_code": "    function hasClosed() public view returns (bool) {\n\n        // solhint-disable-next-line not-rely-on-time\n\n        return block.timestamp > _closingTime;\n",
          "message": "TimedCrowdsale.hasClosed (RefundableCrowdsale.sol#619-622) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _closingTime (RefundableCrowdsale.sol#621)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": 221,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n        \n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (RefundableCrowdsale.sol#208-221)\n\t- RefundableCrowdsale.sol#219\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 429,
          "vulnerability_code": "    function token() public view returns (IERC20) {\n\n        return _token;\n",
          "message": "Crowdsale.token (RefundableCrowdsale.sol#427-429) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 443,
          "vulnerability_code": "    function rate() public view returns (uint256) {\n\n        return _rate;\n",
          "message": "Crowdsale.rate (RefundableCrowdsale.sol#441-443) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": 598,
          "vulnerability_code": "    function openingTime() public view returns (uint256) {\n\n        return _openingTime;\n",
          "message": "TimedCrowdsale.openingTime (RefundableCrowdsale.sol#596-598) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": 605,
          "vulnerability_code": "    function closingTime() public view returns (uint256) {\n\n        return _closingTime;\n",
          "message": "TimedCrowdsale.closingTime (RefundableCrowdsale.sol#603-605) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 679,
          "vulnerability_to_line": 687,
          "vulnerability_code": "    function finalize() public {\n\n        require(!_finalized, \"FinalizableCrowdsale: already finalized\");\n\n        require(hasClosed(), \"FinalizableCrowdsale: not closed\");\n\n\n\n        _finalized = true;\n\n\n\n        _finalization();\n\n        emit CrowdsaleFinalized();\n",
          "message": "FinalizableCrowdsale.finalize (RefundableCrowdsale.sol#679-687) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 735,
          "vulnerability_to_line": 737,
          "vulnerability_code": "    function primary() public view returns (address) {\n\n        return _primary;\n",
          "message": "Secondary.primary (RefundableCrowdsale.sol#735-737) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 743,
          "vulnerability_to_line": 747,
          "vulnerability_code": "    function transferPrimary(address recipient) public onlyPrimary {\n\n        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n\n        _primary = recipient;\n\n        emit PrimaryTransferred(_primary);\n",
          "message": "Secondary.transferPrimary (RefundableCrowdsale.sol#743-747) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": 777,
          "vulnerability_code": "    function depositsOf(address payee) public view returns (uint256) {\n\n        return _deposits[payee];\n",
          "message": "Escrow.depositsOf (RefundableCrowdsale.sol#775-777) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": 869,
          "vulnerability_code": "    function state() public view returns (State) {\n\n        return _state;\n\n    }\n\n\n",
          "message": "RefundEscrow.state (RefundableCrowdsale.sol#865-869) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 872,
          "vulnerability_to_line": 876,
          "vulnerability_code": "    function beneficiary() public view returns (address) {\n\n        return _beneficiary;\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiary (RefundableCrowdsale.sol#872-876) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": 895,
          "vulnerability_code": "    function close() public onlyPrimary {\n\n        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n\n        _state = State.Closed;\n\n        emit RefundsClosed();\n\n    }\n\n\n",
          "message": "RefundEscrow.close (RefundableCrowdsale.sol#889-895) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 898,
          "vulnerability_to_line": 904,
          "vulnerability_code": "    function enableRefunds() public onlyPrimary {\n\n        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n\n        _state = State.Refunding;\n\n        emit RefundsEnabled();\n\n    }\n\n\n",
          "message": "RefundEscrow.enableRefunds (RefundableCrowdsale.sol#898-904) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": 912,
          "vulnerability_code": "    function beneficiaryWithdraw() public {\n\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n\n        _beneficiary.transfer(address(this).balance);\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (RefundableCrowdsale.sol#907-912) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": 963,
          "vulnerability_code": "    function goal() public view returns (uint256) {\n\n        return _goal;\n\n    }\n\n\n",
          "message": "RefundableCrowdsale.goal (RefundableCrowdsale.sol#959-963) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 967,
          "vulnerability_to_line": 974,
          "vulnerability_code": "    function claimRefund(address payable refundee) public {\n\n        require(finalized(), \"RefundableCrowdsale: not finalized\");\n\n        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n\n\n\n        _escrow.withdraw(refundee);\n\n    }\n\n\n",
          "message": "RefundableCrowdsale.claimRefund (RefundableCrowdsale.sol#967-974) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in RefundableCrowdsale.sol:\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#192): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#234): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#310): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#351): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#550): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#649): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#701): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#752): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#807): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#830): it allows old versions\n\t- pragma solidity^0.5.0 (RefundableCrowdsale.sol#923-925): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": 305,
          "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (RefundableCrowdsale.sol#286-305):\n\t-(success,returndata) = address(token).call(data) RefundableCrowdsale.sol#298\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": 489,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n",
          "message": "Function 'Crowdsale._preValidatePurchase' (RefundableCrowdsale.sol#486-489) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": 499,
          "vulnerability_code": "    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'Crowdsale._postValidatePurchase' (RefundableCrowdsale.sol#497-499) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 509,
          "vulnerability_code": "    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n\n        _token.safeTransfer(beneficiary, tokenAmount);\n",
          "message": "Function 'Crowdsale._deliverTokens' (RefundableCrowdsale.sol#507-509) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": 519,
          "vulnerability_code": "    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n\n        _deliverTokens(beneficiary, tokenAmount);\n",
          "message": "Function 'Crowdsale._processPurchase' (RefundableCrowdsale.sol#517-519) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": 529,
          "vulnerability_code": "    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'Crowdsale._updatePurchasingState' (RefundableCrowdsale.sol#527-529) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 538,
          "vulnerability_code": "    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n\n        return weiAmount.mul(_rate);\n",
          "message": "Function 'Crowdsale._getTokenAmount' (RefundableCrowdsale.sol#536-538) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function _forwardFunds() internal {\n\n        _wallet.transfer(msg.value);\n",
          "message": "Function 'Crowdsale._forwardFunds' (RefundableCrowdsale.sol#543-545) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": 631,
          "vulnerability_code": "    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n\n        super._preValidatePurchase(beneficiary, weiAmount);\n",
          "message": "Function 'TimedCrowdsale._preValidatePurchase' (RefundableCrowdsale.sol#629-631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": 644,
          "vulnerability_code": "    function _extendTime(uint256 newClosingTime) internal {\n\n        require(!hasClosed(), \"TimedCrowdsale: already closed\");\n\n        // solhint-disable-next-line max-line-length\n\n        require(newClosingTime > _closingTime, \"TimedCrowdsale: new closing time is before current closing time\");\n\n\n\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n\n        _closingTime = newClosingTime;\n",
          "message": "Function 'TimedCrowdsale._extendTime' (RefundableCrowdsale.sol#637-644) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": 696,
          "vulnerability_code": "    function _finalization() internal {\n\n        // solhint-disable-previous-line no-empty-blocks\n",
          "message": "Function 'FinalizableCrowdsale._finalization' (RefundableCrowdsale.sol#694-696) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawalAllowed(address) public view returns (bool) {\n",
          "message": "Parameter '' of RefundEscrow.withdrawalAllowed (RefundableCrowdsale.sol#916) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 999,
          "vulnerability_to_line": 1002,
          "vulnerability_code": "    function _forwardFunds() internal {\n\n        _escrow.deposit.value(msg.value)(msg.sender);\n\n    }\n",
          "message": "Function 'RefundableCrowdsale._forwardFunds' (RefundableCrowdsale.sol#999-1002) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 985,
          "vulnerability_to_line": 996,
          "vulnerability_code": "    function _finalization() internal {\n\n        if (goalReached()) {\n\n            _escrow.close();\n\n            _escrow.beneficiaryWithdraw();\n\n        } else {\n\n            _escrow.enableRefunds();\n\n        }\n\n\n\n        super._finalization();\n\n    }\n\n\n",
          "message": "Function 'RefundableCrowdsale._finalization' (RefundableCrowdsale.sol#985-996) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Crowdsale is ReentrancyGuard {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 767,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Escrow is Secondary {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ConditionalEscrow is Escrow {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 843,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundEscrow is ConditionalEscrow {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 937,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundableCrowdsale is FinalizableCrowdsale {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 701,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 752,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 807,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _guardCounter;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 private _token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable private _wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _weiRaised;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _openingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _closingTime;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _finalized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 707,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _primary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 773,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _deposits;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    State private _state;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable private _beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 941,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _goal;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RefundEscrow private _escrow;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 938,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address payable payee) public onlyPrimary {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address payable payee) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 856,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 967,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claimRefund(address payable refundee) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rate > 0, \"Crowdsale: rate is 0\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wallet != address(0), \"Crowdsale: wallet is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(token) != address(0), \"Crowdsale: token is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _rate = rate;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _wallet = wallet;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _token = token;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 payment = _deposits[payee];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _deposits[payee] = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": null,
          "vulnerability_code": "        payee.transfer(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Withdrawn(payee, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 801,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Withdrawn(payee, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": null,
          "vulnerability_code": "        super.withdraw(payee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 858,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 968,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(finalized(), \"RefundableCrowdsale: not finalized\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!goalReached(), \"RefundableCrowdsale: goal reached\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 971,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _escrow.withdraw(refundee);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}