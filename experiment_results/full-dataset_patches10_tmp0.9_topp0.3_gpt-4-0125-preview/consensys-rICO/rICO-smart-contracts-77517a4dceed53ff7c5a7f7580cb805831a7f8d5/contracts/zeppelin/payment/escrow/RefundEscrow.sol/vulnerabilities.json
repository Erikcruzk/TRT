{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _primary = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit PrimaryTransferred(_primary);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only deposit while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function beneficiaryWithdraw() public {\n\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n\n        _beneficiary.transfer(address(this).balance);\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (RefundEscrow.sol#319-324) sends eth to arbitrary user\n\tDangerous calls:\n\t- _beneficiary.transfer(address(this).balance) (RefundEscrow.sol#321-322)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": "RefundEscrow.constructor.beneficiary (local variable @ RefundEscrow.sol#268) shadows:\n\t- RefundEscrow.beneficiary (function @ RefundEscrow.sol#284-288)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 149,
          "vulnerability_code": "    function primary() public view returns (address) {\n\n        return _primary;\n",
          "message": "Secondary.primary (RefundEscrow.sol#147-149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 159,
          "vulnerability_code": "    function transferPrimary(address recipient) public onlyPrimary {\n\n        require(recipient != address(0), \"Secondary: new primary is the zero address\");\n\n        _primary = recipient;\n\n        emit PrimaryTransferred(_primary);\n",
          "message": "Secondary.transferPrimary (RefundEscrow.sol#155-159) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": 189,
          "vulnerability_code": "    function depositsOf(address payee) public view returns (uint256) {\n\n        return _deposits[payee];\n",
          "message": "Escrow.depositsOf (RefundEscrow.sol#187-189) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": 281,
          "vulnerability_code": "    function state() public view returns (State) {\n\n        return _state;\n\n    }\n\n\n",
          "message": "RefundEscrow.state (RefundEscrow.sol#277-281) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": 288,
          "vulnerability_code": "    function beneficiary() public view returns (address) {\n\n        return _beneficiary;\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiary (RefundEscrow.sol#284-288) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function close() public onlyPrimary {\n\n        require(_state == State.Active, \"RefundEscrow: can only close while active\");\n\n        _state = State.Closed;\n\n        emit RefundsClosed();\n\n    }\n\n\n",
          "message": "RefundEscrow.close (RefundEscrow.sol#301-307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": 316,
          "vulnerability_code": "    function enableRefunds() public onlyPrimary {\n\n        require(_state == State.Active, \"RefundEscrow: can only enable refunds while active\");\n\n        _state = State.Refunding;\n\n        emit RefundsEnabled();\n\n    }\n\n\n",
          "message": "RefundEscrow.enableRefunds (RefundEscrow.sol#310-316) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 324,
          "vulnerability_code": "    function beneficiaryWithdraw() public {\n\n        require(_state == State.Closed, \"RefundEscrow: beneficiary can only withdraw while closed\");\n\n        _beneficiary.transfer(address(this).balance);\n\n    }\n\n\n",
          "message": "RefundEscrow.beneficiaryWithdraw (RefundEscrow.sol#319-324) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in RefundEscrow.sol:\n\t- pragma solidity^0.5.0 (RefundEscrow.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (RefundEscrow.sol#113): it allows old versions\n\t- pragma solidity^0.5.0 (RefundEscrow.sol#164): it allows old versions\n\t- pragma solidity^0.5.0 (RefundEscrow.sol#219): it allows old versions\n\t- pragma solidity^0.5.0 (RefundEscrow.sol#242): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawalAllowed(address) public view returns (bool) {\n",
          "message": "Parameter '' of RefundEscrow.withdrawalAllowed (RefundEscrow.sol#328) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Escrow is Secondary {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ConditionalEscrow is Escrow {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract RefundEscrow is ConditionalEscrow {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _primary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _deposits;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    State private _state;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address payable private _beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address payable payee) public onlyPrimary {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address payable payee) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address payable beneficiary) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 payment = _deposits[payee];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _deposits[payee] = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        payee.transfer(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Withdrawn(payee, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Withdrawn(payee, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(withdrawalAllowed(payee), \"ConditionalEscrow: payee is not allowed to withdraw\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        super.withdraw(payee);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiary != address(0), \"RefundEscrow: beneficiary is the zero address\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary = beneficiary;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _state = State.Active;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}