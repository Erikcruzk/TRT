{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payees.length == shares.length, \"PaymentSplitter: payees and shares length mismatch\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payees.length > 0, \"PaymentSplitter: no payees\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payees.length == shares.length, \"PaymentSplitter: payees and shares length mismatch\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function release(address payable account) public {\n\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n\n\n        uint256 totalReceived = address(this).balance.add(_totalReleased);\n\n        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n\n\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n\n\n        _released[account] = _released[account].add(payment);\n\n        _totalReleased = _totalReleased.add(payment);\n\n\n\n        account.transfer(payment);\n\n        emit PaymentReleased(account, payment);\n",
          "message": "PaymentSplitter.release (PaymentSplitter.sol#211-224) sends eth to arbitrary user\n\tDangerous calls:\n\t- account.transfer(payment) (PaymentSplitter.sol#222)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address[] memory payees, uint256[] memory shares) public payable {\n",
          "message": "PaymentSplitter.constructor.shares (local variable @ PaymentSplitter.sol#149) shadows:\n\t- PaymentSplitter.shares (function @ PaymentSplitter.sol#189-191)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function totalShares() public view returns (uint256) {\n\n        return _totalShares;\n",
          "message": "PaymentSplitter.totalShares (PaymentSplitter.sol#175-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 184,
          "vulnerability_code": "    function totalReleased() public view returns (uint256) {\n\n        return _totalReleased;\n",
          "message": "PaymentSplitter.totalReleased (PaymentSplitter.sol#182-184) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function shares(address account) public view returns (uint256) {\n\n        return _shares[account];\n",
          "message": "PaymentSplitter.shares (PaymentSplitter.sol#189-191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 198,
          "vulnerability_code": "    function released(address account) public view returns (uint256) {\n\n        return _released[account];\n",
          "message": "PaymentSplitter.released (PaymentSplitter.sol#196-198) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": 205,
          "vulnerability_code": "    function payee(uint256 index) public view returns (address) {\n\n        return _payees[index];\n",
          "message": "PaymentSplitter.payee (PaymentSplitter.sol#203-205) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function release(address payable account) public {\n\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n\n\n        uint256 totalReceived = address(this).balance.add(_totalReleased);\n\n        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n\n\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n\n\n        _released[account] = _released[account].add(payment);\n\n        _totalReleased = _totalReleased.add(payment);\n\n\n\n        account.transfer(payment);\n\n        emit PaymentReleased(account, payment);\n",
          "message": "PaymentSplitter.release (PaymentSplitter.sol#211-224) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in PaymentSplitter.sol:\n\t- pragma solidity^0.5.0 (PaymentSplitter.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (PaymentSplitter.sol#113): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": 240,
          "vulnerability_code": "    function _addPayee(address account, uint256 shares_) private {\n\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n\n\n        _payees.push(account);\n\n        _shares[account] = shares_;\n\n        _totalShares = _totalShares.add(shares_);\n\n        emit PayeeAdded(account, shares_);\n",
          "message": "Function 'PaymentSplitter._addPayee' (PaymentSplitter.sol#231-240) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < payees.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract PaymentSplitter {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalShares;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalReleased;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _shares;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _released;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] private _payees;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function release(address payable account) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 totalReceived = address(this).balance.add(_totalReleased);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _released[account] = _released[account].add(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _released[account] = _released[account].add(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _released[account] = _released[account].add(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalReleased = _totalReleased.add(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalReleased = _totalReleased.add(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        account.transfer(payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit PaymentReleased(account, payment);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit PaymentReleased(account, payment);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}