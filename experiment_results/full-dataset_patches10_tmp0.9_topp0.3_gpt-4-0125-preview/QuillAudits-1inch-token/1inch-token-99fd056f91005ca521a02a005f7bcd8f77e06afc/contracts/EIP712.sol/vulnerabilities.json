{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function _getChainId() private pure returns (uint256 chainId) {\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            chainId := chainid()\n\n        }\n",
          "message": "EIP712._getChainId (EIP712.sol#103-108) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function _getChainId() private pure returns (uint256 chainId) {\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            chainId := chainid()\n\n        }\n",
          "message": "EIP712._getChainId uses assembly (EIP712.sol#103-108)\n\t- EIP712.sol#105-107\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in EIP712.sol:\n\t- pragma solidity^0.6.0 (EIP712.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 70,
          "vulnerability_code": "    function _domainSeparatorV4() internal view returns (bytes32) {\n\n        if (_getChainId() == _CACHED_CHAIN_ID) {\n\n            return _CACHED_DOMAIN_SEPARATOR;\n\n        } else {\n\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n\n        }\n",
          "message": "Function 'EIP712._domainSeparatorV4' (EIP712.sol#64-70) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n\n        return keccak256(\n\n            abi.encode(\n\n                typeHash,\n\n                name,\n\n                version,\n\n                _getChainId(),\n\n                address(this)\n\n            )\n\n        );\n",
          "message": "Function 'EIP712._buildDomainSeparator' (EIP712.sol#72-82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\n\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n",
          "message": "Function 'EIP712._hashTypedDataV4' (EIP712.sol#99-101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": 108,
          "vulnerability_code": "    function _getChainId() private pure returns (uint256 chainId) {\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly {\n\n            chainId := chainid()\n\n        }\n",
          "message": "Function 'EIP712._getChainId' (EIP712.sol#103-108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n",
          "message": "Variable 'EIP712._CACHED_DOMAIN_SEPARATOR' (EIP712.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private immutable _CACHED_CHAIN_ID;\n",
          "message": "Variable 'EIP712._CACHED_CHAIN_ID' (EIP712.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _HASHED_NAME;\n",
          "message": "Variable 'EIP712._HASHED_NAME' (EIP712.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _HASHED_VERSION;\n",
          "message": "Variable 'EIP712._HASHED_VERSION' (EIP712.sol#34) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _TYPE_HASH;\n",
          "message": "Variable 'EIP712._TYPE_HASH' (EIP712.sol#35) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getChainId() private pure returns (uint256 chainId) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private immutable _CACHED_CHAIN_ID;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _HASHED_NAME;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _HASHED_VERSION;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private immutable _TYPE_HASH;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getChainId() private pure returns (uint256 chainId) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}