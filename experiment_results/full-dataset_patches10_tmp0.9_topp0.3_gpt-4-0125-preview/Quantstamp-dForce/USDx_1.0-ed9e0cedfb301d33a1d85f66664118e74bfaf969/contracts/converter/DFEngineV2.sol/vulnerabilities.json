{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _status = _NOT_ENTERED;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _usdxToken,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfStore,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfPool,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfCol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfFunds)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        initialize(_usdxToken, _dfStore, _dfPool, _dfCol, _dfFunds);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 685,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 686,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 755,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 762,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 798,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setSectionBurned(add(_burned, _amountTemp));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setSectionBurned(_minted);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 805,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.burnSectionMoveon();\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfPool.transferOutSrc(\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 819,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 819,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 888,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 629,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!initialized, \"initialize: Already initialized!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "                doTransferFrom(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _token,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    depositor,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfFunds,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfFee\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"_unifiedCommission: transferFrom fee failed\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"Deposit: amount is invalid.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"Withdraw: amount is invalid.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 910,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 z = base;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "                z = mul(z, base);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return z;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 509,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "                doTransferFrom(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 654,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    _token,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    depositor,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfFunds,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfFee\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"_unifiedCommission: transferFrom fee failed\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 910,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 912,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_42"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 125,
          "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
          "message": "IERC20 (DFEngineV2.sol#48-125) has incorrect ERC20 function interface(s):\n\t-transfer (DFEngineV2.sol#64)\n\t-approve (DFEngineV2.sol#90)\n\t-transferFrom (DFEngineV2.sol#99-103)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": 721,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
          "message": "DFEngineV2.deposit (DFEngineV2.sol#664-721) does not use the value returned by external calls:\n\t-dfPool.transferFromSender(_srcToken,_depositor,IDSWrappedToken(_tokenID).reverseByMultiple(_amount)) (DFEngineV2.sol#670)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_tokenBalance[1]) (DFEngineV2.sol#715)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": 744,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
          "message": "DFEngineV2.withdraw (DFEngineV2.sol#723-744) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokenID).unwrap(address(dfPool),_withdrawAmount) (DFEngineV2.sol#739)\n\t-dfPool.transferOut(_srcToken,_depositor,_srcWithdrawAmount) (DFEngineV2.sol#741)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": 772,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
          "message": "DFEngineV2.claim (DFEngineV2.sol#746-772) does not use the value returned by external calls:\n\t-dfPool.transferOut(address(usdxToken),_depositor,_mintAmount) (DFEngineV2.sol#770)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": 828,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOutSrc(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
          "message": "DFEngineV2.destroy (DFEngineV2.sol#774-828) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngineV2.sol#814)\n\t-dfPool.transferOutSrc(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngineV2.sol#815-818)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": 857,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
          "message": "DFEngineV2.oneClickMinting (DFEngineV2.sol#830-857) does not use the value returned by external calls:\n\t-dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngineV2.sol#848)\n\t-IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngineV2.sol#850)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": 899,
          "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
          "message": "DFEngineV2._convert (DFEngineV2.sol#859-899) does not use the value returned by external calls:\n\t-dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngineV2.sol#879)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_depositorMintTotal) (DFEngineV2.sol#897)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 704,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
          "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],_depositorBalance[i_scope_0]) (DFEngineV2.sol#704)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 709,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
          "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],sub(_depositorBalance[i_scope_0],_tokenBalance[0])) (DFEngineV2.sol#709)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
          "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i_scope_0],sub(_resUSDXBalance[i_scope_0],_tokenBalance[0])) (DFEngineV2.sol#710)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]) (DFEngineV2.sol#684)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 685,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFEngineV2.sol#685)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 686,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- _depositorBalance[i] = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngineV2.sol#686)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFEngineV2.claim has external calls inside a loop:\n\t- _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]) (DFEngineV2.sol#754)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 755,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "DFEngineV2.claim has external calls inside a loop:\n\t- _depositorBalance = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngineV2.sol#755)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
          "message": "DFEngineV2.claim has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(_resUSDXBalance,_depositorMintAmount)) (DFEngineV2.sol#761)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 762,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
          "message": "DFEngineV2.claim has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance,_depositorMintAmount)) (DFEngineV2.sol#762)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
          "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- (_minted,_burned,None,_tokens,_burnCW) = dfStore.getSectionData(dfStore.getBurnPosition()) (DFEngineV2.sol#790)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 814,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
          "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngineV2.sol#814)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 815,
          "vulnerability_to_line": 818,
          "vulnerability_code": "                dfPool.transferOutSrc(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n",
          "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- dfPool.transferOutSrc(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngineV2.sol#815-818)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 819,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
          "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- dfStore.setTotalCol(sub(dfStore.getTotalCol(),_tokenAmount)) (DFEngineV2.sol#819)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 847,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n",
          "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- _srcAmount = IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW)) (DFEngineV2.sol#847)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
          "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngineV2.sol#848)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
          "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW))) (DFEngineV2.sol#849)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
          "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngineV2.sol#850)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 878,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
          "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setTokenBalance(_tokens[i],sub(_tokenBalance[i],_mintAmount)) (DFEngineV2.sol#878)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
          "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngineV2.sol#879)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
          "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),_mintAmount)) (DFEngineV2.sol#880)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
          "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],add(_resUSDXBalance[i],_mintAmount)) (DFEngineV2.sol#884)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 888,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
          "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance[i],_depositorMintAmount)) (DFEngineV2.sol#888)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 889,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
          "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(add(_resUSDXBalance[i],_mintAmount),_depositorMintAmount)) (DFEngineV2.sol#889)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 906,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _colTotal = add(_colTotal, IDSToken(_tokens[i]).balanceOf(_dfCol));\n",
          "message": "DFEngineV2.checkUSDXTotalAndColTotal has external calls inside a loop:\n\t- _colTotal = add(_colTotal,IDSToken(_tokens[i]).balanceOf(_dfCol)) (DFEngineV2.sol#906)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doTransferOut uses assembly (DFEngineV2.sol#132-156)\n\t- DFEngineV2.sol#142-154\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doTransferFrom uses assembly (DFEngineV2.sol#158-183)\n\t- DFEngineV2.sol#169-181\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": 209,
          "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doApprove uses assembly (DFEngineV2.sol#185-209)\n\t- DFEngineV2.sol#195-207\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
          "message": "IERC20Token.balanceOf (DFEngineV2.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
          "message": "IERC20Token.allowance (DFEngineV2.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transfer (DFEngineV2.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (DFEngineV2.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.approve (DFEngineV2.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "IERC20Token.totalSupply (DFEngineV2.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
          "message": "IDSToken.mint (DFEngineV2.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
          "message": "IDSToken.burn (DFEngineV2.sol#23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.mint (DFEngineV2.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.burn (DFEngineV2.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.wrap (DFEngineV2.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.unwrap (DFEngineV2.sol#34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
          "message": "IDSWrappedToken.changeByMultiple (DFEngineV2.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
          "message": "IDSWrappedToken.reverseByMultiple (DFEngineV2.sol#36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
          "message": "IDSWrappedToken.getSrcERC20 (DFEngineV2.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getSectionMinted (DFEngineV2.sol#218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
          "message": "IDFStore.addSectionMinted (DFEngineV2.sol#219) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
          "message": "IDFStore.addSectionMinted (DFEngineV2.sol#220) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
          "message": "IDFStore.setSectionMinted (DFEngineV2.sol#221) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
          "message": "IDFStore.setSectionMinted (DFEngineV2.sol#222) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getSectionBurned (DFEngineV2.sol#224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
          "message": "IDFStore.addSectionBurned (DFEngineV2.sol#225) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
          "message": "IDFStore.addSectionBurned (DFEngineV2.sol#226) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
          "message": "IDFStore.setSectionBurned (DFEngineV2.sol#227) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
          "message": "IDFStore.setSectionBurned (DFEngineV2.sol#228) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
          "message": "IDFStore.getSectionToken (DFEngineV2.sol#230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
          "message": "IDFStore.getSectionWeight (DFEngineV2.sol#231) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
          "message": "IDFStore.getSectionData (DFEngineV2.sol#232) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
          "message": "IDFStore.getBackupSectionData (DFEngineV2.sol#233) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getBackupSectionIndex (DFEngineV2.sol#234) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
          "message": "IDFStore.setBackupSectionIndex (DFEngineV2.sol#235) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
          "message": "IDFStore.setSection (DFEngineV2.sol#237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
          "message": "IDFStore.setBackupSection (DFEngineV2.sol#238) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burnSectionMoveon() public;\n",
          "message": "IDFStore.burnSectionMoveon (DFEngineV2.sol#239) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
          "message": "IDFStore.getMintingToken (DFEngineV2.sol#241) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
          "message": "IDFStore.setMintingToken (DFEngineV2.sol#242) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
          "message": "IDFStore.getMintedToken (DFEngineV2.sol#243) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
          "message": "IDFStore.setMintedToken (DFEngineV2.sol#244) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
          "message": "IDFStore.getBackupToken (DFEngineV2.sol#245) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
          "message": "IDFStore.setBackupToken (DFEngineV2.sol#246) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
          "message": "IDFStore.getMintedTokenList (DFEngineV2.sol#247) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
          "message": "IDFStore.getMintPosition (DFEngineV2.sol#249) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
          "message": "IDFStore.getBurnPosition (DFEngineV2.sol#250) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
          "message": "IDFStore.getTotalMinted (DFEngineV2.sol#252) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
          "message": "IDFStore.addTotalMinted (DFEngineV2.sol#253) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
          "message": "IDFStore.setTotalMinted (DFEngineV2.sol#254) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
          "message": "IDFStore.getTotalBurned (DFEngineV2.sol#255) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
          "message": "IDFStore.addTotalBurned (DFEngineV2.sol#256) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
          "message": "IDFStore.setTotalBurned (DFEngineV2.sol#257) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
          "message": "IDFStore.getMinBurnAmount (DFEngineV2.sol#258) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
          "message": "IDFStore.setMinBurnAmount (DFEngineV2.sol#259) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getTokenBalance (DFEngineV2.sol#261) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setTokenBalance (DFEngineV2.sol#262) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getResUSDXBalance (DFEngineV2.sol#263) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setResUSDXBalance (DFEngineV2.sol#264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getDepositorBalance (DFEngineV2.sol#265) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setDepositorBalance (DFEngineV2.sol#266) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
          "message": "IDFStore.getFeeRate (DFEngineV2.sol#268) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
          "message": "IDFStore.setFeeRate (DFEngineV2.sol#269) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
          "message": "IDFStore.getTypeToken (DFEngineV2.sol#270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
          "message": "IDFStore.setTypeToken (DFEngineV2.sol#271) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
          "message": "IDFStore.getTokenMedian (DFEngineV2.sol#272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
          "message": "IDFStore.setTokenMedian (DFEngineV2.sol#273) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
          "message": "IDFStore.setTotalCol (DFEngineV2.sol#275) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
          "message": "IDFStore.getTotalCol (DFEngineV2.sol#276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
          "message": "IDFStore.setWrappedToken (DFEngineV2.sol#278) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
          "message": "IDFStore.getWrappedToken (DFEngineV2.sol#279) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
          "message": "IDFPoolV2.transferOut (DFEngineV2.sol#287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOutSrc(address _tokenID, address _to, uint _amount) public returns (bool);\n",
          "message": "IDFPoolV2.transferOutSrc (DFEngineV2.sol#288) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\n",
          "message": "IDFPoolV2.transferFromSender (DFEngineV2.sol#289) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFromSenderOneClick(address _tokenID, address _from, uint _amount) public returns (bool);\n",
          "message": "IDFPoolV2.transferFromSenderOneClick (DFEngineV2.sol#290) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount) public returns (bool);\n",
          "message": "IDFPoolV2.transferToCol (DFEngineV2.sol#291) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\n",
          "message": "IDFPoolV2.transferFromSenderToCol (DFEngineV2.sol#292) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
          "message": "IDFPoolV2.approveToEngine (DFEngineV2.sol#293) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256);\n",
          "message": "IDFPoolV2.getInterestByXToken (DFEngineV2.sol#294) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUnderlying(address _underlying) public returns (uint256);\n",
          "message": "IDFPoolV2.getUnderlying (DFEngineV2.sol#295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read() public view returns (bytes32);\n",
          "message": "IMedianizer.read (DFEngineV2.sol#303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 326,
          "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
          "message": "DSAuthority.canCall (DFEngineV2.sol#324-326) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
          "message": "DSAuth.disableOwnership (DFEngineV2.sol#346-349) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": 354,
          "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
          "message": "DSAuth.transferOwnership (DFEngineV2.sol#351-354) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": 361,
          "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
          "message": "DSAuth.acceptOwnership (DFEngineV2.sol#356-361) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": 370,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
          "message": "DSAuth.setAuthority (DFEngineV2.sol#364-370) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": 510,
          "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
          "message": "DSMath.pow (DFEngineV2.sol#494-510) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": 721,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
          "message": "DFEngineV2.deposit (DFEngineV2.sol#664-721) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": 744,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
          "message": "DFEngineV2.withdraw (DFEngineV2.sol#723-744) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": 772,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
          "message": "DFEngineV2.claim (DFEngineV2.sol#746-772) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": 828,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOutSrc(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
          "message": "DFEngineV2.destroy (DFEngineV2.sol#774-828) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": 857,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
          "message": "DFEngineV2.oneClickMinting (DFEngineV2.sol#830-857) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (DFEngineV2.sol#133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (DFEngineV2.sol#134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (DFEngineV2.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#161) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#162) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (DFEngineV2.sol#186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (DFEngineV2.sol#187) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (DFEngineV2.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _usdxToken,\n",
          "message": "Parameter '_usdxToken' of DFEngineV2. (DFEngineV2.sol#611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfStore,\n",
          "message": "Parameter '_dfStore' of DFEngineV2. (DFEngineV2.sol#612) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfPool,\n",
          "message": "Parameter '_dfPool' of DFEngineV2. (DFEngineV2.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfCol,\n",
          "message": "Parameter '_dfCol' of DFEngineV2. (DFEngineV2.sol#614) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 615,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfFunds)\n",
          "message": "Parameter '_dfFunds' of DFEngineV2. (DFEngineV2.sol#615) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _usdxToken,\n",
          "message": "Parameter '_usdxToken' of DFEngineV2.initialize (DFEngineV2.sol#623) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfStore,\n",
          "message": "Parameter '_dfStore' of DFEngineV2.initialize (DFEngineV2.sol#624) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfPool,\n",
          "message": "Parameter '_dfPool' of DFEngineV2.initialize (DFEngineV2.sol#625) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfCol,\n",
          "message": "Parameter '_dfCol' of DFEngineV2.initialize (DFEngineV2.sol#626) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfFunds\n",
          "message": "Parameter '_dfFunds' of DFEngineV2.initialize (DFEngineV2.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": 662,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n\n        uint rate = dfStore.getFeeRate(uint(ct));\n\n        if(rate > 0) {\n\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\n\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\n\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\n\n            require(\n\n                doTransferFrom(\n\n                    _token,\n\n                    depositor,\n\n                    dfFunds,\n\n                    dfFee\n\n                ),\n\n                \"_unifiedCommission: transferFrom fee failed\"\n\n            );\n\n        }\n",
          "message": "Function 'DFEngineV2._unifiedCommission' (DFEngineV2.sol#645-662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngineV2._unifiedCommission (DFEngineV2.sol#645) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
          "message": "Parameter '_amount' of DFEngineV2._unifiedCommission (DFEngineV2.sol#645) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_depositor' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_srcToken' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_srcAmount' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_depositor' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_srcToken' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_srcAmount' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_depositor' of DFEngineV2.claim (DFEngineV2.sol#746) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 746,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngineV2.claim (DFEngineV2.sol#746) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n",
          "message": "Parameter '_depositor' of DFEngineV2.destroy (DFEngineV2.sol#774) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngineV2.destroy (DFEngineV2.sol#774) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n",
          "message": "Parameter '_amount' of DFEngineV2.destroy (DFEngineV2.sol#774) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n",
          "message": "Parameter '_depositor' of DFEngineV2.oneClickMinting (DFEngineV2.sol#830) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngineV2.oneClickMinting (DFEngineV2.sol#830) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n",
          "message": "Parameter '_amount' of DFEngineV2.oneClickMinting (DFEngineV2.sol#830) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": 899,
          "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
          "message": "Function 'DFEngineV2._convert' (DFEngineV2.sol#859-899) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 860,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _depositor,\n",
          "message": "Parameter '_depositor' of DFEngineV2._convert (DFEngineV2.sol#860) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory _tokens,\n",
          "message": "Parameter '_tokens' of DFEngineV2._convert (DFEngineV2.sol#861) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 862,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _mintCW,\n",
          "message": "Parameter '_mintCW' of DFEngineV2._convert (DFEngineV2.sol#862) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 863,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _tokenBalance,\n",
          "message": "Parameter '_tokenBalance' of DFEngineV2._convert (DFEngineV2.sol#863) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 864,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _resUSDXBalance,\n",
          "message": "Parameter '_resUSDXBalance' of DFEngineV2._convert (DFEngineV2.sol#864) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _depositorBalance,\n",
          "message": "Parameter '_depositorBalance' of DFEngineV2._convert (DFEngineV2.sol#865) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 866,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _step)\n",
          "message": "Parameter '_step' of DFEngineV2._convert (DFEngineV2.sol#866) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = address(0x0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 683,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 793,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 845,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _ENTERED = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _status;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private initialized;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}