{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _usdxToken,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfStore,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfPool,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfCol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfFunds)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        usdxToken = IDSToken(_usdxToken);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "        dfStore = IDFStore(_dfStore);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setSectionBurned(add(_burned, _amountTemp));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setSectionBurned(_minted);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.burnSectionMoveon();\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfPool.transferOut(\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 206,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"Deposit: amount is invalid.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"Withdraw: amount is invalid.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 z = base;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "                z = mul(z, base);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return z;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 637,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_20"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 390,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n\n        uint rate = dfStore.getFeeRate(uint(ct));\n\n        if(rate > 0) {\n\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\n\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\n\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\n\n            IDSToken(_token).transferFrom(depositor, dfFunds, dfFee);\n\n        }\n",
          "message": "DFEngine._unifiedCommission (DFEngine.sol#381-390) does not use the value returned by external calls:\n\t-IDSToken(_token).transferFrom(depositor,dfFunds,dfFee) (DFEngine.sol#388)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": 449,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
          "message": "DFEngine.deposit (DFEngine.sol#392-449) does not use the value returned by external calls:\n\t-dfPool.transferFromSender(_srcToken,_depositor,IDSWrappedToken(_tokenID).reverseByMultiple(_amount)) (DFEngine.sol#398)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_tokenBalance[1]) (DFEngine.sol#443)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
          "message": "DFEngine.withdraw (DFEngine.sol#451-472) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokenID).unwrap(address(dfPool),_withdrawAmount) (DFEngine.sol#467)\n\t-dfPool.transferOut(_srcToken,_depositor,_srcWithdrawAmount) (DFEngine.sol#469)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 500,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
          "message": "DFEngine.claim (DFEngine.sol#474-500) does not use the value returned by external calls:\n\t-dfPool.transferOut(address(usdxToken),_depositor,_mintAmount) (DFEngine.sol#498)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 556,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOut(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
          "message": "DFEngine.destroy (DFEngine.sol#502-556) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngine.sol#542)\n\t-dfPool.transferOut(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngine.sol#543-546)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": 585,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
          "message": "DFEngine.oneClickMinting (DFEngine.sol#558-585) does not use the value returned by external calls:\n\t-dfPool.transferFromSender(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngine.sol#576)\n\t-IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngine.sol#578)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": 627,
          "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
          "message": "DFEngine._convert (DFEngine.sol#587-627) does not use the value returned by external calls:\n\t-dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngine.sol#607)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_depositorMintTotal) (DFEngine.sol#625)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
          "message": "DFEngine.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],_depositorBalance[i_scope_0]) (DFEngine.sol#432)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
          "message": "DFEngine.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],sub(_depositorBalance[i_scope_0],_tokenBalance[0])) (DFEngine.sol#437)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
          "message": "DFEngine.deposit has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i_scope_0],sub(_resUSDXBalance[i_scope_0],_tokenBalance[0])) (DFEngine.sol#438)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "DFEngine.deposit has external calls inside a loop:\n\t- _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]) (DFEngine.sol#412)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFEngine.deposit has external calls inside a loop:\n\t- _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFEngine.sol#413)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "DFEngine.deposit has external calls inside a loop:\n\t- _depositorBalance[i] = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngine.sol#414)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFEngine.claim has external calls inside a loop:\n\t- _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]) (DFEngine.sol#482)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "DFEngine.claim has external calls inside a loop:\n\t- _depositorBalance = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngine.sol#483)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
          "message": "DFEngine.claim has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(_resUSDXBalance,_depositorMintAmount)) (DFEngine.sol#489)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
          "message": "DFEngine.claim has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance,_depositorMintAmount)) (DFEngine.sol#490)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
          "message": "DFEngine.destroy has external calls inside a loop:\n\t- (_minted,_burned,None,_tokens,_burnCW) = dfStore.getSectionData(dfStore.getBurnPosition()) (DFEngine.sol#518)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
          "message": "DFEngine.destroy has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngine.sol#542)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": 546,
          "vulnerability_code": "                dfPool.transferOut(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n",
          "message": "DFEngine.destroy has external calls inside a loop:\n\t- dfPool.transferOut(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngine.sol#543-546)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
          "message": "DFEngine.destroy has external calls inside a loop:\n\t- dfStore.setTotalCol(sub(dfStore.getTotalCol(),_tokenAmount)) (DFEngine.sol#547)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n",
          "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- _srcAmount = IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW)) (DFEngine.sol#575)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
          "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- dfPool.transferFromSender(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngine.sol#576)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
          "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW))) (DFEngine.sol#577)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
          "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngine.sol#578)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
          "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setTokenBalance(_tokens[i],sub(_tokenBalance[i],_mintAmount)) (DFEngine.sol#606)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
          "message": "DFEngine._convert has external calls inside a loop:\n\t- dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngine.sol#607)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
          "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),_mintAmount)) (DFEngine.sol#608)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
          "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],add(_resUSDXBalance[i],_mintAmount)) (DFEngine.sol#612)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
          "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance[i],_depositorMintAmount)) (DFEngine.sol#616)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
          "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(add(_resUSDXBalance[i],_mintAmount),_depositorMintAmount)) (DFEngine.sol#617)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _colTotal = add(_colTotal, IDSToken(_tokens[i]).balanceOf(_dfCol));\n",
          "message": "DFEngine.checkUSDXTotalAndColTotal has external calls inside a loop:\n\t- _colTotal = add(_colTotal,IDSToken(_tokens[i]).balanceOf(_dfCol)) (DFEngine.sol#634)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
          "message": "IERC20Token.balanceOf (DFEngine.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
          "message": "IERC20Token.allowance (DFEngine.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transfer (DFEngine.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (DFEngine.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.approve (DFEngine.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "IERC20Token.totalSupply (DFEngine.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
          "message": "IDSToken.mint (DFEngine.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
          "message": "IDSToken.burn (DFEngine.sol#23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.mint (DFEngine.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.burn (DFEngine.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.wrap (DFEngine.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.unwrap (DFEngine.sol#34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
          "message": "IDSWrappedToken.changeByMultiple (DFEngine.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
          "message": "IDSWrappedToken.reverseByMultiple (DFEngine.sol#36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
          "message": "IDSWrappedToken.getSrcERC20 (DFEngine.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getSectionMinted (DFEngine.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
          "message": "IDFStore.addSectionMinted (DFEngine.sol#47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
          "message": "IDFStore.addSectionMinted (DFEngine.sol#48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
          "message": "IDFStore.setSectionMinted (DFEngine.sol#49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
          "message": "IDFStore.setSectionMinted (DFEngine.sol#50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getSectionBurned (DFEngine.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
          "message": "IDFStore.addSectionBurned (DFEngine.sol#53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
          "message": "IDFStore.addSectionBurned (DFEngine.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
          "message": "IDFStore.setSectionBurned (DFEngine.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
          "message": "IDFStore.setSectionBurned (DFEngine.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
          "message": "IDFStore.getSectionToken (DFEngine.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
          "message": "IDFStore.getSectionWeight (DFEngine.sol#59) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
          "message": "IDFStore.getSectionData (DFEngine.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
          "message": "IDFStore.getBackupSectionData (DFEngine.sol#61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getBackupSectionIndex (DFEngine.sol#62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
          "message": "IDFStore.setBackupSectionIndex (DFEngine.sol#63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
          "message": "IDFStore.setSection (DFEngine.sol#65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
          "message": "IDFStore.setBackupSection (DFEngine.sol#66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burnSectionMoveon() public;\n",
          "message": "IDFStore.burnSectionMoveon (DFEngine.sol#67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
          "message": "IDFStore.getMintingToken (DFEngine.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
          "message": "IDFStore.setMintingToken (DFEngine.sol#70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
          "message": "IDFStore.getMintedToken (DFEngine.sol#71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
          "message": "IDFStore.setMintedToken (DFEngine.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
          "message": "IDFStore.getBackupToken (DFEngine.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
          "message": "IDFStore.setBackupToken (DFEngine.sol#74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
          "message": "IDFStore.getMintedTokenList (DFEngine.sol#75) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
          "message": "IDFStore.getMintPosition (DFEngine.sol#77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
          "message": "IDFStore.getBurnPosition (DFEngine.sol#78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
          "message": "IDFStore.getTotalMinted (DFEngine.sol#80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
          "message": "IDFStore.addTotalMinted (DFEngine.sol#81) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
          "message": "IDFStore.setTotalMinted (DFEngine.sol#82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
          "message": "IDFStore.getTotalBurned (DFEngine.sol#83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
          "message": "IDFStore.addTotalBurned (DFEngine.sol#84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
          "message": "IDFStore.setTotalBurned (DFEngine.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
          "message": "IDFStore.getMinBurnAmount (DFEngine.sol#86) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
          "message": "IDFStore.setMinBurnAmount (DFEngine.sol#87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getTokenBalance (DFEngine.sol#89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setTokenBalance (DFEngine.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getResUSDXBalance (DFEngine.sol#91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setResUSDXBalance (DFEngine.sol#92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getDepositorBalance (DFEngine.sol#93) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setDepositorBalance (DFEngine.sol#94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
          "message": "IDFStore.getFeeRate (DFEngine.sol#96) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
          "message": "IDFStore.setFeeRate (DFEngine.sol#97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
          "message": "IDFStore.getTypeToken (DFEngine.sol#98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
          "message": "IDFStore.setTypeToken (DFEngine.sol#99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
          "message": "IDFStore.getTokenMedian (DFEngine.sol#100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
          "message": "IDFStore.setTokenMedian (DFEngine.sol#101) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
          "message": "IDFStore.setTotalCol (DFEngine.sol#103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
          "message": "IDFStore.getTotalCol (DFEngine.sol#104) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
          "message": "IDFStore.setWrappedToken (DFEngine.sol#106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
          "message": "IDFStore.getWrappedToken (DFEngine.sol#107) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
          "message": "IDFPool.transferOut (DFEngine.sol#115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\n",
          "message": "IDFPool.transferFromSender (DFEngine.sol#116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount) public returns (bool);\n",
          "message": "IDFPool.transferToCol (DFEngine.sol#117) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\n",
          "message": "IDFPool.transferFromSenderToCol (DFEngine.sol#118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
          "message": "IDFPool.approveToEngine (DFEngine.sol#119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read() public view returns (bytes32);\n",
          "message": "IMedianizer.read (DFEngine.sol#127) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 150,
          "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
          "message": "DSAuthority.canCall (DFEngine.sol#148-150) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": 173,
          "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
          "message": "DSAuth.disableOwnership (DFEngine.sol#170-173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 178,
          "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
          "message": "DSAuth.transferOwnership (DFEngine.sol#175-178) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": 185,
          "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
          "message": "DSAuth.acceptOwnership (DFEngine.sol#180-185) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 194,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
          "message": "DSAuth.setAuthority (DFEngine.sol#188-194) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": 334,
          "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
          "message": "DSMath.pow (DFEngine.sol#318-334) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": 449,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
          "message": "DFEngine.deposit (DFEngine.sol#392-449) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
          "message": "DFEngine.withdraw (DFEngine.sol#451-472) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 500,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
          "message": "DFEngine.claim (DFEngine.sol#474-500) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 556,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOut(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
          "message": "DFEngine.destroy (DFEngine.sol#502-556) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": 585,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
          "message": "DFEngine.oneClickMinting (DFEngine.sol#558-585) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _usdxToken,\n",
          "message": "Parameter '_usdxToken' of DFEngine. (DFEngine.sol#362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfStore,\n",
          "message": "Parameter '_dfStore' of DFEngine. (DFEngine.sol#363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfPool,\n",
          "message": "Parameter '_dfPool' of DFEngine. (DFEngine.sol#364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfCol,\n",
          "message": "Parameter '_dfCol' of DFEngine. (DFEngine.sol#365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _dfFunds)\n",
          "message": "Parameter '_dfFunds' of DFEngine. (DFEngine.sol#366) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 390,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n\n        uint rate = dfStore.getFeeRate(uint(ct));\n\n        if(rate > 0) {\n\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\n\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\n\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\n\n            IDSToken(_token).transferFrom(depositor, dfFunds, dfFee);\n\n        }\n",
          "message": "Function 'DFEngine._unifiedCommission' (DFEngine.sol#381-390) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngine._unifiedCommission (DFEngine.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
          "message": "Parameter '_amount' of DFEngine._unifiedCommission (DFEngine.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_depositor' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_srcToken' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_srcAmount' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_depositor' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_srcToken' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
          "message": "Parameter '_srcAmount' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n",
          "message": "Parameter '_depositor' of DFEngine.claim (DFEngine.sol#474) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngine.claim (DFEngine.sol#474) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n",
          "message": "Parameter '_depositor' of DFEngine.destroy (DFEngine.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngine.destroy (DFEngine.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n",
          "message": "Parameter '_amount' of DFEngine.destroy (DFEngine.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n",
          "message": "Parameter '_depositor' of DFEngine.oneClickMinting (DFEngine.sol#558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n",
          "message": "Parameter '_feeTokenIdx' of DFEngine.oneClickMinting (DFEngine.sol#558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFEngine.oneClickMinting (DFEngine.sol#558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": 627,
          "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
          "message": "Function 'DFEngine._convert' (DFEngine.sol#587-627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _depositor,\n",
          "message": "Parameter '_depositor' of DFEngine._convert (DFEngine.sol#588) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] memory _tokens,\n",
          "message": "Parameter '_tokens' of DFEngine._convert (DFEngine.sol#589) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 590,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _mintCW,\n",
          "message": "Parameter '_mintCW' of DFEngine._convert (DFEngine.sol#590) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _tokenBalance,\n",
          "message": "Parameter '_tokenBalance' of DFEngine._convert (DFEngine.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _resUSDXBalance,\n",
          "message": "Parameter '_resUSDXBalance' of DFEngine._convert (DFEngine.sol#592) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 593,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint[] memory _depositorBalance,\n",
          "message": "Parameter '_depositorBalance' of DFEngine._convert (DFEngine.sol#593) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _step)\n",
          "message": "Parameter '_step' of DFEngine._convert (DFEngine.sol#594) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = address(0x0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}