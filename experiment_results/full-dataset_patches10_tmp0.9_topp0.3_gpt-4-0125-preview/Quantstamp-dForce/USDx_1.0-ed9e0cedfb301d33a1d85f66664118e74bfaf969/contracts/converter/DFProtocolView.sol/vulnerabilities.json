{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address _dfStore, address _dfCol)\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        public\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        dfStore = IDFStore(_dfStore);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        dfCol = _dfCol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _balance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _xAmount = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"CalcDepositorMintTotal: asset not allow.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 z = base;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "                z = mul(z, base);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return z;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"CalcDepositorMintTotal: asset not allow.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_111"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "DFProtocolView.getUSDXForDeposit has external calls inside a loop:\n\t- _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]) (DFProtocolView.sol#258)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFProtocolView.getUSDXForDeposit has external calls inside a loop:\n\t- _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFProtocolView.sol#259)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "DFProtocolView.getUSDXForDeposit has external calls inside a loop:\n\t- _depositorBalance[i] = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFProtocolView.sol#260)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFProtocolView.getUserMaxToClaim has external calls inside a loop:\n\t- _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]) (DFProtocolView.sol#286)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
          "message": "DFProtocolView.getUserMaxToClaim has external calls inside a loop:\n\t- _depositorBalance = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFProtocolView.sol#287)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _balance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
          "message": "DFProtocolView.getColMaxClaim has external calls inside a loop:\n\t- _balance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFProtocolView.sol#302)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getColMaxClaim has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#303)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getMintingSection has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#316)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getBurningSection has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#330)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getUserWithdrawBalance has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#343)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _withdrawBalances[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(calcWithdrawAmount(_depositor, _tokens[i]));\n",
          "message": "DFProtocolView.getUserWithdrawBalance has external calls inside a loop:\n\t- _withdrawBalances[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(calcWithdrawAmount(_depositor,_tokens[i])) (DFProtocolView.sol#344)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol);\n",
          "message": "DFProtocolView.getColStatus has external calls inside a loop:\n\t- _xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol) (DFProtocolView.sol#380)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n",
          "message": "DFProtocolView.getColStatus has external calls inside a loop:\n\t- _srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount) (DFProtocolView.sol#381)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getColStatus has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#382)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _xAmount = dfStore.getTokenBalance(_tokens[i]);\n",
          "message": "DFProtocolView.getPoolStatus has external calls inside a loop:\n\t- _xAmount = dfStore.getTokenBalance(_tokens[i]) (DFProtocolView.sol#395)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n",
          "message": "DFProtocolView.getPoolStatus has external calls inside a loop:\n\t- _srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount) (DFProtocolView.sol#396)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getPoolStatus has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#397)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.calcMaxMinting has external calls inside a loop:\n\t- _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#415)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _balance = IDSWrappedToken(_srcToken).balanceOf(_depositor);\n",
          "message": "DFProtocolView.calcMaxMinting has external calls inside a loop:\n\t- _balance = IDSWrappedToken(_srcToken).balanceOf(_depositor) (DFProtocolView.sol#416)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _step = min(div(IDSWrappedToken(_tokens[i]).changeByMultiple(_balance), _mintCW[i]), _step);\n",
          "message": "DFProtocolView.calcMaxMinting has external calls inside a loop:\n\t- _step = min(div(IDSWrappedToken(_tokens[i]).changeByMultiple(_balance),_mintCW[i]),_step) (DFProtocolView.sol#417)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
          "message": "DFProtocolView.getCollateralList has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#428)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
          "message": "IERC20Token.balanceOf (DFProtocolView.sol#9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
          "message": "IERC20Token.allowance (DFProtocolView.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transfer (DFProtocolView.sol#11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (DFProtocolView.sol#12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.approve (DFProtocolView.sol#13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "IERC20Token.totalSupply (DFProtocolView.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.mint (DFProtocolView.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.burn (DFProtocolView.sol#23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.wrap (DFProtocolView.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.unwrap (DFProtocolView.sol#25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
          "message": "IDSWrappedToken.changeByMultiple (DFProtocolView.sol#26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
          "message": "IDSWrappedToken.reverseByMultiple (DFProtocolView.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
          "message": "IDSWrappedToken.getSrcERC20 (DFProtocolView.sol#28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getSectionMinted (DFProtocolView.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
          "message": "IDFStore.addSectionMinted (DFProtocolView.sol#38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
          "message": "IDFStore.addSectionMinted (DFProtocolView.sol#39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
          "message": "IDFStore.setSectionMinted (DFProtocolView.sol#40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
          "message": "IDFStore.setSectionMinted (DFProtocolView.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getSectionBurned (DFProtocolView.sol#43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
          "message": "IDFStore.addSectionBurned (DFProtocolView.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
          "message": "IDFStore.addSectionBurned (DFProtocolView.sol#45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
          "message": "IDFStore.setSectionBurned (DFProtocolView.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
          "message": "IDFStore.setSectionBurned (DFProtocolView.sol#47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
          "message": "IDFStore.getSectionToken (DFProtocolView.sol#49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
          "message": "IDFStore.getSectionWeight (DFProtocolView.sol#50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
          "message": "IDFStore.getSectionData (DFProtocolView.sol#51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
          "message": "IDFStore.getBackupSectionData (DFProtocolView.sol#52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
          "message": "IDFStore.getBackupSectionIndex (DFProtocolView.sol#53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
          "message": "IDFStore.setBackupSectionIndex (DFProtocolView.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
          "message": "IDFStore.setSection (DFProtocolView.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
          "message": "IDFStore.setBackupSection (DFProtocolView.sol#57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burnSectionMoveon() public;\n",
          "message": "IDFStore.burnSectionMoveon (DFProtocolView.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
          "message": "IDFStore.getMintingToken (DFProtocolView.sol#60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
          "message": "IDFStore.setMintingToken (DFProtocolView.sol#61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
          "message": "IDFStore.getMintedToken (DFProtocolView.sol#62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
          "message": "IDFStore.setMintedToken (DFProtocolView.sol#63) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
          "message": "IDFStore.getBackupToken (DFProtocolView.sol#64) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
          "message": "IDFStore.setBackupToken (DFProtocolView.sol#65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
          "message": "IDFStore.getMintedTokenList (DFProtocolView.sol#66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
          "message": "IDFStore.getMintPosition (DFProtocolView.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
          "message": "IDFStore.getBurnPosition (DFProtocolView.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
          "message": "IDFStore.getTotalMinted (DFProtocolView.sol#71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
          "message": "IDFStore.addTotalMinted (DFProtocolView.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
          "message": "IDFStore.setTotalMinted (DFProtocolView.sol#73) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
          "message": "IDFStore.getTotalBurned (DFProtocolView.sol#74) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
          "message": "IDFStore.addTotalBurned (DFProtocolView.sol#75) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
          "message": "IDFStore.setTotalBurned (DFProtocolView.sol#76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
          "message": "IDFStore.getMinBurnAmount (DFProtocolView.sol#77) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
          "message": "IDFStore.setMinBurnAmount (DFProtocolView.sol#78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getTokenBalance (DFProtocolView.sol#80) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setTokenBalance (DFProtocolView.sol#81) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getResUSDXBalance (DFProtocolView.sol#82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setResUSDXBalance (DFProtocolView.sol#83) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
          "message": "IDFStore.getDepositorBalance (DFProtocolView.sol#84) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
          "message": "IDFStore.setDepositorBalance (DFProtocolView.sol#85) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
          "message": "IDFStore.getFeeRate (DFProtocolView.sol#87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
          "message": "IDFStore.setFeeRate (DFProtocolView.sol#88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
          "message": "IDFStore.getTypeToken (DFProtocolView.sol#89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
          "message": "IDFStore.setTypeToken (DFProtocolView.sol#90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
          "message": "IDFStore.getTokenMedian (DFProtocolView.sol#91) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
          "message": "IDFStore.setTokenMedian (DFProtocolView.sol#92) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
          "message": "IDFStore.setTotalCol (DFProtocolView.sol#94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
          "message": "IDFStore.getTotalCol (DFProtocolView.sol#95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
          "message": "IDFStore.setWrappedToken (DFProtocolView.sol#97) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
          "message": "IDFStore.getWrappedToken (DFProtocolView.sol#98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function read() public view returns (bytes32);\n",
          "message": "IMedianizer.read (DFProtocolView.sol#106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 220,
          "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
          "message": "DSMath.pow (DFProtocolView.sol#204-220) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 275,
          "vulnerability_code": "    function getUSDXForDeposit(address _srcToken, uint _srcAmount) public view returns (uint) {\n\n        address _depositor = msg.sender;\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"CalcDepositorMintTotal: asset not allow.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        uint _depositorMintTotal;\n\n        uint _step = uint(-1);\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _step = min(div(_tokenBalance[i], _mintCW[i]), _step);\n\n        }\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _depositorMintTotal = add(_depositorMintTotal,\n\n                                    min(_depositorBalance[i], add(_resUSDXBalance[i], mul(_step, _mintCW[i])))\n\n                                    );\n\n        }\n\n\n\n        return _depositorMintTotal;\n",
          "message": "DFProtocolView.getUSDXForDeposit (DFProtocolView.sol#241-275) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": 294,
          "vulnerability_code": "    function getUserMaxToClaim() public view returns (uint) {\n\n        address _depositor = msg.sender;\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorClaimAmount;\n\n        uint _claimAmount;\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorClaimAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _claimAmount = add(_claimAmount, _depositorClaimAmount);\n\n        }\n\n\n\n        return _claimAmount;\n",
          "message": "DFProtocolView.getUserMaxToClaim (DFProtocolView.sol#277-294) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function getColMaxClaim() public view returns (address[] memory, uint[] memory) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint[] memory _balance = new uint[](_tokens.length);\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _balance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n        }\n\n\n\n        return (_srcTokens, _balance);\n",
          "message": "DFProtocolView.getColMaxClaim (DFProtocolView.sol#296-307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": 320,
          "vulnerability_code": "    function getMintingSection() public view returns(address[] memory, uint[] memory) {\n\n        uint position = dfStore.getMintPosition();\n\n        uint[] memory _weight = dfStore.getSectionWeight(position);\n\n        address[] memory _tokens = dfStore.getSectionToken(position);\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n        }\n\n\n\n        return (_srcTokens, _weight);\n",
          "message": "DFProtocolView.getMintingSection (DFProtocolView.sol#309-320) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 334,
          "vulnerability_code": "    function getBurningSection() public view returns(address[] memory, uint[] memory) {\n\n        uint position = dfStore.getBurnPosition();\n\n        uint[] memory _weight = dfStore.getSectionWeight(position);\n\n        address[] memory _tokens = dfStore.getSectionToken(position);\n\n\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n        }\n\n\n\n        return (_srcTokens, _weight);\n",
          "message": "DFProtocolView.getBurningSection (DFProtocolView.sol#322-334) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 348,
          "vulnerability_code": "    function getUserWithdrawBalance() public view returns(address[] memory, uint[] memory) {\n\n        address _depositor = msg.sender;\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint[] memory _withdrawBalances = new uint[](_tokens.length);\n\n\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _withdrawBalances[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(calcWithdrawAmount(_depositor, _tokens[i]));\n\n        }\n\n\n\n        return (_srcTokens, _withdrawBalances);\n",
          "message": "DFProtocolView.getUserWithdrawBalance (DFProtocolView.sol#336-348) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": 355,
          "vulnerability_code": "    function getPrice(uint _tokenIdx) public view returns (uint) {\n\n        address _token = dfStore.getTypeToken(_tokenIdx);\n\n        require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n        bytes32 price = IMedianizer(dfStore.getTokenMedian(_token)).read();\n\n        return uint(price);\n",
          "message": "DFProtocolView.getPrice (DFProtocolView.sol#350-355) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": 359,
          "vulnerability_code": "    function getFeeRate(uint _processIdx) public view returns (uint) {\n\n        return dfStore.getFeeRate(_processIdx);\n",
          "message": "DFProtocolView.getFeeRate (DFProtocolView.sol#357-359) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 363,
          "vulnerability_code": "    function getDestroyThreshold() public view returns (uint) {\n\n        return dfStore.getMinBurnAmount();\n",
          "message": "DFProtocolView.getDestroyThreshold (DFProtocolView.sol#361-363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": 386,
          "vulnerability_code": "    function getColStatus() public view returns (address[] memory, uint[] memory) {\n\n\t\taddress[] memory _tokens = dfStore.getMintedTokenList();\n\n\t\tuint[] memory _srcBalance = new uint[](_tokens.length);\n\n\t\taddress[] memory _srcTokens = new address[](_tokens.length);\n\n\t\tuint _xAmount;\n\n\n\n\t\tfor (uint i = 0; i < _tokens.length; i++) {\n\n\t\t\t_xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol);\n\n\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n\n\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n\t\t}\n\n\n\n\t\treturn (_srcTokens, _srcBalance);\n",
          "message": "DFProtocolView.getColStatus (DFProtocolView.sol#373-386) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 401,
          "vulnerability_code": "    function getPoolStatus() public view returns (address[] memory, uint[] memory) {\n\n\t\taddress[] memory _tokens = dfStore.getMintedTokenList();\n\n\t\tuint[] memory _srcBalance = new uint[](_tokens.length);\n\n\t\taddress[] memory _srcTokens = new address[](_tokens.length);\n\n        uint _xAmount;\n\n\n\n\t\tfor (uint i = 0; i < _tokens.length; i++) {\n\n            _xAmount = dfStore.getTokenBalance(_tokens[i]);\n\n\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n\n\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n\t\t}\n\n\n\n\t\treturn (_srcTokens, _srcBalance);\n",
          "message": "DFProtocolView.getPoolStatus (DFProtocolView.sol#388-401) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": 421,
          "vulnerability_code": "    function calcMaxMinting() public view returns(uint) {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint _sumMintCW;\n\n        uint _step = uint(-1);\n\n        address _depositor = msg.sender;\n\n        address _srcToken;\n\n        uint _balance;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _balance = IDSWrappedToken(_srcToken).balanceOf(_depositor);\n\n            _step = min(div(IDSWrappedToken(_tokens[i]).changeByMultiple(_balance), _mintCW[i]), _step);\n\n        }\n\n\n\n        return mul(_step, _sumMintCW);\n",
          "message": "DFProtocolView.calcMaxMinting (DFProtocolView.sol#403-421) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": 431,
          "vulnerability_code": "    function getCollateralList() public view returns (address[] memory) {\n\n\t\taddress[] memory _tokens = dfStore.getMintedTokenList();\n\n\t\taddress[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n\t\tfor (uint i = 0; i < _tokens.length; i++)\n\n\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n\n\n\t\treturn _srcTokens;\n",
          "message": "DFProtocolView.getCollateralList (DFProtocolView.sol#423-431) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": 436,
          "vulnerability_code": "    function getCollateralBalance(address _srcToken) public view returns (uint) {\n\n\t\taddress _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        return IDSWrappedToken(_tokenID).reverseByMultiple(IDSWrappedToken(_tokenID).balanceOf(dfCol));\n",
          "message": "DFProtocolView.getCollateralBalance (DFProtocolView.sol#433-436) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address _dfStore, address _dfCol)\n",
          "message": "Parameter '_dfStore' of DFProtocolView. (DFProtocolView.sol#234) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (address _dfStore, address _dfCol)\n",
          "message": "Parameter '_dfCol' of DFProtocolView. (DFProtocolView.sol#234) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUSDXForDeposit(address _srcToken, uint _srcAmount) public view returns (uint) {\n",
          "message": "Parameter '_srcToken' of DFProtocolView.getUSDXForDeposit (DFProtocolView.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUSDXForDeposit(address _srcToken, uint _srcAmount) public view returns (uint) {\n",
          "message": "Parameter '_srcAmount' of DFProtocolView.getUSDXForDeposit (DFProtocolView.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(uint _tokenIdx) public view returns (uint) {\n",
          "message": "Parameter '_tokenIdx' of DFProtocolView.getPrice (DFProtocolView.sol#350) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeRate(uint _processIdx) public view returns (uint) {\n",
          "message": "Parameter '_processIdx' of DFProtocolView.getFeeRate (DFProtocolView.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calcWithdrawAmount(address _depositor, address _tokenID) internal view returns (uint) {\n",
          "message": "Parameter '_depositor' of DFProtocolView.calcWithdrawAmount (DFProtocolView.sol#365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calcWithdrawAmount(address _depositor, address _tokenID) internal view returns (uint) {\n",
          "message": "Parameter '_tokenID' of DFProtocolView.calcWithdrawAmount (DFProtocolView.sol#365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCollateralBalance(address _srcToken) public view returns (uint) {\n",
          "message": "Parameter '_srcToken' of DFProtocolView.getCollateralBalance (DFProtocolView.sol#433) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 394,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getColMaxClaim() public view returns (address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintingSection() public view returns(address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBurningSection() public view returns(address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getUserWithdrawBalance() public view returns(address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getColStatus() public view returns (address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPoolStatus() public view returns (address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}