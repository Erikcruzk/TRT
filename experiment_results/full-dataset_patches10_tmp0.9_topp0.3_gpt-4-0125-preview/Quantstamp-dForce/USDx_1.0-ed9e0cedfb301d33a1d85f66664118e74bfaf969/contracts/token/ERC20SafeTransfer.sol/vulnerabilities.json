{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 86,
          "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
          "message": "IERC20 (ERC20SafeTransfer.sol#9-86) has incorrect ERC20 function interface(s):\n\t-transfer (ERC20SafeTransfer.sol#25)\n\t-approve (ERC20SafeTransfer.sol#51)\n\t-transferFrom (ERC20SafeTransfer.sol#60-64)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doTransferOut uses assembly (ERC20SafeTransfer.sol#93-117)\n\t- ERC20SafeTransfer.sol#103-115\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 144,
          "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doTransferFrom uses assembly (ERC20SafeTransfer.sol#119-144)\n\t- ERC20SafeTransfer.sol#130-142\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 170,
          "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doApprove uses assembly (ERC20SafeTransfer.sol#146-170)\n\t- ERC20SafeTransfer.sol#156-168\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (ERC20SafeTransfer.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (ERC20SafeTransfer.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (ERC20SafeTransfer.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (ERC20SafeTransfer.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (ERC20SafeTransfer.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (ERC20SafeTransfer.sol#149) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}