{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = _name;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = _symbol;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply = 10 ** (_decimals + 10);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _balances[msg.sender] = _totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = _decimals;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint _value = 10 ** (_decimals + 5);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _transfer(msg.sender, guy, _value);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"mul : error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0, \"div : error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a, \"sub : error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"add : error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0, \"mod : error!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
          "message": "Collaterals_t.totalSupply (Collaterals_t.sol#92-94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 103,
          "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
          "message": "Collaterals_t.balanceOf (Collaterals_t.sol#101-103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 113,
          "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n",
          "message": "Collaterals_t.allowance (Collaterals_t.sol#111-113) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
          "message": "Collaterals_t.transfer (Collaterals_t.sol#120-123) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 137,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n",
          "message": "Collaterals_t.approve (Collaterals_t.sol#134-137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": 141,
          "vulnerability_code": "    function approvex(address spender) public returns (bool) {\n\n        _approve(msg.sender, spender, uint(-1));\n\n        return true;\n",
          "message": "Collaterals_t.approvex (Collaterals_t.sol#138-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": 155,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n\n        _transfer(from, to, value);\n\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n\n        return true;\n",
          "message": "Collaterals_t.transferFrom (Collaterals_t.sol#151-155) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 184,
          "vulnerability_code": "contract Collaterals_t {\n\n    uint  public decimals = 18;\n\n    string public name;\n\n    string public symbol;\n\n\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply = 10**58; //10 billion\n\n\n\n    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n\n        name = _name;\n\n        symbol = _symbol;\n\n        _totalSupply = 10 ** (_decimals + 10);\n\n        _balances[msg.sender] = _totalSupply;\n\n        decimals = _decimals;\n\n        uint _value = 10 ** (_decimals + 5);\n\n        _transfer(msg.sender, guy, _value);\n\n    }\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n\n    /**\n\n     * @dev Total number of tokens in existence\n\n     */\n\n    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address.\n\n     * @param owner The address to query the balance of.\n\n     * @return A uint256 representing the amount owned by the passed address.\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\n     * @param owner address The address which owns the funds.\n\n     * @param spender address The address which will spend the funds.\n\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n\n     */\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfer token to a specified address\n\n     * @param to The address to transfer to.\n\n     * @param value The amount to be transferred.\n\n     */\n\n    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     * @param spender The address which will spend the funds.\n\n     * @param value The amount of tokens to be spent.\n\n     */\n\n    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n\n    }\n\n    function approvex(address spender) public returns (bool) {\n\n        _approve(msg.sender, spender, uint(-1));\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Transfer tokens from one address to another.\n\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n\n     * and other compliant implementations may not emit the event.\n\n     * @param from address The address which you want to send tokens from\n\n     * @param to address The address which you want to transfer to\n\n     * @param value uint256 the amount of tokens to be transferred\n\n     */\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n\n        _transfer(from, to, value);\n\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Transfer token for a specified addresses\n\n     * @param from The address to transfer from.\n\n     * @param to The address to transfer to.\n\n     * @param value The amount to be transferred.\n\n     */\n\n    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n\n    }\n\n\n\n    /**\n\n     * @dev Approve an address to spend another addresses' tokens.\n\n     * @param owner The address that owns the tokens.\n\n     * @param spender The address that will spend the tokens.\n\n     * @param value The number of tokens that can be spent.\n\n     */\n\n    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n\n        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n\n\n\n        _allowed[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n\n    }\n",
          "message": "Contract 'Collaterals_t' (Collaterals_t.sol#66-184) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
          "message": "Parameter '_name' of Collaterals_t. (Collaterals_t.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
          "message": "Parameter '_symbol' of Collaterals_t. (Collaterals_t.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
          "message": "Parameter '_decimals' of Collaterals_t. (Collaterals_t.sol#76) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 169,
          "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
          "message": "Function 'Collaterals_t._transfer' (Collaterals_t.sol#163-169) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 183,
          "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n\n        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n\n\n\n        _allowed[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
          "message": "Function 'Collaterals_t._approve' (Collaterals_t.sol#177-183) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 4,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply = 10**58; //10 billion\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}