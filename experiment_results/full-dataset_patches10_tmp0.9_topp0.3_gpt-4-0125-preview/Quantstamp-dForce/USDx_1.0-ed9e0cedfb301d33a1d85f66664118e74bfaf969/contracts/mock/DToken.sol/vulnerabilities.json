{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _name,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _symbol,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _token\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    initialize(_name, _symbol, _token);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(!initialized, \"initialize: Already initialized!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "      doTransferFrom(token, msg.sender, address(this), _pie),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"mint: transfer token failed.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[_src][msg.sender] >= amount,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"redeemUnderlying: insufficient allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "      doTransferOut(token, msg.sender, _pie),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"redeemUnderlying: transfer failed\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(balances[_src] >= _wad, \"transferFrom: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[_src][msg.sender] >= _wad,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"transferFrom: insufficient allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 z = base;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "                z = mul(z, base);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return z;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[_src][msg.sender] >= amount,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"redeemUnderlying: insufficient allowance\"\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], amount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 396,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[_src][msg.sender] >= _wad,\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"transferFrom: insufficient allowance\"\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], _wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[_src][msg.sender] >= amount,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 369,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"redeemUnderlying: insufficient allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 379,
          "vulnerability_to_line": null,
          "vulnerability_code": "      doTransferOut(token, msg.sender, _pie),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"redeemUnderlying: transfer failed\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(balances[_src] >= _wad, \"transferFrom: insufficient balance\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 398,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allowance[_src][msg.sender] >= _wad,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \"transferFrom: insufficient allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "      );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_39"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 86,
          "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
          "message": "IERC20 (DToken.sol#9-86) has incorrect ERC20 function interface(s):\n\t-transfer (DToken.sol#25)\n\t-approve (DToken.sol#51)\n\t-transferFrom (DToken.sol#60-64)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 335,
          "vulnerability_code": "  function initialize(\n\n    string memory _name,\n\n    string memory _symbol,\n\n    address _token\n\n  ) public {\n\n    require(!initialized, \"initialize: Already initialized!\");\n\n    name = _name;\n\n    symbol = _symbol;\n\n    token = _token;\n\n    decimals = IERC20(_token).decimals();\n\n    initialized = true;\n",
          "message": "Reentrancy in DToken.initialize (DToken.sol#324-335):\n\tExternal calls:\n\t- decimals = IERC20(_token).decimals() (DToken.sol#333)\n\tState variables written after the call(s):\n\t- initialized (DToken.sol#334)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 353,
          "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n\n    uint256 amount = rdiv(_pie, getExchangeRate());\n\n\n\n    // Transfer the calculated token amount from `msg.sender` to the `handler`.\n\n    require(\n\n      doTransferFrom(token, msg.sender, address(this), _pie),\n\n      \"mint: transfer token failed.\"\n\n    );\n\n\n\n    balances[_dst] = add(balances[_dst], amount);\n\n    totalSupply = add(totalSupply, amount);\n",
          "message": "Reentrancy in DToken.mint (DToken.sol#342-353):\n\tExternal calls:\n\t- amount = rdiv(_pie,getExchangeRate()) (DToken.sol#343)\n\t- require(bool,string)(doTransferFrom(token,msg.sender,address(this),_pie),mint: transfer token failed.) (DToken.sol#346-349)\n\tState variables written after the call(s):\n\t- totalSupply (DToken.sol#352)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": 382,
          "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n\n    uint256 amount = rdivup(_pie, getExchangeRate());\n\n\n\n    // Check the balance and allowance\n\n    uint256 _balance = balances[_src];\n\n    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n\n    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n\n      require(\n\n        allowance[_src][msg.sender] >= amount,\n\n        \"redeemUnderlying: insufficient allowance\"\n\n      );\n\n      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], amount);\n\n    }\n\n\n\n    // Update the balance and totalSupply\n\n    balances[_src] = sub(balances[_src], amount);\n\n    totalSupply = sub(totalSupply, amount);\n\n\n\n    require(\n\n      doTransferOut(token, msg.sender, _pie),\n\n      \"redeemUnderlying: transfer failed\"\n\n    );\n",
          "message": "Reentrancy in DToken.redeemUnderlying (DToken.sol#360-382):\n\tExternal calls:\n\t- amount = rdivup(_pie,getExchangeRate()) (DToken.sol#361)\n\tState variables written after the call(s):\n\t- totalSupply (DToken.sol#376)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": 353,
          "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n\n    uint256 amount = rdiv(_pie, getExchangeRate());\n\n\n\n    // Transfer the calculated token amount from `msg.sender` to the `handler`.\n\n    require(\n\n      doTransferFrom(token, msg.sender, address(this), _pie),\n\n      \"mint: transfer token failed.\"\n\n    );\n\n\n\n    balances[_dst] = add(balances[_dst], amount);\n\n    totalSupply = add(totalSupply, amount);\n",
          "message": "Reentrancy in DToken.mint (DToken.sol#342-353):\n\tExternal calls:\n\t- amount = rdiv(_pie,getExchangeRate()) (DToken.sol#343)\n\t- require(bool,string)(doTransferFrom(token,msg.sender,address(this),_pie),mint: transfer token failed.) (DToken.sol#346-349)\n\tState variables written after the call(s):\n\t- balances (DToken.sol#351)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": 382,
          "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n\n    uint256 amount = rdivup(_pie, getExchangeRate());\n\n\n\n    // Check the balance and allowance\n\n    uint256 _balance = balances[_src];\n\n    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n\n    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n\n      require(\n\n        allowance[_src][msg.sender] >= amount,\n\n        \"redeemUnderlying: insufficient allowance\"\n\n      );\n\n      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], amount);\n\n    }\n\n\n\n    // Update the balance and totalSupply\n\n    balances[_src] = sub(balances[_src], amount);\n\n    totalSupply = sub(totalSupply, amount);\n\n\n\n    require(\n\n      doTransferOut(token, msg.sender, _pie),\n\n      \"redeemUnderlying: transfer failed\"\n\n    );\n",
          "message": "Reentrancy in DToken.redeemUnderlying (DToken.sol#360-382):\n\tExternal calls:\n\t- amount = rdivup(_pie,getExchangeRate()) (DToken.sol#361)\n\tState variables written after the call(s):\n\t- allowance (DToken.sol#371)\n\t- balances (DToken.sol#375)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doTransferOut uses assembly (DToken.sol#93-117)\n\t- DToken.sol#103-115\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 144,
          "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doTransferFrom uses assembly (DToken.sol#119-144)\n\t- DToken.sol#130-142\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": 170,
          "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
          "message": "ERC20SafeTransfer.doApprove uses assembly (DToken.sol#146-170)\n\t- DToken.sol#156-168\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": 284,
          "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
          "message": "DSMath.pow (DToken.sol#268-284) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": 413,
          "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n\n    allowance[msg.sender][_spender] = _wad;\n\n    return true;\n",
          "message": "DToken.approve (DToken.sol#410-413) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": 425,
          "vulnerability_code": "  function getTokenBalance(address account) public view returns (uint256) {\n\n    return rmul(balanceOf(account), getExchangeRate());\n",
          "message": "DToken.getTokenBalance (DToken.sol#423-425) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (DToken.sol#94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (DToken.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (DToken.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (DToken.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (DToken.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (DToken.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (DToken.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _token,\n",
          "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (DToken.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to,\n",
          "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (DToken.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _amount\n",
          "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (DToken.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _name,\n",
          "message": "Parameter '_name' of DToken. (DToken.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _symbol,\n",
          "message": "Parameter '_symbol' of DToken. (DToken.sol#317) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 318,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _token\n",
          "message": "Parameter '_token' of DToken. (DToken.sol#318) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _name,\n",
          "message": "Parameter '_name' of DToken.initialize (DToken.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string memory _symbol,\n",
          "message": "Parameter '_symbol' of DToken.initialize (DToken.sol#326) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _token\n",
          "message": "Parameter '_token' of DToken.initialize (DToken.sol#327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n",
          "message": "Parameter '_dst' of DToken.mint (DToken.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n",
          "message": "Parameter '_pie' of DToken.mint (DToken.sol#342) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n",
          "message": "Parameter '_src' of DToken.redeemUnderlying (DToken.sol#360) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 360,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n",
          "message": "Parameter '_pie' of DToken.redeemUnderlying (DToken.sol#360) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _dst, uint256 _wad) external returns (bool) {\n",
          "message": "Parameter '_dst' of DToken.transfer (DToken.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _dst, uint256 _wad) external returns (bool) {\n",
          "message": "Parameter '_wad' of DToken.transfer (DToken.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _src,\n",
          "message": "Parameter '_src' of DToken.transferFrom (DToken.sol#390) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _dst,\n",
          "message": "Parameter '_dst' of DToken.transferFrom (DToken.sol#391) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _wad\n",
          "message": "Parameter '_wad' of DToken.transferFrom (DToken.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n",
          "message": "Parameter '_spender' of DToken.approve (DToken.sol#410) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n",
          "message": "Parameter '_wad' of DToken.approve (DToken.sol#410) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bool private initialized; // Flag of initialize data\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}