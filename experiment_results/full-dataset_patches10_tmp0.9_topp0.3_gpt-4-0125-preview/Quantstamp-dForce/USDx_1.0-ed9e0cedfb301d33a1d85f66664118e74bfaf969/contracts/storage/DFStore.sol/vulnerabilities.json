{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setSection(_wrappedTokens, _weights);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secList[_mintPosition].cw[i] = _weight[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secList[_mintPosition].colIDs[i] = _wrappedTokens[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "            mintingTokens[_wrappedTokens[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "            wrappedTokens[_srcTokens[i]] = _wrappedTokens[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (mintedTokens[_wrappedTokens[i]])\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "            mintedTokenList.push(_wrappedTokens[i]);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "            mintedTokens[_wrappedTokens[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secListBackup[_backupIdx].cw[i] = _weight[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secListBackup[_backupIdx].colIDs[i] = _wrappedTokens[i];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "            mintedTokens[_wrappedTokens[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_wrappedTokens.length == _weight.length, \"_SetSection: data not allow.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 383,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_weight[i] != 0, \"_SetSection: invalid weight\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_srcTokens[i] != address(0), \"_SetSection: invalid address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secList[burnPosition].minted == secList[burnPosition].burned,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"BurnSectionMoveon: burned not meet minted.\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 z = base;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "                z = mul(z, base);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return z;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _cruColIDs.length; i++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 384,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secList[burnPosition].minted == secList[burnPosition].burned,\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"BurnSectionMoveon: burned not meet minted.\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_SEGV"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20();\n",
          "message": "DFStore._setSection has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20() (DFStore.sol#385)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
          "message": "DSAuthority.canCall (DFStore.sol#19-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
          "message": "DSAuth.disableOwnership (DFStore.sol#41-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
          "message": "DSAuth.transferOwnership (DFStore.sol#46-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
          "message": "DSAuth.acceptOwnership (DFStore.sol#51-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
          "message": "DSAuth.setAuthority (DFStore.sol#59-65) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 205,
          "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
          "message": "DSMath.pow (DFStore.sol#189-205) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
          "message": "IERC20Token.balanceOf (DFStore.sol#216) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
          "message": "IERC20Token.allowance (DFStore.sol#217) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transfer (DFStore.sol#218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (DFStore.sol#219) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
          "message": "IERC20Token.approve (DFStore.sol#220) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
          "message": "IERC20Token.totalSupply (DFStore.sol#221) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.mint (DFStore.sol#229) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
          "message": "IDSWrappedToken.burn (DFStore.sol#230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.wrap (DFStore.sol#231) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
          "message": "IDSWrappedToken.unwrap (DFStore.sol#232) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
          "message": "IDSWrappedToken.changeByMultiple (DFStore.sol#233) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
          "message": "IDSWrappedToken.reverseByMultiple (DFStore.sol#234) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
          "message": "IDSWrappedToken.getSrcERC20 (DFStore.sol#235) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": 301,
          "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint) {\n\n        return secList[_position].minted;\n",
          "message": "DFStore.getSectionMinted (DFStore.sol#299-301) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 306,
          "vulnerability_code": "    function addSectionMinted(uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n\n        secList[mintPosition].minted = add(secList[mintPosition].minted, _amount);\n",
          "message": "DFStore.addSectionMinted (DFStore.sol#303-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 311,
          "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n\n        secList[_position].minted = add(secList[_position].minted, _amount);\n",
          "message": "DFStore.addSectionMinted (DFStore.sol#308-311) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": 315,
          "vulnerability_code": "    function setSectionMinted(uint _amount) public auth {\n\n        secList[mintPosition].minted = _amount;\n",
          "message": "DFStore.setSectionMinted (DFStore.sol#313-315) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": 319,
          "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public auth {\n\n        secList[_position].minted = _amount;\n",
          "message": "DFStore.setSectionMinted (DFStore.sol#317-319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 323,
          "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint) {\n\n        return secList[_position].burned;\n",
          "message": "DFStore.getSectionBurned (DFStore.sol#321-323) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 328,
          "vulnerability_code": "    function addSectionBurned(uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n\n        secList[burnPosition].burned = add(secList[burnPosition].burned, _amount);\n",
          "message": "DFStore.addSectionBurned (DFStore.sol#325-328) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": 333,
          "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n\n        secList[_position].burned = add(secList[_position].burned, _amount);\n",
          "message": "DFStore.addSectionBurned (DFStore.sol#330-333) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": 337,
          "vulnerability_code": "    function setSectionBurned(uint _amount) public auth {\n\n        secList[burnPosition].burned = _amount;\n",
          "message": "DFStore.setSectionBurned (DFStore.sol#335-337) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": 341,
          "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public auth {\n\n        secList[_position].burned = _amount;\n",
          "message": "DFStore.setSectionBurned (DFStore.sol#339-341) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": 349,
          "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory) {\n\n        return secList[_position].cw;\n",
          "message": "DFStore.getSectionWeight (DFStore.sol#347-349) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": 360,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\n\n\n\n        return (\n\n            secList[_position].minted,\n\n            secList[_position].burned,\n\n            secList[_position].backupIdx,\n\n            secList[_position].colIDs,\n\n            secList[_position].cw\n\n            );\n",
          "message": "DFStore.getSectionData (DFStore.sol#351-360) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 365,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\n\n        uint _backupIdx = getBackupSectionIndex(_position);\n\n        return (secListBackup[_backupIdx].backupIdx, secListBackup[_backupIdx].colIDs, secListBackup[_backupIdx].cw);\n",
          "message": "DFStore.getBackupSectionData (DFStore.sol#362-365) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": 373,
          "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\n\n        secList[_position].backupIdx = _backupIdx;\n",
          "message": "DFStore.setBackupSectionIndex (DFStore.sol#371-373) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": 420,
          "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n\n        _setSection(_wrappedTokens, _weight);\n",
          "message": "DFStore.setSection (DFStore.sol#418-420) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 445,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n\n        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\n\n        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\n\n\n\n        uint _backupIdx = secList[_position].backupIdx;\n\n\n\n        if (_backupIdx == 0){\n\n\n\n            _backupIdx = backupSeed;\n\n            secList[_position].backupIdx = _backupIdx;\n\n            backupSeed = add(_backupIdx, 1);\n\n        }\n\n\n\n        secListBackup[_backupIdx] = Section(0, 0, _position, new address[](_wrappedTokens.length), new uint[](_weight.length));\n\n\n\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\n\n            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\n\n            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\n\n\n\n            secListBackup[_backupIdx].cw[i] = _weight[i];\n\n            secListBackup[_backupIdx].colIDs[i] = _wrappedTokens[i];\n\n            mintedTokens[_wrappedTokens[i]] = true;\n\n        }\n",
          "message": "DFStore.setBackupSection (DFStore.sol#422-445) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function burnSectionMoveon() public auth {\n\n        require(\n\n            secList[burnPosition].minted == secList[burnPosition].burned,\n\n            \"BurnSectionMoveon: burned not meet minted.\"\n\n            );\n\n\n\n        burnPosition = add(burnPosition, 1);\n\n        assert(burnPosition <= mintPosition);\n",
          "message": "DFStore.burnSectionMoveon (DFStore.sol#447-455) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": 459,
          "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool) {\n\n        return mintingTokens[_token];\n",
          "message": "DFStore.getMintingToken (DFStore.sol#457-459) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 463,
          "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public auth {\n\n        mintingTokens[_token] = _flag;\n",
          "message": "DFStore.setMintingToken (DFStore.sol#461-463) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": 467,
          "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool) {\n\n        return mintedTokens[_token];\n",
          "message": "DFStore.getMintedToken (DFStore.sol#465-467) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": 471,
          "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public auth {\n\n        mintedTokens[_token] = _flag;\n",
          "message": "DFStore.setMintedToken (DFStore.sol#469-471) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": 475,
          "vulnerability_code": "    function getBackupToken(address _token) public view returns (address) {\n\n        return tokenBackup[_token];\n",
          "message": "DFStore.getBackupToken (DFStore.sol#473-475) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": 479,
          "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public auth {\n\n        tokenBackup[_token] = _backupToken;\n",
          "message": "DFStore.setBackupToken (DFStore.sol#477-479) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory) {\n\n        return mintedTokenList;\n",
          "message": "DFStore.getMintedTokenList (DFStore.sol#481-483) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": 487,
          "vulnerability_code": "    function getMintPosition() public view returns (uint) {\n\n        return mintPosition;\n",
          "message": "DFStore.getMintPosition (DFStore.sol#485-487) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": 491,
          "vulnerability_code": "    function getBurnPosition() public view returns (uint) {\n\n        return burnPosition;\n",
          "message": "DFStore.getBurnPosition (DFStore.sol#489-491) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": 495,
          "vulnerability_code": "    function getTotalMinted() public view returns (uint) {\n\n        return totalMinted;\n",
          "message": "DFStore.getTotalMinted (DFStore.sol#493-495) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": 500,
          "vulnerability_code": "    function addTotalMinted(uint _amount) public auth {\n\n        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\n\n        totalMinted = add(totalMinted, _amount);\n",
          "message": "DFStore.addTotalMinted (DFStore.sol#497-500) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": 504,
          "vulnerability_code": "    function setTotalMinted(uint _amount) public auth {\n\n        totalMinted = _amount;\n",
          "message": "DFStore.setTotalMinted (DFStore.sol#502-504) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": 508,
          "vulnerability_code": "    function getTotalBurned() public view returns (uint) {\n\n        return totalBurned;\n",
          "message": "DFStore.getTotalBurned (DFStore.sol#506-508) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": 513,
          "vulnerability_code": "    function addTotalBurned(uint _amount) public auth {\n\n        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\n\n        totalBurned = add(totalBurned, _amount);\n",
          "message": "DFStore.addTotalBurned (DFStore.sol#510-513) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": 517,
          "vulnerability_code": "    function setTotalBurned(uint _amount) public auth {\n\n        totalBurned = _amount;\n",
          "message": "DFStore.setTotalBurned (DFStore.sol#515-517) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": 521,
          "vulnerability_code": "    function getMinBurnAmount() public view returns (uint) {\n\n        return minimalBurnAmount;\n",
          "message": "DFStore.getMinBurnAmount (DFStore.sol#519-521) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": 525,
          "vulnerability_code": "    function setMinBurnAmount(uint _amount) public auth {\n\n        _setMinBurnAmount(_amount);\n",
          "message": "DFStore.setMinBurnAmount (DFStore.sol#523-525) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": 533,
          "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint) {\n\n        return poolBalance[_tokenID];\n",
          "message": "DFStore.getTokenBalance (DFStore.sol#531-533) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": 537,
          "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public auth {\n\n        poolBalance[_tokenID] = _amount;\n",
          "message": "DFStore.setTokenBalance (DFStore.sol#535-537) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": 541,
          "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint) {\n\n        return resUSDXBalance[_tokenID];\n",
          "message": "DFStore.getResUSDXBalance (DFStore.sol#539-541) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": 545,
          "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\n\n        resUSDXBalance[_tokenID] = _amount;\n",
          "message": "DFStore.setResUSDXBalance (DFStore.sol#543-545) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\n\n        return depositorsBalance[_depositor][_tokenID];\n",
          "message": "DFStore.getDepositorBalance (DFStore.sol#547-549) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": 553,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n\n        depositorsBalance[_depositor][_tokenID] = _amount;\n",
          "message": "DFStore.setDepositorBalance (DFStore.sol#551-553) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": 557,
          "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public auth {\n\n        FeeRate[ct] = rate;\n",
          "message": "DFStore.setFeeRate (DFStore.sol#555-557) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": 561,
          "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint) {\n\n        return FeeRate[ct];\n",
          "message": "DFStore.getFeeRate (DFStore.sol#559-561) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": 565,
          "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public auth {\n\n        FeeToken[tt] = _tokenID;\n",
          "message": "DFStore.setTypeToken (DFStore.sol#563-565) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 567,
          "vulnerability_to_line": 569,
          "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address) {\n\n        return FeeToken[tt];\n",
          "message": "DFStore.getTypeToken (DFStore.sol#567-569) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 573,
          "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public auth {\n\n        TokenMedian[_tokenID] = _median;\n",
          "message": "DFStore.setTokenMedian (DFStore.sol#571-573) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": 577,
          "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address) {\n\n        return TokenMedian[_tokenID];\n",
          "message": "DFStore.getTokenMedian (DFStore.sol#575-577) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": 581,
          "vulnerability_code": "    function setTotalCol(uint _amount) public auth {\n\n        totalCol = _amount;\n",
          "message": "DFStore.setTotalCol (DFStore.sol#579-581) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": 585,
          "vulnerability_code": "    function getTotalCol() public view returns (uint) {\n\n        return totalCol;\n",
          "message": "DFStore.getTotalCol (DFStore.sol#583-585) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": 589,
          "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\n\n        wrappedTokens[_srcToken] = _wrappedToken;\n",
          "message": "DFStore.setWrappedToken (DFStore.sol#587-589) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": 593,
          "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address) {\n\n        return  wrappedTokens[_srcToken];\n",
          "message": "DFStore.getWrappedToken (DFStore.sol#591-593) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\n",
          "message": "Parameter '_wrappedTokens' of DFStore. (DFStore.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\n",
          "message": "Parameter '_weights' of DFStore. (DFStore.sol#295) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint) {\n",
          "message": "Parameter '_position' of DFStore.getSectionMinted (DFStore.sol#299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.addSectionMinted (DFStore.sol#303) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_position' of DFStore.addSectionMinted (DFStore.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.addSectionMinted (DFStore.sol#308) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setSectionMinted (DFStore.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_position' of DFStore.setSectionMinted (DFStore.sol#317) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setSectionMinted (DFStore.sol#317) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint) {\n",
          "message": "Parameter '_position' of DFStore.getSectionBurned (DFStore.sol#321) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.addSectionBurned (DFStore.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_position' of DFStore.addSectionBurned (DFStore.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.addSectionBurned (DFStore.sol#330) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setSectionBurned (DFStore.sol#335) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_position' of DFStore.setSectionBurned (DFStore.sol#339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setSectionBurned (DFStore.sol#339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory) {\n",
          "message": "Parameter '_position' of DFStore.getSectionToken (DFStore.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory) {\n",
          "message": "Parameter '_position' of DFStore.getSectionWeight (DFStore.sol#347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\n",
          "message": "Parameter '_position' of DFStore.getSectionData (DFStore.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\n",
          "message": "Parameter '_position' of DFStore.getBackupSectionData (DFStore.sol#362) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint) {\n",
          "message": "Parameter '_position' of DFStore.getBackupSectionIndex (DFStore.sol#367) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\n",
          "message": "Parameter '_position' of DFStore.setBackupSectionIndex (DFStore.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\n",
          "message": "Parameter '_backupIdx' of DFStore.setBackupSectionIndex (DFStore.sol#371) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": 416,
          "vulnerability_code": "    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\n\n        require(_wrappedTokens.length == _weight.length, \"_SetSection: data not allow.\");\n\n\n\n        uint sum;\n\n        uint factor = 10 ** 10;\n\n        address[] memory _srcTokens = new address[](_weight.length);\n\n\n\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\n\n            require(_weight[i] != 0, \"_SetSection: invalid weight\");\n\n            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\n\n            _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20();\n\n            require(_srcTokens[i] != address(0), \"_SetSection: invalid address\");\n\n            sum = add(sum, _weight[i]);\n\n        }\n\n\n\n        secList.push(Section(0, 0, 0, new address[](_wrappedTokens.length), new uint[](_weight.length)));\n\n        uint _mintPosition = secList.length - 1;\n\n\n\n        if (_mintPosition > 0) {\n\n            address[] memory _cruColIDs = getSectionToken(mintPosition);\n\n            for (uint i = 0; i < _cruColIDs.length; i++)\n\n                delete mintingTokens[_cruColIDs[i]];\n\n        }\n\n\n\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\n\n            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\n\n\n\n            secList[_mintPosition].cw[i] = _weight[i];\n\n            secList[_mintPosition].colIDs[i] = _wrappedTokens[i];\n\n            mintingTokens[_wrappedTokens[i]] = true;\n\n            wrappedTokens[_srcTokens[i]] = _wrappedTokens[i];\n\n\n\n            if (mintedTokens[_wrappedTokens[i]])\n\n                continue;\n\n\n\n            mintedTokenList.push(_wrappedTokens[i]);\n\n            mintedTokens[_wrappedTokens[i]] = true;\n\n        }\n\n\n\n        mintPosition = _mintPosition;\n\n        emit UpdateSection(secList[mintPosition].colIDs, secList[mintPosition].cw);\n",
          "message": "Function 'DFStore._setSection' (DFStore.sol#375-416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\n",
          "message": "Parameter '_wrappedTokens' of DFStore._setSection (DFStore.sol#375) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\n",
          "message": "Parameter '_weight' of DFStore._setSection (DFStore.sol#375) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
          "message": "Parameter '_wrappedTokens' of DFStore.setSection (DFStore.sol#418) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
          "message": "Parameter '_weight' of DFStore.setSection (DFStore.sol#418) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
          "message": "Parameter '_position' of DFStore.setBackupSection (DFStore.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
          "message": "Parameter '_wrappedTokens' of DFStore.setBackupSection (DFStore.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
          "message": "Parameter '_weight' of DFStore.setBackupSection (DFStore.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool) {\n",
          "message": "Parameter '_token' of DFStore.getMintingToken (DFStore.sol#457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public auth {\n",
          "message": "Parameter '_token' of DFStore.setMintingToken (DFStore.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public auth {\n",
          "message": "Parameter '_flag' of DFStore.setMintingToken (DFStore.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool) {\n",
          "message": "Parameter '_token' of DFStore.getMintedToken (DFStore.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public auth {\n",
          "message": "Parameter '_token' of DFStore.setMintedToken (DFStore.sol#469) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public auth {\n",
          "message": "Parameter '_flag' of DFStore.setMintedToken (DFStore.sol#469) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupToken(address _token) public view returns (address) {\n",
          "message": "Parameter '_token' of DFStore.getBackupToken (DFStore.sol#473) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public auth {\n",
          "message": "Parameter '_token' of DFStore.setBackupToken (DFStore.sol#477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public auth {\n",
          "message": "Parameter '_backupToken' of DFStore.setBackupToken (DFStore.sol#477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalMinted(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.addTotalMinted (DFStore.sol#497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 502,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalMinted(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setTotalMinted (DFStore.sol#502) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTotalBurned(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.addTotalBurned (DFStore.sol#510) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 515,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalBurned(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setTotalBurned (DFStore.sol#515) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinBurnAmount(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setMinBurnAmount (DFStore.sol#523) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": 529,
          "vulnerability_code": "    function _setMinBurnAmount(uint _amount) internal {\n\n        minimalBurnAmount = _amount;\n",
          "message": "Function 'DFStore._setMinBurnAmount' (DFStore.sol#527-529) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setMinBurnAmount(uint _amount) internal {\n",
          "message": "Parameter '_amount' of DFStore._setMinBurnAmount (DFStore.sol#527) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint) {\n",
          "message": "Parameter '_tokenID' of DFStore.getTokenBalance (DFStore.sol#531) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_tokenID' of DFStore.setTokenBalance (DFStore.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setTokenBalance (DFStore.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint) {\n",
          "message": "Parameter '_tokenID' of DFStore.getResUSDXBalance (DFStore.sol#539) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_tokenID' of DFStore.setResUSDXBalance (DFStore.sol#543) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setResUSDXBalance (DFStore.sol#543) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\n",
          "message": "Parameter '_depositor' of DFStore.getDepositorBalance (DFStore.sol#547) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\n",
          "message": "Parameter '_tokenID' of DFStore.getDepositorBalance (DFStore.sol#547) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_depositor' of DFStore.setDepositorBalance (DFStore.sol#551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_tokenID' of DFStore.setDepositorBalance (DFStore.sol#551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setDepositorBalance (DFStore.sol#551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public auth {\n",
          "message": "Parameter '_tokenID' of DFStore.setTypeToken (DFStore.sol#563) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public auth {\n",
          "message": "Parameter '_tokenID' of DFStore.setTokenMedian (DFStore.sol#571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public auth {\n",
          "message": "Parameter '_median' of DFStore.setTokenMedian (DFStore.sol#571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address) {\n",
          "message": "Parameter '_tokenID' of DFStore.getTokenMedian (DFStore.sol#575) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTotalCol(uint _amount) public auth {\n",
          "message": "Parameter '_amount' of DFStore.setTotalCol (DFStore.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\n",
          "message": "Parameter '_srcToken' of DFStore.setWrappedToken (DFStore.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\n",
          "message": "Parameter '_wrappedToken' of DFStore.setWrappedToken (DFStore.sol#587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address) {\n",
          "message": "Parameter '_srcToken' of DFStore.getWrappedToken (DFStore.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => uint) public FeeRate;\n",
          "message": "Variable 'DFStore.FeeRate' (DFStore.sol#286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(uint => address) public FeeToken;\n",
          "message": "Variable 'DFStore.FeeToken' (DFStore.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => address) public TokenMedian;\n",
          "message": "Variable 'DFStore.TokenMedian' (DFStore.sol#288) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = address(0x0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _cruColIDs.length; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < _cruColIDs.length; i++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private mintPosition;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private burnPosition;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private totalMinted;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private totalBurned;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private minimalBurnAmount = 10 ** 14;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private totalCol;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint backupSeed = 1;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}