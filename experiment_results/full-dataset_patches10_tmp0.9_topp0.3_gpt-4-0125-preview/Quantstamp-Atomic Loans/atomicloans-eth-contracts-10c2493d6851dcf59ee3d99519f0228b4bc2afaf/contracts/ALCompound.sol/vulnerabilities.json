{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < markets.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < markets.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cToken.redeemUnderlying(tokenToReturn) == 0, \"something went wrong\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(cToken.redeem(toBurn) == 0, \"something went wrong\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < markets.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_29"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public comptroller;\n",
          "message": "Helpers.comptroller (ALCompound.sol#135) is never initialized. It is used in:\n\t- getComptrollerAddress (ALCompound.sol#140-145)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 108,
          "vulnerability_code": "interface CTokenInterface {\n\n    function redeem(uint redeemTokens) external returns (uint);\n\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n\n    function borrow(uint borrowAmount) external returns (uint);\n\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\n\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n\n    function exchangeRateCurrent() external returns (uint);\n\n    function getCash() external view returns (uint);\n\n    function totalBorrowsCurrent() external returns (uint);\n\n    function borrowRatePerBlock() external view returns (uint);\n\n    function supplyRatePerBlock() external view returns (uint);\n\n    function totalReserves() external view returns (uint);\n\n    function reserveFactorMantissa() external view returns (uint);\n\n\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function allowance(address, address) external view returns (uint);\n\n    function approve(address, uint) external;\n\n    function transfer(address, uint) external returns (bool);\n\n    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "CTokenInterface (ALCompound.sol#88-108) has incorrect ERC20 function interface(s):\n\t-approve (ALCompound.sol#105)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 123,
          "vulnerability_code": "interface ERC20Interface {\n\n    function allowance(address, address) external view returns (uint);\n\n    function balanceOf(address) external view returns (uint);\n\n    function approve(address, uint) external;\n\n    function transfer(address, uint) external returns (bool);\n\n    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "ERC20Interface (ALCompound.sol#117-123) has incorrect ERC20 function interface(s):\n\t-approve (ALCompound.sol#120)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function mintCToken(address erc20, address cErc20, uint tokenAmt) internal {\n\n        enterMarket(cErc20);\n\n        ERC20Interface token = ERC20Interface(erc20);\n\n        uint toDeposit = token.balanceOf(address(this));\n\n        if (toDeposit > tokenAmt) {\n\n            toDeposit = tokenAmt;\n\n        }\n\n        CERC20Interface cToken = CERC20Interface(cErc20);\n\n        setApproval(erc20, toDeposit, cErc20);\n\n        assert(cToken.mint(toDeposit) == 0);\n",
          "message": "ALCompound.mintCToken (ALCompound.sol#181-191) uses a dangerous strict equality:\n\t- assert(bool)(cToken.mint(toDeposit) == 0)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function mintCToken(address erc20, address cErc20, uint tokenAmt) internal {\n\n        enterMarket(cErc20);\n\n        ERC20Interface token = ERC20Interface(erc20);\n\n        uint toDeposit = token.balanceOf(address(this));\n\n        if (toDeposit > tokenAmt) {\n\n            toDeposit = tokenAmt;\n\n        }\n\n        CERC20Interface cToken = CERC20Interface(cErc20);\n\n        setApproval(erc20, toDeposit, cErc20);\n\n        assert(cToken.mint(toDeposit) == 0);\n",
          "message": "ALCompound.mintCToken (ALCompound.sol#181-191) uses a dangerous strict equality:\n\t- assert(bool)(cToken.mint(toDeposit) == 0)\nALCompound.redeemCToken (ALCompound.sol#212-220) uses a dangerous strict equality:\n\t- require(bool,string)(cToken.redeem(toBurn) == 0,something went wrong)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": 191,
          "vulnerability_code": "    function mintCToken(address erc20, address cErc20, uint tokenAmt) internal {\n\n        enterMarket(cErc20);\n\n        ERC20Interface token = ERC20Interface(erc20);\n\n        uint toDeposit = token.balanceOf(address(this));\n\n        if (toDeposit > tokenAmt) {\n\n            toDeposit = tokenAmt;\n\n        }\n\n        CERC20Interface cToken = CERC20Interface(cErc20);\n\n        setApproval(erc20, toDeposit, cErc20);\n\n        assert(cToken.mint(toDeposit) == 0);\n",
          "message": "ALCompound.mintCToken (ALCompound.sol#181-191) uses a dangerous strict equality:\n\t- assert(bool)(cToken.mint(toDeposit) == 0)\nALCompound.redeemCToken (ALCompound.sol#212-220) uses a dangerous strict equality:\n\t- require(bool,string)(cToken.redeem(toBurn) == 0,something went wrong)\nALCompound.redeemUnderlying (ALCompound.sol#197-206) uses a dangerous strict equality:\n\t- require(bool,string)(cToken.redeemUnderlying(tokenToReturn) == 0,something went wrong)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 161,
          "vulnerability_code": "    function enterMarket(address cErc20) internal {\n\n        TrollerInterface troller = TrollerInterface(getComptrollerAddress());\n\n        address[] memory markets = troller.getAssetsIn(address(this));\n\n        bool isEntered = false;\n\n        for (uint i = 0; i < markets.length; i++) {\n\n            if (markets[i] == cErc20) {\n\n                isEntered = true;\n\n            }\n\n        }\n\n        if (!isEntered) {\n\n            address[] memory toEnter = new address[](1);\n\n            toEnter[0] = cErc20;\n\n            troller.enterMarkets(toEnter);\n\n        }\n",
          "message": "Helpers.enterMarket (ALCompound.sol#147-161) does not use the value returned by external calls:\n\t-troller.enterMarkets(toEnter) (ALCompound.sol#159)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public comptroller;\n",
          "message": "Helpers.comptroller should be constant (ALCompound.sol#135)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function cmul(uint x, uint y) public pure returns (uint z) {\n\n        z = add(mul(x, y), COL / 2) / COL;\n",
          "message": "DSMath.cmul (ALCompound.sol#37-39) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.10;\n",
          "message": "Detected issues with version pragma in ALCompound.sol:\n\t- pragma solidity^0.5.10 (ALCompound.sol#3): it allows old versions\n\t- pragma solidity^0.5.10 (ALCompound.sol#86): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address, address) external view returns (uint);\n",
          "message": "Parameter '' of CTokenInterface.allowance (ALCompound.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address, address) external view returns (uint);\n",
          "message": "Parameter '_scope_0' of CTokenInterface.allowance (ALCompound.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint) external;\n",
          "message": "Parameter '' of CTokenInterface.approve (ALCompound.sol#105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint) external;\n",
          "message": "Parameter '_scope_0' of CTokenInterface.approve (ALCompound.sol#105) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) external returns (bool);\n",
          "message": "Parameter '' of CTokenInterface.transfer (ALCompound.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of CTokenInterface.transfer (ALCompound.sol#106) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "Parameter '' of CTokenInterface.transferFrom (ALCompound.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of CTokenInterface.transferFrom (ALCompound.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_1' of CTokenInterface.transferFrom (ALCompound.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address, address) external view returns (uint);\n",
          "message": "Parameter '' of ERC20Interface.allowance (ALCompound.sol#118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address, address) external view returns (uint);\n",
          "message": "Parameter '_scope_0' of ERC20Interface.allowance (ALCompound.sol#118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
          "message": "Parameter '' of ERC20Interface.balanceOf (ALCompound.sol#119) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint) external;\n",
          "message": "Parameter '' of ERC20Interface.approve (ALCompound.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint) external;\n",
          "message": "Parameter '_scope_0' of ERC20Interface.approve (ALCompound.sol#120) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) external returns (bool);\n",
          "message": "Parameter '' of ERC20Interface.transfer (ALCompound.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ERC20Interface.transfer (ALCompound.sol#121) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "Parameter '' of ERC20Interface.transferFrom (ALCompound.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ERC20Interface.transferFrom (ALCompound.sol#122) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address, address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_1' of ERC20Interface.transferFrom (ALCompound.sol#122) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < markets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < markets.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.10;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.10;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant COL  = 10 ** 8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant WAD  = 10 ** 18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant RAY  = 10 ** 27;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}