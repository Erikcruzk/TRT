{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelist is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i < bresult.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "        oraclize_setProof(proofType_Android | proofStorage_IPFS);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _update(0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _wallet, ERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_wallet != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_token != address(0));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wallet = _wallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = token.decimals();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i < bresult.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < power; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((bresult[i] >= 48)&&(bresult[i] <= 57)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (decimals) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    if (_b == 0) break;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    else _b--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "                mint *= 10;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "                mint += uint(bresult[i]) - 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else if (bresult[i] == 46) decimals = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    else _b--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i < bresult.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < power; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_95"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": 803,
          "vulnerability_code": "    function buyTokens()\n\n        public\n\n        payable\n\n        onlyWhileOpen\n\n        onlyWhitelisted\n\n        whenNotPaused\n\n        onlyActualPrice\n\n    {\n\n        address _beneficiary = msg.sender;\n\n\n\n        uint256 _weiAmount = msg.value;\n\n        _preValidatePurchase(_beneficiary, _weiAmount);\n\n\n\n        // calculate token amount to be created\n\n        uint256 tokens = _getTokenAmount(_weiAmount);\n\n        \n\n        _weiAmount = _weiAmount.sub(_applyDiscount(_weiAmount));\n\n\n\n        funds[_beneficiary] = funds[_beneficiary].add(_weiAmount);\n\n\n\n        // update state\n\n        weiRaised = weiRaised.add(_weiAmount);\n\n\n\n        _processPurchase(_beneficiary, tokens);\n\n        emit TokenPurchase(_beneficiary, _weiAmount, tokens);\n\n\n\n        _forwardFunds(_weiAmount);\n\n\n\n        _postValidatePurchase();\n",
          "message": "Reentrancy in BeamCrowdsale.buyTokens (BeamCrowdsale.sol#774-803):\n\tExternal calls:\n\t- tokens = _getTokenAmount(_weiAmount) (BeamCrowdsale.sol#788)\n\t- _processPurchase(_beneficiary,tokens) (BeamCrowdsale.sol#797)\n\t- _postValidatePurchase() (BeamCrowdsale.sol#802)\n\tExternal calls sending eth:\n\t- _weiAmount = _weiAmount.sub(_applyDiscount(_weiAmount)) (BeamCrowdsale.sol#790)\n\t- _forwardFunds(_weiAmount) (BeamCrowdsale.sol#800)\n\tState variables written after the call(s):\n\t- seedFinished (BeamCrowdsale.sol#802)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function getCodeSize(address _addr) internal view returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n",
          "message": "UsingOraclize.getCodeSize (BeamCrowdsale.sol#88-92) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n        require((lastPriceUpdate + minUpdatePeriod) < now);\n\n        require(msg.sender == oraclize_cbAddress());\n\n\n\n        priceETHUSD = parseInt(result, 2);\n\n        lastPriceUpdate = now;\n\n\n\n        emit PriceUpdated(priceETHUSD);\n\n\n\n        _update(3600);\n\n        return;\n\n\n\n        proof; myid; //to silence the compiler warning\n",
          "message": "Reentrancy in PriceChecker.__callback (BeamCrowdsale.sol#424-437):\n\tExternal calls:\n\t- require(bool)(msg.sender == oraclize_cbAddress()) (BeamCrowdsale.sol#426)\n\tState variables written after the call(s):\n\t- lastPriceUpdate (BeamCrowdsale.sol#429)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    modifier oraclizeAPI {\n\n        if ((address(OAR) == 0)||(getCodeSize(address(OAR)) == 0))\n\n            oraclize_setNetwork(networkID_auto);\n\n\n\n        if (address(oraclize) != OAR.getAddress())\n\n            oraclize = OraclizeI(OAR.getAddress());\n\n\n\n        _;\n",
          "message": "Reentrancy in UsingOraclize.oraclizeAPI (BeamCrowdsale.sol#31-39):\n\tExternal calls:\n\t- address(oraclize) != OAR.getAddress() (BeamCrowdsale.sol#35-36)\n\t- oraclize = OraclizeI(OAR.getAddress()) (BeamCrowdsale.sol#36)\n\tState variables written after the call(s):\n\t- oraclize (BeamCrowdsale.sol#36)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": 634,
          "vulnerability_code": "    function finishCrowdsale() external onlyOwner onlyWhileOpen {\n\n        crowdsaleFinished = true;\n\n\n\n        uint256 _soldAmount = token.totalSupply().sub(bonuses);\n\n\n\n        token.mint(address(this), _soldAmount);\n\n\n\n        emit TokenPurchase(address(this), 0, _soldAmount);\n\n\n\n        emit CrowdsaleFinished(weiRaised, usdRaised);\n",
          "message": "BeamCrowdsale.finishCrowdsale (BeamCrowdsale.sol#624-634) does not use the value returned by external calls:\n\t-token.mint(address(this),_soldAmount) (BeamCrowdsale.sol#629)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": 669,
          "vulnerability_code": "    function transferTokens(\n\n        address _beneficiary,\n\n        uint256 _tokenAmount\n\n    )\n\n        external\n\n        onlyOwner\n\n    {\n\n        require(token.balanceOf(address(this)) >= _tokenAmount);\n\n        token.transfer(_beneficiary, _tokenAmount);\n",
          "message": "BeamCrowdsale.transferTokens (BeamCrowdsale.sol#660-669) does not use the value returned by external calls:\n\t-token.transfer(_beneficiary,_tokenAmount) (BeamCrowdsale.sol#668)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": 900,
          "vulnerability_code": "    function _deliverTokens(\n\n        address _beneficiary,\n\n        uint256 _tokenAmount\n\n    )\n\n        internal\n\n    {\n\n        token.mint(_beneficiary, _tokenAmount);\n",
          "message": "BeamCrowdsale._deliverTokens (BeamCrowdsale.sol#893-900) does not use the value returned by external calls:\n\t-token.mint(_beneficiary,_tokenAmount) (BeamCrowdsale.sol#899)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n        require((lastPriceUpdate + minUpdatePeriod) < now);\n\n        require(msg.sender == oraclize_cbAddress());\n\n\n\n        priceETHUSD = parseInt(result, 2);\n\n        lastPriceUpdate = now;\n\n\n\n        emit PriceUpdated(priceETHUSD);\n\n\n\n        _update(3600);\n\n        return;\n\n\n\n        proof; myid; //to silence the compiler warning\n",
          "message": "Reentrancy in PriceChecker.__callback (BeamCrowdsale.sol#424-437):\n\tExternal calls:\n\t- require(bool)(msg.sender == oraclize_cbAddress()) (BeamCrowdsale.sol#426)\n\tState variables written after the call(s):\n\t- priceETHUSD (BeamCrowdsale.sol#428)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n        require((lastPriceUpdate + minUpdatePeriod) < now);\n\n        require(msg.sender == oraclize_cbAddress());\n\n\n\n        priceETHUSD = parseInt(result, 2);\n\n        lastPriceUpdate = now;\n\n\n\n        emit PriceUpdated(priceETHUSD);\n\n\n\n        _update(3600);\n\n        return;\n\n\n\n        proof; myid; //to silence the compiler warning\n",
          "message": "Reentrancy in PriceChecker.__callback (BeamCrowdsale.sol#424-437):\n\tExternal calls:\n\t- require(bool)(msg.sender == oraclize_cbAddress()) (BeamCrowdsale.sol#426)\n\t- _update(3600) (BeamCrowdsale.sol#433)\n\tExternal calls sending eth:\n\t- _update(3600) (BeamCrowdsale.sol#433)\n\tState variables written after the call(s):\n\t- oraclize_network_name (BeamCrowdsale.sol#433)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": 953,
          "vulnerability_code": "    function _checkSeed() internal {\n\n        if (token.totalSupply() >= tokensForSeed) {\n\n            seedFinished = true;\n\n            emit SeedRoundFinished();\n\n            emit StartPrivateRound();\n\n        }\n",
          "message": "Reentrancy in BeamCrowdsale._checkSeed (BeamCrowdsale.sol#947-953):\n\tExternal calls:\n\t- token.totalSupply() >= tokensForSeed (BeamCrowdsale.sol#948-952)\n\tState variables written after the call(s):\n\t- seedFinished (BeamCrowdsale.sol#949)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": 886,
          "vulnerability_code": "    function _postValidatePurchase() internal {\n\n        if (!seedFinished) _checkSeed();\n\n        if (!softCapReached) _checkSoftCap();\n",
          "message": "Reentrancy in BeamCrowdsale._postValidatePurchase (BeamCrowdsale.sol#883-886):\n\tExternal calls:\n\t- _checkSeed() (BeamCrowdsale.sol#884)\n\tState variables written after the call(s):\n\t- softCapReached (BeamCrowdsale.sol#885)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": 700,
          "vulnerability_code": "    function buyForFiat(address _beneficiary, uint256 _usdUnits)\n\n        external\n\n        onlyOwner\n\n        onlyWhileOpen\n\n        onlyActualPrice\n\n    {\n\n        uint256 _weiAmount = _usdUnits.mul(centsInDollar).div(priceETHUSD);\n\n        \n\n        _preValidatePurchase(_beneficiary, _weiAmount);\n\n\n\n        // calculate token amount to be created\n\n        uint256 tokens = _getTokenAmount(_weiAmount);\n\n\n\n        // update state\n\n        weiRaised = weiRaised.add(_weiAmount);\n\n\n\n        _processPurchase(_beneficiary, tokens);\n\n        emit TokenPurchase(\n\n            _beneficiary,\n\n            _weiAmount,\n\n            tokens\n\n        );\n\n\n\n        _postValidatePurchase();\n",
          "message": "Reentrancy in BeamCrowdsale.buyForFiat (BeamCrowdsale.sol#676-700):\n\tExternal calls:\n\t- tokens = _getTokenAmount(_weiAmount) (BeamCrowdsale.sol#687)\n\tState variables written after the call(s):\n\t- weiRaised (BeamCrowdsale.sol#690)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 774,
          "vulnerability_to_line": 803,
          "vulnerability_code": "    function buyTokens()\n\n        public\n\n        payable\n\n        onlyWhileOpen\n\n        onlyWhitelisted\n\n        whenNotPaused\n\n        onlyActualPrice\n\n    {\n\n        address _beneficiary = msg.sender;\n\n\n\n        uint256 _weiAmount = msg.value;\n\n        _preValidatePurchase(_beneficiary, _weiAmount);\n\n\n\n        // calculate token amount to be created\n\n        uint256 tokens = _getTokenAmount(_weiAmount);\n\n        \n\n        _weiAmount = _weiAmount.sub(_applyDiscount(_weiAmount));\n\n\n\n        funds[_beneficiary] = funds[_beneficiary].add(_weiAmount);\n\n\n\n        // update state\n\n        weiRaised = weiRaised.add(_weiAmount);\n\n\n\n        _processPurchase(_beneficiary, tokens);\n\n        emit TokenPurchase(_beneficiary, _weiAmount, tokens);\n\n\n\n        _forwardFunds(_weiAmount);\n\n\n\n        _postValidatePurchase();\n",
          "message": "Reentrancy in BeamCrowdsale.buyTokens (BeamCrowdsale.sol#774-803):\n\tExternal calls:\n\t- tokens = _getTokenAmount(_weiAmount) (BeamCrowdsale.sol#788)\n\tExternal calls sending eth:\n\t- _weiAmount = _weiAmount.sub(_applyDiscount(_weiAmount)) (BeamCrowdsale.sol#790)\n\tState variables written after the call(s):\n\t- funds (BeamCrowdsale.sol#792)\n\t- weiRaised (BeamCrowdsale.sol#795)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": 410,
          "vulnerability_code": "    constructor() public {\n\n        oraclize_setProof(proofType_Android | proofStorage_IPFS);\n\n        _update(0);\n",
          "message": "Reentrancy in PriceChecker.constructor (BeamCrowdsale.sol#407-410):\n\tExternal calls:\n\t- oraclize_setProof(proofType_Android | proofStorage_IPFS) (BeamCrowdsale.sol#408)\n\t- _update(0) (BeamCrowdsale.sol#409)\n\tExternal calls sending eth:\n\t- _update(0) (BeamCrowdsale.sol#409)\n\tState variables written after the call(s):\n\t- oraclize_network_name (BeamCrowdsale.sol#409)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 707,
          "vulnerability_to_line": 719,
          "vulnerability_code": "    function mintBonus(address _beneficiary, uint256 _tokenUnits)\n\n        external\n\n        onlyOwner\n\n        onlyWhileOpen\n\n    {\n\n\n\n        _processPurchase(_beneficiary, _tokenUnits);\n\n        emit TokenPurchase(_beneficiary, 0, _tokenUnits);\n\n\n\n        bonuses = bonuses.add(_tokenUnits);\n\n\n\n        _postValidatePurchase();\n",
          "message": "Reentrancy in BeamCrowdsale.mintBonus (BeamCrowdsale.sol#707-719):\n\tExternal calls:\n\t- _processPurchase(_beneficiary,_tokenUnits) (BeamCrowdsale.sol#713)\n\tState variables written after the call(s):\n\t- bonuses (BeamCrowdsale.sol#716)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 92,
          "vulnerability_code": "    function getCodeSize(address _addr) internal view returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n",
          "message": "UsingOraclize.getCodeSize uses assembly (BeamCrowdsale.sol#88-92)\n\t- BeamCrowdsale.sol#89-92\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public increasing = 10 ** 9;\n",
          "message": "BeamCrowdsale.increasing should be constant (BeamCrowdsale.sol#505)\nBeamCrowdsale.softCap should be constant (BeamCrowdsale.sol#511)\nBeamCrowdsale.tokensForSeed should be constant (BeamCrowdsale.sol#508)\nBeamCrowdsale.unitsToInt should be constant (BeamCrowdsale.sol#516)\nERC20.decimals should be constant (BeamCrowdsale.sol#295)\nOraclizeI.cbAddress should be constant (BeamCrowdsale.sol#7)\nPriceChecker.centsInDollar should be constant (BeamCrowdsale.sol#400)\nPriceChecker.minUpdatePeriod should be constant (BeamCrowdsale.sol#402)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(string _datasource) public returns (uint _dsprice);\n",
          "message": "OraclizeI.getPrice (BeamCrowdsale.sol#10) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress() public returns (address _addr);\n",
          "message": "OraclizeAddrResolverI.getAddress (BeamCrowdsale.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": 219,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        pendingOwner = newOwner;\n",
          "message": "Ownable.transferOwnership (BeamCrowdsale.sol#217-219) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 228,
          "vulnerability_code": "    function claimOwnership() public onlyPendingOwner {\n\n        emit OwnershipTransferred(owner, pendingOwner);\n\n        owner = pendingOwner;\n\n        pendingOwner = address(0);\n",
          "message": "Ownable.claimOwnership (BeamCrowdsale.sol#224-228) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": 264,
          "vulnerability_code": "    function pause() public onlyOwner whenNotPaused {\n\n        paused = true;\n\n        emit Pause();\n",
          "message": "Pausable.pause (BeamCrowdsale.sol#261-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": 272,
          "vulnerability_code": "    function unpause() public onlyOwner whenPaused {\n\n        paused = false;\n\n        emit Unpause();\n",
          "message": "Pausable.unpause (BeamCrowdsale.sol#269-272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
          "message": "ERC20Basic.totalSupply (BeamCrowdsale.sol#282) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (BeamCrowdsale.sol#283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (BeamCrowdsale.sol#284) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": 298,
          "vulnerability_code": "    function allowance(address owner, address spender)\n",
          "message": "ERC20.allowance (BeamCrowdsale.sol#297-298) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": 301,
          "vulnerability_code": "    function transferFrom(address from, address to, uint256 value)\n",
          "message": "ERC20.transferFrom (BeamCrowdsale.sol#300-301) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20.approve (BeamCrowdsale.sol#303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": 310,
          "vulnerability_code": "    function mint(\n\n        address _to,\n\n        uint256 _amountusingOraclize\n\n    )\n\n        public\n",
          "message": "ERC20.mint (BeamCrowdsale.sol#305-310) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": 364,
          "vulnerability_code": "    function addAddressesToWhitelist(address[] addrs) public onlyOwner returns(bool success) {\n\n        for (uint256 i = 0; i < addrs.length; i++) {\n\n            if (addAddressToWhitelist(addrs[i])) {\n\n                success = true;\n\n            }\n\n        }\n",
          "message": "Whitelist.addAddressesToWhitelist (BeamCrowdsale.sol#358-364) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": 392,
          "vulnerability_code": "    function removeAddressesFromWhitelist(address[] addrs) public onlyOwner returns(bool success) {\n\n        for (uint256 i = 0; i < addrs.length; i++) {\n\n            if (removeAddressFromWhitelist(addrs[i])) {\n\n                success = true;\n\n            }\n\n        }\n",
          "message": "Whitelist.removeAddressesFromWhitelist (BeamCrowdsale.sol#386-392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n        require((lastPriceUpdate + minUpdatePeriod) < now);\n\n        require(msg.sender == oraclize_cbAddress());\n\n\n\n        priceETHUSD = parseInt(result, 2);\n\n        lastPriceUpdate = now;\n\n\n\n        emit PriceUpdated(priceETHUSD);\n\n\n\n        _update(3600);\n\n        return;\n\n\n\n        proof; myid; //to silence the compiler warning\n",
          "message": "PriceChecker.__callback (BeamCrowdsale.sol#424-437) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n\n        return oraclize_setNetwork();\n\n        networkID; // silence the warning and remain backwards compatible\n",
          "message": "Function 'UsingOraclize.oraclize_setNetwork' (BeamCrowdsale.sol#41-44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function oraclize_setNetwork() internal returns(bool){\n\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0){ //mainnet\n\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n\n            oraclize_setNetworkName(\"eth_mainnet\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0){ //kovan testnet\n\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n\n            oraclize_setNetworkName(\"eth_kovan\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n\n            return true;\n\n        }\n\n        return false;\n",
          "message": "Function 'UsingOraclize.oraclize_setNetwork' (BeamCrowdsale.sol#46-62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource);\n",
          "message": "Function 'UsingOraclize.oraclize_getPrice' (BeamCrowdsale.sol#64-66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(0, datasource, arg);\n",
          "message": "Function 'UsingOraclize.oraclize_query' (BeamCrowdsale.sol#68-72) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 78,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n",
          "message": "Function 'UsingOraclize.oraclize_query' (BeamCrowdsale.sol#74-78) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function oraclize_cbAddress() internal oraclizeAPI returns (address){\n\n        return oraclize.cbAddress();\n",
          "message": "Function 'UsingOraclize.oraclize_cbAddress' (BeamCrowdsale.sol#80-82) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": 86,
          "vulnerability_code": "    function oraclize_setProof(byte proofP) internal oraclizeAPI  {\n\n        return oraclize.setProofType(proofP);\n",
          "message": "Function 'UsingOraclize.oraclize_setProof' (BeamCrowdsale.sol#84-86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
          "message": "Parameter '_a' of UsingOraclize.parseInt (BeamCrowdsale.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
          "message": "Parameter '_b' of UsingOraclize.parseInt (BeamCrowdsale.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 117,
          "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n\n        oraclize_network_name = _network_name;\n",
          "message": "Function 'UsingOraclize.oraclize_setNetworkName' (BeamCrowdsale.sol#115-117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n",
          "message": "Parameter '_network_name' of UsingOraclize.oraclize_setNetworkName (BeamCrowdsale.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": "Constant 'UsingOraclize.proofType_Ledger' (BeamCrowdsale.sol#20) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Android = 0x40;\n",
          "message": "Constant 'UsingOraclize.proofType_Android' (BeamCrowdsale.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
          "message": "Constant 'UsingOraclize.proofStorage_IPFS' (BeamCrowdsale.sol#22) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_auto = 0;\n",
          "message": "Constant 'UsingOraclize.networkID_auto' (BeamCrowdsale.sol#23) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_mainnet = 1;\n",
          "message": "Constant 'UsingOraclize.networkID_mainnet' (BeamCrowdsale.sol#24) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_testnet = 2;\n",
          "message": "Constant 'UsingOraclize.networkID_testnet' (BeamCrowdsale.sol#25) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OraclizeAddrResolverI OAR;\n",
          "message": "Variable 'UsingOraclize.OAR' (BeamCrowdsale.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string oraclize_network_name;\n",
          "message": "Variable 'UsingOraclize.oraclize_network_name' (BeamCrowdsale.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": 437,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n        require((lastPriceUpdate + minUpdatePeriod) < now);\n\n        require(msg.sender == oraclize_cbAddress());\n\n\n\n        priceETHUSD = parseInt(result, 2);\n\n        lastPriceUpdate = now;\n\n\n\n        emit PriceUpdated(priceETHUSD);\n\n\n\n        _update(3600);\n\n        return;\n\n\n\n        proof; myid; //to silence the compiler warning\n",
          "message": "Function 'PriceChecker.__callback' (BeamCrowdsale.sol#424-437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": 449,
          "vulnerability_code": "    function _update(uint256 _timeout) internal {\n\n        if (oraclize_getPrice(\"URL\") > address(this).balance) {\n\n            emit NewOraclizeQuery(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee\");\n\n        } else {\n\n            emit NewOraclizeQuery(\"Oraclize query was sent, standing by for the answer..\");\n\n            oraclize_query(_timeout, \"URL\", \"json(https://api.coinmarketcap.com/v1/ticker/ethereum/).0.price_usd\");\n\n        }\n",
          "message": "Function 'PriceChecker._update' (BeamCrowdsale.sol#442-449) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _update(uint256 _timeout) internal {\n",
          "message": "Parameter '_timeout' of PriceChecker._update (BeamCrowdsale.sol#442) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_wallet' of BeamCrowdsale. (BeamCrowdsale.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _wallet, ERC20 _token) public {\n",
          "message": "Parameter '_token' of BeamCrowdsale. (BeamCrowdsale.sol#579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFunds(address _beneficiary, uint256 _weiAmount)\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale.withdrawFunds (BeamCrowdsale.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawFunds(address _beneficiary, uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of BeamCrowdsale.withdrawFunds (BeamCrowdsale.sol#613) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function update(uint256 _timeout) external payable onlyOwner {\n",
          "message": "Parameter '_timeout' of BeamCrowdsale.update (BeamCrowdsale.sol#639) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale.transferTokens (BeamCrowdsale.sol#661) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of BeamCrowdsale.transferTokens (BeamCrowdsale.sol#662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyForFiat(address _beneficiary, uint256 _usdUnits)\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale.buyForFiat (BeamCrowdsale.sol#676) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 676,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function buyForFiat(address _beneficiary, uint256 _usdUnits)\n",
          "message": "Parameter '_usdUnits' of BeamCrowdsale.buyForFiat (BeamCrowdsale.sol#676) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 707,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintBonus(address _beneficiary, uint256 _tokenUnits)\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale.mintBonus (BeamCrowdsale.sol#707) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 707,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mintBonus(address _beneficiary, uint256 _tokenUnits)\n",
          "message": "Parameter '_tokenUnits' of BeamCrowdsale.mintBonus (BeamCrowdsale.sol#707) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDiscountSeed(uint256 _discountSeed) external onlyOwner onlyWhileOpen {\n",
          "message": "Parameter '_discountSeed' of BeamCrowdsale.setDiscountSeed (BeamCrowdsale.sol#734) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDiscountPrivate(uint256 _discountPrivate) external onlyOwner onlyWhileOpen {\n",
          "message": "Parameter '_discountPrivate' of BeamCrowdsale.setDiscountPrivate (BeamCrowdsale.sol#741) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDiscountPublic(uint256 _discountPublic) external onlyOwner onlyWhileOpen {\n",
          "message": "Parameter '_discountPublic' of BeamCrowdsale.setDiscountPublic (BeamCrowdsale.sol#748) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPublicRound(bool _enable) external onlyOwner onlyWhileOpen {\n",
          "message": "Parameter '_enable' of BeamCrowdsale.setPublicRound (BeamCrowdsale.sol#759) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": 832,
          "vulnerability_code": "    function _preValidatePurchase(\n\n        address _beneficiary,\n\n        uint256 _weiAmount\n\n    )\n\n        internal\n\n        pure\n\n    {\n\n        require(_beneficiary != address(0));\n\n        require(_weiAmount != 0);\n",
          "message": "Function 'BeamCrowdsale._preValidatePurchase' (BeamCrowdsale.sol#823-832) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 824,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale._preValidatePurchase (BeamCrowdsale.sol#824) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _weiAmount\n",
          "message": "Parameter '_weiAmount' of BeamCrowdsale._preValidatePurchase (BeamCrowdsale.sol#825) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenIntAmount(uint256 _startPrice, uint256 _usdUnits)\n",
          "message": "Parameter '_startPrice' of BeamCrowdsale.tokenIntAmount (BeamCrowdsale.sol#850) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function tokenIntAmount(uint256 _startPrice, uint256 _usdUnits)\n",
          "message": "Parameter '_usdUnits' of BeamCrowdsale.tokenIntAmount (BeamCrowdsale.sol#850) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 867,
          "vulnerability_to_line": 878,
          "vulnerability_code": "    function _remainderAmount(\n\n        uint256 _startPrice,\n\n        uint256 _usdUnits,\n\n        uint256 _tokenIntAmount\n\n    )\n\n        internal\n\n        view\n\n        returns(uint256)\n\n    {\n\n        uint256 _summ = (_startPrice.mul(2).add(increasing.mul(_tokenIntAmount.sub(1))).mul(_tokenIntAmount)).div(2);\n\n        return _usdUnits.sub(_summ);\n",
          "message": "Function 'BeamCrowdsale._remainderAmount' (BeamCrowdsale.sol#867-878) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 868,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _startPrice,\n",
          "message": "Parameter '_startPrice' of BeamCrowdsale._remainderAmount (BeamCrowdsale.sol#868) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _usdUnits,\n",
          "message": "Parameter '_usdUnits' of BeamCrowdsale._remainderAmount (BeamCrowdsale.sol#869) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokenIntAmount\n",
          "message": "Parameter '_tokenIntAmount' of BeamCrowdsale._remainderAmount (BeamCrowdsale.sol#870) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": 886,
          "vulnerability_code": "    function _postValidatePurchase() internal {\n\n        if (!seedFinished) _checkSeed();\n\n        if (!softCapReached) _checkSoftCap();\n",
          "message": "Function 'BeamCrowdsale._postValidatePurchase' (BeamCrowdsale.sol#883-886) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": 900,
          "vulnerability_code": "    function _deliverTokens(\n\n        address _beneficiary,\n\n        uint256 _tokenAmount\n\n    )\n\n        internal\n\n    {\n\n        token.mint(_beneficiary, _tokenAmount);\n",
          "message": "Function 'BeamCrowdsale._deliverTokens' (BeamCrowdsale.sol#893-900) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale._deliverTokens (BeamCrowdsale.sol#894) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 895,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of BeamCrowdsale._deliverTokens (BeamCrowdsale.sol#895) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 907,
          "vulnerability_to_line": 914,
          "vulnerability_code": "    function _processPurchase(\n\n        address _beneficiary,\n\n        uint256 _tokenAmount\n\n    )\n\n        internal\n\n    {\n\n        _deliverTokens(_beneficiary, _tokenAmount);\n",
          "message": "Function 'BeamCrowdsale._processPurchase' (BeamCrowdsale.sol#907-914) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _beneficiary,\n",
          "message": "Parameter '_beneficiary' of BeamCrowdsale._processPurchase (BeamCrowdsale.sol#908) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 909,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokenAmount\n",
          "message": "Parameter '_tokenAmount' of BeamCrowdsale._processPurchase (BeamCrowdsale.sol#909) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": 942,
          "vulnerability_code": "    function _getTokenAmount(uint256 _weiAmount)\n\n        internal returns (uint256)\n\n    {\n\n        uint256 _usdUnits = _weiAmount.mul(priceETHUSD).div(centsInDollar);\n\n\n\n        usdRaised = usdRaised.add(_usdUnits);\n\n\n\n        uint256 _tokenPrice = tokenPrice();\n\n        uint256 _tokenIntAmount = tokenIntAmount(_tokenPrice, _usdUnits);\n\n        uint256 _tokenUnitAmount = _tokenIntAmount.mul(10 ** decimals);\n\n        uint256 _newPrice = tokenPrice().add(_tokenIntAmount.mul(increasing));\n\n        \n\n        uint256 _usdRemainder;\n\n        \n\n        if (_tokenIntAmount == 0)\n\n            _usdRemainder = _usdUnits;\n\n        else\n\n            _usdRemainder = _remainderAmount(_tokenPrice, _usdUnits, _tokenIntAmount);\n\n            \n\n        _tokenUnitAmount = _tokenUnitAmount.add(_usdRemainder.mul(10 ** decimals).div(_newPrice));\n\n        return _tokenUnitAmount;\n",
          "message": "Function 'BeamCrowdsale._getTokenAmount' (BeamCrowdsale.sol#921-942) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _getTokenAmount(uint256 _weiAmount)\n",
          "message": "Parameter '_weiAmount' of BeamCrowdsale._getTokenAmount (BeamCrowdsale.sol#921) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 947,
          "vulnerability_to_line": 953,
          "vulnerability_code": "    function _checkSeed() internal {\n\n        if (token.totalSupply() >= tokensForSeed) {\n\n            seedFinished = true;\n\n            emit SeedRoundFinished();\n\n            emit StartPrivateRound();\n\n        }\n",
          "message": "Function 'BeamCrowdsale._checkSeed' (BeamCrowdsale.sol#947-953) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 958,
          "vulnerability_to_line": 963,
          "vulnerability_code": "    function _checkSoftCap() internal {\n\n        if (usdRaised >= softCap) {\n\n            softCapReached = true;\n\n            emit SoftCapReached();\n\n        }\n",
          "message": "Function 'BeamCrowdsale._checkSoftCap' (BeamCrowdsale.sol#958-963) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": 982,
          "vulnerability_code": "    function _applyDiscount(uint256 _weiAmount) internal returns (uint256) {\n\n        address _payer = msg.sender;\n\n        uint256 _refundAmount;\n\n        \n\n        if (!seedFinished) {\n\n            _refundAmount = _weiAmount.mul(discountSeed).div(100);\n\n        } else if (!publicRound) {\n\n            _refundAmount = _weiAmount.mul(discountPrivate).div(100);\n\n        } else {\n\n            _refundAmount = _weiAmount.mul(discountPublic).div(100);\n\n        }\n\n        _payer.transfer(_refundAmount);\n\n        return _refundAmount;\n",
          "message": "Function 'BeamCrowdsale._applyDiscount' (BeamCrowdsale.sol#969-982) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 969,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _applyDiscount(uint256 _weiAmount) internal returns (uint256) {\n",
          "message": "Parameter '_weiAmount' of BeamCrowdsale._applyDiscount (BeamCrowdsale.sol#969) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 987,
          "vulnerability_to_line": 989,
          "vulnerability_code": "    function _forwardFunds(uint256 _weiAmount) internal {\n\n        wallet.transfer(_weiAmount);\n",
          "message": "Function 'BeamCrowdsale._forwardFunds' (BeamCrowdsale.sol#987-989) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 987,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _forwardFunds(uint256 _weiAmount) internal {\n",
          "message": "Parameter '_weiAmount' of BeamCrowdsale._forwardFunds (BeamCrowdsale.sol#987) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": "UsingOraclize.proofType_Ledger (BeamCrowdsale.sol#20) is never used in BeamCrowdsale\nUsingOraclize.networkID_mainnet (BeamCrowdsale.sol#24) is never used in BeamCrowdsale\nUsingOraclize.networkID_testnet (BeamCrowdsale.sol#25) is never used in BeamCrowdsale\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0){ //mainnet\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0){ //kovan testnet\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Android = 0x40;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i < bresult.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCodeSize(address _addr) internal view returns(uint _size) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i < bresult.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < addrs.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (z < y) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract OraclizeI {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 734,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDiscountSeed(uint256 _discountSeed) external onlyOwner onlyWhileOpen {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 741,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDiscountPrivate(uint256 _discountPrivate) external onlyOwner onlyWhileOpen {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setDiscountPublic(uint256 _discountPublic) external onlyOwner onlyWhileOpen {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 759,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPublicRound(bool _enable) external onlyOwner onlyWhileOpen {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCodeSize(address _addr) internal view returns(uint _size) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(string _datasource) public returns (uint _dsprice);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 358,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addAddressesToWhitelist(address[] addrs) public onlyOwner returns(bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAddressesFromWhitelist(address[] addrs) public onlyOwner returns(bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Android = 0x40;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_auto = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_mainnet = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_testnet = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OraclizeAddrResolverI OAR;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OraclizeI oraclize;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string oraclize_network_name;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAddressesFromWhitelist(address[] addrs) public onlyOwner returns(bool success) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract BeamCrowdsale is Whitelist, PriceChecker, Pausable {\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAddressesFromWhitelist(address[] addrs) public onlyOwner returns(bool success) {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _beneficiary.transfer(_weiAmount);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(toSend);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((lastPriceUpdate + minUpdatePeriod) < now);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((lastPriceUpdate + minUpdatePeriod) < now);\n",
          "message": null
        }
      ]
    }
  }
}