{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.11;\n",
          "message": "Detected issues with version pragma in iERC20Fulcrum.sol:\n\t- pragma solidity0.5.11 (iERC20Fulcrum.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": 101,
          "vulnerability_code": "interface iERC20Fulcrum {\n\n  function mint(\n\n    address receiver,\n\n    uint256 depositAmount)\n\n    external\n\n    returns (uint256 mintAmount);\n\n\n\n  function burn(\n\n    address receiver,\n\n    uint256 burnAmount)\n\n    external\n\n    returns (uint256 loanAmountPaid);\n\n\n\n  function tokenPrice()\n\n    external\n\n    view\n\n    returns (uint256 price);\n\n\n\n  function supplyInterestRate()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function rateMultiplier()\n\n    external\n\n    view\n\n    returns (uint256);\n\n  function baseRate()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function borrowInterestRate()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function avgBorrowInterestRate()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function spreadMultiplier()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function totalAssetBorrow()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function totalAssetSupply()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function nextSupplyInterestRate(uint256)\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function nextBorrowInterestRate(uint256)\n\n    external\n\n    view\n\n    returns (uint256);\n\n  function nextLoanInterestRate(uint256)\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function claimLoanToken()\n\n    external\n\n    returns (uint256 claimedAmount);\n\n\n\n  /* function burnToEther(\n\n    address receiver,\n\n    uint256 burnAmount)\n\n    external\n\n    returns (uint256 loanAmountPaid);\n\n\n\n\n\n  function supplyInterestRate()\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function assetBalanceOf(\n\n    address _owner)\n\n    external\n\n    view\n\n    returns (uint256);\n\n\n\n  function claimLoanToken()\n\n    external\n\n    returns (uint256 claimedAmount); */\n",
          "message": "Contract 'iERC20Fulcrum' (iERC20Fulcrum.sol#5-101) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function nextSupplyInterestRate(uint256)\n",
          "message": "Parameter '' of iERC20Fulcrum.nextSupplyInterestRate (iERC20Fulcrum.sol#62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function nextBorrowInterestRate(uint256)\n",
          "message": "Parameter '' of iERC20Fulcrum.nextBorrowInterestRate (iERC20Fulcrum.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function nextLoanInterestRate(uint256)\n",
          "message": "Parameter '' of iERC20Fulcrum.nextLoanInterestRate (iERC20Fulcrum.sol#71) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}