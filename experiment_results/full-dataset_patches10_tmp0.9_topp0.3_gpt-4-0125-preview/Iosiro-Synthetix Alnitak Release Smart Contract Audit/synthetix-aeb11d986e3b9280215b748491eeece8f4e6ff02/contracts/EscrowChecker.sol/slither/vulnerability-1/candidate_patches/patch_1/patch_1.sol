pragma solidity ^0.5.16;

interface ISynthetixEscrow {
    function numVestingEntries(address account) external view returns (uint);

    function getVestingScheduleEntry(address account, uint index) external view returns (uint[2] memory);
}


contract EscrowChecker {
    ISynthetixEscrow public synthetix_escrow;

    constructor(ISynthetixEscrow _esc) public {
        synthetix_escrow = _esc;
    }

function checkAccountSchedule(address account) public view returns (uint[16] memory) {
    uint[16] memory _result;
    uint schedules = synthetix_escrow.numVestingEntries(account);
    uint counter = 0;
    for (uint i = 0; i < schedules && counter < 16; i++) {
        uint[2] memory pair = synthetix_escrow.getVestingScheduleEntry(account, i);
        _result[counter] = pair[0];
        counter++;
        if (counter < 16) {
            _result[counter] = pair[1];
            counter++;
        }
    }
    return _result;
}
}