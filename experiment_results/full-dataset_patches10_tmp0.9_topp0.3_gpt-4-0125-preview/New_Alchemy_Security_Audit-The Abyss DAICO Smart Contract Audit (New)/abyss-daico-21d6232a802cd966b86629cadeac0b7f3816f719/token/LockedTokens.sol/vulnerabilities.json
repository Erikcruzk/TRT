{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "                walletTokens[msg.sender][i].released = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "                walletTokens[msg.sender][i].released = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 120,
          "vulnerability_code": "    function releaseTokens() public {\n\n        require(walletTokens[msg.sender].length > 0);\n\n\n\n        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n\n            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n\n                walletTokens[msg.sender][i].released = true;\n\n                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n\n                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n\n            }\n\n        }\n",
          "message": "LockedTokens.releaseTokens (LockedTokens.sol#110-120) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (LockedTokens.sol#116)\n"
        },
        {
          "name": "calls-loop",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "LockedTokens.releaseTokens has external calls inside a loop:\n\t- token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (LockedTokens.sol#116)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals;\n",
          "message": "IERC20Token.decimals should be constant (LockedTokens.sol#51)\nIERC20Token.name should be constant (LockedTokens.sol#49)\nIERC20Token.symbol should be constant (LockedTokens.sol#50)\nIERC20Token.totalSupply should be constant (LockedTokens.sol#52)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": "IERC20Token.balanceOf (LockedTokens.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.transfer (LockedTokens.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (LockedTokens.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.approve (LockedTokens.sol#57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": "IERC20Token.allowance (LockedTokens.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 120,
          "vulnerability_code": "    function releaseTokens() public {\n\n        require(walletTokens[msg.sender].length > 0);\n\n\n\n        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n\n            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n\n                walletTokens[msg.sender][i].released = true;\n\n                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n\n                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n\n            }\n\n        }\n",
          "message": "LockedTokens.releaseTokens (LockedTokens.sol#110-120) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in LockedTokens.sol:\n\t- pragma solidity^0.4.21 (LockedTokens.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (LockedTokens.sol#41): it allows old versions\n\t- pragma solidity^0.4.21 (LockedTokens.sol#66): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function SafeMath() public {\n",
          "message": "Function 'SafeMath.SafeMath' (LockedTokens.sol#13-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n\n        token = _token;\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
          "message": "Function 'LockedTokens.LockedTokens' (LockedTokens.sol#91-94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n",
          "message": "Parameter '_token' of LockedTokens.LockedTokens (LockedTokens.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n",
          "message": "Parameter '_crowdsaleAddress' of LockedTokens.LockedTokens (LockedTokens.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
          "message": "Parameter '_to' of LockedTokens.addTokens (LockedTokens.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
          "message": "Parameter '_amount' of LockedTokens.addTokens (LockedTokens.sol#102) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
          "message": "Parameter '_lockEndTime' of LockedTokens.addTokens (LockedTokens.sol#102) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Tokens[]) public walletTokens;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => Tokens[]) public walletTokens;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/New_Alchemy_Security_Audit-The Abyss DAICO Smart Contract Audit (New)/abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/math/SafeMath.sol\n",
          "message": null
        }
      ]
    }
  }
}