{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public allowTransfers = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public issuanceFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= limitEndDate || !isLimitEnabled || (!limitedWallets[_from] && !limitedWallets[_to]));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(hasListener() && success) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(hasListener() && success) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_61"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals;\n",
          "message": "IERC20Token.decimals should be constant (TransferLimitedToken.sol#69)\nIERC20Token.name should be constant (TransferLimitedToken.sol#67)\nIERC20Token.symbol should be constant (TransferLimitedToken.sol#68)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
          "message": "MultiOwnable.setOwners (TransferLimitedToken.sol#33-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
          "message": "MultiOwnable.getOwners (TransferLimitedToken.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": "IERC20Token.balanceOf (TransferLimitedToken.sol#72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "ERC20Token.balanceOf (TransferLimitedToken.sol#154-156) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": "IERC20Token.allowance (TransferLimitedToken.sol#76) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": 166,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
          "message": "ERC20Token.allowance (TransferLimitedToken.sol#164-166) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
          "message": "ITokenEventListener.onTokenTransfer (TransferLimitedToken.sol#184) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": 250,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
          "message": "ManagedToken.setListener (TransferLimitedToken.sol#244-250) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 316,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "ManagedToken.increaseApproval (TransferLimitedToken.sol#312-316) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": 337,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "ManagedToken.decreaseApproval (TransferLimitedToken.sol#328-337) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": 347,
          "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
          "message": "ManagedToken.finishIssuance (TransferLimitedToken.sol#343-347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": 407,
          "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n\n        require(msg.sender == limitedWalletsManager || ownerByAddress[msg.sender]);\n\n        limitedWallets[_wallet] = true;\n",
          "message": "TransferLimitedToken.addLimitedWalletAddress (TransferLimitedToken.sol#404-407) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": 415,
          "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n\n        limitedWallets[_wallet] = false;\n",
          "message": "TransferLimitedToken.delLimitedWalletAddress (TransferLimitedToken.sol#413-415) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": 422,
          "vulnerability_code": "    function disableLimit() public onlyManager {\n\n        isLimitEnabled = false;\n",
          "message": "TransferLimitedToken.disableLimit (TransferLimitedToken.sol#420-422) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in TransferLimitedToken.sol:\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#59): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#84): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#122): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#171): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#189): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#352): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
          "message": "Function 'MultiOwnable.MultiOwnable' (TransferLimitedToken.sol#26-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": "Parameter '_owners' of MultiOwnable.setOwners (TransferLimitedToken.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
          "message": "Function 'MultiOwnable._setOwners' (TransferLimitedToken.sol#39-50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
          "message": "Parameter '_owners' of MultiOwnable._setOwners (TransferLimitedToken.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 95,
          "vulnerability_code": "    function SafeMath() public {\n",
          "message": "Function 'SafeMath.SafeMath' (TransferLimitedToken.sol#94-95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC20Token.balanceOf (TransferLimitedToken.sol#154) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of ERC20Token.transfer (TransferLimitedToken.sol#133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.transfer (TransferLimitedToken.sol#133) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of ERC20Token.transferFrom (TransferLimitedToken.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of ERC20Token.transferFrom (TransferLimitedToken.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.transferFrom (TransferLimitedToken.sol#143) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of ERC20Token.approve (TransferLimitedToken.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.approve (TransferLimitedToken.sol#158) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC20Token.allowance (TransferLimitedToken.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": "Parameter '_spender' of ERC20Token.allowance (TransferLimitedToken.sol#164) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_to' of ManagedToken.transfer (TransferLimitedToken.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_value' of ManagedToken.transfer (TransferLimitedToken.sol#252) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_from' of ManagedToken.transferFrom (TransferLimitedToken.sol#260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_to' of ManagedToken.transferFrom (TransferLimitedToken.sol#260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_value' of ManagedToken.transferFrom (TransferLimitedToken.sol#260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 229,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
          "message": "Function 'ManagedToken.ManagedToken' (TransferLimitedToken.sol#224-229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": "Parameter '_listener' of ManagedToken.ManagedToken (TransferLimitedToken.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": "Parameter '_owners' of ManagedToken.ManagedToken (TransferLimitedToken.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
          "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (TransferLimitedToken.sol#235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
          "message": "Parameter '_listener' of ManagedToken.setListener (TransferLimitedToken.sol#244) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
          "message": "Parameter '_to' of ManagedToken.issue (TransferLimitedToken.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
          "message": "Parameter '_value' of ManagedToken.issue (TransferLimitedToken.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
          "message": "Parameter '_from' of ManagedToken.destroy (TransferLimitedToken.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
          "message": "Parameter '_value' of ManagedToken.destroy (TransferLimitedToken.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of ManagedToken.increaseApproval (TransferLimitedToken.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (TransferLimitedToken.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of ManagedToken.decreaseApproval (TransferLimitedToken.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (TransferLimitedToken.sol#328) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
          "message": "Parameter '_to' of TransferLimitedToken.transfer (TransferLimitedToken.sol#424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
          "message": "Parameter '_value' of TransferLimitedToken.transfer (TransferLimitedToken.sol#424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
          "message": "Parameter '_from' of TransferLimitedToken.transferFrom (TransferLimitedToken.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
          "message": "Parameter '_to' of TransferLimitedToken.transferFrom (TransferLimitedToken.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
          "message": "Parameter '_value' of TransferLimitedToken.transferFrom (TransferLimitedToken.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
          "message": "Parameter '_spender' of TransferLimitedToken.approve (TransferLimitedToken.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
          "message": "Parameter '_value' of TransferLimitedToken.approve (TransferLimitedToken.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 398,
          "vulnerability_code": "    function TransferLimitedToken(\n\n        uint256 _limitStartDate,\n\n        address _listener,\n\n        address[] _owners,\n\n        address _limitedWalletsManager\n\n    ) public ManagedToken(_listener, _owners)\n\n    {\n\n        limitEndDate = _limitStartDate + LIMIT_TRANSFERS_PERIOD;\n\n        isLimitEnabled = true;\n\n        limitedWalletsManager = _limitedWalletsManager;\n",
          "message": "Function 'TransferLimitedToken.TransferLimitedToken' (TransferLimitedToken.sol#388-398) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 389,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _limitStartDate,\n",
          "message": "Parameter '_limitStartDate' of TransferLimitedToken.TransferLimitedToken (TransferLimitedToken.sol#389) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _limitedWalletsManager\n",
          "message": "Parameter '_limitedWalletsManager' of TransferLimitedToken.TransferLimitedToken (TransferLimitedToken.sol#392) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n",
          "message": "Parameter '_wallet' of TransferLimitedToken.addLimitedWalletAddress (TransferLimitedToken.sol#404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n",
          "message": "Parameter '_wallet' of TransferLimitedToken.delLimitedWalletAddress (TransferLimitedToken.sol#413) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public owners;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}