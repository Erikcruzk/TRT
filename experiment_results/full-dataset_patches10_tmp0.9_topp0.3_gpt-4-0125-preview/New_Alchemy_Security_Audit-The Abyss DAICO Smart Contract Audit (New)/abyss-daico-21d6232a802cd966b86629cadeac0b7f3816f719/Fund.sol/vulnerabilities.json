{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public allowTransfers = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public issuanceFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public lastWithdrawTime = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public firstWithdrawAmount = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(hasListener() && success) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": null,
          "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(hasListener() && success) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_71"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": 559,
          "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.firstWithdraw (Fund.sol#553-559) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (Fund.sol#557)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": 570,
          "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.withdraw (Fund.sol#564-570) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (Fund.sol#568)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": 604,
          "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
          "message": "Fund.refundTokenHolder (Fund.sol#592-604) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(refundAmount) (Fund.sol#601)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n",
          "message": "SafeMath.safeMul (Fund.sol#40-44) uses a dangerous strict equality:\n\t- assert(bool)(a == 0 || c / a == b)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": 504,
          "vulnerability_code": "    function onCrowdsaleEnd() external onlyCrowdsale {\n\n        state = FundState.TeamWithdraw;\n\n        ISimpleCrowdsale crowdsale = ISimpleCrowdsale(crowdsaleAddress);\n\n        firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(), 2);\n\n        lastWithdrawTime = now;\n\n        tap = INITIAL_TAP;\n\n        crowdsaleEndDate = now;\n",
          "message": "Reentrancy in Fund.onCrowdsaleEnd (Fund.sol#497-504):\n\tExternal calls:\n\t- firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(),2) (Fund.sol#500)\n\tState variables written after the call(s):\n\t- crowdsaleEndDate (Fund.sol#503)\n\t- lastWithdrawTime (Fund.sol#501)\n\t- tap (Fund.sol#502)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals;\n",
          "message": "IERC20Token.decimals should be constant (Fund.sol#131)\nIERC20Token.name should be constant (Fund.sol#129)\nIERC20Token.symbol should be constant (Fund.sol#130)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
          "message": "MultiOwnable.setOwners (Fund.sol#95-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
          "message": "MultiOwnable.getOwners (Fund.sol#114-116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": "IERC20Token.balanceOf (Fund.sol#134) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": 180,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "ERC20Token.balanceOf (Fund.sol#178-180) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": 186,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
          "message": "ERC20Token.approve (Fund.sol#182-186) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.approve (Fund.sol#137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
          "message": "ERC20Token.allowance (Fund.sol#188-190) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": "IERC20Token.allowance (Fund.sol#138) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
          "message": "ITokenEventListener.onTokenTransfer (Fund.sol#208) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": 274,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
          "message": "ManagedToken.setListener (Fund.sol#268-274) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": 340,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "ManagedToken.increaseApproval (Fund.sol#336-340) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": 361,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "ManagedToken.decreaseApproval (Fund.sol#352-361) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": 371,
          "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
          "message": "ManagedToken.finishIssuance (Fund.sol#367-371) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 478,
          "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n\n        require(crowdsaleAddress == address(0));\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
          "message": "Fund.setCrowdsaleAddress (Fund.sol#475-478) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": 483,
          "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n\n        require(address(token) == address(0));\n\n        token = ManagedToken(_tokenAddress);\n",
          "message": "Fund.setTokenAddress (Fund.sol#480-483) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": 543,
          "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n\n        if(state != FundState.TeamWithdraw) {\n\n            return 0;\n\n        }\n\n        return calcTapAmount();\n",
          "message": "Fund.getCurrentTapAmount (Fund.sol#538-543) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": 559,
          "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.firstWithdraw (Fund.sol#553-559) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": 570,
          "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.withdraw (Fund.sol#564-570) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": 604,
          "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
          "message": "Fund.refundTokenHolder (Fund.sol#592-604) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in Fund.sol:\n\t- pragma solidity^0.4.21 (Fund.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#27): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#65): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#121): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#146): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#195): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#213): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#376): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#391): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function SafeMath() public {\n",
          "message": "Function 'SafeMath.SafeMath' (Fund.sol#37-38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": 90,
          "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
          "message": "Function 'MultiOwnable.MultiOwnable' (Fund.sol#88-90) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": "Parameter '_owners' of MultiOwnable.setOwners (Fund.sol#95) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
          "message": "Function 'MultiOwnable._setOwners' (Fund.sol#101-112) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
          "message": "Parameter '_owners' of MultiOwnable._setOwners (Fund.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC20Token.balanceOf (Fund.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of ERC20Token.transfer (Fund.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.transfer (Fund.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of ERC20Token.transferFrom (Fund.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of ERC20Token.transferFrom (Fund.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.transferFrom (Fund.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of ERC20Token.approve (Fund.sol#182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.approve (Fund.sol#182) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC20Token.allowance (Fund.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": "Parameter '_spender' of ERC20Token.allowance (Fund.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_to' of ManagedToken.transfer (Fund.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_value' of ManagedToken.transfer (Fund.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_from' of ManagedToken.transferFrom (Fund.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_to' of ManagedToken.transferFrom (Fund.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_value' of ManagedToken.transferFrom (Fund.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 253,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
          "message": "Function 'ManagedToken.ManagedToken' (Fund.sol#248-253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": "Parameter '_listener' of ManagedToken.ManagedToken (Fund.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": "Parameter '_owners' of ManagedToken.ManagedToken (Fund.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
          "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (Fund.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
          "message": "Parameter '_listener' of ManagedToken.setListener (Fund.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
          "message": "Parameter '_to' of ManagedToken.issue (Fund.sol#304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
          "message": "Parameter '_value' of ManagedToken.issue (Fund.sol#304) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
          "message": "Parameter '_from' of ManagedToken.destroy (Fund.sol#317) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
          "message": "Parameter '_value' of ManagedToken.destroy (Fund.sol#317) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of ManagedToken.increaseApproval (Fund.sol#336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (Fund.sol#336) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of ManagedToken.decreaseApproval (Fund.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (Fund.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": 461,
          "vulnerability_code": "    function Fund(\n\n        address _teamWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _advisorTokenWallet,\n\n        address[] _owners\n\n    ) public\n\n    {\n\n        teamWallet = _teamWallet;\n\n        referralTokenWallet = _referralTokenWallet;\n\n        foundationTokenWallet = _foundationTokenWallet;\n\n        companyTokenWallet = _companyTokenWallet;\n\n        reserveTokenWallet = _reserveTokenWallet;\n\n        bountyTokenWallet = _bountyTokenWallet;\n\n        advisorTokenWallet = _advisorTokenWallet;\n\n        _setOwners(_owners);\n",
          "message": "Function 'Fund.Fund' (Fund.sol#442-461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _teamWallet,\n",
          "message": "Parameter '_teamWallet' of Fund.Fund (Fund.sol#443) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _referralTokenWallet,\n",
          "message": "Parameter '_referralTokenWallet' of Fund.Fund (Fund.sol#444) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _foundationTokenWallet,\n",
          "message": "Parameter '_foundationTokenWallet' of Fund.Fund (Fund.sol#445) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _companyTokenWallet,\n",
          "message": "Parameter '_companyTokenWallet' of Fund.Fund (Fund.sol#446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _reserveTokenWallet,\n",
          "message": "Parameter '_reserveTokenWallet' of Fund.Fund (Fund.sol#447) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _bountyTokenWallet,\n",
          "message": "Parameter '_bountyTokenWallet' of Fund.Fund (Fund.sol#448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _advisorTokenWallet,\n",
          "message": "Parameter '_advisorTokenWallet' of Fund.Fund (Fund.sol#449) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners\n",
          "message": "Parameter '_owners' of Fund.Fund (Fund.sol#450) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
          "message": "Parameter '_crowdsaleAddress' of Fund.setCrowdsaleAddress (Fund.sol#475) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
          "message": "Parameter '_tokenAddress' of Fund.setTokenAddress (Fund.sol#480) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decTap(uint256 _tap) external onlyOwner {\n",
          "message": "Parameter '_tap' of Fund.decTap (Fund.sol#532) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}