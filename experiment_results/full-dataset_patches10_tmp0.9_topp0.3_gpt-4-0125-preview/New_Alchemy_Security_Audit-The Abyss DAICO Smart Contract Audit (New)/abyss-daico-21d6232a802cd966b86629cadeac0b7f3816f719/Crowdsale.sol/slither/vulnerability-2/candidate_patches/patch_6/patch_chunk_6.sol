function finalizeCrowdsale() public onlyOwner {
    if(
        (totalEtherContributed >= safeSub(hardCap, ETHER_MIN_CONTRIB_USA) && totalBNBContributed >= safeSub(BNB_HARD_CAP, BNB_MIN_CONTRIB)) ||
        (now >= SALE_END_TIME && totalEtherContributed >= softCap)
    ) {
        fund.onCrowdsaleEnd();
        reservationFund.onCrowdsaleEnd();
        
        bnbToken.transfer(bnbTokenWallet, bnbToken.balanceOf(address(this)));

        
        uint256 referralTokenAmount = safeDiv(rawTokenSupply, 10);
        token.issue(referralTokenWallet, referralTokenAmount);

        
        uint256 suppliedTokenAmount = token.totalSupply();
        uint256 foundationTokenAmount = safeDiv(suppliedTokenAmount, 5); // Changed from 2 to 5 for accurate 20% calculation
        lockedTokens.addTokens(foundationTokenWallet, foundationTokenAmount, now + 365 days);

        
        uint256 reservedTokenAmount = safeDiv(safeMul(suppliedTokenAmount, 3), 20); // Adjusted for 15%
        token.issue(address(lockedTokens), reservedTokenAmount);
        lockedTokens.addTokens(reserveTokenWallet, reservedTokenAmount, now + 183 days);

        
        uint256 advisorsTokenAmount = safeDiv(suppliedTokenAmount, 16); // Adjusted for 6.25%
        token.issue(advisorsTokenWallet, advisorsTokenAmount);

        
        uint256 companyTokenAmount = safeDiv(suppliedTokenAmount, 6); // Adjusted for approximately 16.67%
        token.issue(address(lockedTokens), companyTokenAmount);
        lockedTokens.addTokens(companyTokenWallet, companyTokenAmount, now + 730 days);

        
        uint256 bountyTokenAmount = safeDiv(suppliedTokenAmount, 100); // Adjusted for 1%
        token.issue(bountyTokenWallet, bountyTokenAmount);

        token.setAllowTransfers(true);

    } else if(now >= SALE_END_TIME) {
        
        fund.enableCrowdsaleRefund();
        reservationFund.onCrowdsaleEnd();
        bnbRefundEnabled = true;
    }
    token.finishIssuance();
}