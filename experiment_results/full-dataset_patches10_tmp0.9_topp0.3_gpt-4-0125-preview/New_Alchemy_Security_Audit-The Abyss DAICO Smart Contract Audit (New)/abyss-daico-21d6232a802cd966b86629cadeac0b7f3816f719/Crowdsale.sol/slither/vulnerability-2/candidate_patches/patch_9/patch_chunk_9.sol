function finalizeCrowdsale() public onlyOwner {
    if(
        (totalEtherContributed >= safeSub(hardCap, ETHER_MIN_CONTRIB_USA) && totalBNBContributed >= safeSub(BNB_HARD_CAP, BNB_MIN_CONTRIB)) ||
        (now >= SALE_END_TIME && totalEtherContributed >= softCap)
    ) {
        fund.onCrowdsaleEnd();
        reservationFund.onCrowdsaleEnd();

        bnbToken.transfer(bnbTokenWallet, bnbToken.balanceOf(address(this)));

        uint256 referralTokenAmount = safeDiv(rawTokenSupply, 10);
        token.issue(referralTokenWallet, referralTokenAmount);

        uint256 foundationTokenAmount = safeDiv(token.totalSupply(), 2); // 20%
        lockedTokens.addTokens(foundationTokenWallet, foundationTokenAmount, now + 365 days);

        uint256 suppliedTokenAmount = token.totalSupply();

        uint256 reservedTokenAmount = safeDiv(safeMul(suppliedTokenAmount, 3), 10); // 18%
        token.issue(address(lockedTokens), reservedTokenAmount);
        lockedTokens.addTokens(reserveTokenWallet, reservedTokenAmount, now + 183 days);

        uint256 advisorsTokenAmount = safeDiv(suppliedTokenAmount, 10); // 6%
        token.issue(advisorsTokenWallet, advisorsTokenAmount);

        uint256 companyTokenAmount = safeDiv(suppliedTokenAmount, 4); // 15%
        token.issue(address(lockedTokens), companyTokenAmount);
        lockedTokens.addTokens(companyTokenWallet, companyTokenAmount, now + 730 days);

        uint256 bountyTokenAmount = safeDiv(suppliedTokenAmount, 60); // 1%
        token.issue(bountyTokenWallet, bountyTokenAmount);

        token.setAllowTransfers(true);

    } else if(now >= SALE_END_TIME) {
        // Enable fund`s crowdsale refund if soft cap is not reached
        fund.enableCrowdsaleRefund();
        reservationFund.onCrowdsaleEnd();
        bnbRefundEnabled = true;
    }

    token.finishIssuance();
}