{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public yesCounter = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public noCounter = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public totalVoted = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= startTime && now <= endTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_startTime >= now && _endTime > _startTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_21"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
          "message": "Reentrancy in BasePoll.vote (BasePoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (BasePoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (BasePoll.sol#133)\n\tState variables written after the call(s):\n\t- votesByAddress (BasePoll.sol#143)\n\t- votesByAddress (BasePoll.sol#144)\n\t- votesByAddress (BasePoll.sol#145)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
          "message": "Reentrancy in BasePoll.vote (BasePoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (BasePoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (BasePoll.sol#133)\n\tState variables written after the call(s):\n\t- noCounter (BasePoll.sol#139)\n\t- totalVoted (BasePoll.sol#147)\n\t- yesCounter (BasePoll.sol#137)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals;\n",
          "message": "IERC20Token.decimals should be constant (BasePoll.sol#51)\nIERC20Token.name should be constant (BasePoll.sol#49)\nIERC20Token.symbol should be constant (BasePoll.sol#50)\nIERC20Token.totalSupply should be constant (BasePoll.sol#52)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": "IERC20Token.balanceOf (BasePoll.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.transfer (BasePoll.sol#55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.transferFrom (BasePoll.sol#56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.approve (BasePoll.sol#57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": "IERC20Token.allowance (BasePoll.sol#58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
          "message": "BasePoll.vote (BasePoll.sol#129-148) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": 169,
          "vulnerability_code": "    function revokeVote() public checkTime {\n\n        require(votesByAddress[msg.sender].time > 0);\n\n\n\n        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n\n        bool agree = votesByAddress[msg.sender].agree;\n\n\n\n        votesByAddress[msg.sender].time = 0;\n\n        votesByAddress[msg.sender].weight = 0;\n\n        votesByAddress[msg.sender].agree = false;\n\n\n\n        totalVoted = safeSub(totalVoted, 1);\n\n        if(agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n",
          "message": "BasePoll.revokeVote (BasePoll.sol#153-169) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 200,
          "vulnerability_code": "    function onTokenTransfer(address tokenHolder, uint256 amount) public {\n\n        require(msg.sender == fundAddress);\n\n        if(votesByAddress[tokenHolder].time == 0) {\n\n            return;\n\n        }\n\n        if(!checkTransfersAfterEnd) {\n\n             if(finalized || (now < startTime || now > endTime)) {\n\n                 return;\n\n             }\n\n        }\n\n\n\n        if(token.balanceOf(tokenHolder) >= votesByAddress[tokenHolder].weight) {\n\n            return;\n\n        }\n\n        uint256 voiceWeight = amount;\n\n        if(amount > votesByAddress[tokenHolder].weight) {\n\n            voiceWeight = votesByAddress[tokenHolder].weight;\n\n        }\n\n\n\n        if(votesByAddress[tokenHolder].agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n\n        votesByAddress[tokenHolder].weight = safeSub(votesByAddress[tokenHolder].weight, voiceWeight);\n",
          "message": "BasePoll.onTokenTransfer (BasePoll.sol#175-200) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 212,
          "vulnerability_code": "    function tryToFinalize() public notFinalized returns(bool) {\n\n        if(now < endTime) {\n\n            return false;\n\n        }\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
          "message": "BasePoll.tryToFinalize (BasePoll.sol#205-212) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": 216,
          "vulnerability_code": "    function isNowApproved() public view returns(bool) {\n\n        return isSubjectApproved();\n",
          "message": "BasePoll.isNowApproved (BasePoll.sol#214-216) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in BasePoll.sol:\n\t- pragma solidity^0.4.21 (BasePoll.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (BasePoll.sol#41): it allows old versions\n\t- pragma solidity^0.4.21 (BasePoll.sol#66): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function SafeMath() public {\n",
          "message": "Function 'SafeMath.SafeMath' (BasePoll.sol#13-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 123,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n\n        require(_tokenAddress != address(0));\n\n        require(_startTime >= now && _endTime > _startTime);\n\n\n\n        token = IERC20Token(_tokenAddress);\n\n        fundAddress = _fundAddress;\n\n        startTime = _startTime;\n\n        endTime = _endTime;\n\n        finalized = false;\n\n        checkTransfersAfterEnd = _checkTransfersAfterEnd;\n",
          "message": "Function 'BasePoll.BasePoll' (BasePoll.sol#113-123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_tokenAddress' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_fundAddress' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_startTime' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_endTime' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_checkTransfersAfterEnd' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool checkTransfersAfterEnd;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}