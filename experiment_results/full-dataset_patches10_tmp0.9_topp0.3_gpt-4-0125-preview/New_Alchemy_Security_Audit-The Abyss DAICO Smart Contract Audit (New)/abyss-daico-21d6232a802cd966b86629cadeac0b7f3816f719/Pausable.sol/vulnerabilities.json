{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Pausable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public paused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != owner);\n\n        newOwner = _newOwner;\n",
          "message": "Ownable.transferOwnership (Pausable.sol#35-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function confirmOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = 0x0;\n",
          "message": "Ownable.confirmOwnership (Pausable.sol#43-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": 88,
          "vulnerability_code": "    function pause() onlyOwner whenNotPaused public {\n\n        paused = true;\n\n        Pause();\n",
          "message": "Pausable.pause (Pausable.sol#85-88) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 96,
          "vulnerability_code": "    function unpause() onlyOwner whenPaused public {\n\n        paused = false;\n\n        Unpause();\n",
          "message": "Pausable.unpause (Pausable.sol#93-96) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in Pausable.sol:\n\t- pragma solidity^0.4.21 (Pausable.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (Pausable.sol#53): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function Ownable(address _owner) public {\n\n        owner = _owner == address(0) ? msg.sender : _owner;\n",
          "message": "Function 'Ownable.Ownable' (Pausable.sol#19-21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Ownable(address _owner) public {\n",
          "message": "Parameter '_owner' of Ownable.Ownable (Pausable.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (Pausable.sol#35) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}