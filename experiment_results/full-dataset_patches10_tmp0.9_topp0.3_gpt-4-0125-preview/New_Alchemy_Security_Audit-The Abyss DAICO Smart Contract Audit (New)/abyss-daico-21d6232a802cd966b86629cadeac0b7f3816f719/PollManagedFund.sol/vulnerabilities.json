{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public allowTransfers = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public issuanceFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public lastWithdrawTime = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public firstWithdrawAmount = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public yesCounter = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public noCounter = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public totalVoted = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public minTokensPerc = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 1073,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public holdEndTime = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 1139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public minVotedTokensPerc = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 1140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public secondRefundPollDate = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(now >= refundPollDates[i] && now <= safeAdd(refundPollDates[i], 1 days)) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(now >= refundPollDates[i] && now <= safeAdd(refundPollDates[i], 1 days)) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 859,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= startTime && now <= endTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_startTime >= now && _endTime > _startTime);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(hasListener() && success) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(hasListener() && success) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": null,
          "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1096,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(holdEndTime > 0 && holdEndTime > endTime) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1097,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(now >= holdEndTime);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1098,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(now >= endTime);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1184,
          "vulnerability_to_line": null,
          "vulnerability_code": "            address(refundPoll) != address(0) &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": null,
          "vulnerability_code": "            !refundPoll.finalized() &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1186,
          "vulnerability_to_line": null,
          "vulnerability_code": "            refundPoll.holdEndTime() > 0 &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1187,
          "vulnerability_to_line": null,
          "vulnerability_code": "            now >= refundPoll.holdEndTime() &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1188,
          "vulnerability_to_line": null,
          "vulnerability_code": "            refundPoll.isNowApproved()\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1190,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1191,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(address(tapPoll) != address(0) && !tapPoll.finalized()) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1201,
          "vulnerability_to_line": null,
          "vulnerability_code": "            tapPoll.onTokenTransfer(_from, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1203,
          "vulnerability_to_line": null,
          "vulnerability_code": "         if(address(refundPoll) != address(0) && !refundPoll.finalized()) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1204,
          "vulnerability_to_line": null,
          "vulnerability_code": "            refundPoll.onTokenTransfer(_from, _value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1205,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(secondRefundPollDate > 0 && now >= secondRefundPollDate && now <= safeAdd(secondRefundPollDate, 1 days)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1251,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(now >= refundPollDates[i] && now <= safeAdd(refundPollDates[i], 1 days)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1252,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1253,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1264,
          "vulnerability_to_line": null,
          "vulnerability_code": "            secondRefundPollDate = 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = 1; i <= 12; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = ORIGIN_YEAR; i < year; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = 1; i < month; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_116"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": 778,
          "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.firstWithdraw (PollManagedFund.sol#772-778) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (PollManagedFund.sol#776)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 783,
          "vulnerability_to_line": 789,
          "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.withdraw (PollManagedFund.sol#783-789) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (PollManagedFund.sol#787)\n"
        },
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": 823,
          "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
          "message": "Fund.refundTokenHolder (PollManagedFund.sol#811-823) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(refundAmount) (PollManagedFund.sol#820)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\nPollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized())\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\nPollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized())\nPollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized())\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\nPollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized())\nPollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized())\nSafeMath.safeMul (PollManagedFund.sol#259-263) uses a dangerous strict equality:\n\t- assert(bool)(a == 0 || c / a == b)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": 1304,
          "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
          "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\t- startTime = refundPoll.startTime() (PollManagedFund.sol#1289)\n\tState variables written after the call(s):\n\t- secondRefundPollDate (PollManagedFund.sol#1290-1294)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": 1304,
          "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
          "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\t- enableRefund() (PollManagedFund.sol#1287)\n\t- startTime = refundPoll.startTime() (PollManagedFund.sol#1289)\n\tState variables written after the call(s):\n\t- refundPoll (PollManagedFund.sol#1303)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 1234,
          "vulnerability_to_line": 1242,
          "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n\n        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n\n        if(agree) {\n\n            tap = _tap;\n\n        }\n\n        updateMinVotedTokens(tapPoll.getVotedTokensPerc());\n\n        TapPollFinished(agree, _tap);\n\n        delete tapPoll;\n",
          "message": "Reentrancy in PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized()) (PollManagedFund.sol#1235)\n\t- updateMinVotedTokens(tapPoll.getVotedTokensPerc()) (PollManagedFund.sol#1239)\n\tState variables written after the call(s):\n\t- tapPoll (PollManagedFund.sol#1241)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 891,
          "vulnerability_to_line": 910,
          "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
          "message": "Reentrancy in BasePoll.vote (PollManagedFund.sol#891-910):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (PollManagedFund.sol#894)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (PollManagedFund.sol#895)\n\tState variables written after the call(s):\n\t- votesByAddress (PollManagedFund.sol#905)\n\t- votesByAddress (PollManagedFund.sol#906)\n\t- votesByAddress (PollManagedFund.sol#907)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": "i in PollManagedFund.checkRefundPollDate (PollManagedFund.sol#1250) is a local variable never initialiazed\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": 723,
          "vulnerability_code": "    function onCrowdsaleEnd() external onlyCrowdsale {\n\n        state = FundState.TeamWithdraw;\n\n        ISimpleCrowdsale crowdsale = ISimpleCrowdsale(crowdsaleAddress);\n\n        firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(), 2);\n\n        lastWithdrawTime = now;\n\n        tap = INITIAL_TAP;\n\n        crowdsaleEndDate = now;\n",
          "message": "Reentrancy in Fund.onCrowdsaleEnd (PollManagedFund.sol#716-723):\n\tExternal calls:\n\t- firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(),2) (PollManagedFund.sol#719)\n\tState variables written after the call(s):\n\t- crowdsaleEndDate (PollManagedFund.sol#722)\n\t- lastWithdrawTime (PollManagedFund.sol#720)\n\t- tap (PollManagedFund.sol#721)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": 1304,
          "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
          "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\t- startTime = refundPoll.startTime() (PollManagedFund.sol#1289)\n\tState variables written after the call(s):\n\t- isWithdrawEnabled (PollManagedFund.sol#1295)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1283,
          "vulnerability_to_line": 1304,
          "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
          "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\tState variables written after the call(s):\n\t- isWithdrawEnabled (PollManagedFund.sol#1299)\n\t- secondRefundPollDate (PollManagedFund.sol#1298)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1234,
          "vulnerability_to_line": 1242,
          "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n\n        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n\n        if(agree) {\n\n            tap = _tap;\n\n        }\n\n        updateMinVotedTokens(tapPoll.getVotedTokensPerc());\n\n        TapPollFinished(agree, _tap);\n\n        delete tapPoll;\n",
          "message": "Reentrancy in PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized()) (PollManagedFund.sol#1235)\n\tState variables written after the call(s):\n\t- tap (PollManagedFund.sol#1237)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 1234,
          "vulnerability_to_line": 1242,
          "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n\n        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n\n        if(agree) {\n\n            tap = _tap;\n\n        }\n\n        updateMinVotedTokens(tapPoll.getVotedTokensPerc());\n\n        TapPollFinished(agree, _tap);\n\n        delete tapPoll;\n",
          "message": "Reentrancy in PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized()) (PollManagedFund.sol#1235)\n\t- updateMinVotedTokens(tapPoll.getVotedTokensPerc()) (PollManagedFund.sol#1239)\n\tState variables written after the call(s):\n\t- minVotedTokensPerc (PollManagedFund.sol#1239)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 891,
          "vulnerability_to_line": 910,
          "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
          "message": "Reentrancy in BasePoll.vote (PollManagedFund.sol#891-910):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (PollManagedFund.sol#894)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (PollManagedFund.sol#895)\n\tState variables written after the call(s):\n\t- noCounter (PollManagedFund.sol#901)\n\t- totalVoted (PollManagedFund.sol#909)\n\t- yesCounter (PollManagedFund.sol#899)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 public decimals;\n",
          "message": "IERC20Token.decimals should be constant (PollManagedFund.sol#350)\nIERC20Token.name should be constant (PollManagedFund.sol#348)\nIERC20Token.symbol should be constant (PollManagedFund.sol#349)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 161,
          "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, 0, 0);\n",
          "message": "DateTime.toTimestamp (PollManagedFund.sol#159-161) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 165,
          "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, minute, 0);\n",
          "message": "DateTime.toTimestamp (PollManagedFund.sol#163-165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": 318,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
          "message": "MultiOwnable.setOwners (PollManagedFund.sol#314-318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": 335,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
          "message": "MultiOwnable.getOwners (PollManagedFund.sol#333-335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": "IERC20Token.balanceOf (PollManagedFund.sol#353) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": 399,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
          "message": "ERC20Token.balanceOf (PollManagedFund.sol#397-399) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": 405,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
          "message": "ERC20Token.approve (PollManagedFund.sol#401-405) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
          "message": "IERC20Token.approve (PollManagedFund.sol#356) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": "IERC20Token.allowance (PollManagedFund.sol#357) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": 409,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
          "message": "ERC20Token.allowance (PollManagedFund.sol#407-409) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": 1206,
          "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n\n        require(msg.sender == address(token));\n\n        if(address(tapPoll) != address(0) && !tapPoll.finalized()) {\n\n            tapPoll.onTokenTransfer(_from, _value);\n\n        }\n\n         if(address(refundPoll) != address(0) && !refundPoll.finalized()) {\n\n            refundPoll.onTokenTransfer(_from, _value);\n\n        }\n",
          "message": "PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198-1206) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
          "message": "ITokenEventListener.onTokenTransfer (PollManagedFund.sol#427) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": 493,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
          "message": "ManagedToken.setListener (PollManagedFund.sol#487-493) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": 559,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "ManagedToken.increaseApproval (PollManagedFund.sol#555-559) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 580,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
          "message": "ManagedToken.decreaseApproval (PollManagedFund.sol#571-580) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": 590,
          "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
          "message": "ManagedToken.finishIssuance (PollManagedFund.sol#586-590) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": 697,
          "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n\n        require(crowdsaleAddress == address(0));\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
          "message": "Fund.setCrowdsaleAddress (PollManagedFund.sol#694-697) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": 702,
          "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n\n        require(address(token) == address(0));\n\n        token = ManagedToken(_tokenAddress);\n",
          "message": "Fund.setTokenAddress (PollManagedFund.sol#699-702) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": 762,
          "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n\n        if(state != FundState.TeamWithdraw) {\n\n            return 0;\n\n        }\n\n        return calcTapAmount();\n",
          "message": "Fund.getCurrentTapAmount (PollManagedFund.sol#757-762) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": 778,
          "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.firstWithdraw (PollManagedFund.sol#772-778) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 783,
          "vulnerability_to_line": 789,
          "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
          "message": "Fund.withdraw (PollManagedFund.sol#783-789) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 811,
          "vulnerability_to_line": 823,
          "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
          "message": "Fund.refundTokenHolder (PollManagedFund.sol#811-823) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 891,
          "vulnerability_to_line": 910,
          "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
          "message": "BasePoll.vote (PollManagedFund.sol#891-910) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": 931,
          "vulnerability_code": "    function revokeVote() public checkTime {\n\n        require(votesByAddress[msg.sender].time > 0);\n\n\n\n        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n\n        bool agree = votesByAddress[msg.sender].agree;\n\n\n\n        votesByAddress[msg.sender].time = 0;\n\n        votesByAddress[msg.sender].weight = 0;\n\n        votesByAddress[msg.sender].agree = false;\n\n\n\n        totalVoted = safeSub(totalVoted, 1);\n\n        if(agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n",
          "message": "BasePoll.revokeVote (PollManagedFund.sol#915-931) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 937,
          "vulnerability_to_line": 962,
          "vulnerability_code": "    function onTokenTransfer(address tokenHolder, uint256 amount) public {\n\n        require(msg.sender == fundAddress);\n\n        if(votesByAddress[tokenHolder].time == 0) {\n\n            return;\n\n        }\n\n        if(!checkTransfersAfterEnd) {\n\n             if(finalized || (now < startTime || now > endTime)) {\n\n                 return;\n\n             }\n\n        }\n\n\n\n        if(token.balanceOf(tokenHolder) >= votesByAddress[tokenHolder].weight) {\n\n            return;\n\n        }\n\n        uint256 voiceWeight = amount;\n\n        if(amount > votesByAddress[tokenHolder].weight) {\n\n            voiceWeight = votesByAddress[tokenHolder].weight;\n\n        }\n\n\n\n        if(votesByAddress[tokenHolder].agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n\n        votesByAddress[tokenHolder].weight = safeSub(votesByAddress[tokenHolder].weight, voiceWeight);\n",
          "message": "BasePoll.onTokenTransfer (PollManagedFund.sol#937-962) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 967,
          "vulnerability_to_line": 974,
          "vulnerability_code": "    function tryToFinalize() public notFinalized returns(bool) {\n\n        if(now < endTime) {\n\n            return false;\n\n        }\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
          "message": "BasePoll.tryToFinalize (PollManagedFund.sol#967-974) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1095,
          "vulnerability_to_line": 1105,
          "vulnerability_code": "    function tryToFinalize() public returns(bool) {\n\n        if(holdEndTime > 0 && holdEndTime > endTime) {\n\n            require(now >= holdEndTime);\n\n        } else {\n\n            require(now >= endTime);\n\n        }\n\n\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
          "message": "RefundPoll.tryToFinalize (PollManagedFund.sol#1095-1105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": 978,
          "vulnerability_code": "    function isNowApproved() public view returns(bool) {\n\n        return isSubjectApproved();\n",
          "message": "BasePoll.isNowApproved (PollManagedFund.sol#976-978) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": 1232,
          "vulnerability_code": "    function createTapPoll(uint8 tapIncPerc) public onlyOwner {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(tapPoll == address(0));\n\n        require(getDay(now) == 10);\n\n        require(tapIncPerc <= 50);\n\n        uint256 _tap = safeAdd(tap, safeDiv(safeMul(tap, tapIncPerc), 100));\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + TAP_POLL_DURATION;\n\n        tapPoll = new TapPoll(_tap, token, this, startTime, endTime, minVotedTokensPerc);\n\n        TapPollCreated();\n",
          "message": "PollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": 1281,
          "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
          "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1306,
          "vulnerability_to_line": 1308,
          "vulnerability_code": "    function forceRefund() public onlyOwner {\n\n        enableRefund();\n",
          "message": "PollManagedFund.forceRefund (PollManagedFund.sol#1306-1308) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in PollManagedFund.sol:\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#222): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#246): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#284): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#340): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#365): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#414): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#432): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#595): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#610): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#828): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#992): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#1015): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#1065): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#1120): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 18,
          "vulnerability_code": "        struct _DateTime {\n\n                uint16 year;\n\n                uint8 month;\n\n                uint8 day;\n\n                uint8 hour;\n\n                uint8 minute;\n\n                uint8 second;\n\n                uint8 weekday;\n",
          "message": "Struct 'DateTime._DateTime' (PollManagedFund.sol#10-18) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 257,
          "vulnerability_code": "    function SafeMath() public {\n",
          "message": "Function 'SafeMath.SafeMath' (PollManagedFund.sol#256-257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": 309,
          "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
          "message": "Function 'MultiOwnable.MultiOwnable' (PollManagedFund.sol#307-309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": "Parameter '_owners' of MultiOwnable.setOwners (PollManagedFund.sol#314) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": 331,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
          "message": "Function 'MultiOwnable._setOwners' (PollManagedFund.sol#320-331) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
          "message": "Parameter '_owners' of MultiOwnable._setOwners (PollManagedFund.sol#320) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC20Token.balanceOf (PollManagedFund.sol#397) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of ERC20Token.transfer (PollManagedFund.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.transfer (PollManagedFund.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of ERC20Token.transferFrom (PollManagedFund.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of ERC20Token.transferFrom (PollManagedFund.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.transferFrom (PollManagedFund.sol#386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of ERC20Token.approve (PollManagedFund.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of ERC20Token.approve (PollManagedFund.sol#401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": "Parameter '_owner' of ERC20Token.allowance (PollManagedFund.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": "Parameter '_spender' of ERC20Token.allowance (PollManagedFund.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_to' of ManagedToken.transfer (PollManagedFund.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_value' of ManagedToken.transfer (PollManagedFund.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_from' of ManagedToken.transferFrom (PollManagedFund.sol#503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_to' of ManagedToken.transferFrom (PollManagedFund.sol#503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 503,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
          "message": "Parameter '_value' of ManagedToken.transferFrom (PollManagedFund.sol#503) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
          "message": "Function 'ManagedToken.ManagedToken' (PollManagedFund.sol#467-472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": "Parameter '_listener' of ManagedToken.ManagedToken (PollManagedFund.sol#467) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": "Parameter '_owners' of ManagedToken.ManagedToken (PollManagedFund.sol#467) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
          "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (PollManagedFund.sol#478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
          "message": "Parameter '_listener' of ManagedToken.setListener (PollManagedFund.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
          "message": "Parameter '_to' of ManagedToken.issue (PollManagedFund.sol#523) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
          "message": "Parameter '_value' of ManagedToken.issue (PollManagedFund.sol#523) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
          "message": "Parameter '_from' of ManagedToken.destroy (PollManagedFund.sol#536) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
          "message": "Parameter '_value' of ManagedToken.destroy (PollManagedFund.sol#536) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of ManagedToken.increaseApproval (PollManagedFund.sol#555) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (PollManagedFund.sol#555) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of ManagedToken.decreaseApproval (PollManagedFund.sol#571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (PollManagedFund.sol#571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": 680,
          "vulnerability_code": "    function Fund(\n\n        address _teamWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _advisorTokenWallet,\n\n        address[] _owners\n\n    ) public\n\n    {\n\n        teamWallet = _teamWallet;\n\n        referralTokenWallet = _referralTokenWallet;\n\n        foundationTokenWallet = _foundationTokenWallet;\n\n        companyTokenWallet = _companyTokenWallet;\n\n        reserveTokenWallet = _reserveTokenWallet;\n\n        bountyTokenWallet = _bountyTokenWallet;\n\n        advisorTokenWallet = _advisorTokenWallet;\n\n        _setOwners(_owners);\n",
          "message": "Function 'Fund.Fund' (PollManagedFund.sol#661-680) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 662,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _teamWallet,\n",
          "message": "Parameter '_teamWallet' of Fund.Fund (PollManagedFund.sol#662) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _referralTokenWallet,\n",
          "message": "Parameter '_referralTokenWallet' of Fund.Fund (PollManagedFund.sol#663) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _foundationTokenWallet,\n",
          "message": "Parameter '_foundationTokenWallet' of Fund.Fund (PollManagedFund.sol#664) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _companyTokenWallet,\n",
          "message": "Parameter '_companyTokenWallet' of Fund.Fund (PollManagedFund.sol#665) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 666,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _reserveTokenWallet,\n",
          "message": "Parameter '_reserveTokenWallet' of Fund.Fund (PollManagedFund.sol#666) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _bountyTokenWallet,\n",
          "message": "Parameter '_bountyTokenWallet' of Fund.Fund (PollManagedFund.sol#667) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _advisorTokenWallet,\n",
          "message": "Parameter '_advisorTokenWallet' of Fund.Fund (PollManagedFund.sol#668) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners\n",
          "message": "Parameter '_owners' of Fund.Fund (PollManagedFund.sol#669) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
          "message": "Parameter '_crowdsaleAddress' of Fund.setCrowdsaleAddress (PollManagedFund.sol#694) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
          "message": "Parameter '_tokenAddress' of Fund.setTokenAddress (PollManagedFund.sol#699) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 751,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function decTap(uint256 _tap) external onlyOwner {\n",
          "message": "Parameter '_tap' of Fund.decTap (PollManagedFund.sol#751) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": 885,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n\n        require(_tokenAddress != address(0));\n\n        require(_startTime >= now && _endTime > _startTime);\n\n\n\n        token = IERC20Token(_tokenAddress);\n\n        fundAddress = _fundAddress;\n\n        startTime = _startTime;\n\n        endTime = _endTime;\n\n        finalized = false;\n\n        checkTransfersAfterEnd = _checkTransfersAfterEnd;\n",
          "message": "Function 'BasePoll.BasePoll' (PollManagedFund.sol#875-885) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_tokenAddress' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_fundAddress' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_startTime' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_endTime' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
          "message": "Parameter '_checkTransfersAfterEnd' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1035,
          "vulnerability_to_line": 1047,
          "vulnerability_code": "    function TapPoll(\n\n        uint256 _tap,\n\n        address _tokenAddress,\n\n        address _fundAddress,\n\n        uint256 _startTime,\n\n        uint256 _endTime,\n\n        uint256 _minTokensPerc\n\n    ) public\n\n        BasePoll(_tokenAddress, _fundAddress, _startTime, _endTime, false)\n\n    {\n\n        tap = _tap;\n\n        minTokensPerc = _minTokensPerc;\n",
          "message": "Function 'TapPoll.TapPoll' (PollManagedFund.sol#1035-1047) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tap,\n",
          "message": "Parameter '_tap' of TapPoll.TapPoll (PollManagedFund.sol#1036) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1041,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _minTokensPerc\n",
          "message": "Parameter '_minTokensPerc' of TapPoll.TapPoll (PollManagedFund.sol#1041) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": 1093,
          "vulnerability_code": "    function RefundPoll(\n\n        address _tokenAddress,\n\n        address _fundAddress,\n\n        uint256 _startTime,\n\n        uint256 _endTime,\n\n        uint256 _holdEndTime,\n\n        bool _checkTransfersAfterEnd\n\n    ) public\n\n        BasePoll(_tokenAddress, _fundAddress, _startTime, _endTime, _checkTransfersAfterEnd)\n\n    {\n\n        holdEndTime = _holdEndTime;\n",
          "message": "Function 'RefundPoll.RefundPoll' (PollManagedFund.sol#1082-1093) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _holdEndTime,\n",
          "message": "Parameter '_holdEndTime' of RefundPoll.RefundPoll (PollManagedFund.sol#1087) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n",
          "message": "Parameter '_from' of PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n",
          "message": "Parameter '' of PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n",
          "message": "Parameter '_value' of PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1168,
          "vulnerability_to_line": 1180,
          "vulnerability_code": "    function PollManagedFund(\n\n        address _teamWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _advisorTokenWallet,\n\n        address[] _owners\n\n        ) public\n\n    Fund(_teamWallet, _referralTokenWallet, _foundationTokenWallet, _companyTokenWallet, _reserveTokenWallet, _bountyTokenWallet, _advisorTokenWallet, _owners)\n\n    {\n",
          "message": "Function 'PollManagedFund.PollManagedFund' (PollManagedFund.sol#1168-1180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateMinVotedTokens(uint256 _minVotedTokensPerc) internal {\n",
          "message": "Parameter '_minVotedTokensPerc' of PollManagedFund.updateMinVotedTokens (PollManagedFund.sol#1212) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1234,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n",
          "message": "Parameter '_tap' of PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 757,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "                while (secondsAccountedFor > timestamp) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 699,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1015,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1065,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1120,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address[] _owners\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant DAY_IN_SECONDS = 86400;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant YEAR_IN_SECONDS = 31536000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant HOUR_IN_SECONDS = 3600;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant MINUTE_IN_SECONDS = 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint16 constant ORIGIN_YEAR = 1970;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool checkTransfersAfterEnd;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 314,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 918,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return year / 4 - year / 100 + year / 400;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += HOUR_IN_SECONDS * (hour);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += MINUTE_IN_SECONDS * (minute);\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "                year -= 1;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": null
        }
      ]
    }
  }
}