{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = 1; i <= 12; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = ORIGIN_YEAR; i < year; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "                for (i = 1; i < month; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_7"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 133,
          "vulnerability_code": "        function getMonth(uint timestamp) public pure returns (uint8) {\n\n                return parseTimestamp(timestamp).month;\n",
          "message": "DateTime.getMonth (DateTime.sol#131-133) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 137,
          "vulnerability_code": "        function getDay(uint timestamp) public pure returns (uint8) {\n\n                return parseTimestamp(timestamp).day;\n",
          "message": "DateTime.getDay (DateTime.sol#135-137) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 157,
          "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, 0, 0, 0);\n",
          "message": "DateTime.toTimestamp (DateTime.sol#155-157) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 161,
          "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, 0, 0);\n",
          "message": "DateTime.toTimestamp (DateTime.sol#159-161) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 165,
          "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, minute, 0);\n",
          "message": "DateTime.toTimestamp (DateTime.sol#163-165) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in DateTime.sol:\n\t- pragma solidity^0.4.21 (DateTime.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 18,
          "vulnerability_code": "        struct _DateTime {\n\n                uint16 year;\n\n                uint8 month;\n\n                uint8 day;\n\n                uint8 hour;\n\n                uint8 minute;\n\n                uint8 second;\n\n                uint8 weekday;\n",
          "message": "Struct 'DateTime._DateTime' (DateTime.sol#10-18) is not in CapWords\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "                while (secondsAccountedFor > timestamp) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant DAY_IN_SECONDS = 86400;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant YEAR_IN_SECONDS = 31536000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant HOUR_IN_SECONDS = 3600;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint constant MINUTE_IN_SECONDS = 60;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint16 constant ORIGIN_YEAR = 1970;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "                year -= 1;\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return year / 4 - year / 100 + year / 400;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += HOUR_IN_SECONDS * (hour);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += MINUTE_IN_SECONDS * (minute);\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "                year -= 1;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "                timestamp += DAY_IN_SECONDS * (day - 1);\n",
          "message": null
        }
      ]
    }
  }
}