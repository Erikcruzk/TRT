{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ReservationFund is ICrowdsaleReservationFund, Ownable, SafeMath {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public crowdsaleFinished = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": 219,
          "vulnerability_code": "    function completeContribution(address contributor) external {\n\n        require(!crowdsaleFinished);\n\n        require(crowdsale.isContributorInLists(contributor));\n\n        require(contributions[contributor] > 0);\n\n\n\n        uint256 etherAmount = contributions[contributor];\n\n        uint256 tokenAmount = tokensToIssue[contributor];\n\n        uint256 tokenBonusAmount = bonusTokensToIssue[contributor];\n\n\n\n        contributions[contributor] = 0;\n\n        tokensToIssue[contributor] = 0;\n\n        bonusTokensToIssue[contributor] = 0;\n\n\n\n        crowdsale.processReservationFundContribution.value(etherAmount)(contributor, tokenAmount, tokenBonusAmount);\n\n        TransferToFund(contributor, etherAmount);\n",
          "message": "Reentrancy in ReservationFund.completeContribution (ReservationFund.sol#204-219):\n\tExternal calls:\n\t- require(bool)(crowdsale.isContributorInLists(contributor)) (ReservationFund.sol#206)\n\tState variables written after the call(s):\n\t- bonusTokensToIssue (ReservationFund.sol#215)\n\t- contributions (ReservationFund.sol#213)\n\t- tokensToIssue (ReservationFund.sol#214)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 90,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != owner);\n\n        newOwner = _newOwner;\n",
          "message": "Ownable.transferOwnership (ReservationFund.sol#87-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function confirmOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = 0x0;\n",
          "message": "Ownable.confirmOwnership (ReservationFund.sol#95-100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": 172,
          "vulnerability_code": "    function setCrowdsaleAddress(address crowdsaleAddress) public onlyOwner {\n\n        require(crowdsale == address(0));\n\n        crowdsale = ISimpleCrowdsale(crowdsaleAddress);\n",
          "message": "ReservationFund.setCrowdsaleAddress (ReservationFund.sol#169-172) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function refundPayment(address contributor) public {\n\n        require(crowdsaleFinished);\n\n        require(contributions[contributor] > 0 || tokensToIssue[contributor] > 0);\n\n        uint256 amountToRefund = contributions[contributor];\n\n\n\n        contributions[contributor] = 0;\n\n        tokensToIssue[contributor] = 0;\n\n        bonusTokensToIssue[contributor] = 0;\n\n\n\n        contributor.transfer(amountToRefund);\n\n        RefundPayment(contributor, amountToRefund);\n",
          "message": "ReservationFund.refundPayment (ReservationFund.sol#226-237) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in ReservationFund.sol:\n\t- pragma solidity^0.4.21 (ReservationFund.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#40): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#55): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#105): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#143): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": 73,
          "vulnerability_code": "    function Ownable(address _owner) public {\n\n        owner = _owner == address(0) ? msg.sender : _owner;\n",
          "message": "Function 'Ownable.Ownable' (ReservationFund.sol#71-73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Ownable(address _owner) public {\n",
          "message": "Parameter '_owner' of Ownable.Ownable (ReservationFund.sol#71) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (ReservationFund.sol#87) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 116,
          "vulnerability_code": "    function SafeMath() public {\n",
          "message": "Function 'SafeMath.SafeMath' (ReservationFund.sol#115-116) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _tokensToIssue,\n",
          "message": "Parameter '_tokensToIssue' of ReservationFund.processContribution (ReservationFund.sol#183) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _bonusTokensToIssue\n",
          "message": "Parameter '_bonusTokensToIssue' of ReservationFund.processContribution (ReservationFund.sol#184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": 162,
          "vulnerability_code": "    function ReservationFund(address _owner) public Ownable(_owner) {\n",
          "message": "Function 'ReservationFund.ReservationFund' (ReservationFund.sol#161-162) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        newOwner = 0x0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setCrowdsaleAddress(address crowdsaleAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) contributions;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) tokensToIssue;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) bonusTokensToIssue;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Transaction-Ordering Dependence (TOD)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(!crowdsale.isContributorInLists(contributor)) {\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(contributions[contributor] == 0) {\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        crowdsale.processReservationFundContribution.value(etherAmount)(contributor, tokenAmount, tokenBonusAmount);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "        contributor.transfer(amountToRefund);\n",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        crowdsale.processReservationFundContribution.value(etherAmount)(contributor, tokenAmount, tokenBonusAmount);\n",
          "message": null
        }
      ]
    }
  }
}