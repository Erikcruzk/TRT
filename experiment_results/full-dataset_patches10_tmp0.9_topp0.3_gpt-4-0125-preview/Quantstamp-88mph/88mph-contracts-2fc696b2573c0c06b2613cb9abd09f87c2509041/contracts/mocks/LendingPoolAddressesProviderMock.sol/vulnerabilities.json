{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal core;\n",
          "message": "LendingPoolAddressesProviderMock.core should be constant (LendingPoolAddressesProviderMock.sol#7)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.17;\n",
          "message": "Detected issues with version pragma in LendingPoolAddressesProviderMock.sol:\n\t- pragma solidity0.5.17 (LendingPoolAddressesProviderMock.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolImpl(address _pool) external {\n",
          "message": "Parameter '_pool' of LendingPoolAddressesProviderMock.setLendingPoolImpl (LendingPoolAddressesProviderMock.sol#13) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address internal core;\n",
          "message": "LendingPoolAddressesProviderMock.core (LendingPoolAddressesProviderMock.sol#7) is never used in LendingPoolAddressesProviderMock\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}