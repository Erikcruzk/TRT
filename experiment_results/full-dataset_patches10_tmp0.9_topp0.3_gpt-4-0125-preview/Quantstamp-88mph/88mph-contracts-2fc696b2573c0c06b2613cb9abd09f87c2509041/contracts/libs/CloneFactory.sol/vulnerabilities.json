{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 60,
          "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n\n    bytes20 targetBytes = bytes20(target);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n\n      mstore(add(clone, 0xa), targetBytes)\n\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n\n\n      let other := add(clone, 0x40)\n\n      extcodecopy(query, other, 0, 0x2d)\n\n      result := and(\n\n        eq(mload(clone), mload(other)),\n\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n\n      )\n\n    }\n",
          "message": "CloneFactory.isClone (CloneFactory.sol#45-60) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 43,
          "vulnerability_code": "  function createClone(address target) internal returns (address result) {\n\n    bytes20 targetBytes = bytes20(target);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      result := create(0, clone, 0x37)\n\n    }\n",
          "message": "CloneFactory.createClone uses assembly (CloneFactory.sol#34-43)\n\t- CloneFactory.sol#36-42\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": 60,
          "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n\n    bytes20 targetBytes = bytes20(target);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n\n      mstore(add(clone, 0xa), targetBytes)\n\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n\n\n      let other := add(clone, 0x40)\n\n      extcodecopy(query, other, 0, 0x2d)\n\n      result := and(\n\n        eq(mload(clone), mload(other)),\n\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n\n      )\n\n    }\n",
          "message": "CloneFactory.isClone uses assembly (CloneFactory.sol#45-60)\n\t- CloneFactory.sol#47-59\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.17;\n",
          "message": "Detected issues with version pragma in CloneFactory.sol:\n\t- pragma solidity0.5.17 (CloneFactory.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function createClone(address target) internal returns (address result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}