{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256  public kicks = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_, address gem_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "        gem = GemLike(gem_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "        live = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wards[msg.sender] == 1, \"Flapper/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Flapper/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Flapper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(kicks < uint(-1), \"Flapper/overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end < now, \"Flapper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic == 0, \"Flapper/bid-already-placed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Flapper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flapper/already-finished-tic\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end > now, \"Flapper/already-finished-end\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(lot == bids[id].lot, \"Flapper/lot-not-matching\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bid >  bids[id].bid, \"Flapper/bid-not-higher\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mul(bid, ONE) >= mul(beg, bids[id].bid), \"Flapper/insufficient-increase\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Flapper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flapper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 0, \"Flapper/still-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flapper/not-finished\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function deal(uint id) external {\n\n        require(live == 1, \"Flapper/not-live\");\n\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flapper/not-finished\");\n\n        vat.move(address(this), bids[id].guy, bids[id].lot);\n\n        gem.burn(address(this), bids[id].bid);\n\n        delete bids[id];\n",
          "message": "Reentrancy in Flapper.deal (flap.sol#147-153):\n\tExternal calls:\n\t- vat.move(address(this),bids[id].guy,bids[id].lot) (flap.sol#150)\n\t- gem.burn(address(this),bids[id].bid) (flap.sol#151)\n\tState variables written after the call(s):\n\t- bids (flap.sol#152)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function tend(uint id, uint lot, uint bid) external {\n\n        require(live == 1, \"Flapper/not-live\");\n\n        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flapper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flapper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flapper/lot-not-matching\");\n\n        require(bid >  bids[id].bid, \"Flapper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid), \"Flapper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            gem.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        gem.move(msg.sender, address(this), bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flapper.tend (flap.sol#128-146):\n\tExternal calls:\n\t- gem.move(msg.sender,bids[id].guy,bids[id].bid) (flap.sol#139)\n\tState variables written after the call(s):\n\t- bids (flap.sol#140)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function tend(uint id, uint lot, uint bid) external {\n\n        require(live == 1, \"Flapper/not-live\");\n\n        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flapper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flapper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flapper/lot-not-matching\");\n\n        require(bid >  bids[id].bid, \"Flapper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid), \"Flapper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            gem.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        gem.move(msg.sender, address(this), bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flapper.tend (flap.sol#128-146):\n\tExternal calls:\n\t- gem.move(msg.sender,bids[id].guy,bids[id].bid) (flap.sol#139)\n\t- gem.move(msg.sender,address(this),bid - bids[id].bid) (flap.sol#142)\n\tState variables written after the call(s):\n\t- bids (flap.sol#144)\n\t- bids (flap.sol#145)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 164,
          "vulnerability_code": "    function yank(uint id) external {\n\n        require(live == 0, \"Flapper/still-live\");\n\n        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n\n        gem.move(address(this), bids[id].guy, bids[id].bid);\n\n        delete bids[id];\n",
          "message": "Reentrancy in Flapper.yank (flap.sol#159-164):\n\tExternal calls:\n\t- gem.move(address(this),bids[id].guy,bids[id].bid) (flap.sol#162)\n\tState variables written after the call(s):\n\t- bids (flap.sol#163)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": "Detected issues with version pragma in flap.sol:\n\t- pragma solidity>=0.5.12 (flap.sol#22): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '' of VatLike.move (flap.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '_scope_0' of VatLike.move (flap.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '_scope_1' of VatLike.move (flap.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '' of GemLike.move (flap.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '_scope_0' of GemLike.move (flap.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '_scope_1' of GemLike.move (flap.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address,uint) external;\n",
          "message": "Parameter '' of GemLike.burn (flap.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address,uint) external;\n",
          "message": "Parameter '_scope_0' of GemLike.burn (flap.sol#33) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (what == \"tau\") tau = uint48(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256  constant ONE = 1.00E18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}