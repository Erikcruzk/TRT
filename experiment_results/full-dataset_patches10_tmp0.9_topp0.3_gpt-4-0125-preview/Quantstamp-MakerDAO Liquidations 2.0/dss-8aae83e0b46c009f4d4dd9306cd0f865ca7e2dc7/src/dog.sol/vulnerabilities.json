{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "        live = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Rely(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wards[msg.sender] == 1, \"Dog/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Dog/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Dog/not-unsafe\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(Hole > Dirt && milk.hole > milk.dirt, \"Dog/liquidation-limit-hit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    require(mul(dart, rate) >= dust, \"Dog/dusty-auction-from-partial-liquidation\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dink > 0, \"Dog/null-auction\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dart <= 2**255 && dink <= 2**255, \"Dog/overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Dog/not-unsafe\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(Hole > Dirt && milk.hole > milk.dirt, \"Dog/liquidation-limit-hit\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(dart <= 2**255 && dink <= 2**255, \"Dog/overflow\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    require(mul(dart, rate) >= dust, \"Dog/dusty-auction-from-partial-liquidation\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": 255,
          "vulnerability_code": "    function bark(bytes32 ilk, address urn, address kpr) external returns (uint256 id) {\n\n        require(live == 1, \"Dog/not-live\");\n\n\n\n        (uint256 ink, uint256 art) = vat.urns(ilk, urn);\n\n        Ilk memory milk = ilks[ilk];\n\n        uint256 dart;\n\n        uint256 rate;\n\n        uint256 dust;\n\n        {\n\n            uint256 spot;\n\n            (,rate, spot,, dust) = vat.ilks(ilk);\n\n            require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Dog/not-unsafe\");\n\n\n\n            // Get the minimum value between:\n\n            // 1) Remaining space in the general Hole\n\n            // 2) Remaining space in the collateral hole\n\n            require(Hole > Dirt && milk.hole > milk.dirt, \"Dog/liquidation-limit-hit\");\n\n            uint256 room = min(Hole - Dirt, milk.hole - milk.dirt);\n\n\n\n            // uint256.max()/(RAD*WAD) = 115,792,089,237,316\n\n            // SWC-Integer Overflow and Underflow: L205\n\n            dart = min(art, mul(room, WAD) / rate / milk.chop);\n\n\n\n            // Partial liquidation edge case logic\n\n            if (art > dart) {\n\n                if (mul(art - dart, rate) < dust) {\n\n\n\n                    // If the leftover Vault would be dusty, just liquidate it entirely.\n\n                    // This will result in at least one of dirt_i > hole_i or Dirt > Hole becoming true.\n\n                    // The amount of excess will be bounded above by ceiling(dust_i * chop_i / WAD).\n\n                    // This deviation is assumed to be small compared to both hole_i and Hole, so that\n\n                    // the extra amount of target DAI over the limits intended is not of economic concern.\n\n                    dart = art;\n\n                } else {\n\n\n\n                    // In a partial liquidation, the resulting auction should also be non-dusty.\n\n                    require(mul(dart, rate) >= dust, \"Dog/dusty-auction-from-partial-liquidation\");\n\n                }\n\n            }\n\n        }\n\n\n\n        uint256 dink = mul(ink, dart) / art;\n\n\n\n        require(dink > 0, \"Dog/null-auction\");\n\n        require(dart <= 2**255 && dink <= 2**255, \"Dog/overflow\");\n\n\n\n        vat.grab(\n\n            ilk, urn, milk.clip, address(vow), -int256(dink), -int256(dart)\n\n        );\n\n\n\n        uint256 due = mul(dart, rate);\n\n        vow.fess(due);\n\n\n\n        {   // Avoid stack too deep\n\n            // This calcuation will overflow if dart*rate exceeds ~10^14\n\n            uint256 tab = mul(due, milk.chop) / WAD;\n\n            Dirt = add(Dirt, tab);\n\n            ilks[ilk].dirt = add(milk.dirt, tab);\n\n\n\n            id = ClipperLike(milk.clip).kick({\n\n                tab: tab,\n\n                lot: dink,\n\n                usr: urn,\n\n                kpr: kpr\n\n            });\n\n        }\n\n\n\n        emit Bark(ilk, urn, dink, dart, due, milk.clip, id);\n",
          "message": "Reentrancy in Dog.bark (dog.sol#187-255):\n\tExternal calls:\n\t- (ink,art) = vat.urns(ilk,urn) (dog.sol#190)\n\t- (None,rate,spot,None,dust) = vat.ilks(ilk) (dog.sol#197)\n\t- vat.grab(ilk,urn,milk.clip,address(vow),- int256(dink),- int256(dart)) (dog.sol#233-235)\n\t- vow.fess(due) (dog.sol#238)\n\tState variables written after the call(s):\n\t- Dirt (dog.sol#243)\n\t- ilks (dog.sol#244)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.12;\n",
          "message": "Detected issues with version pragma in dog.sol:\n\t- pragma solidity>=0.6.12 (dog.sol#23): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
          "message": "Parameter '' of VatLike.ilks (dog.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
          "message": "Parameter '' of VatLike.urns (dog.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
          "message": "Parameter '_scope_0' of VatLike.urns (dog.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
          "message": "Parameter '' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
          "message": "Parameter '_scope_0' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
          "message": "Parameter '_scope_1' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
          "message": "Parameter '_scope_2' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
          "message": "Parameter '_scope_3' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
          "message": "Parameter '_scope_4' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hope(address) external;\n",
          "message": "Parameter '' of VatLike.hope (dog.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nope(address) external;\n",
          "message": "Parameter '' of VatLike.nope (dog.sol#48) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function fess(uint256) external;\n",
          "message": "Parameter '' of VowLike.fess (dog.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public Hole;  // Max DAI needed to cover debt+fees of active auctions [rad]\n",
          "message": "Variable 'Dog.Hole' (dog.sol#79) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public Dirt;  // Amt DAI needed to cover debt+fees of active auctions [rad]\n",
          "message": "Variable 'Dog.Dirt' (dog.sol#80) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.6.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (what == \"vow\") vow = VowLike(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (what == \"Hole\") Hole = data;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (what == \"hole\") ilks[ilk].hole = data;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (what == \"clip\") ilks[ilk].clip = clip;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    VatLike immutable public vat;  // CDP Engine\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    VatLike immutable public vat;  // CDP Engine\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant WAD = 10 ** 18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_) public {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}