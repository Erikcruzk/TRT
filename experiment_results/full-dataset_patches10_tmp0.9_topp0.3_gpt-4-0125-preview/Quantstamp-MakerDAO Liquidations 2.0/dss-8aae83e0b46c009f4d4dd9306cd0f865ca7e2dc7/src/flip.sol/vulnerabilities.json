{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public kicks = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_, address cat_, bytes32 ilk_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "        cat = CatLike(cat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ilk = ilk_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wards[msg.sender] == 1, \"Flipper/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Flipper/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Flipper/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(kicks < uint256(-1), \"Flipper/overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end < now, \"Flipper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic == 0, \"Flipper/bid-already-placed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end > now, \"Flipper/already-finished-end\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end > now, \"Flipper/already-finished-end\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].bid < bids[id].tab, \"Flipper/already-dent-phase\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function deal(uint256 id) external {\n\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\n\n        cat.claw(bids[id].tab);\n\n        vat.flux(ilk, address(this), bids[id].guy, bids[id].lot);\n\n        delete bids[id];\n",
          "message": "Reentrancy in Flipper.deal (flip.sol#185-190):\n\tExternal calls:\n\t- cat.claw(bids[id].tab) (flip.sol#187)\n\t- vat.flux(ilk,address(this),bids[id].guy,bids[id].lot) (flip.sol#188)\n\tState variables written after the call(s):\n\t- bids (flip.sol#189)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": 184,
          "vulnerability_code": "    function dent(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\n\n        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\n\n        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\n\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.flux(ilk, address(this), bids[id].usr, bids[id].lot - lot);\n\n\n\n        bids[id].lot = lot;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flipper.dent (flip.sol#166-184):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (flip.sol#177)\n\tState variables written after the call(s):\n\t- bids (flip.sol#178)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": 184,
          "vulnerability_code": "    function dent(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\n\n        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\n\n        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\n\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.flux(ilk, address(this), bids[id].usr, bids[id].lot - lot);\n\n\n\n        bids[id].lot = lot;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flipper.dent (flip.sol#166-184):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (flip.sol#177)\n\t- vat.flux(ilk,address(this),bids[id].usr,bids[id].lot - lot) (flip.sol#180)\n\tState variables written after the call(s):\n\t- bids (flip.sol#182)\n\t- bids (flip.sol#183)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function tend(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\n\n        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\n\n        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.move(msg.sender, bids[id].gal, bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flipper.tend (flip.sol#147-165):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bids[id].bid) (flip.sol#158)\n\tState variables written after the call(s):\n\t- bids (flip.sol#159)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function tend(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\n\n        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\n\n        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.move(msg.sender, bids[id].gal, bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flipper.tend (flip.sol#147-165):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bids[id].bid) (flip.sol#158)\n\t- vat.move(msg.sender,bids[id].gal,bid - bids[id].bid) (flip.sol#161)\n\tState variables written after the call(s):\n\t- bids (flip.sol#163)\n\t- bids (flip.sol#164)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": 199,
          "vulnerability_code": "    function yank(uint256 id) external auth {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].bid < bids[id].tab, \"Flipper/already-dent-phase\");\n\n        cat.claw(bids[id].tab);\n\n        vat.flux(ilk, address(this), msg.sender, bids[id].lot);\n\n        vat.move(msg.sender, bids[id].guy, bids[id].bid);\n\n        delete bids[id];\n",
          "message": "Reentrancy in Flipper.yank (flip.sol#192-199):\n\tExternal calls:\n\t- cat.claw(bids[id].tab) (flip.sol#195)\n\t- vat.flux(ilk,address(this),msg.sender,bids[id].lot) (flip.sol#196)\n\t- vat.move(msg.sender,bids[id].guy,bids[id].bid) (flip.sol#197)\n\tState variables written after the call(s):\n\t- bids (flip.sol#198)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 141,
          "vulnerability_code": "    function kick(address usr, address gal, uint256 tab, uint256 lot, uint256 bid)\n\n        public auth returns (uint256 id)\n\n    {\n\n        require(kicks < uint256(-1), \"Flipper/overflow\");\n\n        id = ++kicks;\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].lot = lot;\n\n        bids[id].guy = msg.sender;  // configurable??\n\n        bids[id].end = add(uint48(now), tau);\n\n        bids[id].usr = usr;\n\n        bids[id].gal = gal;\n\n        bids[id].tab = tab;\n\n\n\n        vat.flux(ilk, msg.sender, address(this), lot);\n\n\n\n        emit Kick(id, lot, bid, tab, usr, gal);\n",
          "message": "Flipper.kick (flip.sol#124-141) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": "Detected issues with version pragma in flip.sol:\n\t- pragma solidity>=0.5.12 (flip.sol#22): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint256) external;\n",
          "message": "Parameter '' of VatLike.move (flip.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint256) external;\n",
          "message": "Parameter '_scope_0' of VatLike.move (flip.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint256) external;\n",
          "message": "Parameter '_scope_1' of VatLike.move (flip.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
          "message": "Parameter '' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
          "message": "Parameter '_scope_0' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
          "message": "Parameter '_scope_1' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
          "message": "Parameter '_scope_2' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claw(uint256) external;\n",
          "message": "Parameter '' of CatLike.claw (flip.sol#34) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (what == \"tau\") tau = uint48(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (what == \"cat\") cat = CatLike(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 constant ONE = 1.00E18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}