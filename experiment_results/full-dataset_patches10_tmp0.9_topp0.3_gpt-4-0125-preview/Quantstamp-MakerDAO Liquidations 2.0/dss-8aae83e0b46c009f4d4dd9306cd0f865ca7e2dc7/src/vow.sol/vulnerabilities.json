{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_, address flapper_, address flopper_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat     = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "        flapper = FlapLike(flapper_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        flopper = FlopLike(flopper_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat.hope(flapper_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        live = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function rely(address usr) external auth { require(live == 1, \"Vow/not-live\"); wards[usr] = 1; }\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wards[msg.sender] == 1, \"Vow/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Vow/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Vow/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(add(era, wait) <= now, \"Vow/wait-not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rad <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rad <= Ash, \"Vow/not-enough-ash\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vat.dai(address(this)) == 0, \"Vow/surplus-not-zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vat.dai(address(this)) >= add(add(vat.sin(address(this)), bump), hump), \"Vow/insufficient-surplus\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, \"Vow/debt-not-zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Vow/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 115,
          "vulnerability_code": "    function file(bytes32 what, address data) external auth {\n\n        if (what == \"flapper\") {\n\n            vat.nope(address(flapper));\n\n            flapper = FlapLike(data);\n\n            vat.hope(data);\n\n        }\n\n        else if (what == \"flopper\") flopper = FlopLike(data);\n\n        else revert(\"Vow/file-unrecognized-param\");\n",
          "message": "Reentrancy in Vow.file (vow.sol#107-115):\n\tExternal calls:\n\t- vat.nope(address(flapper)) (vow.sol#109)\n\tState variables written after the call(s):\n\t- flapper (vow.sol#110)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function flop() external returns (uint id) {\n\n        require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n\n        require(vat.dai(address(this)) == 0, \"Vow/surplus-not-zero\");\n\n        Ash = add(Ash, sump);\n\n        id = flopper.kick(address(this), dump, sump);\n",
          "message": "Reentrancy in Vow.flop (vow.sol#143-148):\n\tExternal calls:\n\t- require(bool,string)(sump <= sub(sub(vat.sin(address(this)),Sin),Ash),Vow/insufficient-debt) (vow.sol#144)\n\t- require(bool,string)(vat.dai(address(this)) == 0,Vow/surplus-not-zero) (vow.sol#145)\n\tState variables written after the call(s):\n\t- Ash (vow.sol#146)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 140,
          "vulnerability_code": "    function kiss(uint rad) external {\n\n        require(rad <= Ash, \"Vow/not-enough-ash\");\n\n        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n\n        Ash = sub(Ash, rad);\n\n        vat.heal(rad);\n",
          "message": "Reentrancy in Vow.kiss (vow.sol#135-140):\n\tExternal calls:\n\t- require(bool,string)(rad <= vat.dai(address(this)),Vow/insufficient-surplus) (vow.sol#137)\n\tState variables written after the call(s):\n\t- Ash (vow.sol#138)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    constructor(address vat_, address flapper_, address flopper_) public {\n\n        wards[msg.sender] = 1;\n\n        vat     = VatLike(vat_);\n\n        flapper = FlapLike(flapper_);\n\n        flopper = FlopLike(flopper_);\n\n        vat.hope(flapper_);\n\n        live = 1;\n",
          "message": "Reentrancy in Vow.constructor (vow.sol#77-84):\n\tExternal calls:\n\t- vat.hope(flapper_) (vow.sol#82)\n\tState variables written after the call(s):\n\t- live (vow.sol#83)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": "Detected issues with version pragma in vow.sol:\n\t- pragma solidity>=0.5.12 (vow.sol#22): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cage(uint) external;\n",
          "message": "Parameter '' of FlapLike.cage (vow.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function dai (address) external view returns (uint);\n",
          "message": "Parameter '' of VatLike.dai (vow.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sin (address) external view returns (uint);\n",
          "message": "Parameter '' of VatLike.sin (vow.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function heal(uint256) external;\n",
          "message": "Parameter '' of VatLike.heal (vow.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hope(address) external;\n",
          "message": "Parameter '' of VatLike.hope (vow.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nope(address) external;\n",
          "message": "Parameter '' of VatLike.nope (vow.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public Sin;   // Queued debt            [rad]\n",
          "message": "Variable 'Vow.Sin' (vow.sol#64) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public Ash;   // On-auction debt        [rad]\n",
          "message": "Variable 'Vow.Ash' (vow.sol#65) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (what == \"hump\") hump = data;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (what == \"flopper\") flopper = FlopLike(data);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}