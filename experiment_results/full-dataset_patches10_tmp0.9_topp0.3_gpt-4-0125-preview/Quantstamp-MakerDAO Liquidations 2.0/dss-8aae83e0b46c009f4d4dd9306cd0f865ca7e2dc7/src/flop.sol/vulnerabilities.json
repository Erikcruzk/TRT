{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256  public kicks = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_, address gem_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "        wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        gem = GemLike(gem_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "        live = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(wards[msg.sender] == 1, \"Flopper/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else revert(\"Flopper/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Flopper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(kicks < uint(-1), \"Flopper/overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end < now, \"Flopper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic == 0, \"Flopper/bid-already-placed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Flopper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flopper/already-finished-tic\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].end > now, \"Flopper/already-finished-end\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(lot <  bids[id].lot, \"Flopper/lot-not-lower\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flopper/insufficient-decrease\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 1, \"Flopper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(live == 0, \"Flopper/still-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": 169,
          "vulnerability_code": "    function deal(uint id) external {\n\n        require(live == 1, \"Flopper/not-live\");\n\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n\n        gem.mint(bids[id].guy, bids[id].lot);\n\n        delete bids[id];\n",
          "message": "Reentrancy in Flopper.deal (flop.sol#164-169):\n\tExternal calls:\n\t- gem.mint(bids[id].guy,bids[id].lot) (flop.sol#167)\n\tState variables written after the call(s):\n\t- bids (flop.sol#168)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": 163,
          "vulnerability_code": "    function dent(uint id, uint lot, uint bid) external {\n\n        require(live == 1, \"Flopper/not-live\");\n\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flopper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flopper/already-finished-end\");\n\n\n\n        require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n\n        require(lot <  bids[id].lot, \"Flopper/lot-not-lower\");\n\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flopper/insufficient-decrease\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bid);\n\n\n\n            // on first dent, clear as much Ash as possible\n\n            if (bids[id].tic == 0) {\n\n                uint Ash = VowLike(bids[id].guy).Ash();\n\n                VowLike(bids[id].guy).kiss(min(bid, Ash));\n\n            }\n\n\n\n            bids[id].guy = msg.sender;\n\n        }\n\n\n\n        bids[id].lot = lot;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flopper.dent (flop.sol#139-163):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (flop.sol#150)\n\t- Ash = VowLike(bids[id].guy).Ash() (flop.sol#154)\n\t- VowLike(bids[id].guy).kiss(min(bid,Ash)) (flop.sol#155)\n\tState variables written after the call(s):\n\t- bids (flop.sol#158)\n\t- bids (flop.sol#161)\n\t- bids (flop.sol#162)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 181,
          "vulnerability_code": "    function yank(uint id) external {\n\n        require(live == 0, \"Flopper/still-live\");\n\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n\n        vat.suck(vow, bids[id].guy, bids[id].bid);\n\n        delete bids[id];\n",
          "message": "Reentrancy in Flopper.yank (flop.sol#176-181):\n\tExternal calls:\n\t- vat.suck(vow,bids[id].guy,bids[id].bid) (flop.sol#179)\n\tState variables written after the call(s):\n\t- bids (flop.sol#180)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": "Detected issues with version pragma in flop.sol:\n\t- pragma solidity>=0.5.12 (flop.sol#22): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '' of VatLike.move (flop.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '_scope_0' of VatLike.move (flop.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function move(address,address,uint) external;\n",
          "message": "Parameter '_scope_1' of VatLike.move (flop.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function suck(address,address,uint) external;\n",
          "message": "Parameter '' of VatLike.suck (flop.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function suck(address,address,uint) external;\n",
          "message": "Parameter '_scope_0' of VatLike.suck (flop.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function suck(address,address,uint) external;\n",
          "message": "Parameter '_scope_1' of VatLike.suck (flop.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address,uint) external;\n",
          "message": "Parameter '' of GemLike.mint (flop.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mint(address,uint) external;\n",
          "message": "Parameter '_scope_0' of GemLike.mint (flop.sol#33) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Ash() external returns (uint);\n",
          "message": "Function 'VowLike.Ash' (flop.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function kiss(uint) external;\n",
          "message": "Parameter '' of VowLike.kiss (flop.sol#37) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.5.12;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (what == \"tau\") tau = uint48(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256  constant ONE = 1.00E18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}