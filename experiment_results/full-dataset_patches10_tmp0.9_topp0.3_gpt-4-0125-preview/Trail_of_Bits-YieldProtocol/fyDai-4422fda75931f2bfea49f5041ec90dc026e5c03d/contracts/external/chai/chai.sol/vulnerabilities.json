{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address vat_, address pot_, address daiJoin_, address weth_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "        /* assert (DOMAIN_SEPARATOR ==\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "          keccak256(abi.encode(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "            keccak256(bytes(name)), keccak256(bytes(version)), 1, address(this)))\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ); */\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "        vat = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pot = PotLike(pot_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "        daiJoin = JoinLike(daiJoin_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[src] >= wad, \"chai/insufficient-balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"chai/insufficient-allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(holder != address(0), \"chai/invalid holder\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(holder == ecrecover(digest, v, r, s), \"chai/invalid-permit\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(expiry == 0 || now <= expiry, \"chai/permit-expired\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[holder]++, \"chai/invalid-nonce\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 182,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balanceOf[src] >= wad, \"chai/insufficient-balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"chai/insufficient-allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"chai/insufficient-allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 128,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"chai/insufficient-allowance\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(nonce == nonces[holder]++, \"chai/invalid-nonce\");\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 110,
          "vulnerability_code": "    constructor(address vat_, address pot_, address daiJoin_, address weth_) public {\n\n        /* assert (DOMAIN_SEPARATOR ==\n\n          keccak256(abi.encode(\n\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n\n            keccak256(bytes(name)), keccak256(bytes(version)), 1, address(this)))\n\n        ); */\n\n\n\n        vat = VatLike(vat_);\n\n        pot = PotLike(pot_);\n\n        daiJoin = JoinLike(daiJoin_);\n\n        daiToken = GemLike(weth_);\n\n\n\n        vat.hope(address(daiJoin));\n\n        vat.hope(address(pot));\n\n\n\n        daiToken.approve(address(daiJoin), uint(-1));\n",
          "message": "Chai.constructor (chai.sol#94-110) does not use the value returned by external calls:\n\t-daiToken.approve(address(daiJoin),uint256(- 1)) (chai.sol#109)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 178,
          "vulnerability_code": "    function join(address dst, uint wad) external {\n\n        uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();\n\n        uint pie = rdiv(wad, chi);\n\n        balanceOf[dst] = add(balanceOf[dst], pie);\n\n        totalSupply    = add(totalSupply, pie);\n\n\n\n        daiToken.transferFrom(msg.sender, address(this), wad);\n\n        daiJoin.join(address(this), wad);\n\n        pot.join(pie);\n\n        emit Transfer(address(0), dst, pie);\n",
          "message": "Chai.join (chai.sol#168-178) does not use the value returned by external calls:\n\t-daiToken.transferFrom(msg.sender,address(this),wad) (chai.sol#174)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": 178,
          "vulnerability_code": "    function join(address dst, uint wad) external {\n\n        uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();\n\n        uint pie = rdiv(wad, chi);\n\n        balanceOf[dst] = add(balanceOf[dst], pie);\n\n        totalSupply    = add(totalSupply, pie);\n\n\n\n        daiToken.transferFrom(msg.sender, address(this), wad);\n\n        daiJoin.join(address(this), wad);\n\n        pot.join(pie);\n\n        emit Transfer(address(0), dst, pie);\n",
          "message": "Reentrancy in Chai.join (chai.sol#168-178):\n\tExternal calls:\n\t- (now > pot.rho()) (chai.sol#169)\n\t- chi = pot.drip() (chai.sol#169)\n\t- chi = pot.chi() (chai.sol#169)\n\tState variables written after the call(s):\n\t- balanceOf (chai.sol#171)\n\t- totalSupply (chai.sol#172)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function move(address src, address dst, uint wad) external returns (bool) {\n\n        uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();\n\n        // rounding up ensures dst gets at least wad dai\n\n        return transferFrom(src, dst, rdivup(wad, chi));\n",
          "message": "Reentrancy in Chai.move (chai.sol#117-121):\n\tExternal calls:\n\t- (now > pot.rho()) (chai.sol#118)\n\t- chi = pot.drip() (chai.sol#118)\n\t- chi = pot.chi() (chai.sol#118)\n\tState variables written after the call(s):\n\t- allowance (chai.sol#120)\n\t- balanceOf (chai.sol#120)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.2;\n",
          "message": "Detected issues with version pragma in chai.sol:\n\t- pragma solidity^0.6.2 (chai.sol#20): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function hope(address) external;\n",
          "message": "Parameter '' of VatLike.hope (chai.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function join(uint256) external;\n",
          "message": "Parameter '' of PotLike.join (chai.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exit(uint256) external;\n",
          "message": "Parameter '' of PotLike.exit (chai.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function join(address, uint) external;\n",
          "message": "Parameter '' of JoinLike.join (chai.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function join(address, uint) external;\n",
          "message": "Parameter '_scope_0' of JoinLike.join (chai.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exit(address, uint) external;\n",
          "message": "Parameter '' of JoinLike.exit (chai.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exit(address, uint) external;\n",
          "message": "Parameter '_scope_0' of JoinLike.exit (chai.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address,address,uint) external returns (bool);\n",
          "message": "Parameter '' of GemLike.transferFrom (chai.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address,address,uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of GemLike.transferFrom (chai.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address,address,uint) external returns (bool);\n",
          "message": "Parameter '_scope_1' of GemLike.transferFrom (chai.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address,uint) external returns (bool);\n",
          "message": "Parameter '' of GemLike.approve (chai.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address,uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of GemLike.approve (chai.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string  public constant version  = \"1\";\n",
          "message": "Constant 'Chai.version' (chai.sol#54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}