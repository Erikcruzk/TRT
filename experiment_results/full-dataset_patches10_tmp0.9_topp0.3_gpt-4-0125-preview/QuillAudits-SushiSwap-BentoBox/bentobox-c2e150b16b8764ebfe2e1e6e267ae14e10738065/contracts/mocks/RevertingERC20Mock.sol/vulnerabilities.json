{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tstring memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tstring memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tuint256 supply\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tname = name_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tsymbol = symbol_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\ttotalSupply = supply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tbalanceOf[msg.sender] = supply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(balanceOf[msg.sender] >= amount, \"TokenB: balance too low\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(amount >= 0, \"TokenB: amount should be > 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(balanceOf[to] + amount >= balanceOf[to], \"TokenB: overflow detected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(balanceOf[from] >= amount, \"TokenB: balance too low\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(allowance[from][msg.sender] >= amount, \"TokenB: allowance too low\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(amount >= 0, \"TokenB: amount should be >= 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(balanceOf[to] + amount >= balanceOf[to], \"TokenB: overflow detected\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 38,
          "vulnerability_code": "\tfunction transfer(address to, uint256 amount) public returns (bool success) {\n\n\t\trequire(balanceOf[msg.sender] >= amount, \"TokenB: balance too low\");\n\n\t\trequire(amount >= 0, \"TokenB: amount should be > 0\");\n\n\t\trequire(balanceOf[to] + amount >= balanceOf[to], \"TokenB: overflow detected\");\n\n\t\tbalanceOf[msg.sender] -= amount;\n\n\t\tbalanceOf[to] += amount;\n\n\t\temit Transfer(msg.sender, to, amount);\n\n\t\treturn true;\n",
          "message": "RevertingERC20Mock.transfer (RevertingERC20Mock.sol#30-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 54,
          "vulnerability_code": "\tfunction transferFrom(\n\n\t\taddress from,\n\n\t\taddress to,\n\n\t\tuint256 amount\n\n\t) public returns (bool success) {\n\n\t\trequire(balanceOf[from] >= amount, \"TokenB: balance too low\");\n\n\t\trequire(allowance[from][msg.sender] >= amount, \"TokenB: allowance too low\");\n\n\t\trequire(amount >= 0, \"TokenB: amount should be >= 0\");\n\n\t\trequire(balanceOf[to] + amount >= balanceOf[to], \"TokenB: overflow detected\");\n\n\t\tbalanceOf[from] -= amount;\n\n\t\tallowance[from][msg.sender] -= amount;\n\n\t\tbalanceOf[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\n\t\treturn true;\n",
          "message": "RevertingERC20Mock.transferFrom (RevertingERC20Mock.sol#40-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 60,
          "vulnerability_code": "\tfunction approve(address spender, uint256 amount) public returns (bool success) {\n\n\t\tallowance[msg.sender][spender] = amount;\n\n\t\temit Approval(msg.sender, spender, amount);\n\n\t\treturn true;\n",
          "message": "RevertingERC20Mock.approve (RevertingERC20Mock.sol#56-60) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.12;\n",
          "message": "Detected issues with version pragma in RevertingERC20Mock.sol:\n\t- pragma solidity0.6.12 (RevertingERC20Mock.sol#6): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tfunction approve(address spender, uint256 amount) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tmapping(address => mapping(address => uint256)) allowance;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}