{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 1423,
          "vulnerability_to_line": null,
          "vulnerability_code": "abstract contract BaseUniswapAdapter is FlashLoanReceiverBase, IBaseUniswapAdapter, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address msgSender = _msgSender();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 623,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = msgSender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 624,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit OwnershipTransferred(address(0), msgSender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1992,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1993,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ILendingPoolAddressesProvider addressesProvider,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1994,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IUniswapV2Router02 uniswapRouter,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1995,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address wethAddress\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 1996,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public BaseUniswapAdapter(addressesProvider, uniswapRouter, wethAddress) {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "      'SafeERC20: approve from non-zero to non-zero allowance'\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'SafeERC20: low-level call failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 638,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(expectedMinAmountOut < minAmountOut, 'minAmountOut exceed max slippage');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 1609,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(maxAmountToSwap < expectedMaxAmountToSwap, 'maxAmountToSwap exceed max slippage');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2025,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == address(LENDING_POOL), 'CALLER_MUST_BE_LENDING_POOL');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2087,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(amounts[0] <= maxCollateralToSwap, 'slippage too high');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 2158,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(amounts[0] <= maxCollateralToSwap, 'slippage too high');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1771,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (reserveIn != WETH_ADDRESS && reserveOut != WETH_ADDRESS) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1772,
          "vulnerability_to_line": null,
          "vulnerability_code": "      pathWithWeth[0] = reserveIn;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1773,
          "vulnerability_to_line": null,
          "vulnerability_code": "      pathWithWeth[1] = WETH_ADDRESS;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1774,
          "vulnerability_to_line": null,
          "vulnerability_code": "      pathWithWeth[2] = reserveOut;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1775,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1776,
          "vulnerability_to_line": null,
          "vulnerability_code": "      try UNISWAP_ROUTER.getAmountsOut(finalAmountIn, pathWithWeth) returns (\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] memory resultsWithWeth\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1778,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1779,
          "vulnerability_to_line": null,
          "vulnerability_code": "        amountsWithWeth = resultsWithWeth;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1780,
          "vulnerability_to_line": null,
          "vulnerability_code": "      } catch {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (reserveIn != WETH_ADDRESS && reserveOut != WETH_ADDRESS) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1900,
          "vulnerability_to_line": null,
          "vulnerability_code": "      pathWithWeth[0] = reserveIn;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1901,
          "vulnerability_to_line": null,
          "vulnerability_code": "      pathWithWeth[1] = WETH_ADDRESS;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1902,
          "vulnerability_to_line": null,
          "vulnerability_code": "      pathWithWeth[2] = reserveOut;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1903,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1904,
          "vulnerability_to_line": null,
          "vulnerability_code": "      try UNISWAP_ROUTER.getAmountsIn(amountOut, pathWithWeth) returns (\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1905,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256[] memory resultsWithWeth\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1906,
          "vulnerability_to_line": null,
          "vulnerability_code": "      ) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1907,
          "vulnerability_to_line": null,
          "vulnerability_code": "        amountsWithWeth = resultsWithWeth;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1908,
          "vulnerability_to_line": null,
          "vulnerability_code": "      } catch {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "      'SafeERC20: approve from non-zero to non-zero allowance'\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 659,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 1609,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(maxAmountToSwap < expectedMaxAmountToSwap, 'maxAmountToSwap exceed max slippage');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1433,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant override USD_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 1726,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return amount.mul(reservePrice).div(10**decimals).mul(ethUsdPrice).div(10**18);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1298,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 1424,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1179,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1504,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1890,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) internal view returns (uint256[] memory, address[] memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function swapExactTokensForTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 794,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function swapTokensForExactTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1156,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function flashLoan(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function executeOperation(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2018,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function executeOperation(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call{value: amount}('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call{value: amount}('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call{value: amount}('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata path,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address to,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 791,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 792,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (uint256[] memory amounts);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 797,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata path,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 798,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address to,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 799,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (uint256[] memory amounts);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata assets,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1159,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata modes,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata modes,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address onBehalfOf,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint16 referralCode\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1275,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata premiums,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata premiums,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1277,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address initiator,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1279,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1300,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ILendingPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ILendingPool public immutable override LENDING_POOL;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1435,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public immutable override WETH_ADDRESS;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1436,
          "vulnerability_to_line": null,
          "vulnerability_code": "  IPriceOracleGetter public immutable override ORACLE;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1437,
          "vulnerability_to_line": null,
          "vulnerability_code": "  IUniswapV2Router02 public immutable override UNISWAP_ROUTER;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2020,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata amounts,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2021,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata premiums,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2021,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] calldata premiums,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2022,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address initiator,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2023,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes calldata params\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2024,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) external override returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2025,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == address(LENDING_POOL), 'CALLER_MUST_BE_LENDING_POOL');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2025,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == address(LENDING_POOL), 'CALLER_MUST_BE_LENDING_POOL');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2027,
          "vulnerability_to_line": null,
          "vulnerability_code": "    RepayParams memory decodedParams = _decodeParams(params);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2029,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _swapAndRepay(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2030,
          "vulnerability_to_line": null,
          "vulnerability_code": "      decodedParams.collateralAsset,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2032,
          "vulnerability_to_line": null,
          "vulnerability_code": "      amounts[0],\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2033,
          "vulnerability_to_line": null,
          "vulnerability_code": "      decodedParams.collateralAmount,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2034,
          "vulnerability_to_line": null,
          "vulnerability_code": "      decodedParams.rateMode,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2036,
          "vulnerability_to_line": null,
          "vulnerability_code": "      premiums[0],\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2037,
          "vulnerability_to_line": null,
          "vulnerability_code": "      decodedParams.permitSignature,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 2038,
          "vulnerability_to_line": null,
          "vulnerability_code": "      decodedParams.useEthPath\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}