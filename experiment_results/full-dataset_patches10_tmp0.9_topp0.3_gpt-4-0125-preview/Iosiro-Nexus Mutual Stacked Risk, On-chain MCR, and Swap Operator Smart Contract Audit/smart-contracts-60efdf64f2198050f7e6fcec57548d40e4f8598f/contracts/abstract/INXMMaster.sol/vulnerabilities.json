{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public owner;\n",
          "message": "INXMMaster.owner should be constant (INXMMaster.sol#24)\nINXMMaster.pauseTime should be constant (INXMMaster.sol#26)\nINXMMaster.tokenAddress should be constant (INXMMaster.sol#22)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
          "message": "INXMMaster.masterInitialized (INXMMaster.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
          "message": "INXMMaster.isInternal (INXMMaster.sol#32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isPause() public view returns (bool check);\n",
          "message": "INXMMaster.isPause (INXMMaster.sol#34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
          "message": "INXMMaster.isOwner (INXMMaster.sol#36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
          "message": "INXMMaster.isMember (INXMMaster.sol#38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
          "message": "INXMMaster.checkIsAuthToGoverned (INXMMaster.sol#40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
          "message": "INXMMaster.updatePauseTime (INXMMaster.sol#42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
          "message": "INXMMaster.dAppLocker (INXMMaster.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
          "message": "INXMMaster.dAppToken (INXMMaster.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
          "message": "INXMMaster.getLatestAddress (INXMMaster.sol#48) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in INXMMaster.sol:\n\t- pragma solidity^0.5.0 (INXMMaster.sol#18): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}