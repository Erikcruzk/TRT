{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function getMCR() public view returns (uint) {\n\n        return mcr;\n",
          "message": "P1MockMCR.getMCR (P1MockMCR.sol#23-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function setMCR(uint _mcr) public  {\n\n        mcr = _mcr;\n",
          "message": "P1MockMCR.setMCR (P1MockMCR.sol#35-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n\n        // no-op\n",
          "message": "P1MockMCR.updateMCRInternal (P1MockMCR.sol#43-45) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in P1MockMCR.sol:\n\t- pragma solidity^0.5.17 (P1MockMCR.sol#18): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeMasterAddress(address) external {\n",
          "message": "Parameter '' of P1MockMCR.changeMasterAddress (P1MockMCR.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMCR(uint _mcr) public  {\n",
          "message": "Parameter '_mcr' of P1MockMCR.setMCR (P1MockMCR.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateMCR(uint) external {\n",
          "message": "Parameter '' of P1MockMCR.updateMCR (P1MockMCR.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n",
          "message": "Parameter '' of P1MockMCR.updateMCRInternal (P1MockMCR.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n",
          "message": "Parameter '_scope_0' of P1MockMCR.updateMCRInternal (P1MockMCR.sol#43) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}