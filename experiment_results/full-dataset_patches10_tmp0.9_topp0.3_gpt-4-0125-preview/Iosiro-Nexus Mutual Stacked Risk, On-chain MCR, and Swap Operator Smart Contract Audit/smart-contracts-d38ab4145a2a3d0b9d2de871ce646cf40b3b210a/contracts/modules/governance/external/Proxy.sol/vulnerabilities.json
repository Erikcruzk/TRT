{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 33,
          "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
          "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 33,
          "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
          "message": "Proxy.fallback uses assembly (Proxy.sol#17-33)\n\t- Proxy.sol#22-32\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity^0.5.0 (Proxy.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}