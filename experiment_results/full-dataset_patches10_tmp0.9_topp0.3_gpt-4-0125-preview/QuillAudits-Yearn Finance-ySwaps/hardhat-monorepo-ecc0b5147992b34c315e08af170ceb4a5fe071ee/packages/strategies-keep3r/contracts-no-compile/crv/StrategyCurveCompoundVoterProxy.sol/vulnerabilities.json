{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public strategistReward = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public withdrawalFee = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _controller) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 511,
          "vulnerability_to_line": null,
          "vulnerability_code": "    governance = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    strategist = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 513,
          "vulnerability_to_line": null,
          "vulnerability_code": "    controller = _controller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'SafeERC20: low-level call failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance || msg.sender == strategist, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 531,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 546,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(want != address(_asset), 'want');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(crv != address(_asset), 'crv');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(dai != address(_asset), 'dai');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == strategist || msg.sender == governance, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 656,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Uni(uni).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_50"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 289,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n    // for accounts without code, i.e. `keccak256('')`\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract (StrategyCurveCompoundVoterProxy.sol#278-289) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": 603,
          "vulnerability_code": "  function _withdrawAll() internal {\n\n    VoterProxy(proxy).withdrawAll(gauge, want);\n",
          "message": "StrategyCurveCompoundVoterProxy._withdrawAll (StrategyCurveCompoundVoterProxy.sol#601-603) does not use the value returned by external calls:\n\t-VoterProxy(proxy).withdrawAll(gauge,want) (StrategyCurveCompoundVoterProxy.sol#602)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": 641,
          "vulnerability_code": "  function harvest() public {\n\n    require(msg.sender == strategist || msg.sender == governance, '!authorized');\n\n    VoterProxy(proxy).harvest(gauge);\n\n    uint256 _crv = IERC20(crv).balanceOf(address(this));\n\n    if (_crv > 0) {\n\n      uint256 _keepCRV = _crv.mul(keepCRV).div(FEE_DENOMINATOR);\n\n      IERC20(crv).safeTransfer(voter, _keepCRV);\n\n      _crv = _crv.sub(_keepCRV);\n\n\n\n      IERC20(crv).safeApprove(uni, 0);\n\n      IERC20(crv).safeApprove(uni, _crv);\n\n\n\n      address[] memory path = new address[](3);\n\n      path[0] = crv;\n\n      path[1] = weth;\n\n      path[2] = dai;\n\n\n\n      Uni(uni).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n\n    }\n\n    uint256 _dai = IERC20(dai).balanceOf(address(this));\n\n    if (_dai > 0) {\n\n      IERC20(dai).safeApprove(curve, 0);\n\n      IERC20(dai).safeApprove(curve, _dai);\n\n      ICurveFi(curve).add_liquidity([_dai, 0], 0);\n\n    }\n\n    uint256 _want = IERC20(want).balanceOf(address(this));\n\n    if (_want > 0) {\n\n      uint256 _fee = _want.mul(performanceFee).div(FEE_DENOMINATOR);\n\n      uint256 _reward = _want.mul(strategistReward).div(FEE_DENOMINATOR);\n\n      IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\n\n      IERC20(want).safeTransfer(strategist, _reward);\n\n      deposit();\n\n    }\n\n    VoterProxy(proxy).lock();\n\n    earned = earned.add(_want);\n\n    emit Harvest(_want, earned);\n",
          "message": "Reentrancy in StrategyCurveCompoundVoterProxy.harvest (StrategyCurveCompoundVoterProxy.sol#605-641):\n\tExternal calls:\n\t- VoterProxy(proxy).harvest(gauge) (StrategyCurveCompoundVoterProxy.sol#607)\n\t- _crv = IERC20(crv).balanceOf(address(this)) (StrategyCurveCompoundVoterProxy.sol#608)\n\t- Uni(uni).swapExactTokensForTokens(_crv,uint256(0),path,address(this),now.add(1800)) (StrategyCurveCompoundVoterProxy.sol#622)\n\t- _dai = IERC20(dai).balanceOf(address(this)) (StrategyCurveCompoundVoterProxy.sol#624)\n\t- ICurveFi(curve).add_liquidity((_dai,0),0) (StrategyCurveCompoundVoterProxy.sol#628)\n\t- _want = IERC20(want).balanceOf(address(this)) (StrategyCurveCompoundVoterProxy.sol#630)\n\t- IERC20(want).safeTransfer(IController(controller).rewards(),_fee) (StrategyCurveCompoundVoterProxy.sol#634)\n\t- deposit() (StrategyCurveCompoundVoterProxy.sol#636)\n\t- VoterProxy(proxy).lock() (StrategyCurveCompoundVoterProxy.sol#638)\n\tState variables written after the call(s):\n\t- earned (StrategyCurveCompoundVoterProxy.sol#639)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 289,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n    // for accounts without code, i.e. `keccak256('')`\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract uses assembly (StrategyCurveCompoundVoterProxy.sol#278-289)\n\t- StrategyCurveCompoundVoterProxy.sol#285-287\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": 641,
          "vulnerability_code": "  function harvest() public {\n\n    require(msg.sender == strategist || msg.sender == governance, '!authorized');\n\n    VoterProxy(proxy).harvest(gauge);\n\n    uint256 _crv = IERC20(crv).balanceOf(address(this));\n\n    if (_crv > 0) {\n\n      uint256 _keepCRV = _crv.mul(keepCRV).div(FEE_DENOMINATOR);\n\n      IERC20(crv).safeTransfer(voter, _keepCRV);\n\n      _crv = _crv.sub(_keepCRV);\n\n\n\n      IERC20(crv).safeApprove(uni, 0);\n\n      IERC20(crv).safeApprove(uni, _crv);\n\n\n\n      address[] memory path = new address[](3);\n\n      path[0] = crv;\n\n      path[1] = weth;\n\n      path[2] = dai;\n\n\n\n      Uni(uni).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n\n    }\n\n    uint256 _dai = IERC20(dai).balanceOf(address(this));\n\n    if (_dai > 0) {\n\n      IERC20(dai).safeApprove(curve, 0);\n\n      IERC20(dai).safeApprove(curve, _dai);\n\n      ICurveFi(curve).add_liquidity([_dai, 0], 0);\n\n    }\n\n    uint256 _want = IERC20(want).balanceOf(address(this));\n\n    if (_want > 0) {\n\n      uint256 _fee = _want.mul(performanceFee).div(FEE_DENOMINATOR);\n\n      uint256 _reward = _want.mul(strategistReward).div(FEE_DENOMINATOR);\n\n      IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\n\n      IERC20(want).safeTransfer(strategist, _reward);\n\n      deposit();\n\n    }\n\n    VoterProxy(proxy).lock();\n\n    earned = earned.add(_want);\n\n    emit Harvest(_want, earned);\n",
          "message": "StrategyCurveCompoundVoterProxy.harvest (StrategyCurveCompoundVoterProxy.sol#605-641) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 653,
          "vulnerability_code": "  function balanceOf() public view returns (uint256) {\n\n    return balanceOfWant().add(balanceOfPool());\n",
          "message": "StrategyCurveCompoundVoterProxy.balanceOf (StrategyCurveCompoundVoterProxy.sol#651-653) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in StrategyCurveCompoundVoterProxy.sol:\n\t- pragma solidity^0.5.17 (StrategyCurveCompoundVoterProxy.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 325,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n\n    require(address(this).balance >= amount, 'Address: insufficient balance');\n\n\n\n    // solhint-disable-next-line avoid-call-value\n\n    (bool success, ) = recipient.call.value(amount)('');\n\n    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Low level call in Address.sendValue (StrategyCurveCompoundVoterProxy.sol#319-325):\n\t-(success) = recipient.call.value(amount)() StrategyCurveCompoundVoterProxy.sol#323\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": 415,
          "vulnerability_code": "  function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n    // we're implementing it ourselves.\n\n\n\n    // A Solidity high level call has three parts:\n\n    //  1. The target address is checked to verify it contains contract code\n\n    //  2. The call itself is made, and success asserted\n\n    //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n    // solhint-disable-next-line max-line-length\n\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n\n\n\n    // solhint-disable-next-line avoid-low-level-calls\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n\n    require(success, 'SafeERC20: low-level call failed');\n\n\n\n    if (returndata.length > 0) {\n\n      // Return data is optional\n\n      // solhint-disable-next-line max-line-length\n\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n\n    }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyCurveCompoundVoterProxy.sol#395-415):\n\t-(success,returndata) = address(token).call(data) StrategyCurveCompoundVoterProxy.sol#407\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address, uint256) external;\n",
          "message": "Parameter '' of IController.withdraw (StrategyCurveCompoundVoterProxy.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IController.withdraw (StrategyCurveCompoundVoterProxy.sol#419) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of IController.balanceOf (StrategyCurveCompoundVoterProxy.sol#421) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function earn(address, uint256) external;\n",
          "message": "Parameter '' of IController.earn (StrategyCurveCompoundVoterProxy.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function earn(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IController.earn (StrategyCurveCompoundVoterProxy.sol#423) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 425,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function want(address) external view returns (address);\n",
          "message": "Parameter '' of IController.want (StrategyCurveCompoundVoterProxy.sol#425) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of IController.vaults (StrategyCurveCompoundVoterProxy.sol#429) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function strategies(address) external view returns (address);\n",
          "message": "Parameter '' of IController.strategies (StrategyCurveCompoundVoterProxy.sol#431) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deposit(uint256) external;\n",
          "message": "Parameter '' of Gauge.deposit (StrategyCurveCompoundVoterProxy.sol#435) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of Gauge.balanceOf (StrategyCurveCompoundVoterProxy.sol#437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256) external;\n",
          "message": "Parameter '' of Gauge.withdraw (StrategyCurveCompoundVoterProxy.sol#439) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address) external;\n",
          "message": "Parameter '' of Mintr.mint (StrategyCurveCompoundVoterProxy.sol#443) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 448,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of Uni.swapExactTokensForTokens (StrategyCurveCompoundVoterProxy.sol#448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 449,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '_scope_0' of Uni.swapExactTokensForTokens (StrategyCurveCompoundVoterProxy.sol#449) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata,\n",
          "message": "Parameter '_scope_1' of Uni.swapExactTokensForTokens (StrategyCurveCompoundVoterProxy.sol#450) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_2' of Uni.swapExactTokensForTokens (StrategyCurveCompoundVoterProxy.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_3' of Uni.swapExactTokensForTokens (StrategyCurveCompoundVoterProxy.sol#452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n",
          "message": "Function 'ICurveFi.add_liquidity' (StrategyCurveCompoundVoterProxy.sol#457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyCurveCompoundVoterProxy.sol#457) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _controller) public {\n",
          "message": "Parameter '_controller' of StrategyCurveCompoundVoterProxy. (StrategyCurveCompoundVoterProxy.sol#510) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": "Parameter '_strategist' of StrategyCurveCompoundVoterProxy.setStrategist (StrategyCurveCompoundVoterProxy.sol#520) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setKeepCRV(uint256 _keepCRV) external {\n",
          "message": "Parameter '_keepCRV' of StrategyCurveCompoundVoterProxy.setKeepCRV (StrategyCurveCompoundVoterProxy.sol#525) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": "Parameter '_withdrawalFee' of StrategyCurveCompoundVoterProxy.setWithdrawalFee (StrategyCurveCompoundVoterProxy.sol#530) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": "Parameter '_performanceFee' of StrategyCurveCompoundVoterProxy.setPerformanceFee (StrategyCurveCompoundVoterProxy.sol#535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategistReward(uint256 _strategistReward) external {\n",
          "message": "Parameter '_strategistReward' of StrategyCurveCompoundVoterProxy.setStrategistReward (StrategyCurveCompoundVoterProxy.sol#540) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setProxy(address _proxy) external {\n",
          "message": "Parameter '_proxy' of StrategyCurveCompoundVoterProxy.setProxy (StrategyCurveCompoundVoterProxy.sol#545) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(IERC20 _asset) external returns (uint256 balance) {\n",
          "message": "Parameter '_asset' of StrategyCurveCompoundVoterProxy.withdraw (StrategyCurveCompoundVoterProxy.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 _amount) external {\n",
          "message": "Parameter '_amount' of StrategyCurveCompoundVoterProxy.withdraw (StrategyCurveCompoundVoterProxy.sol#569) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": 587,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n\n    return VoterProxy(proxy).withdraw(gauge, want, _amount);\n",
          "message": "Function 'StrategyCurveCompoundVoterProxy._withdrawSome' (StrategyCurveCompoundVoterProxy.sol#585-587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n",
          "message": "Parameter '_amount' of StrategyCurveCompoundVoterProxy._withdrawSome (StrategyCurveCompoundVoterProxy.sol#585) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": 603,
          "vulnerability_code": "  function _withdrawAll() internal {\n\n    VoterProxy(proxy).withdrawAll(gauge, want);\n",
          "message": "Function 'StrategyCurveCompoundVoterProxy._withdrawAll' (StrategyCurveCompoundVoterProxy.sol#601-603) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": "Parameter '_governance' of StrategyCurveCompoundVoterProxy.setGovernance (StrategyCurveCompoundVoterProxy.sol#655) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyCurveCompoundVoterProxy.setController (StrategyCurveCompoundVoterProxy.sol#660) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.want' (StrategyCurveCompoundVoterProxy.sol#483) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.crv' (StrategyCurveCompoundVoterProxy.sol#484) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.uni' (StrategyCurveCompoundVoterProxy.sol#485) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for crv <> weth <> dai route\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.weth' (StrategyCurveCompoundVoterProxy.sol#486) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.dai' (StrategyCurveCompoundVoterProxy.sol#488) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant curve = address(0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.curve' (StrategyCurveCompoundVoterProxy.sol#489) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant gauge = address(0x7ca5b0a2910B33e9759DC7dDB0413949071D7575);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.gauge' (StrategyCurveCompoundVoterProxy.sol#491) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n",
          "message": "Constant 'StrategyCurveCompoundVoterProxy.voter' (StrategyCurveCompoundVoterProxy.sol#492) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0x845838DF265Dcd2c412A1Dc9e959c7d08537f8a2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for crv <> weth <> dai route\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 489,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant curve = address(0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant gauge = address(0x7ca5b0a2910B33e9759DC7dDB0413949071D7575);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setKeepCRV(uint256 _keepCRV) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 540,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategistReward(uint256 _strategistReward) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setProxy(address _proxy) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 660,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}