{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _controller,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _governance,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _proxy\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "    governance = _governance;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "    strategist = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "    controller = _controller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "    proxy = _proxy;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'SafeERC20: low-level call failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 572,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance || msg.sender == strategist, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 582,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 618,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(want != address(_asset), 'want');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 619,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(gusd3CRV != address(_asset), 'gusd3CRV');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(crv != address(_asset), 'crv');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(dai != address(_asset), 'dai');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 628,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == strategist || msg.sender == governance || msg.sender == tx.origin, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "curve-readonly-reentrancy",
          "vulnerability_from_line": 715,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return (balanceOfPool().mul(SWAP.get_virtual_price()).div(1e18)).div(1e16);\n",
          "message": "SWAP.get_virtual_price() call on a Curve pool is not protected from the read-only reentrancy."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 689,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Uni(uni).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_67"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 289,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n    // for accounts without code, i.e. `keccak256('')`\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract (StrategyCurveGUSDProxy.sol#278-289) is declared view but contains assembly code\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": 670,
          "vulnerability_code": "  function _withdrawAll() internal {\n\n    VoterProxy(proxy).withdrawAll(gauge, gusd3CRV);\n\n    IERC20(gusd3CRV).safeApprove(address(curveDeposit), 0);\n\n    IERC20(gusd3CRV).safeApprove(address(curveDeposit), IERC20(gusd3CRV).balanceOf(address(this)));\n\n    curveDeposit.remove_liquidity_one_coin(IERC20(gusd3CRV).balanceOf(address(this)), 0, 0); // Can have massive slippage, incredibly dangerous\n",
          "message": "StrategyCurveGUSDProxy._withdrawAll (StrategyCurveGUSDProxy.sol#665-670) does not use the value returned by external calls:\n\t-VoterProxy(proxy).withdrawAll(gauge,gusd3CRV) (StrategyCurveGUSDProxy.sol#666)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": 708,
          "vulnerability_code": "  function harvest() public {\n\n    require(msg.sender == strategist || msg.sender == governance || msg.sender == tx.origin, '!authorized');\n\n    VoterProxy(proxy).harvest(gauge);\n\n    uint256 _crv = IERC20(crv).balanceOf(address(this));\n\n    if (_crv > 0) {\n\n      uint256 _keepCRV = _crv.mul(keepCRV).div(FEE_DENOMINATOR);\n\n      IERC20(crv).safeTransfer(voter, _keepCRV);\n\n      _crv = _crv.sub(_keepCRV);\n\n\n\n      IERC20(crv).safeApprove(uni, 0);\n\n      IERC20(crv).safeApprove(uni, _crv);\n\n\n\n      address[] memory path = new address[](3);\n\n      path[0] = crv;\n\n      path[1] = weth;\n\n      path[2] = dai;\n\n\n\n      Uni(uni).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n\n    }\n\n    uint256 _dai = IERC20(dai).balanceOf(address(this));\n\n    if (_dai > 0) {\n\n      IERC20(dai).safeApprove(address(curveDeposit), 0);\n\n      IERC20(dai).safeApprove(address(curveDeposit), _dai);\n\n      curveDeposit.add_liquidity([0, _dai, 0, 0], 0);\n\n    }\n\n    uint256 _gusd3CRV = IERC20(gusd3CRV).balanceOf(address(this));\n\n    if (_gusd3CRV > 0) {\n\n      uint256 _fee = _gusd3CRV.mul(performanceFee).div(FEE_DENOMINATOR);\n\n      uint256 _reward = _gusd3CRV.mul(strategistReward).div(FEE_DENOMINATOR);\n\n      IERC20(gusd3CRV).safeTransfer(IController(controller).rewards(), _fee);\n\n      IERC20(gusd3CRV).safeTransfer(strategist, _reward);\n\n      deposit();\n\n    }\n\n    VoterProxy(proxy).lock();\n\n    earned = earned.add(_gusd3CRV);\n\n    emit Harvest(_gusd3CRV, earned);\n",
          "message": "Reentrancy in StrategyCurveGUSDProxy.harvest (StrategyCurveGUSDProxy.sol#672-708):\n\tExternal calls:\n\t- VoterProxy(proxy).harvest(gauge) (StrategyCurveGUSDProxy.sol#674)\n\t- _crv = IERC20(crv).balanceOf(address(this)) (StrategyCurveGUSDProxy.sol#675)\n\t- Uni(uni).swapExactTokensForTokens(_crv,uint256(0),path,address(this),now.add(1800)) (StrategyCurveGUSDProxy.sol#689)\n\t- _dai = IERC20(dai).balanceOf(address(this)) (StrategyCurveGUSDProxy.sol#691)\n\t- curveDeposit.add_liquidity((0,_dai,0,0),0) (StrategyCurveGUSDProxy.sol#695)\n\t- _gusd3CRV = IERC20(gusd3CRV).balanceOf(address(this)) (StrategyCurveGUSDProxy.sol#697)\n\t- IERC20(gusd3CRV).safeTransfer(IController(controller).rewards(),_fee) (StrategyCurveGUSDProxy.sol#701)\n\t- deposit() (StrategyCurveGUSDProxy.sol#703)\n\t- VoterProxy(proxy).lock() (StrategyCurveGUSDProxy.sol#705)\n\tState variables written after the call(s):\n\t- earned (StrategyCurveGUSDProxy.sol#706)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": 289,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n    // for accounts without code, i.e. `keccak256('')`\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract uses assembly (StrategyCurveGUSDProxy.sol#278-289)\n\t- StrategyCurveGUSDProxy.sol#285-287\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": 708,
          "vulnerability_code": "  function harvest() public {\n\n    require(msg.sender == strategist || msg.sender == governance || msg.sender == tx.origin, '!authorized');\n\n    VoterProxy(proxy).harvest(gauge);\n\n    uint256 _crv = IERC20(crv).balanceOf(address(this));\n\n    if (_crv > 0) {\n\n      uint256 _keepCRV = _crv.mul(keepCRV).div(FEE_DENOMINATOR);\n\n      IERC20(crv).safeTransfer(voter, _keepCRV);\n\n      _crv = _crv.sub(_keepCRV);\n\n\n\n      IERC20(crv).safeApprove(uni, 0);\n\n      IERC20(crv).safeApprove(uni, _crv);\n\n\n\n      address[] memory path = new address[](3);\n\n      path[0] = crv;\n\n      path[1] = weth;\n\n      path[2] = dai;\n\n\n\n      Uni(uni).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n\n    }\n\n    uint256 _dai = IERC20(dai).balanceOf(address(this));\n\n    if (_dai > 0) {\n\n      IERC20(dai).safeApprove(address(curveDeposit), 0);\n\n      IERC20(dai).safeApprove(address(curveDeposit), _dai);\n\n      curveDeposit.add_liquidity([0, _dai, 0, 0], 0);\n\n    }\n\n    uint256 _gusd3CRV = IERC20(gusd3CRV).balanceOf(address(this));\n\n    if (_gusd3CRV > 0) {\n\n      uint256 _fee = _gusd3CRV.mul(performanceFee).div(FEE_DENOMINATOR);\n\n      uint256 _reward = _gusd3CRV.mul(strategistReward).div(FEE_DENOMINATOR);\n\n      IERC20(gusd3CRV).safeTransfer(IController(controller).rewards(), _fee);\n\n      IERC20(gusd3CRV).safeTransfer(strategist, _reward);\n\n      deposit();\n\n    }\n\n    VoterProxy(proxy).lock();\n\n    earned = earned.add(_gusd3CRV);\n\n    emit Harvest(_gusd3CRV, earned);\n",
          "message": "StrategyCurveGUSDProxy.harvest (StrategyCurveGUSDProxy.sol#672-708) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": 724,
          "vulnerability_code": "  function balanceOf() public view returns (uint256) {\n\n    return balanceOfWant().add(balanceOfPoolInWant());\n",
          "message": "StrategyCurveGUSDProxy.balanceOf (StrategyCurveGUSDProxy.sol#722-724) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in StrategyCurveGUSDProxy.sol:\n\t- pragma solidity^0.5.17 (StrategyCurveGUSDProxy.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": 325,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n\n    require(address(this).balance >= amount, 'Address: insufficient balance');\n\n\n\n    // solhint-disable-next-line avoid-call-value\n\n    (bool success, ) = recipient.call.value(amount)('');\n\n    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Low level call in Address.sendValue (StrategyCurveGUSDProxy.sol#319-325):\n\t-(success) = recipient.call.value(amount)() StrategyCurveGUSDProxy.sol#323\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 395,
          "vulnerability_to_line": 415,
          "vulnerability_code": "  function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n    // we're implementing it ourselves.\n\n\n\n    // A Solidity high level call has three parts:\n\n    //  1. The target address is checked to verify it contains contract code\n\n    //  2. The call itself is made, and success asserted\n\n    //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n    // solhint-disable-next-line max-line-length\n\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n\n\n\n    // solhint-disable-next-line avoid-low-level-calls\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n\n    require(success, 'SafeERC20: low-level call failed');\n\n\n\n    if (returndata.length > 0) {\n\n      // Return data is optional\n\n      // solhint-disable-next-line max-line-length\n\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n\n    }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyCurveGUSDProxy.sol#395-415):\n\t-(success,returndata) = address(token).call(data) StrategyCurveGUSDProxy.sol#407\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address, uint256) external;\n",
          "message": "Parameter '' of IController.withdraw (StrategyCurveGUSDProxy.sol#420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IController.withdraw (StrategyCurveGUSDProxy.sol#420) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of IController.balanceOf (StrategyCurveGUSDProxy.sol#422) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function earn(address, uint256) external;\n",
          "message": "Parameter '' of IController.earn (StrategyCurveGUSDProxy.sol#424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function earn(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of IController.earn (StrategyCurveGUSDProxy.sol#424) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 426,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function want(address) external view returns (address);\n",
          "message": "Parameter '' of IController.want (StrategyCurveGUSDProxy.sol#426) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of IController.vaults (StrategyCurveGUSDProxy.sol#430) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function strategies(address) external view returns (address);\n",
          "message": "Parameter '' of IController.strategies (StrategyCurveGUSDProxy.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function deposit(uint256) external;\n",
          "message": "Parameter '' of Gauge.deposit (StrategyCurveGUSDProxy.sol#437) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of Gauge.balanceOf (StrategyCurveGUSDProxy.sol#439) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256) external;\n",
          "message": "Parameter '' of Gauge.withdraw (StrategyCurveGUSDProxy.sol#441) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address) external;\n",
          "message": "Parameter '' of Mintr.mint (StrategyCurveGUSDProxy.sol#446) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of Uni.swapExactTokensForTokens (StrategyCurveGUSDProxy.sol#452) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '_scope_0' of Uni.swapExactTokensForTokens (StrategyCurveGUSDProxy.sol#453) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata,\n",
          "message": "Parameter '_scope_1' of Uni.swapExactTokensForTokens (StrategyCurveGUSDProxy.sol#454) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_2' of Uni.swapExactTokensForTokens (StrategyCurveGUSDProxy.sol#455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_3' of Uni.swapExactTokensForTokens (StrategyCurveGUSDProxy.sol#456) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add_liquidity(uint256[4] calldata, uint256) external;\n",
          "message": "Function 'CurveDeposit.add_liquidity' (StrategyCurveGUSDProxy.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add_liquidity(uint256[4] calldata, uint256) external;\n",
          "message": "Parameter '' of CurveDeposit.add_liquidity (StrategyCurveGUSDProxy.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function add_liquidity(uint256[4] calldata, uint256) external;\n",
          "message": "Parameter '_scope_0' of CurveDeposit.add_liquidity (StrategyCurveGUSDProxy.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": 467,
          "vulnerability_code": "  function remove_liquidity_one_coin(\n\n    uint256,\n\n    int128,\n\n    uint256\n",
          "message": "Function 'CurveDeposit.remove_liquidity_one_coin' (StrategyCurveGUSDProxy.sol#463-467) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of CurveDeposit.remove_liquidity_one_coin (StrategyCurveGUSDProxy.sol#464) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int128,\n",
          "message": "Parameter '_scope_0' of CurveDeposit.remove_liquidity_one_coin (StrategyCurveGUSDProxy.sol#465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_1' of CurveDeposit.remove_liquidity_one_coin (StrategyCurveGUSDProxy.sol#466) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function get_virtual_price() external view returns (uint256);\n",
          "message": "Function 'ICurveFi.get_virtual_price' (StrategyCurveGUSDProxy.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": 478,
          "vulnerability_code": "  function add_liquidity(\n\n    // GUSD pool\n\n    uint256[4] calldata amounts,\n\n    uint256 min_mint_amount\n",
          "message": "Function 'ICurveFi.add_liquidity' (StrategyCurveGUSDProxy.sol#474-478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 min_mint_amount\n",
          "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyCurveGUSDProxy.sol#477) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\n",
          "message": "Function 'ICurveFi.remove_liquidity_imbalance' (StrategyCurveGUSDProxy.sol#480) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 480,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\n",
          "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (StrategyCurveGUSDProxy.sol#480) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function remove_liquidity(uint256 _amount, uint256[4] calldata amounts) external;\n",
          "message": "Function 'ICurveFi.remove_liquidity' (StrategyCurveGUSDProxy.sol#482) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _from_amount,\n",
          "message": "Parameter '_from_amount' of ICurveFi.exchange (StrategyCurveGUSDProxy.sol#487) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _min_to_amount\n",
          "message": "Parameter '_min_to_amount' of ICurveFi.exchange (StrategyCurveGUSDProxy.sol#488) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": 500,
          "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n\n\n  function withdraw(uint256 _amount) external;\n\n\n\n  function getPricePerFullShare() external view returns (uint256);\n",
          "message": "Contract 'yERC20' (StrategyCurveGUSDProxy.sol#494-500) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _controller,\n",
          "message": "Parameter '_controller' of StrategyCurveGUSDProxy. (StrategyCurveGUSDProxy.sol#557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _governance,\n",
          "message": "Parameter '_governance' of StrategyCurveGUSDProxy. (StrategyCurveGUSDProxy.sol#558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _proxy\n",
          "message": "Parameter '_proxy' of StrategyCurveGUSDProxy. (StrategyCurveGUSDProxy.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": "Parameter '_strategist' of StrategyCurveGUSDProxy.setStrategist (StrategyCurveGUSDProxy.sol#571) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setKeepCRV(uint256 _keepCRV) external {\n",
          "message": "Parameter '_keepCRV' of StrategyCurveGUSDProxy.setKeepCRV (StrategyCurveGUSDProxy.sol#576) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": "Parameter '_withdrawalFee' of StrategyCurveGUSDProxy.setWithdrawalFee (StrategyCurveGUSDProxy.sol#581) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": "Parameter '_performanceFee' of StrategyCurveGUSDProxy.setPerformanceFee (StrategyCurveGUSDProxy.sol#586) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategistReward(uint256 _strategistReward) external {\n",
          "message": "Parameter '_strategistReward' of StrategyCurveGUSDProxy.setStrategistReward (StrategyCurveGUSDProxy.sol#591) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setProxy(address _proxy) external {\n",
          "message": "Parameter '_proxy' of StrategyCurveGUSDProxy.setProxy (StrategyCurveGUSDProxy.sol#596) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(IERC20 _asset) external returns (uint256 balance) {\n",
          "message": "Parameter '_asset' of StrategyCurveGUSDProxy.withdraw (StrategyCurveGUSDProxy.sol#616) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 _amount) external {\n",
          "message": "Parameter '_amount' of StrategyCurveGUSDProxy.withdraw (StrategyCurveGUSDProxy.sol#627) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 643,
          "vulnerability_to_line": 651,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n\n    uint256 _withdrawn = VoterProxy(proxy).withdraw(gauge, gusd3CRV, _amount);\n\n    IERC20(gusd3CRV).safeApprove(address(curveDeposit), 0);\n\n    IERC20(gusd3CRV).safeApprove(address(curveDeposit), _withdrawn);\n\n    uint256 _before = IERC20(want).balanceOf(address(this));\n\n    curveDeposit.remove_liquidity_one_coin(_withdrawn, 0, 0); // Need a withdraw fallback, but GUSD needs more liquidity first\n\n    uint256 _after = IERC20(want).balanceOf(address(this));\n\n    return _after.sub(_before);\n",
          "message": "Function 'StrategyCurveGUSDProxy._withdrawSome' (StrategyCurveGUSDProxy.sol#643-651) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 643,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n",
          "message": "Parameter '_amount' of StrategyCurveGUSDProxy._withdrawSome (StrategyCurveGUSDProxy.sol#643) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": 670,
          "vulnerability_code": "  function _withdrawAll() internal {\n\n    VoterProxy(proxy).withdrawAll(gauge, gusd3CRV);\n\n    IERC20(gusd3CRV).safeApprove(address(curveDeposit), 0);\n\n    IERC20(gusd3CRV).safeApprove(address(curveDeposit), IERC20(gusd3CRV).balanceOf(address(this)));\n\n    curveDeposit.remove_liquidity_one_coin(IERC20(gusd3CRV).balanceOf(address(this)), 0, 0); // Can have massive slippage, incredibly dangerous\n",
          "message": "Function 'StrategyCurveGUSDProxy._withdrawAll' (StrategyCurveGUSDProxy.sol#665-670) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": "Parameter '_governance' of StrategyCurveGUSDProxy.setGovernance (StrategyCurveGUSDProxy.sol#726) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyCurveGUSDProxy.setController (StrategyCurveGUSDProxy.sol#731) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd); // GUSD\n",
          "message": "Constant 'StrategyCurveGUSDProxy.want' (StrategyCurveGUSDProxy.sol#526) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant gusd3CRV = address(0xD2967f45c4f384DEEa880F807Be904762a3DeA07);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.gusd3CRV' (StrategyCurveGUSDProxy.sol#527) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.crv' (StrategyCurveGUSDProxy.sol#528) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.uni' (StrategyCurveGUSDProxy.sol#529) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for crv <> weth <> dai route\n",
          "message": "Constant 'StrategyCurveGUSDProxy.weth' (StrategyCurveGUSDProxy.sol#530) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.dai' (StrategyCurveGUSDProxy.sol#532) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "  CurveDeposit public constant curveDeposit = CurveDeposit(0x0aE274c98c0415C0651AF8cF52b010136E4a0082);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.curveDeposit' (StrategyCurveGUSDProxy.sol#533) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant gauge = address(0xC5cfaDA84E902aD92DD40194f0883ad49639b023);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.gauge' (StrategyCurveGUSDProxy.sol#535) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n",
          "message": "Constant 'StrategyCurveGUSDProxy.voter' (StrategyCurveGUSDProxy.sol#536) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd); // GUSD\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant gusd3CRV = address(0xD2967f45c4f384DEEa880F807Be904762a3DeA07);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for crv <> weth <> dai route\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 533,
          "vulnerability_to_line": null,
          "vulnerability_code": "  CurveDeposit public constant curveDeposit = CurveDeposit(0x0aE274c98c0415C0651AF8cF52b010136E4a0082);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant gauge = address(0xC5cfaDA84E902aD92DD40194f0883ad49639b023);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ICurveFi public constant SWAP = ICurveFi(0x4f062658EaAF2C1ccf8C8e36D6824CDf41167956);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setKeepCRV(uint256 _keepCRV) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 581,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategistReward(uint256 _strategistReward) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setProxy(address _proxy) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 731,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 368,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 377,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 319,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}