{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _controller) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "    governance = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "    strategist = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    harvester = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "    controller = _controller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    cdpId = ManagerLike(cdp_manager).open(ilk, address(this));\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _approveAll();\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'SafeERC20: low-level call failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 452,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 457,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == harvester || msg.sender == governance, '!allowed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(_checkDebtCeiling(_draw), 'debt ceiling is reached!');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 569,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(y >= 0, 'int-overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(want != address(_asset), 'want');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(dai != address(_asset), 'dai');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(yVaultDAI != address(_asset), 'ydai');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 584,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 595,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 642,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == strategist || msg.sender == harvester || msg.sender == governance, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(v > d, 'profit is not realized yet!');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 749,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance || msg.sender == strategist || msg.sender == harvester, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 831,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 601,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (getTotalDebtAmount() != 0 && getmVaultRatio(_amount) < c_safe.mul(1e2)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 602,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint256 p = _getPrice();\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _wipe(_withdrawDaiLeast(_amount.mul(p).div(1e18)));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 604,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Uni(unirouter).swapExactTokensForTokens(_amountIn, 0, path, address(this), now.add(1 days));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_28"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 105,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyMKRVaultDAIDelegate.sol#97-105) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": 205,
          "vulnerability_code": "interface GemLike {\n\n  function approve(address, uint256) external;\n\n\n\n  function transfer(address, uint256) external;\n\n\n\n  function transferFrom(\n\n    address,\n\n    address,\n\n    uint256\n\n  ) external;\n\n\n\n  function deposit() external payable;\n\n\n\n  function withdraw(uint256) external;\n",
          "message": "GemLike (StrategyMKRVaultDAIDelegate.sol#191-205) has incorrect ERC20 function interface(s):\n\t-approve (StrategyMKRVaultDAIDelegate.sol#192)\n\t-transfer (StrategyMKRVaultDAIDelegate.sol#194)\n\t-transferFrom (StrategyMKRVaultDAIDelegate.sol#196-200)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": 513,
          "vulnerability_code": "  function _approveAll() internal {\n\n    IERC20(token).approve(mcd_join_eth_a, uint256(-1));\n\n    IERC20(dai).approve(mcd_join_dai, uint256(-1));\n\n    IERC20(dai).approve(yVaultDAI, uint256(-1));\n\n    IERC20(dai).approve(unirouter, uint256(-1));\n",
          "message": "StrategyMKRVaultDAIDelegate._approveAll (StrategyMKRVaultDAIDelegate.sol#508-513) does not use the value returned by external calls:\n\t-IERC20(token).approve(mcd_join_eth_a,uint256(- 1)) (StrategyMKRVaultDAIDelegate.sol#509)\n\t-IERC20(dai).approve(mcd_join_dai,uint256(- 1)) (StrategyMKRVaultDAIDelegate.sol#510)\n\t-IERC20(dai).approve(yVaultDAI,uint256(- 1)) (StrategyMKRVaultDAIDelegate.sol#511)\n\t-IERC20(dai).approve(unirouter,uint256(- 1)) (StrategyMKRVaultDAIDelegate.sol#512)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": 506,
          "vulnerability_code": "  function setMCDValue(\n\n    address _manager,\n\n    address _ethAdapter,\n\n    address _daiAdapter,\n\n    address _spot,\n\n    address _jug\n\n  ) external {\n\n    require(msg.sender == governance, '!governance');\n\n    cdp_manager = _manager;\n\n    vat = ManagerLike(_manager).vat();\n\n    mcd_join_eth_a = _ethAdapter;\n\n    mcd_join_dai = _daiAdapter;\n\n    mcd_spot = _spot;\n\n    jug = _jug;\n",
          "message": "Reentrancy in StrategyMKRVaultDAIDelegate.setMCDValue (StrategyMKRVaultDAIDelegate.sol#492-506):\n\tExternal calls:\n\t- vat = ManagerLike(_manager).vat() (StrategyMKRVaultDAIDelegate.sol#501)\n\tState variables written after the call(s):\n\t- jug (StrategyMKRVaultDAIDelegate.sol#505)\n\t- mcd_join_dai (StrategyMKRVaultDAIDelegate.sol#503)\n\t- mcd_join_eth_a (StrategyMKRVaultDAIDelegate.sol#502)\n\t- mcd_spot (StrategyMKRVaultDAIDelegate.sol#504)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 105,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyMKRVaultDAIDelegate.sol#97-105)\n\t- StrategyMKRVaultDAIDelegate.sol#101-103\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 652,
          "vulnerability_to_line": 654,
          "vulnerability_code": "  function balanceOf() public view returns (uint256) {\n\n    return balanceOfWant().add(balanceOfmVault());\n",
          "message": "StrategyMKRVaultDAIDelegate.balanceOf (StrategyMKRVaultDAIDelegate.sol#652-654) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 667,
          "vulnerability_to_line": 688,
          "vulnerability_code": "  function harvest() public {\n\n    require(msg.sender == strategist || msg.sender == harvester || msg.sender == governance, '!authorized');\n\n\n\n    uint256 v = getUnderlyingDai();\n\n    uint256 d = getTotalDebtAmount();\n\n    require(v > d, 'profit is not realized yet!');\n\n    uint256 profit = v.sub(d);\n\n\n\n    uint256 _before = IERC20(want).balanceOf(address(this));\n\n    _swap(_withdrawDaiMost(profit));\n\n    uint256 _after = IERC20(want).balanceOf(address(this));\n\n\n\n    uint256 _want = _after.sub(_before);\n\n    if (_want > 0) {\n\n      uint256 _fee = _want.mul(performanceFee).div(performanceMax);\n\n      uint256 _strategistReward = _fee.mul(strategistReward).div(strategistRewardMax);\n\n      IERC20(want).safeTransfer(strategist, _strategistReward);\n\n      IERC20(want).safeTransfer(Controller(controller).rewards(), _fee.sub(_strategistReward));\n\n    }\n\n\n\n    deposit();\n",
          "message": "StrategyMKRVaultDAIDelegate.harvest (StrategyMKRVaultDAIDelegate.sol#667-688) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in StrategyMKRVaultDAIDelegate.sol:\n\t- pragma solidity^0.5.17 (StrategyMKRVaultDAIDelegate.sol#7): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": 117,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n\n    require(address(this).balance >= amount, 'Address: insufficient balance');\n\n\n\n    // solhint-disable-next-line avoid-call-value\n\n    (bool success, ) = recipient.call.value(amount)('');\n\n    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Low level call in Address.sendValue (StrategyMKRVaultDAIDelegate.sol#111-117):\n\t-(success) = recipient.call.value(amount)() StrategyMKRVaultDAIDelegate.sol#115\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 162,
          "vulnerability_code": "  function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n\n\n\n    // solhint-disable-next-line avoid-low-level-calls\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n\n    require(success, 'SafeERC20: low-level call failed');\n\n\n\n    if (returndata.length > 0) {\n\n      // Return data is optional\n\n      // solhint-disable-next-line max-line-length\n\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n\n    }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyMKRVaultDAIDelegate.sol#150-162):\n\t-(success,returndata) = address(token).call(data) StrategyMKRVaultDAIDelegate.sol#154\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 175,
          "vulnerability_code": "interface yVault {\n\n  function getPricePerFullShare() external view returns (uint256);\n\n\n\n  function balanceOf(address) external view returns (uint256);\n\n\n\n  function depositAll() external;\n\n\n\n  function withdraw(uint256 _shares) external;\n\n\n\n  function withdrawAll() external;\n",
          "message": "Contract 'yVault' (StrategyMKRVaultDAIDelegate.sol#165-175) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of yVault.balanceOf (StrategyMKRVaultDAIDelegate.sol#168) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyMKRVaultDAIDelegate.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 180,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function strategies(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.strategies (StrategyMKRVaultDAIDelegate.sol#180) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) external;\n",
          "message": "Parameter '' of GemLike.approve (StrategyMKRVaultDAIDelegate.sol#192) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of GemLike.approve (StrategyMKRVaultDAIDelegate.sol#192) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) external;\n",
          "message": "Parameter '' of GemLike.transfer (StrategyMKRVaultDAIDelegate.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of GemLike.transfer (StrategyMKRVaultDAIDelegate.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '' of GemLike.transferFrom (StrategyMKRVaultDAIDelegate.sol#197) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_0' of GemLike.transferFrom (StrategyMKRVaultDAIDelegate.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_1' of GemLike.transferFrom (StrategyMKRVaultDAIDelegate.sol#199) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256) external;\n",
          "message": "Parameter '' of GemLike.withdraw (StrategyMKRVaultDAIDelegate.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '' of ManagerLike.cdpCan (StrategyMKRVaultDAIDelegate.sol#209) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '_scope_0' of ManagerLike.cdpCan (StrategyMKRVaultDAIDelegate.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address\n",
          "message": "Parameter '_scope_1' of ManagerLike.cdpCan (StrategyMKRVaultDAIDelegate.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ilks(uint256) external view returns (bytes32);\n",
          "message": "Parameter '' of ManagerLike.ilks (StrategyMKRVaultDAIDelegate.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function owns(uint256) external view returns (address);\n",
          "message": "Parameter '' of ManagerLike.owns (StrategyMKRVaultDAIDelegate.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function urns(uint256) external view returns (address);\n",
          "message": "Parameter '' of ManagerLike.urns (StrategyMKRVaultDAIDelegate.sol#218) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function open(bytes32, address) external returns (uint256);\n",
          "message": "Parameter '' of ManagerLike.open (StrategyMKRVaultDAIDelegate.sol#222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function open(bytes32, address) external returns (uint256);\n",
          "message": "Parameter '_scope_0' of ManagerLike.open (StrategyMKRVaultDAIDelegate.sol#222) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function give(uint256, address) external;\n",
          "message": "Parameter '' of ManagerLike.give (StrategyMKRVaultDAIDelegate.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function give(uint256, address) external;\n",
          "message": "Parameter '_scope_0' of ManagerLike.give (StrategyMKRVaultDAIDelegate.sol#224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of ManagerLike.cdpAllow (StrategyMKRVaultDAIDelegate.sol#227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_0' of ManagerLike.cdpAllow (StrategyMKRVaultDAIDelegate.sol#228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_1' of ManagerLike.cdpAllow (StrategyMKRVaultDAIDelegate.sol#229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function urnAllow(address, uint256) external;\n",
          "message": "Parameter '' of ManagerLike.urnAllow (StrategyMKRVaultDAIDelegate.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function urnAllow(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of ManagerLike.urnAllow (StrategyMKRVaultDAIDelegate.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of ManagerLike.frob (StrategyMKRVaultDAIDelegate.sol#235) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int256,\n",
          "message": "Parameter '_scope_0' of ManagerLike.frob (StrategyMKRVaultDAIDelegate.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int256\n",
          "message": "Parameter '_scope_1' of ManagerLike.frob (StrategyMKRVaultDAIDelegate.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of ManagerLike.flux (StrategyMKRVaultDAIDelegate.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_0' of ManagerLike.flux (StrategyMKRVaultDAIDelegate.sol#242) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_1' of ManagerLike.flux (StrategyMKRVaultDAIDelegate.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of ManagerLike.move (StrategyMKRVaultDAIDelegate.sol#247) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_0' of ManagerLike.move (StrategyMKRVaultDAIDelegate.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_1' of ManagerLike.move (StrategyMKRVaultDAIDelegate.sol#249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '' of ManagerLike.exit (StrategyMKRVaultDAIDelegate.sol#253) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '_scope_0' of ManagerLike.exit (StrategyMKRVaultDAIDelegate.sol#254) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_1' of ManagerLike.exit (StrategyMKRVaultDAIDelegate.sol#255) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_2' of ManagerLike.exit (StrategyMKRVaultDAIDelegate.sol#256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function quit(uint256, address) external;\n",
          "message": "Parameter '' of ManagerLike.quit (StrategyMKRVaultDAIDelegate.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function quit(uint256, address) external;\n",
          "message": "Parameter '_scope_0' of ManagerLike.quit (StrategyMKRVaultDAIDelegate.sol#259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function enter(address, uint256) external;\n",
          "message": "Parameter '' of ManagerLike.enter (StrategyMKRVaultDAIDelegate.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function enter(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of ManagerLike.enter (StrategyMKRVaultDAIDelegate.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function shift(uint256, uint256) external;\n",
          "message": "Parameter '' of ManagerLike.shift (StrategyMKRVaultDAIDelegate.sol#263) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function shift(uint256, uint256) external;\n",
          "message": "Parameter '_scope_0' of ManagerLike.shift (StrategyMKRVaultDAIDelegate.sol#263) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function can(address, address) external view returns (uint256);\n",
          "message": "Parameter '' of VatLike.can (StrategyMKRVaultDAIDelegate.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function can(address, address) external view returns (uint256);\n",
          "message": "Parameter '_scope_0' of VatLike.can (StrategyMKRVaultDAIDelegate.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ilks(bytes32)\n",
          "message": "Parameter '' of VatLike.ilks (StrategyMKRVaultDAIDelegate.sol#269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dai(address) external view returns (uint256);\n",
          "message": "Parameter '' of VatLike.dai (StrategyMKRVaultDAIDelegate.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function urns(bytes32, address) external view returns (uint256, uint256);\n",
          "message": "Parameter '' of VatLike.urns (StrategyMKRVaultDAIDelegate.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function urns(bytes32, address) external view returns (uint256, uint256);\n",
          "message": "Parameter '_scope_0' of VatLike.urns (StrategyMKRVaultDAIDelegate.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32,\n",
          "message": "Parameter '' of VatLike.frob (StrategyMKRVaultDAIDelegate.sol#285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_0' of VatLike.frob (StrategyMKRVaultDAIDelegate.sol#286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_1' of VatLike.frob (StrategyMKRVaultDAIDelegate.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_2' of VatLike.frob (StrategyMKRVaultDAIDelegate.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int256,\n",
          "message": "Parameter '_scope_3' of VatLike.frob (StrategyMKRVaultDAIDelegate.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    int256\n",
          "message": "Parameter '_scope_4' of VatLike.frob (StrategyMKRVaultDAIDelegate.sol#290) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hope(address) external;\n",
          "message": "Parameter '' of VatLike.hope (StrategyMKRVaultDAIDelegate.sol#293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '' of VatLike.move (StrategyMKRVaultDAIDelegate.sol#296) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_0' of VatLike.move (StrategyMKRVaultDAIDelegate.sol#297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_1' of VatLike.move (StrategyMKRVaultDAIDelegate.sol#298) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function join(address, uint256) external payable;\n",
          "message": "Parameter '' of GemJoinLike.join (StrategyMKRVaultDAIDelegate.sol#307) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function join(address, uint256) external payable;\n",
          "message": "Parameter '_scope_0' of GemJoinLike.join (StrategyMKRVaultDAIDelegate.sol#307) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exit(address, uint256) external;\n",
          "message": "Parameter '' of GemJoinLike.exit (StrategyMKRVaultDAIDelegate.sol#309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 309,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exit(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of GemJoinLike.exit (StrategyMKRVaultDAIDelegate.sol#309) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function bags(address) external view returns (address);\n",
          "message": "Parameter '' of GNTJoinLike.bags (StrategyMKRVaultDAIDelegate.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 315,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function make(address) external returns (address);\n",
          "message": "Parameter '' of GNTJoinLike.make (StrategyMKRVaultDAIDelegate.sol#315) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function join(address, uint256) external payable;\n",
          "message": "Parameter '' of DaiJoinLike.join (StrategyMKRVaultDAIDelegate.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function join(address, uint256) external payable;\n",
          "message": "Parameter '_scope_0' of DaiJoinLike.join (StrategyMKRVaultDAIDelegate.sol#323) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exit(address, uint256) external;\n",
          "message": "Parameter '' of DaiJoinLike.exit (StrategyMKRVaultDAIDelegate.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exit(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of DaiJoinLike.exit (StrategyMKRVaultDAIDelegate.sol#325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function hope(address) external;\n",
          "message": "Parameter '' of HopeLike.hope (StrategyMKRVaultDAIDelegate.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 331,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function nope(address) external;\n",
          "message": "Parameter '' of HopeLike.nope (StrategyMKRVaultDAIDelegate.sol#331) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function fix(bytes32) external view returns (uint256);\n",
          "message": "Parameter '' of EndLike.fix (StrategyMKRVaultDAIDelegate.sol#335) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function cash(bytes32, uint256) external;\n",
          "message": "Parameter '' of EndLike.cash (StrategyMKRVaultDAIDelegate.sol#337) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function cash(bytes32, uint256) external;\n",
          "message": "Parameter '_scope_0' of EndLike.cash (StrategyMKRVaultDAIDelegate.sol#337) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function free(bytes32) external;\n",
          "message": "Parameter '' of EndLike.free (StrategyMKRVaultDAIDelegate.sol#339) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pack(uint256) external;\n",
          "message": "Parameter '' of EndLike.pack (StrategyMKRVaultDAIDelegate.sol#341) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function skim(bytes32, address) external;\n",
          "message": "Parameter '' of EndLike.skim (StrategyMKRVaultDAIDelegate.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function skim(bytes32, address) external;\n",
          "message": "Parameter '_scope_0' of EndLike.skim (StrategyMKRVaultDAIDelegate.sol#343) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function drip(bytes32) external returns (uint256);\n",
          "message": "Parameter '' of JugLike.drip (StrategyMKRVaultDAIDelegate.sol#347) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function pie(address) external view returns (uint256);\n",
          "message": "Parameter '' of PotLike.pie (StrategyMKRVaultDAIDelegate.sol#351) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function join(uint256) external;\n",
          "message": "Parameter '' of PotLike.join (StrategyMKRVaultDAIDelegate.sol#355) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function exit(uint256) external;\n",
          "message": "Parameter '' of PotLike.exit (StrategyMKRVaultDAIDelegate.sol#357) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ilks(bytes32) external view returns (address, uint256);\n",
          "message": "Parameter '' of SpotLike.ilks (StrategyMKRVaultDAIDelegate.sol#361) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of Uni.swapExactTokensForTokens (StrategyMKRVaultDAIDelegate.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '_scope_0' of Uni.swapExactTokensForTokens (StrategyMKRVaultDAIDelegate.sol#373) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata,\n",
          "message": "Parameter '_scope_1' of Uni.swapExactTokensForTokens (StrategyMKRVaultDAIDelegate.sol#374) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 375,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_2' of Uni.swapExactTokensForTokens (StrategyMKRVaultDAIDelegate.sol#375) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 376,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_3' of Uni.swapExactTokensForTokens (StrategyMKRVaultDAIDelegate.sol#376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _controller) public {\n",
          "message": "Parameter '_controller' of StrategyMKRVaultDAIDelegate. (StrategyMKRVaultDAIDelegate.sol#438) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": "Parameter '_strategist' of StrategyMKRVaultDAIDelegate.setStrategist (StrategyMKRVaultDAIDelegate.sol#451) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setHarvester(address _harvester) external {\n",
          "message": "Parameter '_harvester' of StrategyMKRVaultDAIDelegate.setHarvester (StrategyMKRVaultDAIDelegate.sol#456) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": "Parameter '_withdrawalFee' of StrategyMKRVaultDAIDelegate.setWithdrawalFee (StrategyMKRVaultDAIDelegate.sol#461) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": "Parameter '_performanceFee' of StrategyMKRVaultDAIDelegate.setPerformanceFee (StrategyMKRVaultDAIDelegate.sol#466) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategistReward(uint256 _strategistReward) external {\n",
          "message": "Parameter '_strategistReward' of StrategyMKRVaultDAIDelegate.setStrategistReward (StrategyMKRVaultDAIDelegate.sol#471) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBorrowCollateralizationRatio(uint256 _c) external {\n",
          "message": "Parameter '_c' of StrategyMKRVaultDAIDelegate.setBorrowCollateralizationRatio (StrategyMKRVaultDAIDelegate.sol#476) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawCollateralizationRatio(uint256 _c_safe) external {\n",
          "message": "Parameter '_c_safe' of StrategyMKRVaultDAIDelegate.setWithdrawCollateralizationRatio (StrategyMKRVaultDAIDelegate.sol#481) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setOracle(address _oracle) external {\n",
          "message": "Parameter '_oracle' of StrategyMKRVaultDAIDelegate.setOracle (StrategyMKRVaultDAIDelegate.sol#486) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _manager,\n",
          "message": "Parameter '_manager' of StrategyMKRVaultDAIDelegate.setMCDValue (StrategyMKRVaultDAIDelegate.sol#493) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _ethAdapter,\n",
          "message": "Parameter '_ethAdapter' of StrategyMKRVaultDAIDelegate.setMCDValue (StrategyMKRVaultDAIDelegate.sol#494) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _daiAdapter,\n",
          "message": "Parameter '_daiAdapter' of StrategyMKRVaultDAIDelegate.setMCDValue (StrategyMKRVaultDAIDelegate.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 496,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _spot,\n",
          "message": "Parameter '_spot' of StrategyMKRVaultDAIDelegate.setMCDValue (StrategyMKRVaultDAIDelegate.sol#496) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address _jug\n",
          "message": "Parameter '_jug' of StrategyMKRVaultDAIDelegate.setMCDValue (StrategyMKRVaultDAIDelegate.sol#497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": 513,
          "vulnerability_code": "  function _approveAll() internal {\n\n    IERC20(token).approve(mcd_join_eth_a, uint256(-1));\n\n    IERC20(dai).approve(mcd_join_dai, uint256(-1));\n\n    IERC20(dai).approve(yVaultDAI, uint256(-1));\n\n    IERC20(dai).approve(unirouter, uint256(-1));\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._approveAll' (StrategyMKRVaultDAIDelegate.sol#508-513) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": 532,
          "vulnerability_code": "  function _getPrice() internal view returns (uint256 p) {\n\n    (uint256 _read, ) = OSMedianizer(eth_price_oracle).read();\n\n    (uint256 _foresight, ) = OSMedianizer(eth_price_oracle).foresight();\n\n    p = _foresight < _read ? _foresight : _read;\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._getPrice' (StrategyMKRVaultDAIDelegate.sol#528-532) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": 541,
          "vulnerability_code": "  function _checkDebtCeiling(uint256 _amt) internal view returns (bool) {\n\n    (, , , uint256 _line, ) = VatLike(vat).ilks(ilk);\n\n    uint256 _debt = getTotalDebtAmount().add(_amt);\n\n    if (_line.div(1e27) < _debt) {\n\n      return false;\n\n    }\n\n    return true;\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._checkDebtCeiling' (StrategyMKRVaultDAIDelegate.sol#534-541) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 534,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _checkDebtCeiling(uint256 _amt) internal view returns (bool) {\n",
          "message": "Parameter '_amt' of StrategyMKRVaultDAIDelegate._checkDebtCeiling (StrategyMKRVaultDAIDelegate.sol#534) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 543,
          "vulnerability_to_line": 554,
          "vulnerability_code": "  function _lockWETHAndDrawDAI(uint256 wad, uint256 wadD) internal {\n\n    address urn = ManagerLike(cdp_manager).urns(cdpId);\n\n\n\n    // GemJoinLike(mcd_join_eth_a).gem().approve(mcd_join_eth_a, wad);\n\n    GemJoinLike(mcd_join_eth_a).join(urn, wad);\n\n    ManagerLike(cdp_manager).frob(cdpId, toInt(wad), _getDrawDart(urn, wadD));\n\n    ManagerLike(cdp_manager).move(cdpId, address(this), wadD.mul(1e27));\n\n    if (VatLike(vat).can(address(this), address(mcd_join_dai)) == 0) {\n\n      VatLike(vat).hope(mcd_join_dai);\n\n    }\n\n    DaiJoinLike(mcd_join_dai).exit(address(this), wadD);\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._lockWETHAndDrawDAI' (StrategyMKRVaultDAIDelegate.sol#543-554) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": 565,
          "vulnerability_code": "  function _getDrawDart(address urn, uint256 wad) internal returns (int256 dart) {\n\n    uint256 rate = JugLike(jug).drip(ilk);\n\n    uint256 _dai = VatLike(vat).dai(urn);\n\n\n\n    // If there was already enough DAI in the vat balance, just exits it without adding more debt\n\n    if (_dai < wad.mul(1e27)) {\n\n      dart = toInt(wad.mul(1e27).sub(_dai).div(rate));\n\n      dart = uint256(dart).mul(rate) < wad.mul(1e27) ? dart + 1 : dart;\n\n    }\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._getDrawDart' (StrategyMKRVaultDAIDelegate.sol#556-565) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 573,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(IERC20 _asset) external returns (uint256 balance) {\n",
          "message": "Parameter '_asset' of StrategyMKRVaultDAIDelegate.withdraw (StrategyMKRVaultDAIDelegate.sol#573) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 583,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 _amount) external {\n",
          "message": "Parameter '_amount' of StrategyMKRVaultDAIDelegate.withdraw (StrategyMKRVaultDAIDelegate.sol#583) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": 609,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n\n    if (getTotalDebtAmount() != 0 && getmVaultRatio(_amount) < c_safe.mul(1e2)) {\n\n      uint256 p = _getPrice();\n\n      _wipe(_withdrawDaiLeast(_amount.mul(p).div(1e18)));\n\n    }\n\n\n\n    _freeWETH(_amount);\n\n\n\n    return _amount;\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._withdrawSome' (StrategyMKRVaultDAIDelegate.sol#600-609) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n",
          "message": "Parameter '_amount' of StrategyMKRVaultDAIDelegate._withdrawSome (StrategyMKRVaultDAIDelegate.sol#600) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": 615,
          "vulnerability_code": "  function _freeWETH(uint256 wad) internal {\n\n    ManagerLike(cdp_manager).frob(cdpId, -toInt(wad), 0);\n\n    ManagerLike(cdp_manager).flux(cdpId, address(this), wad);\n\n    GemJoinLike(mcd_join_eth_a).exit(address(this), wad);\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._freeWETH' (StrategyMKRVaultDAIDelegate.sol#611-615) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 623,
          "vulnerability_code": "  function _wipe(uint256 wad) internal {\n\n    // wad in DAI\n\n    address urn = ManagerLike(cdp_manager).urns(cdpId);\n\n\n\n    DaiJoinLike(mcd_join_dai).join(urn, wad);\n\n    ManagerLike(cdp_manager).frob(cdpId, 0, _getWipeDart(VatLike(vat).dai(urn), urn));\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._wipe' (StrategyMKRVaultDAIDelegate.sol#617-623) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": 631,
          "vulnerability_code": "  function _getWipeDart(uint256 _dai, address urn) internal view returns (int256 dart) {\n\n    (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n\n    (, uint256 art) = VatLike(vat).urns(ilk, urn);\n\n\n\n    dart = toInt(_dai / rate);\n\n    dart = uint256(dart) <= art ? -dart : -toInt(art);\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._getWipeDart' (StrategyMKRVaultDAIDelegate.sol#625-631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _getWipeDart(uint256 _dai, address urn) internal view returns (int256 dart) {\n",
          "message": "Parameter '_dai' of StrategyMKRVaultDAIDelegate._getWipeDart (StrategyMKRVaultDAIDelegate.sol#625) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 646,
          "vulnerability_to_line": 650,
          "vulnerability_code": "  function _withdrawAll() internal {\n\n    yVault(yVaultDAI).withdrawAll(); // get Dai\n\n    _wipe(getTotalDebtAmount().add(1)); // in case of edge case\n\n    _freeWETH(balanceOfmVault());\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._withdrawAll' (StrategyMKRVaultDAIDelegate.sol#646-650) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function forceRebalance(uint256 _amount) external {\n",
          "message": "Parameter '_amount' of StrategyMKRVaultDAIDelegate.forceRebalance (StrategyMKRVaultDAIDelegate.sol#748) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": 801,
          "vulnerability_code": "  function _withdrawDaiMost(uint256 _amount) internal returns (uint256) {\n\n    uint256 _shares = _amount.mul(1e18).div(yVault(yVaultDAI).getPricePerFullShare());\n\n\n\n    if (_shares > IERC20(yVaultDAI).balanceOf(address(this))) {\n\n      _shares = IERC20(yVaultDAI).balanceOf(address(this));\n\n    }\n\n\n\n    uint256 _before = IERC20(dai).balanceOf(address(this));\n\n    yVault(yVaultDAI).withdraw(_shares);\n\n    uint256 _after = IERC20(dai).balanceOf(address(this));\n\n    return _after.sub(_before);\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._withdrawDaiMost' (StrategyMKRVaultDAIDelegate.sol#790-801) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 790,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _withdrawDaiMost(uint256 _amount) internal returns (uint256) {\n",
          "message": "Parameter '_amount' of StrategyMKRVaultDAIDelegate._withdrawDaiMost (StrategyMKRVaultDAIDelegate.sol#790) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 803,
          "vulnerability_to_line": 814,
          "vulnerability_code": "  function _withdrawDaiLeast(uint256 _amount) internal returns (uint256) {\n\n    uint256 _shares = _amount.mul(1e18).div(yVault(yVaultDAI).getPricePerFullShare()).mul(withdrawalMax).div(withdrawalMax.sub(withdrawalFee));\n\n\n\n    if (_shares > IERC20(yVaultDAI).balanceOf(address(this))) {\n\n      _shares = IERC20(yVaultDAI).balanceOf(address(this));\n\n    }\n\n\n\n    uint256 _before = IERC20(dai).balanceOf(address(this));\n\n    yVault(yVaultDAI).withdraw(_shares);\n\n    uint256 _after = IERC20(dai).balanceOf(address(this));\n\n    return _after.sub(_before);\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._withdrawDaiLeast' (StrategyMKRVaultDAIDelegate.sol#803-814) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 803,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _withdrawDaiLeast(uint256 _amount) internal returns (uint256) {\n",
          "message": "Parameter '_amount' of StrategyMKRVaultDAIDelegate._withdrawDaiLeast (StrategyMKRVaultDAIDelegate.sol#803) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": 823,
          "vulnerability_code": "  function _swap(uint256 _amountIn) internal {\n\n    address[] memory path = new address[](2);\n\n    path[0] = address(dai);\n\n    path[1] = address(want);\n\n\n\n    // approve unirouter to use dai\n\n    Uni(unirouter).swapExactTokensForTokens(_amountIn, 0, path, address(this), now.add(1 days));\n",
          "message": "Function 'StrategyMKRVaultDAIDelegate._swap' (StrategyMKRVaultDAIDelegate.sol#816-823) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 816,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _swap(uint256 _amountIn) internal {\n",
          "message": "Parameter '_amountIn' of StrategyMKRVaultDAIDelegate._swap (StrategyMKRVaultDAIDelegate.sol#816) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": "Parameter '_governance' of StrategyMKRVaultDAIDelegate.setGovernance (StrategyMKRVaultDAIDelegate.sol#825) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyMKRVaultDAIDelegate.setController (StrategyMKRVaultDAIDelegate.sol#830) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant token = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.token' (StrategyMKRVaultDAIDelegate.sol#399) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.want' (StrategyMKRVaultDAIDelegate.sol#400) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.weth' (StrategyMKRVaultDAIDelegate.sol#401) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.dai' (StrategyMKRVaultDAIDelegate.sol#402) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public cdp_manager = address(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\n",
          "message": "Variable 'StrategyMKRVaultDAIDelegate.cdp_manager' (StrategyMKRVaultDAIDelegate.sol#404) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public mcd_join_eth_a = address(0x2F0b23f53734252Bda2277357e97e1517d6B042A);\n",
          "message": "Variable 'StrategyMKRVaultDAIDelegate.mcd_join_eth_a' (StrategyMKRVaultDAIDelegate.sol#406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public mcd_join_dai = address(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\n",
          "message": "Variable 'StrategyMKRVaultDAIDelegate.mcd_join_dai' (StrategyMKRVaultDAIDelegate.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public mcd_spot = address(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\n",
          "message": "Variable 'StrategyMKRVaultDAIDelegate.mcd_spot' (StrategyMKRVaultDAIDelegate.sol#408) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public eth_price_oracle = address(0xCF63089A8aD2a9D8BD6Bb8022f3190EB7e1eD0f1);\n",
          "message": "Variable 'StrategyMKRVaultDAIDelegate.eth_price_oracle' (StrategyMKRVaultDAIDelegate.sol#411) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant yVaultDAI = address(0xACd43E627e64355f1861cEC6d3a6688B31a6F952);\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.yVaultDAI' (StrategyMKRVaultDAIDelegate.sol#412) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.unirouter' (StrategyMKRVaultDAIDelegate.sol#414) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public c_safe = 30000;\n",
          "message": "Variable 'StrategyMKRVaultDAIDelegate.c_safe' (StrategyMKRVaultDAIDelegate.sol#417) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant c_base = 10000;\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.c_base' (StrategyMKRVaultDAIDelegate.sol#418) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 421,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant performanceMax = 10000;\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.performanceMax' (StrategyMKRVaultDAIDelegate.sol#421) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 424,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant withdrawalMax = 10000;\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.withdrawalMax' (StrategyMKRVaultDAIDelegate.sol#424) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant strategistRewardMax = 10000;\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.strategistRewardMax' (StrategyMKRVaultDAIDelegate.sol#427) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 public constant ilk = 'ETH-A';\n",
          "message": "Constant 'StrategyMKRVaultDAIDelegate.ilk' (StrategyMKRVaultDAIDelegate.sol#429) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant token = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public cdp_manager = address(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 405,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public vat = address(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 406,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public mcd_join_eth_a = address(0x2F0b23f53734252Bda2277357e97e1517d6B042A);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public mcd_join_dai = address(0x9759A6Ac90977b93B58547b4A71c78317f391A28);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 408,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public mcd_spot = address(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public jug = address(0x19c0976f590D67707E62397C87829d896Dc0f1F1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public eth_price_oracle = address(0xCF63089A8aD2a9D8BD6Bb8022f3190EB7e1eD0f1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant yVaultDAI = address(0xACd43E627e64355f1861cEC6d3a6688B31a6F952);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 708,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint256 _draw = _eth.mul(_diff).div(_safe).mul(c_base).mul(1e2).div(_current);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 708,
          "vulnerability_to_line": null,
          "vulnerability_code": "      uint256 _draw = _eth.mul(_diff).div(_safe).mul(c_base).mul(1e2).div(_current);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DIV_MUL",
          "vulnerability_from_line": 804,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _shares = _amount.mul(1e18).div(yVault(yVaultDAI).getPricePerFullShare()).mul(withdrawalMax).div(withdrawalMax.sub(withdrawalFee));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setHarvester(address _harvester) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 466,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 471,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategistReward(uint256 _strategistReward) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setBorrowCollateralizationRatio(uint256 _c) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawCollateralizationRatio(uint256 _c_safe) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setOracle(address _oracle) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMCDValue(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 825,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function urns(bytes32, address) external view returns (uint256, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function ilks(bytes32) external view returns (address, uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function read() external view returns (uint256, bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 367,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function foresight() external view returns (uint256, bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}