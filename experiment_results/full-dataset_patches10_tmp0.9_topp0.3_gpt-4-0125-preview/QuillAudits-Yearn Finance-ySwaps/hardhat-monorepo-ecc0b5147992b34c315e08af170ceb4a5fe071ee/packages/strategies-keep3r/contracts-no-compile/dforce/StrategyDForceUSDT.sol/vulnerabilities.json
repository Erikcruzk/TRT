{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _controller) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    governance = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    strategist = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "    controller = _controller;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'SafeERC20: low-level call failed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(want != address(_asset), 'want');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(d != address(_asset), 'd');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 311,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == controller, '!controller');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_vault != address(0), '!vault'); // additional protection so we don't burn the funds\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 330,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == strategist || msg.sender == governance, '!authorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 386,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(msg.sender == governance, '!governance');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((value == 0) || (token.allowance(address(this), spender) == 0), 'SafeERC20: approve from non-zero to non-zero allowance');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "no-slippage-check",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "      Uni(uni).swapExactTokensForTokens(_df, uint256(0), path, address(this), now.add(1800));\n",
          "message": "No slippage check in a Uniswap v2/v3 trade"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_43"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 107,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract (StrategyDForceUSDT.sol#99-107) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": 107,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n\n    bytes32 codehash;\n\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      codehash := extcodehash(account)\n\n    }\n\n    return (codehash != 0x0 && codehash != accountHash);\n",
          "message": "Address.isContract uses assembly (StrategyDForceUSDT.sol#99-107)\n\t- StrategyDForceUSDT.sol#103-105\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": 350,
          "vulnerability_code": "  function harvest() public {\n\n    require(msg.sender == strategist || msg.sender == governance, '!authorized');\n\n    dRewards(pool).getReward();\n\n    uint256 _df = IERC20(df).balanceOf(address(this));\n\n    if (_df > 0) {\n\n      IERC20(df).safeApprove(uni, 0);\n\n      IERC20(df).safeApprove(uni, _df);\n\n\n\n      address[] memory path = new address[](3);\n\n      path[0] = df;\n\n      path[1] = weth;\n\n      path[2] = want;\n\n\n\n      Uni(uni).swapExactTokensForTokens(_df, uint256(0), path, address(this), now.add(1800));\n\n    }\n\n    uint256 _want = IERC20(want).balanceOf(address(this));\n\n    if (_want > 0) {\n\n      uint256 _fee = _want.mul(performanceFee).div(performanceMax);\n\n      IERC20(want).safeTransfer(Controller(controller).rewards(), _fee);\n\n      deposit();\n\n    }\n",
          "message": "StrategyDForceUSDT.harvest (StrategyDForceUSDT.sol#329-350) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": 375,
          "vulnerability_code": "  function getExchangeRate() public view returns (uint256) {\n\n    return dERC20(d).getExchangeRate();\n",
          "message": "StrategyDForceUSDT.getExchangeRate (StrategyDForceUSDT.sol#373-375) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": 383,
          "vulnerability_code": "  function balanceOf() public view returns (uint256) {\n\n    return balanceOfWant().add(balanceOfD()).add(balanceOfPool());\n",
          "message": "StrategyDForceUSDT.balanceOf (StrategyDForceUSDT.sol#381-383) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": "Detected issues with version pragma in StrategyDForceUSDT.sol:\n\t- pragma solidity^0.5.17 (StrategyDForceUSDT.sol#9): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 119,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n\n    require(address(this).balance >= amount, 'Address: insufficient balance');\n\n\n\n    // solhint-disable-next-line avoid-call-value\n\n    (bool success, ) = recipient.call.value(amount)('');\n\n    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": "Low level call in Address.sendValue (StrategyDForceUSDT.sol#113-119):\n\t-(success) = recipient.call.value(amount)() StrategyDForceUSDT.sol#117\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": 164,
          "vulnerability_code": "  function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\n\n\n\n    // solhint-disable-next-line avoid-low-level-calls\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n\n    require(success, 'SafeERC20: low-level call failed');\n\n\n\n    if (returndata.length > 0) {\n\n      // Return data is optional\n\n      // solhint-disable-next-line max-line-length\n\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\n\n    }\n",
          "message": "Low level call in SafeERC20.callOptionalReturn (StrategyDForceUSDT.sol#152-164):\n\t-(success,returndata) = address(token).call(data) StrategyDForceUSDT.sol#156\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function vaults(address) external view returns (address);\n",
          "message": "Parameter '' of Controller.vaults (StrategyDForceUSDT.sol#168) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": 197,
          "vulnerability_code": "interface dRewards {\n\n  function withdraw(uint256) external;\n\n\n\n  function getReward() external;\n\n\n\n  function stake(uint256) external;\n\n\n\n  function balanceOf(address) external view returns (uint256);\n\n\n\n  function exit() external;\n",
          "message": "Contract 'dRewards' (StrategyDForceUSDT.sol#187-197) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256) external;\n",
          "message": "Parameter '' of dRewards.withdraw (StrategyDForceUSDT.sol#188) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function stake(uint256) external;\n",
          "message": "Parameter '' of dRewards.stake (StrategyDForceUSDT.sol#192) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
          "message": "Parameter '' of dRewards.balanceOf (StrategyDForceUSDT.sol#194) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 207,
          "vulnerability_code": "interface dERC20 {\n\n  function mint(address, uint256) external;\n\n\n\n  function redeem(address, uint256) external;\n\n\n\n  function getTokenBalance(address) external view returns (uint256);\n\n\n\n  function getExchangeRate() external view returns (uint256);\n",
          "message": "Contract 'dERC20' (StrategyDForceUSDT.sol#199-207) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) external;\n",
          "message": "Parameter '' of dERC20.mint (StrategyDForceUSDT.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of dERC20.mint (StrategyDForceUSDT.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function redeem(address, uint256) external;\n",
          "message": "Parameter '' of dERC20.redeem (StrategyDForceUSDT.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function redeem(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of dERC20.redeem (StrategyDForceUSDT.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokenBalance(address) external view returns (uint256);\n",
          "message": "Parameter '' of dERC20.getTokenBalance (StrategyDForceUSDT.sol#204) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '' of Uni.swapExactTokensForTokens (StrategyDForceUSDT.sol#211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256,\n",
          "message": "Parameter '_scope_0' of Uni.swapExactTokensForTokens (StrategyDForceUSDT.sol#212) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] calldata,\n",
          "message": "Parameter '_scope_1' of Uni.swapExactTokensForTokens (StrategyDForceUSDT.sol#213) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address,\n",
          "message": "Parameter '_scope_2' of Uni.swapExactTokensForTokens (StrategyDForceUSDT.sol#214) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256\n",
          "message": "Parameter '_scope_3' of Uni.swapExactTokensForTokens (StrategyDForceUSDT.sol#215) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address _controller) public {\n",
          "message": "Parameter '_controller' of StrategyDForceUSDT. (StrategyDForceUSDT.sol#241) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": "Parameter '_strategist' of StrategyDForceUSDT.setStrategist (StrategyDForceUSDT.sol#251) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": "Parameter '_withdrawalFee' of StrategyDForceUSDT.setWithdrawalFee (StrategyDForceUSDT.sol#256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": "Parameter '_performanceFee' of StrategyDForceUSDT.setPerformanceFee (StrategyDForceUSDT.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(IERC20 _asset) external returns (uint256 balance) {\n",
          "message": "Parameter '_asset' of StrategyDForceUSDT.withdraw (StrategyDForceUSDT.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint256 _amount) external {\n",
          "message": "Parameter '_amount' of StrategyDForceUSDT.withdraw (StrategyDForceUSDT.sol#292) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": 327,
          "vulnerability_code": "  function _withdrawAll() internal {\n\n    dRewards(pool).exit();\n\n    uint256 _d = IERC20(d).balanceOf(address(this));\n\n    if (_d > 0) {\n\n      dERC20(d).redeem(address(this), _d);\n\n    }\n",
          "message": "Function 'StrategyDForceUSDT._withdrawAll' (StrategyDForceUSDT.sol#321-327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": 363,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n\n    uint256 _d = _amount.mul(1e18).div(dERC20(d).getExchangeRate());\n\n    uint256 _before = IERC20(d).balanceOf(address(this));\n\n    dRewards(pool).withdraw(_d);\n\n    uint256 _after = IERC20(d).balanceOf(address(this));\n\n    uint256 _withdrew = _after.sub(_before);\n\n    _before = IERC20(want).balanceOf(address(this));\n\n    dERC20(d).redeem(address(this), _withdrew);\n\n    _after = IERC20(want).balanceOf(address(this));\n\n    _withdrew = _after.sub(_before);\n\n    return _withdrew;\n",
          "message": "Function 'StrategyDForceUSDT._withdrawSome' (StrategyDForceUSDT.sol#352-363) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function _withdrawSome(uint256 _amount) internal returns (uint256) {\n",
          "message": "Parameter '_amount' of StrategyDForceUSDT._withdrawSome (StrategyDForceUSDT.sol#352) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": "Parameter '_governance' of StrategyDForceUSDT.setGovernance (StrategyDForceUSDT.sol#385) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": "Parameter '_controller' of StrategyDForceUSDT.setController (StrategyDForceUSDT.sol#390) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
          "message": "Constant 'StrategyDForceUSDT.want' (StrategyDForceUSDT.sol#224) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant d = address(0x868277d475E0e475E38EC5CdA2d9C83B5E1D9fc8);\n",
          "message": "Constant 'StrategyDForceUSDT.d' (StrategyDForceUSDT.sol#225) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant pool = address(0x324EebDAa45829c6A8eE903aFBc7B61AF48538df);\n",
          "message": "Constant 'StrategyDForceUSDT.pool' (StrategyDForceUSDT.sol#226) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant df = address(0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0);\n",
          "message": "Constant 'StrategyDForceUSDT.df' (StrategyDForceUSDT.sol#227) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": "Constant 'StrategyDForceUSDT.uni' (StrategyDForceUSDT.sol#228) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for df <> weth <> usdc route\n",
          "message": "Constant 'StrategyDForceUSDT.weth' (StrategyDForceUSDT.sol#229) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant performanceMax = 10000;\n",
          "message": "Constant 'StrategyDForceUSDT.performanceMax' (StrategyDForceUSDT.sol#232) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public constant withdrawalMax = 10000;\n",
          "message": "Constant 'StrategyDForceUSDT.withdrawalMax' (StrategyDForceUSDT.sol#235) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant want = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant d = address(0x868277d475E0e475E38EC5CdA2d9C83B5E1D9fc8);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant pool = address(0x324EebDAa45829c6A8eE903aFBc7B61AF48538df);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant df = address(0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant uni = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for df <> weth <> usdc route\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setStrategist(address _strategist) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setWithdrawalFee(uint256 _withdrawalFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPerformanceFee(uint256 _performanceFee) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 385,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setGovernance(address _governance) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 390,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setController(address _controller) external {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.17;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, bytes memory returndata) = address(token).call(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 103,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= amount, 'Address: insufficient balance');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (bool success, ) = recipient.call.value(amount)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(success, 'Address: unable to send value, recipient may have reverted');\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}