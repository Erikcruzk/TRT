{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {  \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply = 2000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tbalances[msg.sender] = totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }  \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    isInitialized = false;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(!isInitialized, \"contract is already initialized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(isInitialized, \"contract is not initialized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_weiPerNanoDGD > 0, \"rate cannot be zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_dgdTokenContract != address(0), \"DGD token contract cannot be empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= _wei, \"Contract does not have enough funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_success, \"Transfer of Ether failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_dgdTokenContract != address(0), \"DGD token contract cannot be empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(address(this).balance >= _wei, \"Contract does not have enough funds\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 130,
          "vulnerability_code": "  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\n    // benefit is lost if 'b' is also tested.\n\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n\n    if (a == 0) {\n\n      return 0;\n\n    }\n\n    uint256 c = a * b;\n\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n\n\n    return c;\n",
          "message": "Acid.mul (Acid.sol#119-130) uses a dangerous strict equality:\n\t- a == 0\n\t- require(bool,string)(c / a == b,SafeMath: multiplication overflow)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "  function balanceOf(address tokenOwner) public view returns (uint) {\n\n    return balances[tokenOwner];\n",
          "message": "DGDInterface.balanceOf (Acid.sol#25-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 35,
          "vulnerability_code": "  function transfer(address receiver, uint numTokens) public returns (bool) {\n\n    require(numTokens <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender] - numTokens;\n\n    balances[receiver] = balances[receiver] + numTokens;\n\n    emit Transfer(msg.sender, receiver, numTokens);\n\n    return true;\n",
          "message": "DGDInterface.transfer (Acid.sol#29-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "  function approve(address delegate, uint numTokens) public returns (bool) {\n\n    allowed[msg.sender][delegate] = numTokens;\n\n    emit Approval(msg.sender, delegate, numTokens);\n\n    return true;\n",
          "message": "DGDInterface.approve (Acid.sol#37-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function allowance(address owner, address delegate) public view returns (uint) {\n\n    return allowed[owner][delegate];\n",
          "message": "DGDInterface.allowance (Acid.sol#43-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 56,
          "vulnerability_code": "  function transferFrom(address owner, address buyer, uint numTokens) public returns (bool _success) {\n\n    require(numTokens <= balances[owner]);    \n\n    require(numTokens <= allowed[owner][msg.sender]);\n\n   \n\n    balances[owner] = balances[owner] - numTokens;\n\n    allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n\n    balances[buyer] = balances[buyer] + numTokens;\n\n    emit Transfer(owner, buyer, numTokens);\n\n    _success = true;\n",
          "message": "DGDInterface.transferFrom (Acid.sol#47-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": 103,
          "vulnerability_code": "  function init(uint256 _weiPerNanoDGD, address _dgdTokenContract) public onlyOwner() unlessInitialized() returns (bool _success) {\n\n    require(_weiPerNanoDGD > 0, \"rate cannot be zero\");\n\n    require(_dgdTokenContract != address(0), \"DGD token contract cannot be empty\");\n\n    weiPerNanoDGD = _weiPerNanoDGD;\n\n    dgdTokenContract = _dgdTokenContract;\n\n    isInitialized = true;\n\n    _success = true;\n",
          "message": "Acid.init (Acid.sol#96-103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 117,
          "vulnerability_code": "  function burn() public requireInitialized() returns (bool _success) {\n\n    // Rate will be calculated based on the nearest decimal\n\n    uint256 _amount = DGDInterface(dgdTokenContract).balanceOf(msg.sender);\n\n    uint256 _wei = mul(_amount, weiPerNanoDGD);\n\n    require(address(this).balance >= _wei, \"Contract does not have enough funds\");\n\n    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n\n    address _user = msg.sender;\n\n    //SWC-Unchecked Call Return Value: L56\n\n    //SWC-DoS with Failed Call: L56\n\n    (_success,) = _user.call.value(_wei)('');\n\n    require(_success, \"Transfer of Ether failed\");\n\n    emit Refund(_user, _amount, _wei);\n",
          "message": "Acid.burn (Acid.sol#105-117) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.16;\n",
          "message": "Detected issues with version pragma in Acid.sol:\n\t- pragma solidity0.5.16 (Acid.sol#3): it allows old versions\n\t- pragma solidity0.5.16 (Acid.sol#62): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": 117,
          "vulnerability_code": "  function burn() public requireInitialized() returns (bool _success) {\n\n    // Rate will be calculated based on the nearest decimal\n\n    uint256 _amount = DGDInterface(dgdTokenContract).balanceOf(msg.sender);\n\n    uint256 _wei = mul(_amount, weiPerNanoDGD);\n\n    require(address(this).balance >= _wei, \"Contract does not have enough funds\");\n\n    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n\n    address _user = msg.sender;\n\n    //SWC-Unchecked Call Return Value: L56\n\n    //SWC-DoS with Failed Call: L56\n\n    (_success,) = _user.call.value(_wei)('');\n\n    require(_success, \"Transfer of Ether failed\");\n\n    emit Refund(_user, _amount, _wei);\n",
          "message": "Low level call in Acid.burn (Acid.sol#105-117):\n\t-(_success,None) = _user.call.value(_wei)() Acid.sol#114\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function init(uint256 _weiPerNanoDGD, address _dgdTokenContract) public onlyOwner() unlessInitialized() returns (bool _success) {\n",
          "message": "Parameter '_weiPerNanoDGD' of Acid.init (Acid.sol#96) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function init(uint256 _weiPerNanoDGD, address _dgdTokenContract) public onlyOwner() unlessInitialized() returns (bool _success) {\n",
          "message": "Parameter '_dgdTokenContract' of Acid.init (Acid.sol#96) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_CALL_WITHOUT_DATA",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (_success,) = _user.call.value(_wei)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (_success,) = _user.call.value(_wei)('');\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => mapping (address => uint256)) allowed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": null,
          "vulnerability_code": "    (_success,) = _user.call.value(_wei)('');\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}