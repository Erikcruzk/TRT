{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {  \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    totalSupply = 2000000000000000;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tbalances[msg.sender] = totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }  \n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "  function balanceOf(address tokenOwner) public view returns (uint) {\n\n    return balances[tokenOwner];\n",
          "message": "DGDInterface.balanceOf (DGDInterface.sol#25-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 35,
          "vulnerability_code": "  function transfer(address receiver, uint numTokens) public returns (bool) {\n\n    require(numTokens <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender] - numTokens;\n\n    balances[receiver] = balances[receiver] + numTokens;\n\n    emit Transfer(msg.sender, receiver, numTokens);\n\n    return true;\n",
          "message": "DGDInterface.transfer (DGDInterface.sol#29-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "  function approve(address delegate, uint numTokens) public returns (bool) {\n\n    allowed[msg.sender][delegate] = numTokens;\n\n    emit Approval(msg.sender, delegate, numTokens);\n\n    return true;\n",
          "message": "DGDInterface.approve (DGDInterface.sol#37-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function allowance(address owner, address delegate) public view returns (uint) {\n\n    return allowed[owner][delegate];\n",
          "message": "DGDInterface.allowance (DGDInterface.sol#43-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 56,
          "vulnerability_code": "  function transferFrom(address owner, address buyer, uint numTokens) public returns (bool _success) {\n\n    require(numTokens <= balances[owner]);    \n\n    require(numTokens <= allowed[owner][msg.sender]);\n\n   \n\n    balances[owner] = balances[owner] - numTokens;\n\n    allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n\n    balances[buyer] = balances[buyer] + numTokens;\n\n    emit Transfer(owner, buyer, numTokens);\n\n    _success = true;\n",
          "message": "DGDInterface.transferFrom (DGDInterface.sol#47-56) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.16;\n",
          "message": "Detected issues with version pragma in DGDInterface.sol:\n\t- pragma solidity0.5.16 (DGDInterface.sol#3): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => mapping (address => uint256)) allowed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}