{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "    setUpgradeabilityOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "   require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(currentImplementation != newImplementation, \"New implementation can't be same with current implementation.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "   require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(currentImplementation != newImplementation, \"New implementation can't be same with current implementation.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract (nexxo_contract_proxy_08_0_1.sol#27-36) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 69,
          "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = implementationPosition;\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
          "message": "Proxy.implementation (nexxo_contract_proxy_08_0_1.sol#64-69) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 136,
          "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n\n    bytes32 position = proxyOwnerPosition;\n\n    assembly {\n\n      owner := sload(position)\n\n    }\n",
          "message": "NexxoProxyV1.proxyOwner (nexxo_contract_proxy_08_0_1.sol#131-136) is declared view but contains assembly code\n"
        },
        {
          "name": "locked-ether",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 187,
          "vulnerability_code": "   function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n   assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 { revert(ptr, size) }\n\n      default { return(ptr, size) }\n\n    }\n\n\n",
          "message": "Contract locking ether found in nexxo_contract_proxy_08_0_1.sol:\n\tContract NexxoProxyV1 has payable functions:\n\t - fallback (nexxo_contract_proxy_08_0_1.sol#171-187)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function upgradeTo(address implementation) public onlyProxyOwner {\n",
          "message": "NexxoProxyV1.upgradeTo.implementation (local variable @ nexxo_contract_proxy_08_0_1.sol#162) shadows:\n\t- Proxy.implementation (function @ nexxo_contract_proxy_08_0_1.sol#64-69)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract uses assembly (nexxo_contract_proxy_08_0_1.sol#27-36)\n\t- nexxo_contract_proxy_08_0_1.sol#34\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 69,
          "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = implementationPosition;\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
          "message": "Proxy.implementation uses assembly (nexxo_contract_proxy_08_0_1.sol#64-69)\n\t- nexxo_contract_proxy_08_0_1.sol#66-68\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 81,
          "vulnerability_code": "  function setImplementation(address newImplementation) internal {\n\n   require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 position = implementationPosition;\n\n    assembly {\n\n      sstore(position, newImplementation)\n\n    }\n",
          "message": "Proxy.setImplementation uses assembly (nexxo_contract_proxy_08_0_1.sol#75-81)\n\t- nexxo_contract_proxy_08_0_1.sol#78-80\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 136,
          "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n\n    bytes32 position = proxyOwnerPosition;\n\n    assembly {\n\n      owner := sload(position)\n\n    }\n",
          "message": "NexxoProxyV1.proxyOwner uses assembly (nexxo_contract_proxy_08_0_1.sol#131-136)\n\t- nexxo_contract_proxy_08_0_1.sol#133-135\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 146,
          "vulnerability_code": "  function setUpgradeabilityOwner(address newProxyOwner) internal {\n\n    bytes32 position = proxyOwnerPosition;\n\n    assembly {\n\n      sstore(position, newProxyOwner)\n\n    }\n",
          "message": "NexxoProxyV1.setUpgradeabilityOwner uses assembly (nexxo_contract_proxy_08_0_1.sol#141-146)\n\t- nexxo_contract_proxy_08_0_1.sol#143-145\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 187,
          "vulnerability_code": "   function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n   assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 { revert(ptr, size) }\n\n      default { return(ptr, size) }\n\n    }\n\n\n",
          "message": "NexxoProxyV1.fallback uses assembly (nexxo_contract_proxy_08_0_1.sol#171-187)\n\t- nexxo_contract_proxy_08_0_1.sol#175-185\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": 156,
          "vulnerability_code": "  function transferProxyOwnership(address newOwner) public onlyProxyOwner {\n\n    require(newOwner != address(0));\n\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\n\n    setUpgradeabilityOwner(newOwner);\n",
          "message": "NexxoProxyV1.transferProxyOwnership (nexxo_contract_proxy_08_0_1.sol#152-156) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": 164,
          "vulnerability_code": "  function upgradeTo(address implementation) public onlyProxyOwner {\n\n    _upgradeTo(implementation);\n",
          "message": "NexxoProxyV1.upgradeTo (nexxo_contract_proxy_08_0_1.sol#162-164) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.17;\n",
          "message": "Detected issues with version pragma in nexxo_contract_proxy_08_0_1.sol:\n\t- pragma solidity0.5.17 (nexxo_contract_proxy_08_0_1.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 92,
          "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    address currentImplementation = implementation();\n\n    require(currentImplementation != newImplementation, \"New implementation can't be same with current implementation.\");\n\n    setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
          "message": "Function 'Proxy._upgradeTo' (nexxo_contract_proxy_08_0_1.sol#87-92) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 private constant implementationPosition = keccak256(\"org.nexxo.proxy.implementation\");\n",
          "message": "Constant 'Proxy.implementationPosition' (nexxo_contract_proxy_08_0_1.sol#53) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 private constant proxyOwnerPosition = keccak256(\"org.nexxo.proxy.owner\");\n",
          "message": "Constant 'NexxoProxyV1.proxyOwnerPosition' (nexxo_contract_proxy_08_0_1.sol#110) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract NexxoProxyV1 is Proxy {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 private constant implementationPosition = keccak256(\"org.nexxo.proxy.implementation\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32 private constant proxyOwnerPosition = keccak256(\"org.nexxo.proxy.owner\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "   assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}