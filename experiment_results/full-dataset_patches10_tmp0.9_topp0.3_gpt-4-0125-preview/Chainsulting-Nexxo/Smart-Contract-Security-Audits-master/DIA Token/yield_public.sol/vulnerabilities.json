{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "use-abi-encodecall-instead-of-encodewithselector",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tconstructor() internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\t_addOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t}\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _yieldWallet, uint256 _maxTokens) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "        token = IERC20(tokenContract);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "        beginDepositTime = _beginDepositTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "        endDepositTime = _endDepositTime;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 563,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 564,
          "vulnerability_to_line": null,
          "vulnerability_code": "        yieldWallet = _yieldWallet;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 565,
          "vulnerability_to_line": null,
          "vulnerability_code": "        maxTokens = _maxTokens;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\trequire(isOwner(msg.sender), \"Sender is not owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isContract(target), \"Address: call to non-contract\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 586,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now < endDepositTime, \"Deposit time has ended.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount < maxTokens, \"Token deposit too high, limit breached.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": null,
          "vulnerability_code": "            revert(\"Error: duration not allowed!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": null,
          "vulnerability_code": "                withdraw(i);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 636,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 484,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 486,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 587,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount < maxTokens, \"Token deposit too high, limit breached.\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 343,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract (yield_public.sol#334-343) is declared view but contains assembly code\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 591,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 yieldAmount;\n",
          "message": "yieldAmount in YieldContract.deposit (yield_public.sol#591) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": null,
          "vulnerability_code": "        LockBoxStruct memory l;\n",
          "message": "l in YieldContract.deposit (yield_public.sol#607) is a local variable never initialiazed\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 585,
          "vulnerability_to_line": 613,
          "vulnerability_code": "    function deposit(address beneficiary, uint256 amount, uint256 duration) internal {\n\n        require(now < endDepositTime, \"Deposit time has ended.\");\n\n        require(amount < maxTokens, \"Token deposit too high, limit breached.\");\n\n        maxTokens -= amount;\n\n\n\n        // Define and get amount of yield\n\n        uint256 yieldAmount;\n\n        if (duration == 90 days) {\n\n            yieldAmount = (threeMonthPercentage * amount) / 1e20;\n\n        } else if (duration == 180 days) {\n\n            yieldAmount = (sixMonthPercentage * amount) / 1e20;\n\n        } else if (duration == 360 days) {\n\n            yieldAmount = (twelveMonthPercentage * amount) / 1e20;\n\n        } else {\n\n            revert(\"Error: duration not allowed!\");\n\n        }\n\n        require(token.transferFrom(yieldWallet, address(this), yieldAmount));\n\n        \n\n        // Get lockable tokens from user\n\n        require(token.transferFrom(msg.sender, address(this), amount));\n\n        \n\n        // Build lockbox\n\n        LockBoxStruct memory l;\n\n        l.beneficiary = beneficiary;\n\n        l.balance = amount + yieldAmount;\n\n        l.releaseTime = now + duration;\n\n        lockBoxStructs.push(l);\n\n        emit LogLockupDeposit(msg.sender, l.beneficiary, l.balance, l.releaseTime);\n",
          "message": "Reentrancy in YieldContract.deposit (yield_public.sol#585-613):\n\tExternal calls:\n\t- require(bool)(token.transferFrom(yieldWallet,address(this),yieldAmount)) (yield_public.sol#601)\n\t- require(bool)(token.transferFrom(msg.sender,address(this),amount)) (yield_public.sol#604)\n\tState variables written after the call(s):\n\t- lockBoxStructs (yield_public.sol#611)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": 343,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
          "message": "Address.isContract uses assembly (yield_public.sol#334-343)\n\t- yield_public.sol#341\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 448,
          "vulnerability_code": "    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            // Look for revert reason and bubble it up if present\n\n            if (returndata.length > 0) {\n\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n",
          "message": "Address._functionCallWithValue uses assembly (yield_public.sol#427-448)\n\t- yield_public.sol#440-443\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 66,
          "vulnerability_code": "\tfunction addOwner(address account) public onlyOwner {\n\n\t\t_addOwner(account);\n",
          "message": "YieldRoles.addOwner (yield_public.sol#64-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 70,
          "vulnerability_code": "\tfunction renounceOwner() public {\n\n\t\t_removeOwner(msg.sender);\n",
          "message": "YieldRoles.renounceOwner (yield_public.sol#68-70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 568,
          "vulnerability_to_line": 570,
          "vulnerability_code": "    function getLockBoxBeneficiary(uint256 lockBoxNumber) public view returns(address) {\n\n        return lockBoxStructs[lockBoxNumber].beneficiary;\n",
          "message": "YieldContract.getLockBoxBeneficiary (yield_public.sol#568-570) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 616,
          "vulnerability_to_line": 620,
          "vulnerability_code": "    function updateBeneficiary(uint256 lockBoxNumber, address newBeneficiary) public {\n\n        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n\n        require(msg.sender == l.beneficiary);\n\n        l.beneficiary = newBeneficiary;\n",
          "message": "YieldContract.updateBeneficiary (yield_public.sol#616-620) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 632,
          "vulnerability_to_line": 638,
          "vulnerability_code": "    function triggerWithdrawAll() public {\n\n        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n\n            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n\n                withdraw(i);\n\n            }\n\n        }\n",
          "message": "YieldContract.triggerWithdrawAll (yield_public.sol#632-638) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 641,
          "vulnerability_to_line": 643,
          "vulnerability_code": "    function updateEndDepositTime (uint256 newEndTime) public onlyOwner {\n\n        endDepositTime = newEndTime;\n",
          "message": "YieldContract.updateEndDepositTime (yield_public.sol#641-643) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": 647,
          "vulnerability_code": "    function updateYieldWallet(address newWallet) public onlyOwner {\n\n        yieldWallet = newWallet;\n",
          "message": "YieldContract.updateYieldWallet (yield_public.sol#645-647) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 649,
          "vulnerability_to_line": 653,
          "vulnerability_code": "    function updateYields(uint256 threeMonths, uint256 sixMonths, uint256 twelveMonths) public onlyOwner {\n\n        threeMonthPercentage = threeMonths;\n\n        sixMonthPercentage = sixMonths;\n\n        twelveMonthPercentage = twelveMonths;\n",
          "message": "YieldContract.updateYields (yield_public.sol#649-653) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 655,
          "vulnerability_to_line": 657,
          "vulnerability_code": "    function updateMaxTokens(uint256 newMaxTokens) public onlyOwner {\n\n        maxTokens = newMaxTokens;\n",
          "message": "YieldContract.updateMaxTokens (yield_public.sol#655-657) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.12;\n",
          "message": "Detected issues with version pragma in yield_public.sol:\n\t- pragma solidity0.5.12 (yield_public.sol#3): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": 367,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": "Low level call in Address.sendValue (yield_public.sol#361-367):\n\t-(success) = recipient.call.value(amount)() yield_public.sol#365\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 448,
          "vulnerability_code": "    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            // Look for revert reason and bubble it up if present\n\n            if (returndata.length > 0) {\n\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n",
          "message": "Low level call in Address._functionCallWithValue (yield_public.sol#427-448):\n\t-(success,returndata) = target.call.value(weiValue)(data) yield_public.sol#431\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": 75,
          "vulnerability_code": "\tfunction _addOwner(address account) internal {\n\n\t\t_owners.add(account);\n\n\t\temit OwnerAdded(account);\n",
          "message": "Function 'YieldRoles._addOwner' (yield_public.sol#72-75) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": 80,
          "vulnerability_code": "\tfunction _removeOwner(address account) internal {\n\n\t\t_owners.remove(account);\n\n\t\temit OwnerRemoved(account);\n",
          "message": "Function 'YieldRoles._removeOwner' (yield_public.sol#77-80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 448,
          "vulnerability_code": "    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            // Look for revert reason and bubble it up if present\n\n            if (returndata.length > 0) {\n\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n",
          "message": "Function 'Address._functionCallWithValue' (yield_public.sol#427-448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 506,
          "vulnerability_to_line": 516,
          "vulnerability_code": "    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
          "message": "Function 'SafeERC20._callOptionalReturn' (yield_public.sol#506-516) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _yieldWallet, uint256 _maxTokens) public {\n",
          "message": "Parameter '_beginDepositTime' of YieldContract. (yield_public.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _yieldWallet, uint256 _maxTokens) public {\n",
          "message": "Parameter '_endDepositTime' of YieldContract. (yield_public.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _yieldWallet, uint256 _maxTokens) public {\n",
          "message": "Parameter '_yieldWallet' of YieldContract. (yield_public.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _yieldWallet, uint256 _maxTokens) public {\n",
          "message": "Parameter '_maxTokens' of YieldContract. (yield_public.sol#559) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "\tRoles.Role private _owners;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 596,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if (duration == 360 days) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 token;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    }
  }
}