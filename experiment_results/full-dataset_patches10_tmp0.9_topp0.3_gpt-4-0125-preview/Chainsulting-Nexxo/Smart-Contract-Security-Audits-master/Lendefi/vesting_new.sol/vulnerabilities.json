{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract LendefiTokenVesting is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private tokensToVest = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private vestingId = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor () internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(IERC20 _token) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token) != address(0x0), \"BSC token address is not valid\");\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        LDFIToken = _token;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": null,
          "vulnerability_code": "       \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "       \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 SCALING_FACTOR = 10 ** 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 day = 1 days;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        \n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 30 * day, 190318764*SCALING_FACTOR);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 60 * day, 190318764*SCALING_FACTOR);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token) != address(0x0), \"BSC token address is not valid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_24"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function release(uint256 _vestingId) public {\n\n        Vesting storage vesting = vestings[_vestingId];\n\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\n\n\n\n        require(LDFIToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\n\n        vesting.released = true;\n\n        tokensToVest = tokensToVest.sub(vesting.amount);\n\n        LDFIToken.safeTransfer(vesting.beneficiary, vesting.amount);\n\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "Reentrancy in LendefiTokenVesting.release (vesting_new.sol#302-314):\n\tExternal calls:\n\t- require(bool,string)(LDFIToken.balanceOf(address(this)) >= vesting.amount,INSUFFICIENT_BALANCE) (vesting_new.sol#309)\n\tState variables written after the call(s):\n\t- vestings (vesting_new.sol#310)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function release(uint256 _vestingId) public {\n\n        Vesting storage vesting = vestings[_vestingId];\n\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\n\n\n\n        require(LDFIToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\n\n        vesting.released = true;\n\n        tokensToVest = tokensToVest.sub(vesting.amount);\n\n        LDFIToken.safeTransfer(vesting.beneficiary, vesting.amount);\n\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "Reentrancy in LendefiTokenVesting.release (vesting_new.sol#302-314):\n\tExternal calls:\n\t- require(bool,string)(LDFIToken.balanceOf(address(this)) >= vesting.amount,INSUFFICIENT_BALANCE) (vesting_new.sol#309)\n\tState variables written after the call(s):\n\t- tokensToVest (vesting_new.sol#311)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function release(uint256 _vestingId) public {\n\n        Vesting storage vesting = vestings[_vestingId];\n\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\n\n\n\n        require(LDFIToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\n\n        vesting.released = true;\n\n        tokensToVest = tokensToVest.sub(vesting.amount);\n\n        LDFIToken.safeTransfer(vesting.beneficiary, vesting.amount);\n\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "LendefiTokenVesting.release (vesting_new.sol#302-314) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= vesting.releaseTime,NOT_VESTED) (vesting_new.sol#307)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
          "message": "Ownable.renounceOwnership (vesting_new.sol#58-61) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 69,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
          "message": "Ownable.transferOwnership (vesting_new.sol#67-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function token() public view returns (IERC20) {\n\n        return LDFIToken;\n",
          "message": "LendefiTokenVesting.token (vesting_new.sol#264-266) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function beneficiary(uint256 _vestingId) public view returns (address) {\n\n        return vestings[_vestingId].beneficiary;\n",
          "message": "LendefiTokenVesting.beneficiary (vesting_new.sol#268-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": 274,
          "vulnerability_code": "    function releaseTime(uint256 _vestingId) public view returns (uint256) {\n\n        return vestings[_vestingId].releaseTime;\n",
          "message": "LendefiTokenVesting.releaseTime (vesting_new.sol#272-274) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": 278,
          "vulnerability_code": "    function vestingAmount(uint256 _vestingId) public view returns (uint256) {\n\n        return vestings[_vestingId].amount;\n",
          "message": "LendefiTokenVesting.vestingAmount (vesting_new.sol#276-278) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function removeVesting(uint256 _vestingId) public onlyOwner {\n\n        Vesting storage vesting = vestings[_vestingId];\n\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n\n        vesting.released = true;\n\n        tokensToVest = tokensToVest.sub(vesting.amount);\n\n        emit TokenVestingRemoved(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "LendefiTokenVesting.removeVesting (vesting_new.sol#280-287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 314,
          "vulnerability_code": "    function release(uint256 _vestingId) public {\n\n        Vesting storage vesting = vestings[_vestingId];\n\n        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n\n        require(!vesting.released , VESTING_ALREADY_RELEASED);\n\n        // solhint-disable-next-line not-rely-on-time\n\n        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\n\n\n\n        require(LDFIToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);\n\n        vesting.released = true;\n\n        tokensToVest = tokensToVest.sub(vesting.amount);\n\n        LDFIToken.safeTransfer(vesting.beneficiary, vesting.amount);\n\n        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "LendefiTokenVesting.release (vesting_new.sol#302-314) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": 319,
          "vulnerability_code": "    function retrieveExcessTokens(uint256 _amount) public onlyOwner {\n\n        require(_amount <= LDFIToken.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);\n\n        LDFIToken.safeTransfer(owner(), _amount);\n",
          "message": "LendefiTokenVesting.retrieveExcessTokens (vesting_new.sol#316-319) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": 79,
          "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0));\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
          "message": "Function 'Ownable._transferOwnership' (vesting_new.sol#75-79) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(IERC20 _token) public {\n",
          "message": "Parameter '_token' of LendefiTokenVesting. (vesting_new.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function beneficiary(uint256 _vestingId) public view returns (address) {\n",
          "message": "Parameter '_vestingId' of LendefiTokenVesting.beneficiary (vesting_new.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function releaseTime(uint256 _vestingId) public view returns (uint256) {\n",
          "message": "Parameter '_vestingId' of LendefiTokenVesting.releaseTime (vesting_new.sol#272) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function vestingAmount(uint256 _vestingId) public view returns (uint256) {\n",
          "message": "Parameter '_vestingId' of LendefiTokenVesting.vestingAmount (vesting_new.sol#276) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeVesting(uint256 _vestingId) public onlyOwner {\n",
          "message": "Parameter '_vestingId' of LendefiTokenVesting.removeVesting (vesting_new.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\n",
          "message": "Parameter '_beneficiary' of LendefiTokenVesting.addVesting (vesting_new.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\n",
          "message": "Parameter '_releaseTime' of LendefiTokenVesting.addVesting (vesting_new.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {\n",
          "message": "Parameter '_amount' of LendefiTokenVesting.addVesting (vesting_new.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function release(uint256 _vestingId) public {\n",
          "message": "Parameter '_vestingId' of LendefiTokenVesting.release (vesting_new.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function retrieveExcessTokens(uint256 _amount) public onlyOwner {\n",
          "message": "Parameter '_amount' of LendefiTokenVesting.retrieveExcessTokens (vesting_new.sol#316) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 private LDFIToken;\n",
          "message": "Variable 'LendefiTokenVesting.LDFIToken' (vesting_new.sol#214) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 30 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 60 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 90 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 120 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 150 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 180 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 210 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 240 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 270 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 300 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 330 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 360 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 390 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 420 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 450 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 480 * day, 190318764*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 510 * day, 190318776*SCALING_FACTOR);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(_token) != address(0x0), \"BSC token address is not valid\");\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_beneficiary != address(0x0), INVALID_BENEFICIARY);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vesting.beneficiary != address(0x0), INVALID_VESTING_ID);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 private LDFIToken;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private tokensToVest = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private vestingId = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant INVALID_VESTING_ID = \"Invalid vesting id\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant VESTING_ALREADY_RELEASED = \"Vesting already released\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant INVALID_BENEFICIARY = \"Invalid beneficiary address\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string private constant NOT_VESTED = \"Tokens have not vested yet\";\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 181,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return vestings[_vestingId].beneficiary;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 30 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 60 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 90 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 120 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 150 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 180 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 250,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 210 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 251,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 240 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 270 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 300 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 330 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 360 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 390 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 420 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 450 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 480 * day, 190318764*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addVesting(0xAFbE3fCDF53BdAa23b9Ce2dfE93573a5981bafE0, now + 510 * day, 190318776*SCALING_FACTOR);\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= vesting.releaseTime, NOT_VESTED);\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit TokenVestingReleased(_vestingId, vesting.beneficiary, vesting.amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transfer(to, value));\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(token.transfer(to, value));\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: STATICCALL"
      ],
      "vulnerability_findings": []
    }
  }
}