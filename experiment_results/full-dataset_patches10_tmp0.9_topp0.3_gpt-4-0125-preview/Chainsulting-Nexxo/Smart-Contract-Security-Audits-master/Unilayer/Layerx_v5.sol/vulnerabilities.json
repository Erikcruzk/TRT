{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public totalEthRewards = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint stakeNum = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isPaused = false;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = _owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        stakeCreator = owner;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "        symbol = \"LAYERX\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "        name = \"UNILAYERX\";\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        decimals = 18;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _totalSupply = 40000 * 10**uint(decimals);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[owner] = _totalSupply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit Transfer(address(0), owner, _totalSupply);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        stakes[0] = Stake(now, 0, 0, 0, 0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b,\"Calculation error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b > 0,\"Calculation error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b <= a,\"Calculation error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a,\"Calculation error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(b != 0,\"Calculation error\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPaused == false, \"This contract was paused by the owner!\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(index <= stakeNum, 'This stake does not exist.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(value > 0, \"Invalid Amount.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_totalSupply >= value, \"Invalid account state.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[owner] >= value, \"Invalid account balances state.\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_stakeCreator != address(0), 'Do not use 0 address');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(payment > 0, 'Payment must be greater than 0.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(UNILAYER.allowance(msg.sender, address(this)) >= payment, 'Call Approve function firstly.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(rwds.isReceived == true,'Withdraw your rewards.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amt > 0, 'You do not have locked tokens.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(UNILAYER.balanceOf(address(this))  >= amt, 'Insufficient account balance!');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(rwds.isReceived == true,'Withdraw your rewards.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 317,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == stakeCreator, 'You cannot call this function');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= stake.start.add(stakePeriod), 'You cannot call this function until stakePeriod is over');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(endTime <= now, 'Wait the minimum time');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(stake.end <= now, 'Invalid date for withdrawal.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rwds.isReceived == false, 'You already withdrawal your rewards.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[owner] >= rwds.layersx, 'Insufficient account balance!');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= rwds.eth,'Invalid account state, not enough funds.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(index >= holder.firstStake, 'Invalid index.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(rwdsOld.isReceived == true,'Withdraw your old rewards first.');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if(holder.layerLocked > 0 && stakeNum > holder.firstStake) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(rwds.isReceived == true,'Withdraw your rewards.');\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "        stakeNum++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isPaused == false, \"This contract was paused by the owner!\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 264,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 320,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now >= stake.start.add(stakePeriod), 'You cannot call this function until stakePeriod is over');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(rwds.isReceived == false, 'You already withdrawal your rewards.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(address(this).balance >= rwds.eth,'Invalid account state, not enough funds.');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_35"
      ],
      "vulnerability_findings": [
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function lock(uint payment) external paused {\n\n        require(payment > 0, 'Payment must be greater than 0.');\n\n        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\n\n        require(UNILAYER.allowance(msg.sender, address(this)) >= payment, 'Call Approve function firstly.');\n\n        \n\n        UNILAYER.transferFrom(msg.sender, address(this), payment);\n\n        \n\n        StakeHolder memory holder = stakeHolders[msg.sender];\n\n        Stake memory stake = stakes[stakeNum];\n\n        \n\n        if(holder.layerLocked == 0) {\n\n            holder.firstStake = stakeNum;\n\n            holder.time = now;\n\n        } else if(holder.layerLocked > 0 && stakeNum > holder.firstStake) {\n\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n\n            require(rwds.isReceived == true,'Withdraw your rewards.');\n\n        }\n\n        \n\n        holder.layerLocked = holder.layerLocked.add(payment);\n\n        stakeHolders[msg.sender] = holder;\n\n        stake.layerLockedTotal = stake.layerLockedTotal.add(payment);\n\n        stakes[stakeNum] = stake;\n\n        \n\n        emit logLockedTokens(msg.sender, payment, now, stakeNum);\n",
          "message": "Layerx.lock (Layerx_v5.sol#262-286) uses a dangerous strict equality:\n\t- holder.layerLocked == 0\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 311,
          "vulnerability_code": "    function unlock() external paused {\n\n        StakeHolder memory holder = stakeHolders[msg.sender]; \n\n        uint amt = holder.layerLocked;\n\n        require(amt > 0, 'You do not have locked tokens.');\n\n        require(UNILAYER.balanceOf(address(this))  >= amt, 'Insufficient account balance!');\n\n        \n\n        if(holder.layerLocked > 0) {\n\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n\n            require(rwds.isReceived == true,'Withdraw your rewards.');\n\n        }\n\n        \n\n        Stake memory stake = stakes[stakeNum];\n\n        stake.layerLockedTotal = stake.layerLockedTotal.sub(holder.layerLocked);\n\n        stakes[stakeNum] = stake;\n\n        \n\n        delete stakeHolders[msg.sender];\n\n        \n\n        UNILAYER.transfer(msg.sender, amt);\n\n        \n\n        emit logUnlockedTokens(msg.sender, amt, now);\n",
          "message": "Reentrancy in Layerx.unlock (Layerx_v5.sol#291-311):\n\tExternal calls:\n\t- require(bool,string)(UNILAYER.balanceOf(address(this)) >= amt,Insufficient account balance!) (Layerx_v5.sol#295)\n\tState variables written after the call(s):\n\t- stakeHolders (Layerx_v5.sol#306)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function lock(uint payment) external paused {\n\n        require(payment > 0, 'Payment must be greater than 0.');\n\n        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\n\n        require(UNILAYER.allowance(msg.sender, address(this)) >= payment, 'Call Approve function firstly.');\n\n        \n\n        UNILAYER.transferFrom(msg.sender, address(this), payment);\n\n        \n\n        StakeHolder memory holder = stakeHolders[msg.sender];\n\n        Stake memory stake = stakes[stakeNum];\n\n        \n\n        if(holder.layerLocked == 0) {\n\n            holder.firstStake = stakeNum;\n\n            holder.time = now;\n\n        } else if(holder.layerLocked > 0 && stakeNum > holder.firstStake) {\n\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n\n            require(rwds.isReceived == true,'Withdraw your rewards.');\n\n        }\n\n        \n\n        holder.layerLocked = holder.layerLocked.add(payment);\n\n        stakeHolders[msg.sender] = holder;\n\n        stake.layerLockedTotal = stake.layerLockedTotal.add(payment);\n\n        stakes[stakeNum] = stake;\n\n        \n\n        emit logLockedTokens(msg.sender, payment, now, stakeNum);\n",
          "message": "Layerx.lock (Layerx_v5.sol#262-286) does not use the value returned by external calls:\n\t-UNILAYER.transferFrom(msg.sender,address(this),payment) (Layerx_v5.sol#267)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 311,
          "vulnerability_code": "    function unlock() external paused {\n\n        StakeHolder memory holder = stakeHolders[msg.sender]; \n\n        uint amt = holder.layerLocked;\n\n        require(amt > 0, 'You do not have locked tokens.');\n\n        require(UNILAYER.balanceOf(address(this))  >= amt, 'Insufficient account balance!');\n\n        \n\n        if(holder.layerLocked > 0) {\n\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n\n            require(rwds.isReceived == true,'Withdraw your rewards.');\n\n        }\n\n        \n\n        Stake memory stake = stakes[stakeNum];\n\n        stake.layerLockedTotal = stake.layerLockedTotal.sub(holder.layerLocked);\n\n        stakes[stakeNum] = stake;\n\n        \n\n        delete stakeHolders[msg.sender];\n\n        \n\n        UNILAYER.transfer(msg.sender, amt);\n\n        \n\n        emit logUnlockedTokens(msg.sender, amt, now);\n",
          "message": "Layerx.unlock (Layerx_v5.sol#291-311) does not use the value returned by external calls:\n\t-UNILAYER.transfer(msg.sender,amt) (Layerx_v5.sol#308)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function lock(uint payment) external paused {\n\n        require(payment > 0, 'Payment must be greater than 0.');\n\n        require(UNILAYER.balanceOf(msg.sender) >= payment, 'Holder does not have enough tokens.');\n\n        require(UNILAYER.allowance(msg.sender, address(this)) >= payment, 'Call Approve function firstly.');\n\n        \n\n        UNILAYER.transferFrom(msg.sender, address(this), payment);\n\n        \n\n        StakeHolder memory holder = stakeHolders[msg.sender];\n\n        Stake memory stake = stakes[stakeNum];\n\n        \n\n        if(holder.layerLocked == 0) {\n\n            holder.firstStake = stakeNum;\n\n            holder.time = now;\n\n        } else if(holder.layerLocked > 0 && stakeNum > holder.firstStake) {\n\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n\n            require(rwds.isReceived == true,'Withdraw your rewards.');\n\n        }\n\n        \n\n        holder.layerLocked = holder.layerLocked.add(payment);\n\n        stakeHolders[msg.sender] = holder;\n\n        stake.layerLockedTotal = stake.layerLockedTotal.add(payment);\n\n        stakes[stakeNum] = stake;\n\n        \n\n        emit logLockedTokens(msg.sender, payment, now, stakeNum);\n",
          "message": "Reentrancy in Layerx.lock (Layerx_v5.sol#262-286):\n\tExternal calls:\n\t- require(bool,string)(UNILAYER.balanceOf(msg.sender) >= payment,Holder does not have enough tokens.) (Layerx_v5.sol#264)\n\t- require(bool,string)(UNILAYER.allowance(msg.sender,address(this)) >= payment,Call Approve function firstly.) (Layerx_v5.sol#265)\n\t- UNILAYER.transferFrom(msg.sender,address(this),payment) (Layerx_v5.sol#267)\n\tState variables written after the call(s):\n\t- stakeHolders (Layerx_v5.sol#281)\n\t- stakes (Layerx_v5.sol#283)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 311,
          "vulnerability_code": "    function unlock() external paused {\n\n        StakeHolder memory holder = stakeHolders[msg.sender]; \n\n        uint amt = holder.layerLocked;\n\n        require(amt > 0, 'You do not have locked tokens.');\n\n        require(UNILAYER.balanceOf(address(this))  >= amt, 'Insufficient account balance!');\n\n        \n\n        if(holder.layerLocked > 0) {\n\n            Rewards memory rwds = rewards[msg.sender][stakeNum-1];\n\n            require(rwds.isReceived == true,'Withdraw your rewards.');\n\n        }\n\n        \n\n        Stake memory stake = stakes[stakeNum];\n\n        stake.layerLockedTotal = stake.layerLockedTotal.sub(holder.layerLocked);\n\n        stakes[stakeNum] = stake;\n\n        \n\n        delete stakeHolders[msg.sender];\n\n        \n\n        UNILAYER.transfer(msg.sender, amt);\n\n        \n\n        emit logUnlockedTokens(msg.sender, amt, now);\n",
          "message": "Reentrancy in Layerx.unlock (Layerx_v5.sol#291-311):\n\tExternal calls:\n\t- require(bool,string)(UNILAYER.balanceOf(address(this)) >= amt,Insufficient account balance!) (Layerx_v5.sol#295)\n\tState variables written after the call(s):\n\t- stakes (Layerx_v5.sol#304)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint amtByDay = 27397260274000000000;\n",
          "message": "Layerx.amtByDay should be constant (Layerx_v5.sol#110)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 90,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
          "message": "Owned.transferOwnership (Layerx_v5.sol#86-90) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n",
          "message": "ApproveAndCallFallBack.receiveApproval (Layerx_v5.sol#94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply.sub(balances[address(0)]);\n",
          "message": "Layerx.totalSupply (Layerx_v5.sol#175-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
          "message": "IERC20.totalSupply (Layerx_v5.sol#66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": 186,
          "vulnerability_code": "    function balanceOf(address tokenOwner) public view returns (uint balance) {\n\n        return balances[tokenOwner];\n",
          "message": "Layerx.balanceOf (Layerx_v5.sol#184-186) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address account) external view returns (uint256);\n",
          "message": "IERC20.balanceOf (Layerx_v5.sol#67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transfer (Layerx_v5.sol#68) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 188,
          "vulnerability_to_line": 193,
          "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        emit Transfer(msg.sender, to, tokens);\n\n        return true;\n",
          "message": "Layerx.transfer (Layerx_v5.sol#188-193) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n",
          "message": "Layerx.allowance (Layerx_v5.sol#209-211) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address owner, address spender) external view returns (uint256);\n",
          "message": "IERC20.allowance (Layerx_v5.sol#69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": 199,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        return true;\n",
          "message": "Layerx.approve (Layerx_v5.sol#195-199) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 amount) external returns (bool);\n",
          "message": "IERC20.approve (Layerx_v5.sol#70) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
          "message": "IERC20.transferFrom (Layerx_v5.sol#71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": 207,
          "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        emit Transfer(from, to, tokens);\n\n        return true;\n",
          "message": "Layerx.transferFrom (Layerx_v5.sol#201-207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n\n        return true;\n",
          "message": "Layerx.approveAndCall (Layerx_v5.sol#213-218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 231,
          "vulnerability_code": "    function burn(uint256 value) public onlyOwner {\n\n        require(value > 0, \"Invalid Amount.\");\n\n        require(_totalSupply >= value, \"Invalid account state.\");\n\n        require(balances[owner] >= value, \"Invalid account balances state.\");\n\n        _totalSupply = _totalSupply.sub(value);\n\n        balances[owner] = balances[owner].sub(value);\n\n        emit Transfer(owner, address(0), value);\n",
          "message": "Layerx.burn (Layerx_v5.sol#224-231) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    function stakeOf(address tokenOwner) public view returns (uint balance) {\n\n        StakeHolder memory holder = stakeHolders[tokenOwner];\n\n        return holder.layerLocked;\n",
          "message": "Layerx.stakeOf (Layerx_v5.sol#388-391) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in Layerx_v5.sol:\n\t- pragma solidity^0.5.0 (Layerx_v5.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Owned.transferOwnership (Layerx_v5.sol#86) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event logLockedTokens(address holder, uint amountLocked, uint timeLocked, uint stakeId);\n",
          "message": "Event 'Layerx.logLockedTokens' (Layerx_v5.sol#136) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event logUnlockedTokens(address holder, uint amountUnlocked, uint timeUnlocked);\n",
          "message": "Event 'Layerx.logUnlockedTokens' (Layerx_v5.sol#137) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 138,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event logWithdraw(address holder, uint layerx, uint eth, uint stakeId, uint time);\n",
          "message": "Event 'Layerx.logWithdraw' (Layerx_v5.sol#138) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event logCloseStake(uint id, uint amount, uint timeClosed);\n",
          "message": "Event 'Layerx.logCloseStake' (Layerx_v5.sol#139) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _owner) public {\n",
          "message": "Parameter '_owner' of Layerx. (Layerx_v5.sol#160) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setNewStakeCreator(address _stakeCreator) external onlyOwner {\n",
          "message": "Parameter '_stakeCreator' of Layerx.setNewStakeCreator (Layerx_v5.sol#237) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _totalSupply;\n",
          "message": "Variable 'Layerx._totalSupply' (Layerx_v5.sol#107) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 UNILAYER = IERC20(0x0fF6ffcFDa92c53F615a4A75D982f399C989366b);\n",
          "message": "Variable 'Layerx.UNILAYER' (Layerx_v5.sol#158) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private swap;\n",
          "message": "Layerx.swap (Layerx_v5.sol#156) is never used in Layerx\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 UNILAYER = IERC20(0x0fF6ffcFDa92c53F615a4A75D982f399C989366b);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return _totalSupply.sub(balances[address(0)]);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setNewStakeCreator(address _stakeCreator) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setIsPaused(bool newIsPaused) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStakePeriod(uint256 newStakePeriod) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 156,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private swap;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint stakeNum = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint amtByDay = 27397260274000000000;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool isPaused = false;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping(address => uint)) allowed;   \n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "    IERC20 UNILAYER = IERC20(0x0fF6ffcFDa92c53F615a4A75D982f399C989366b);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}