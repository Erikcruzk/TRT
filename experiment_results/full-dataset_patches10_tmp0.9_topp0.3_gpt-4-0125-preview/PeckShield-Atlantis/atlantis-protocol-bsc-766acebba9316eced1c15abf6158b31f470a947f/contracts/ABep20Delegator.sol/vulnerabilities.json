{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address underlying_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": null,
          "vulnerability_code": "                ComptrollerInterface comptroller_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": null,
          "vulnerability_code": "                InterestRateModel interestRateModel_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 524,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint initialExchangeRateMantissa_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 525,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory name_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string memory symbol_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 decimals_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address implementation_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes memory becomeImplementationData) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"ABep20Delegator::_setImplementation: Caller must be admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == 0,\"ABep20Delegator:fallback: cannot send value to fallback\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == admin, \"ABep20Delegator::_setImplementation: Caller must be admin\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 959,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.value == 0,\"ABep20Delegator:fallback: cannot send value to fallback\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_54"
      ],
      "vulnerability_findings": [
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 917,
          "vulnerability_to_line": 925,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "ABep20Delegator.delegateTo (ABep20Delegator.sol#917-925) uses delegatecall to a input-controlled function id\n\t(success,returnData) = callee.delegatecall(data) (ABep20Delegator.sol#918)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 958,
          "vulnerability_to_line": 972,
          "vulnerability_code": "    function () external payable {\n\n        require(msg.value == 0,\"ABep20Delegator:fallback: cannot send value to fallback\");\n\n\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "ABep20Delegator.fallback (ABep20Delegator.sol#958-972) uses delegatecall to a input-controlled function id\n\t(success) = implementation.delegatecall(msg.data) (ABep20Delegator.sol#962)\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 952,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "ABep20Delegator.delegateToViewImplementation (ABep20Delegator.sol#944-952) is declared view but contains assembly code\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 185,
          "vulnerability_code": "interface EIP20NonStandardInterface {\n\n\n\n    /**\n\n     * @notice Get the total number of tokens in circulation\n\n     * @return The supply of tokens\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @notice Gets the balance of the specified address\n\n     * @param owner The address from which the balance will be retrieved\n\n     * @return The balance\n\n     */\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transfer(address dst, uint256 amount) external;\n\n\n\n    ///\n\n    /// !!!!!!!!!!!!!!\n\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\n\n    /// !!!!!!!!!!!!!!\n\n    ///\n\n\n\n    /**\n\n      * @notice Transfer `amount` tokens from `src` to `dst`\n\n      * @param src The address of the source account\n\n      * @param dst The address of the destination account\n\n      * @param amount The number of tokens to transfer\n\n      */\n\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n\n\n    /**\n\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n\n      * @dev This will overwrite the approval amount for `spender`\n\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @param amount The number of tokens that are approved\n\n      * @return Whether or not the approval succeeded\n\n      */\n\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n\n\n    /**\n\n      * @notice Get the current allowance from `owner` for `spender`\n\n      * @param owner The address of the account which owns the tokens to be spent\n\n      * @param spender The address of the account which may transfer tokens\n\n      * @return The number of tokens allowed to be spent\n\n      */\n\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n",
          "message": "EIP20NonStandardInterface (ABep20Delegator.sol#123-185) has incorrect ERC20 function interface(s):\n\t-transfer (ABep20Delegator.sol#149)\n\t-transferFrom (ABep20Delegator.sol#163)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": 570,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\n\n        require(msg.sender == admin, \"ABep20Delegator::_setImplementation: Caller must be admin\");\n\n\n\n        if (allowResign) {\n\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\n\n        }\n\n\n\n        address oldImplementation = implementation;\n\n        implementation = implementation_;\n\n\n\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\n\n\n\n        emit NewImplementation(oldImplementation, implementation);\n",
          "message": "Reentrancy in ABep20Delegator._setImplementation (ABep20Delegator.sol#557-570):\n\tExternal calls:\n\t- delegateToImplementation(abi.encodeWithSignature(_resignImplementation())) (ABep20Delegator.sol#561)\n\tState variables written after the call(s):\n\t- implementation (ABep20Delegator.sol#565)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    constructor(address underlying_,\n\n                ComptrollerInterface comptroller_,\n\n                InterestRateModel interestRateModel_,\n\n                uint initialExchangeRateMantissa_,\n\n                string memory name_,\n\n                string memory symbol_,\n\n                uint8 decimals_,\n\n                address payable admin_,\n\n                address implementation_,\n\n                bytes memory becomeImplementationData) public {\n\n        // Creator of the contract is admin during initialization\n\n        admin = msg.sender;\n\n\n\n        // First delegate gets to initialize the delegator (i.e. storage contract)\n\n        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n\n                                                            underlying_,\n\n                                                            comptroller_,\n\n                                                            interestRateModel_,\n\n                                                            initialExchangeRateMantissa_,\n\n                                                            name_,\n\n                                                            symbol_,\n\n                                                            decimals_));\n\n\n\n        // New implementations always get set via the settor (post-initialize)\n\n        _setImplementation(implementation_, false, becomeImplementationData);\n\n\n\n        // Set the proper admin now that initialization is done\n\n        admin = admin_;\n",
          "message": "Reentrancy in ABep20Delegator.constructor (ABep20Delegator.sol#521-549):\n\tExternal calls:\n\t- delegateTo(implementation_,abi.encodeWithSignature(initialize(address,address,address,uint256,string,string,uint8),underlying_,comptroller_,interestRateModel_,initialExchangeRateMantissa_,name_,symbol_,decimals_)) (ABep20Delegator.sol#535-542)\n\t- _setImplementation(implementation_,false,becomeImplementationData) (ABep20Delegator.sol#545)\n\tState variables written after the call(s):\n\t- admin (ABep20Delegator.sol#548)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 917,
          "vulnerability_to_line": 925,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "ABep20Delegator.delegateTo uses assembly (ABep20Delegator.sol#917-925)\n\t- ABep20Delegator.sol#919-923\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 952,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "ABep20Delegator.delegateToViewImplementation uses assembly (ABep20Delegator.sol#944-952)\n\t- ABep20Delegator.sol#946-950\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 958,
          "vulnerability_to_line": 972,
          "vulnerability_code": "    function () external payable {\n\n        require(msg.value == 0,\"ABep20Delegator:fallback: cannot send value to fallback\");\n\n\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "ABep20Delegator.fallback uses assembly (ABep20Delegator.sol#958-972)\n\t- ABep20Delegator.sol#964-971\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public underlying;\n",
          "message": "ABep20Storage.underlying should be constant (ABep20Delegator.sol#440)\nATokenStorage._notEntered should be constant (ABep20Delegator.sol#197)\nATokenStorage.accrualBlockNumber should be constant (ABep20Delegator.sol#258)\nATokenStorage.borrowIndex should be constant (ABep20Delegator.sol#263)\nATokenStorage.decimals should be constant (ABep20Delegator.sol#212)\nATokenStorage.initialExchangeRateMantissa should be constant (ABep20Delegator.sol#248)\nATokenStorage.name should be constant (ABep20Delegator.sol#202)\nATokenStorage.pendingAdmin should be constant (ABep20Delegator.sol#233)\nATokenStorage.reserveFactorMantissa should be constant (ABep20Delegator.sol#253)\nATokenStorage.symbol should be constant (ABep20Delegator.sol#207)\nATokenStorage.totalBorrows should be constant (ABep20Delegator.sol#268)\nATokenStorage.totalReserves should be constant (ABep20Delegator.sol#273)\nATokenStorage.totalSupply should be constant (ABep20Delegator.sol#278)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 418,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint);\n",
          "message": "ATokenInterface.borrowBalanceStored (ABep20Delegator.sol#418) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 770,
          "vulnerability_to_line": 773,
          "vulnerability_code": "    function borrowBalanceStored(address account) public view returns (uint) {\n\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"borrowBalanceStored(address)\", account));\n\n        return abi.decode(data, (uint));\n",
          "message": "ABep20Delegator.borrowBalanceStored (ABep20Delegator.sol#770-773) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint);\n",
          "message": "ATokenInterface.exchangeRateCurrent (ABep20Delegator.sol#419) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 779,
          "vulnerability_to_line": 782,
          "vulnerability_code": "    function exchangeRateCurrent() public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"exchangeRateCurrent()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "ABep20Delegator.exchangeRateCurrent (ABep20Delegator.sol#779-782) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint);\n",
          "message": "ATokenInterface.exchangeRateStored (ABep20Delegator.sol#420) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": 792,
          "vulnerability_code": "    function exchangeRateStored() public view returns (uint) {\n\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"exchangeRateStored()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "ABep20Delegator.exchangeRateStored (ABep20Delegator.sol#789-792) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function accrueInterest() public returns (uint);\n",
          "message": "ATokenInterface.accrueInterest (ABep20Delegator.sol#422) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 808,
          "vulnerability_to_line": 811,
          "vulnerability_code": "    function accrueInterest() public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"accrueInterest()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "ABep20Delegator.accrueInterest (ABep20Delegator.sol#808-811) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "ATokenInterface._setComptroller (ABep20Delegator.sol#430) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": 857,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller));\n\n        return abi.decode(data, (uint));\n",
          "message": "ABep20Delegator._setComptroller (ABep20Delegator.sol#854-857) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "ATokenInterface._setInterestRateModel (ABep20Delegator.sol#433) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": 908,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setInterestRateModel(address)\", newInterestRateModel));\n\n        return abi.decode(data, (uint));\n",
          "message": "ABep20Delegator._setInterestRateModel (ABep20Delegator.sol#905-908) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "ADelegateInterface._becomeImplementation (ABep20Delegator.sol#490) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "ADelegateInterface._resignImplementation (ABep20Delegator.sol#495) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in ABep20Delegator.sol:\n\t- pragma solidity^0.5.16 (ABep20Delegator.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (ABep20Delegator.sol#83): it allows old versions\n\t- pragma solidity^0.5.16 (ABep20Delegator.sol#116): it allows old versions\n\t- pragma solidity^0.5.16 (ABep20Delegator.sol#189): it allows old versions\n\t- pragma solidity^0.5.16 (ABep20Delegator.sol#500): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 917,
          "vulnerability_to_line": 925,
          "vulnerability_code": "    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return returnData;\n",
          "message": "Low level call in ABep20Delegator.delegateTo (ABep20Delegator.sol#917-925):\n\t-(success,returnData) = callee.delegatecall(data) ABep20Delegator.sol#918\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 952,
          "vulnerability_code": "    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\n\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\"delegateToImplementation(bytes)\", data));\n\n        assembly {\n\n            if eq(success, 0) {\n\n                revert(add(returnData, 0x20), returndatasize)\n\n            }\n\n        }\n\n        return abi.decode(returnData, (bytes));\n",
          "message": "Low level call in ABep20Delegator.delegateToViewImplementation (ABep20Delegator.sol#944-952):\n\t-(success,returnData) = address(this).staticcall(abi.encodeWithSignature(delegateToImplementation(bytes),data)) ABep20Delegator.sol#945\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 958,
          "vulnerability_to_line": 972,
          "vulnerability_code": "    function () external payable {\n\n        require(msg.value == 0,\"ABep20Delegator:fallback: cannot send value to fallback\");\n\n\n\n        // delegate all other functions to current implementation\n\n        (bool success, ) = implementation.delegatecall(msg.data);\n\n\n\n        assembly {\n\n            let free_mem_ptr := mload(0x40)\n\n            returndatacopy(free_mem_ptr, 0, returndatasize)\n\n\n\n            switch success\n\n            case 0 { revert(free_mem_ptr, returndatasize) }\n\n            default { return(free_mem_ptr, returndatasize) }\n\n        }\n",
          "message": "Low level call in ABep20Delegator.fallback (ABep20Delegator.sol#958-972):\n\t-(success) = implementation.delegatecall(msg.data) ABep20Delegator.sol#962\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isComptroller = true;\n",
          "message": "Constant 'ComptrollerInterface.isComptroller' (ABep20Delegator.sol#7) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isInterestRateModel = true;\n",
          "message": "Constant 'InterestRateModel.isInterestRateModel' (ABep20Delegator.sol#91) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "Variable 'ATokenStorage._notEntered' (ABep20Delegator.sol#197) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n",
          "message": "Constant 'ATokenStorage.borrowRateMaxMantissa' (ABep20Delegator.sol#218) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint internal constant reserveFactorMaxMantissa = 1e18;\n",
          "message": "Constant 'ATokenStorage.reserveFactorMaxMantissa' (ABep20Delegator.sol#223) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\n",
          "message": "Constant 'ATokenStorage.protocolSeizeShareMantissa' (ABep20Delegator.sol#308) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": "Function 'ATokenInterface._setPendingAdmin' (ABep20Delegator.sol#428) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint);\n",
          "message": "Function 'ATokenInterface._acceptAdmin' (ABep20Delegator.sol#429) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n",
          "message": "Function 'ATokenInterface._setComptroller' (ABep20Delegator.sol#430) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n",
          "message": "Function 'ATokenInterface._setReserveFactor' (ABep20Delegator.sol#431) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 432,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint);\n",
          "message": "Function 'ATokenInterface._reduceReserves' (ABep20Delegator.sol#432) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n",
          "message": "Function 'ATokenInterface._setInterestRateModel' (ABep20Delegator.sol#433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 316,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool public constant isAToken = true;\n",
          "message": "Constant 'ATokenInterface.isAToken' (ABep20Delegator.sol#316) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint);\n",
          "message": "Function 'ABep20Interface._addReserves' (ABep20Delegator.sol#459) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 481,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n",
          "message": "Function 'ADelegatorInterface._setImplementation' (ABep20Delegator.sol#481) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _becomeImplementation(bytes memory data) public;\n",
          "message": "Function 'ADelegateInterface._becomeImplementation' (ABep20Delegator.sol#490) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 495,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _resignImplementation() public;\n",
          "message": "Function 'ADelegateInterface._resignImplementation' (ABep20Delegator.sol#495) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": 847,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setPendingAdmin(address)\", newPendingAdmin));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._setPendingAdmin' (ABep20Delegator.sol#844-847) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 874,
          "vulnerability_to_line": 877,
          "vulnerability_code": "    function _acceptAdmin() external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_acceptAdmin()\"));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._acceptAdmin' (ABep20Delegator.sol#874-877) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 854,
          "vulnerability_to_line": 857,
          "vulnerability_code": "    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setComptroller(address)\", newComptroller));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._setComptroller' (ABep20Delegator.sol#854-857) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 864,
          "vulnerability_to_line": 867,
          "vulnerability_code": "    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setReserveFactor(uint256)\", newReserveFactorMantissa));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._setReserveFactor' (ABep20Delegator.sol#864-867) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 894,
          "vulnerability_to_line": 897,
          "vulnerability_code": "    function _reduceReserves(uint reduceAmount) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_reduceReserves(uint256)\", reduceAmount));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._reduceReserves' (ABep20Delegator.sol#894-897) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 905,
          "vulnerability_to_line": 908,
          "vulnerability_code": "    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_setInterestRateModel(address)\", newInterestRateModel));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._setInterestRateModel' (ABep20Delegator.sol#905-908) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": 887,
          "vulnerability_code": "    function _addReserves(uint addAmount) external returns (uint) {\n\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_addReserves(uint256)\", addAmount));\n\n        return abi.decode(data, (uint));\n",
          "message": "Function 'ABep20Delegator._addReserves' (ABep20Delegator.sol#884-887) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": 570,
          "vulnerability_code": "    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public {\n\n        require(msg.sender == admin, \"ABep20Delegator::_setImplementation: Caller must be admin\");\n\n\n\n        if (allowResign) {\n\n            delegateToImplementation(abi.encodeWithSignature(\"_resignImplementation()\"));\n\n        }\n\n\n\n        address oldImplementation = implementation;\n\n        implementation = implementation_;\n\n\n\n        delegateToImplementation(abi.encodeWithSignature(\"_becomeImplementation(bytes)\", becomeImplementationData));\n\n\n\n        emit NewImplementation(oldImplementation, implementation);\n",
          "message": "Function 'ABep20Delegator._setImplementation' (ABep20Delegator.sol#557-570) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool internal _notEntered;\n",
          "message": "ATokenStorage._notEntered (ABep20Delegator.sol#197) is never used in ABep20Delegator\nATokenStorage.borrowRateMaxMantissa (ABep20Delegator.sol#218) is never used in ABep20Delegator\nATokenStorage.reserveFactorMaxMantissa (ABep20Delegator.sol#223) is never used in ABep20Delegator\nATokenStorage.initialExchangeRateMantissa (ABep20Delegator.sol#248) is never used in ABep20Delegator\nATokenStorage.accountTokens (ABep20Delegator.sol#283) is never used in ABep20Delegator\nATokenStorage.transferAllowances (ABep20Delegator.sol#288) is never used in ABep20Delegator\nATokenStorage.accountBorrows (ABep20Delegator.sol#303) is never used in ABep20Delegator\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ATokenInterface is ATokenStorage {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ABep20Delegator is ATokenInterface, ABep20Interface, ADelegatorInterface {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 116,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint repayAmount) external view returns (uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address underlying_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address payable admin_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 529,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address implementation_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 530,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bytes memory becomeImplementationData) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 532,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = msg.sender;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 535,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,address,address,uint256,string,string,uint8)\",\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 537,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            comptroller_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 539,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            initialExchangeRateMantissa_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 541,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                                            symbol_,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(implementation_, false, becomeImplementationData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 545,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _setImplementation(implementation_, false, becomeImplementationData);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 548,
          "vulnerability_to_line": null,
          "vulnerability_code": "        admin = admin_;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}