{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < owners.length - 1; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owners[i] = owners[SafeMath.sub(owners.length, 1)];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _owners.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < owners.length - 1; i++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 72,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if (owners[i] == _owner) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owners[i] = owners[SafeMath.sub(owners.length, 1)];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owners[i] = owners[SafeMath.sub(owners.length, 1)];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owners[i] = owners[SafeMath.sub(owners.length, 1)];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": null,
          "vulnerability_code": "      isOwner[_owners[i]] = true;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < owners.length - 1; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _owners.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < owners.length - 1; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _owners.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_40"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public version = 'F0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n",
          "message": "Fee.version should be constant (Fee.sol#256)\nToken.totalSupply should be constant (Fee.sol#145)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Different versions of Solidity is used in Fee.sol:\n\t- Version used: ['^0.4.11', '^0.4.18', '^0.4.8']\n\t- Fee.sol#3 declares pragma solidity^0.4.11\n\t- Fee.sol#38 declares pragma solidity^0.4.18\n\t- Fee.sol#106 declares pragma solidity^0.4.18\n\t- Fee.sol#132 declares pragma solidity^0.4.8\n\t- Fee.sol#189 declares pragma solidity^0.4.8\n\t- Fee.sol#237 declares pragma solidity^0.4.18\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": 79,
          "vulnerability_code": "  function removeOwner(address _owner) public onlyOwner {\n\n    require(owners.length > 1);\n\n    isOwner[_owner] = false;\n\n    for (uint i = 0; i < owners.length - 1; i++) {\n\n      if (owners[i] == _owner) {\n\n        owners[i] = owners[SafeMath.sub(owners.length, 1)];\n\n        break;\n\n      }\n\n    }\n\n    owners.length = SafeMath.sub(owners.length, 1);\n\n    OwnerRemoval(_owner);\n",
          "message": "Owned.removeOwner (Fee.sol#68-79) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 100,
          "vulnerability_code": "  function getOwners() public constant returns (address[])  {\n\n    return owners;\n",
          "message": "Owned.getOwners (Fee.sol#98-100) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": 218,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance) {\n\n        return balances[_owner];\n",
          "message": "StandardToken.balanceOf (Fee.sol#216-218) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": "Token.balanceOf (Fee.sol#149) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": 203,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n\n        //Replace the if with this one instead.\n\n        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n\n        require(balances[msg.sender] >= _value);\n\n        balances[msg.sender] -= _value;\n\n        balances[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n",
          "message": "StandardToken.transfer (Fee.sol#193-203) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success);\n",
          "message": "Token.transfer (Fee.sol#155) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n",
          "message": "Token.transferFrom (Fee.sol#162) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": 214,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n\n        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n\n        balances[_to] += _value;\n\n        balances[_from] -= _value;\n\n        allowed[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n",
          "message": "StandardToken.transferFrom (Fee.sol#205-214) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success);\n",
          "message": "Token.approve (Fee.sol#168) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": 224,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
          "message": "StandardToken.approve (Fee.sol#220-224) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n",
          "message": "Token.allowance (Fee.sol#173) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 228,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n\n      return allowed[_owner][_spender];\n",
          "message": "StandardToken.allowance (Fee.sol#226-228) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 295,
          "vulnerability_code": "  function burnTokens(uint _value) public notZero(_value) {\n\n    require(balances[msg.sender] >= _value);\n\n\n\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n\n    feeInCirculation = SafeMath.sub(feeInCirculation, _value);\n\n    Burn(msg.sender, _value);\n",
          "message": "Fee.burnTokens (Fee.sol#289-295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": 305,
          "vulnerability_code": "  function sendTokens(address _to, uint _value) public onlyMinter validAddress(_to) notZero(_value) {\n\n    balances[_to] = SafeMath.add(balances[_to], _value);\n\n    feeInCirculation = SafeMath.add(feeInCirculation, _value);\n\n    Transfer(msg.sender, _to, _value);\n",
          "message": "Fee.sendTokens (Fee.sol#301-305) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Detected issues with version pragma in Fee.sol:\n\t- pragma solidity^0.4.11 (Fee.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (Fee.sol#38): it allows old versions\n\t- pragma solidity^0.4.18 (Fee.sol#106): it allows old versions\n\t- pragma solidity^0.4.8 (Fee.sol#132): it allows old versions\n\t- pragma solidity^0.4.8 (Fee.sol#189): it allows old versions\n\t- pragma solidity^0.4.18 (Fee.sol#237): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setOperator(address _operator) external onlyOwner {\n",
          "message": "Parameter '_operator' of Owned.setOperator (Fee.sol#63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function removeOwner(address _owner) public onlyOwner {\n",
          "message": "Parameter '_owner' of Owned.removeOwner (Fee.sol#68) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function addOwner(address _owner) external onlyOwner {\n",
          "message": "Parameter '_owner' of Owned.addOwner (Fee.sol#81) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setOwners(address[] _owners) internal {\n",
          "message": "Parameter '_owners' of Owned.setOwners (Fee.sol#89) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of StandardToken.balanceOf (Fee.sol#216) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_to' of StandardToken.transfer (Fee.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of StandardToken.transfer (Fee.sol#193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (Fee.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (Fee.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (Fee.sol#205) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (Fee.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
          "message": "Parameter '_value' of StandardToken.approve (Fee.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (Fee.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (Fee.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": 279,
          "vulnerability_code": "  function Fee(\n\n  address[] _owners,\n\n  string _tokenName,\n\n  uint8 _decimalUnits,\n\n  string _tokenSymbol\n\n  )\n\n  public\n\n  notEmpty(_tokenName)\n\n  notEmpty(_tokenSymbol)\n\n  {\n\n    setOwners(_owners);\n\n    name = _tokenName;\n\n    decimals = _decimalUnits;\n\n    symbol = _tokenSymbol;\n",
          "message": "Function 'Fee.Fee' (Fee.sol#265-279) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address[] _owners,\n",
          "message": "Parameter '_owners' of Fee.Fee (Fee.sol#266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string _tokenName,\n",
          "message": "Parameter '_tokenName' of Fee.Fee (Fee.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 268,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8 _decimalUnits,\n",
          "message": "Parameter '_decimalUnits' of Fee.Fee (Fee.sol#268) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string _tokenSymbol\n",
          "message": "Parameter '_tokenSymbol' of Fee.Fee (Fee.sol#269) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMinter(address _minter) external onlyOwner validAddress(_minter) {\n",
          "message": "Parameter '_minter' of Fee.setMinter (Fee.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burnTokens(uint _value) public notZero(_value) {\n",
          "message": "Parameter '_value' of Fee.burnTokens (Fee.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendTokens(address _to, uint _value) public onlyMinter validAddress(_to) notZero(_value) {\n",
          "message": "Parameter '_to' of Fee.sendTokens (Fee.sol#301) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendTokens(address _to, uint _value) public onlyMinter validAddress(_to) notZero(_value) {\n",
          "message": "Parameter '_value' of Fee.sendTokens (Fee.sol#301) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_address != address(0x0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owners.length = SafeMath.sub(owners.length, 1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwners() public constant returns (address[])  {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < owners.length - 1; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint i = 0; i < _owners.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setOperator(address _operator) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setMinter(address _minter) external onlyOwner validAddress(_minter) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.8;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setOwners(address[] _owners) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwners() public constant returns (address[])  {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 266,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address[] _owners,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string _tokenName,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string _tokenSymbol\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => uint256) balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": null,
          "vulnerability_code": "  string public name;                   //fancy name: eg Simon Bucks\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Owned {\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += _value;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "  address[] public owners;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Blockchain Labs NZ-Leverj/staking-e8716e4a11881fad181b5330206d8b0c27a58510/contracts/SafeMath.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwners() public constant returns (address[])  {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return owners;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += _value;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += _value;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Blockchain Labs NZ-Leverj/staking-e8716e4a11881fad181b5330206d8b0c27a58510/contracts/SafeMath.sol\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwners() public constant returns (address[])  {\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return owners;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += _value;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += _value;\n",
          "message": null
        }
      ]
    }
  }
}