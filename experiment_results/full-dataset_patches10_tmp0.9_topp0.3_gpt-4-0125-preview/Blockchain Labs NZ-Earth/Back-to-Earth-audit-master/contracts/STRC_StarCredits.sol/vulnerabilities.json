{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the120address) && (now < deadline120)) throw;    // Ensure you can not change 120address frozen status until deadline\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the365address) && (now < deadline365)) throw;    // Ensure you can not change 365address frozen status until deadline\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_39"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public standard = 'Token 0.1';\n",
          "message": "StandardToken.standard should be constant (STRC_StarCredits.sol#46)\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != owner) throw;                      // functions with onlyOwner will throw an exception if not the contract owner\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#20:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#107:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[msg.sender]) throw;                // Check if sender is frozen\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#108:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_to]) throw;                       // Check if target is frozen                 \n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#109:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#136:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_to]) throw;                          // Check if target frozen                 \n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#137:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#139:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#140:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the120address) && (now < deadline120)) throw;    // Ensure you can not change 120address frozen status until deadline\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#150:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the365address) && (now < deadline365)) throw;    // Ensure you can not change 365address frozen status until deadline\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#151:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#158:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#168:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_from]) throw;                       // Check if recipient frozen \n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#169:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "deprecated-standards",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;      // Check allowance\n",
          "message": "Deprecated standard detected @ STRC_StarCredits.sol#172:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\n\n        owner = newOwner;\n",
          "message": "owned.transferOwnership (STRC_StarCredits.sol#24-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n",
          "message": "tokenRecipient.receiveApproval (STRC_StarCredits.sol#29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": 114,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success){\n\n        if (_value == 0) return false; \t\t\t\t             // Don't waste gas on zero-value transaction\n\n        if (balanceOf[msg.sender] < _value) return false;        // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n\n        if (frozenAccount[msg.sender]) throw;                // Check if sender is frozen\n\n        if (frozenAccount[_to]) throw;                       // Check if target is frozen                 \n\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n\n        return true;\n",
          "message": "StandardToken.transfer (STRC_StarCredits.sol#104-114) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": 132,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\n        returns (bool success) {\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n\n        }\n",
          "message": "StandardToken.approveAndCall (STRC_StarCredits.sol#125-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 146,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \n\n        if (frozenAccount[_to]) throw;                          // Check if target frozen                 \n\n        if (balanceOf[_from] < _value) return false;            // Check if the sender has enough\n\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\n\n        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\n\n        balanceOf[_from] -= _value;                             // Subtract from the sender\n\n        balanceOf[_to] += _value;                               // Add the same to the recipient\n\n        allowance[_from][msg.sender] -= _value;                 // Allowance changes\n\n        Transfer(_from, _to, _value);                           // Tokens are send\n\n        return true;\n",
          "message": "StandardToken.transferFrom (STRC_StarCredits.sol#135-146) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 165,
          "vulnerability_code": "    function burn(uint256 _value) returns (bool success)  {\n\n\t\tif (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n\n        if (_value == 0) return false;\t\t\t               // Don't waste gas on zero-value transaction\n\n        if (balanceOf[msg.sender] < _value) return false;      // Check if the sender has enough\n\n        balanceOf[msg.sender] -= _value;                       // Subtract from the sender\n\n        totalSupply -= _value;                                 // Reduce totalSupply accordingly\n\n        Transfer(msg.sender,0, _value);                        // Burn baby burn\n\n        return true;\n",
          "message": "StandardToken.burn (STRC_StarCredits.sol#157-165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": 178,
          "vulnerability_code": "    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success)  {\n\n        if (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n\n        if (frozenAccount[_from]) throw;                       // Check if recipient frozen \n\n        if (_value == 0) return false;\t\t\t               // Don't waste gas on zero-value transaction\n\n        if (balanceOf[_from] < _value) return false;           // Check if the sender has enough\n\n        if (_value > allowance[_from][msg.sender]) throw;      // Check allowance\n\n        balanceOf[_from] -= _value;                            // Subtract from the sender\n\n        allowance[_from][msg.sender] -= _value;                // Allowance is updated\n\n        totalSupply -= _value;                                 // Updates totalSupply\n\n        Transfer(_from, 0, _value);\n\n        return true;\n",
          "message": "StandardToken.burnFrom (STRC_StarCredits.sol#167-178) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": "Detected issues with version pragma in STRC_StarCredits.sol:\n\t- pragma solidity^0.4.11 (STRC_StarCredits.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 27,
          "vulnerability_code": "contract owned {\n\n    address public owner;                                    //the contract owner\n\n\n\n    function owned() {\n\n        owner = msg.sender;                                  //constructor initializes the creator as the owner on initialization\n\n    }\n\n\n\n    modifier onlyOwner {\n\n        if (msg.sender != owner) throw;                      // functions with onlyOwner will throw an exception if not the contract owner\n\n        _;\n\n    }\n\n\n\n    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\n\n        owner = newOwner;\n\n    }\n",
          "message": "Contract 'owned' (STRC_StarCredits.sol#12-27) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n",
          "message": "Contract 'tokenRecipient' (STRC_StarCredits.sol#29) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 101,
          "vulnerability_code": "    function StandardToken(\n\n\n\n        string tokenName,   \n\n        uint8 decimalUnits,\n\n        string tokenSymbol,\n\n        \n\n        uint256 distro1,            // the initial crowdfund distro amount\n\n        uint256 distro120,          // the 120 day distro amount\n\n        uint256 distro365,          // the 365 day distro amount\n\n        address address120,         // the 120 day address \n\n        address address365,         // the 365 day address\n\n        uint durationInMinutes120,  // amount of minutes to lock address120\n\n        uint durationInMinutes365   // amount of minutes to lock address365\n\n        \n\n        ) {\n\n        balanceOf[msg.sender] = distro1;                         // Give the owner tokens for initial crowdfund distro\n\n        balanceOf[address120] = distro120;                       // Set 120 day address balance (to be locked)\n\n        balanceOf[address365] = distro365;                       // Set 365 day address balance (to be locked)\n\n        freezeAccount(address120, true);                         // Freeze the 120 day address on creation\n\n        freezeAccount(address365, true);                         // Freeze the 120 day address on creation\n\n        totalSupply = distro1+distro120+distro365;               // Total supply is sum of tokens assigned to distro accounts\n\n        deadline120 = now + durationInMinutes120 * 1 minutes;    // Set the 120 day deadline\n\n        deadline365 = now + durationInMinutes365 * 1 minutes;    // Set the 365 day deadline\n\n        the120address = address120;                              // Set the publicly accessible 120 access\n\n        the365address = address365;                              // Set the publicly accessible 365 access\n\n        name = tokenName;                                        // Set the name for display purposes\n\n        symbol = tokenSymbol;                                    // Set the symbol for display purposes\n\n        decimals = decimalUnits;                                 // Number of decimals for display purposes\n",
          "message": "Function 'StandardToken.StandardToken' (STRC_StarCredits.sol#73-101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success){\n",
          "message": "Parameter '_to' of StandardToken.transfer (STRC_StarCredits.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success){\n",
          "message": "Parameter '_value' of StandardToken.transfer (STRC_StarCredits.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": "Parameter '_spender' of StandardToken.approve (STRC_StarCredits.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": "Parameter '_value' of StandardToken.approve (STRC_StarCredits.sol#117) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": "Parameter '_spender' of StandardToken.approveAndCall (STRC_StarCredits.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": "Parameter '_value' of StandardToken.approveAndCall (STRC_StarCredits.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": "Parameter '_extraData' of StandardToken.approveAndCall (STRC_StarCredits.sol#125) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (STRC_StarCredits.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (STRC_StarCredits.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (STRC_StarCredits.sol#135) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(uint256 _value) returns (bool success)  {\n",
          "message": "Parameter '_value' of StandardToken.burn (STRC_StarCredits.sol#157) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success)  {\n",
          "message": "Parameter '_from' of StandardToken.burnFrom (STRC_StarCredits.sol#167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success)  {\n",
          "message": "Parameter '_value' of StandardToken.burnFrom (STRC_StarCredits.sol#167) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != owner) throw;                      // functions with onlyOwner will throw an exception if not the contract owner\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[msg.sender]) throw;                // Check if sender is frozen\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_to]) throw;                       // Check if target is frozen                 \n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_to]) throw;                          // Check if target frozen                 \n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the120address) && (now < deadline120)) throw;    // Ensure you can not change 120address frozen status until deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the365address) && (now < deadline365)) throw;    // Ensure you can not change 365address frozen status until deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_from]) throw;                       // Check if recipient frozen \n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;      // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.11;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender != owner) throw;                      // functions with onlyOwner will throw an exception if not the contract owner\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[msg.sender]) throw;                // Check if sender is frozen\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_to]) throw;                       // Check if target is frozen                 \n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 136,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_to]) throw;                          // Check if target frozen                 \n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the120address) && (now < deadline120)) throw;    // Ensure you can not change 120address frozen status until deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 151,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if ((target == the365address) && (now < deadline365)) throw;    // Ensure you can not change 365address frozen status until deadline\n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "\t\tif (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[msg.sender]) throw;                  // Check if sender frozen       \n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 169,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (frozenAccount[_from]) throw;                       // Check if recipient frozen \n",
          "message": null
        },
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (_value > allowance[_from][msg.sender]) throw;      // Check allowance\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function owned() {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function StandardToken(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 117,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address _spender, uint256 _value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function freezeAccount(address target, bool freeze ) onlyOwner {    \n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(uint256 _value) returns (bool success)  {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 167,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success)  {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 125,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string public name;                     // the token name \n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 162,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply -= _value;                                 // Reduce totalSupply accordingly\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "        totalSupply -= _value;                                 // Updates totalSupply\n",
          "message": null
        }
      ]
    }
  }
}