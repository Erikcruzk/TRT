{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (IKyberNetwork _kyber, address _walletId) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "        kyber = _kyber;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        walletId = _walletId;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(prevBalance >= _value, \"Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 187,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(prevBalance >= _value, \"Insufficient funds\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_token.allowance(_from, address(this)) >= _value, \"Insufficient allowance\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(prevBalance - _value == _token.balanceOf(_from), \"Transfer failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_token.allowance(address(this), _spender) == _value, \"Approve failed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken.safeTransferFrom(msg.sender, address(this), _srcAmount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not transfer _srcToken to this contract\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken.safeApprove(kyber, _srcAmount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not approve kyber to use _srcToken on behalf of this contract\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken.clearApprove(kyber),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not clear approval of kyber to use _srcToken on behalf of this contract\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount == _destAmount, \"Amount bought is not equal to dest amount\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _srcToken.safeTransfer(msg.sender, change),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"Could not transfer change to sender\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _destToken.safeTransfer(msg.sender, amount),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not transfer amount of _destToken to msg.sender\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (expectedRate == 0 && address(_srcToken) == ManaToken) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken.safeTransferFrom(msg.sender, address(this), _srcAmount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not transfer _srcToken to this contract\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken.safeApprove(kyber, _srcAmount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not approve kyber to use _srcToken on behalf of this contract\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 306,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 321,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _srcToken.clearApprove(kyber),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not clear approval of kyber to use _srcToken on behalf of this contract\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(amount == _destAmount, \"Amount bought is not equal to dest amount\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "                _srcToken.safeTransfer(msg.sender, change),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "                \"Could not transfer change to sender\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "            );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _destToken.safeTransfer(msg.sender, amount),\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "            \"Could not transfer amount of _destToken to msg.sender\"\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        );\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_31"
      ],
      "vulnerability_findings": [
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n\n        uint256 prevBalance = _token.balanceOf(address(this));\n\n\n\n        require(prevBalance >= _value, \"Insufficient funds\");\n\n\n\n        bool success = address(_token).call(\n\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\n\n        );\n\n\n\n        if (!success) {\n\n            return false;\n\n        }\n\n\n\n        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\n\n\n\n        return true;\n",
          "message": "SafeERC20.safeTransfer (KyberConverter.sol#174-190) uses a dangerous strict equality:\n\t- require(bool,string)(prevBalance - _value == _token.balanceOf(address(this)),Transfer failed)\n"
        },
        {
          "name": "incorrect-equality",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n\n        uint256 prevBalance = _token.balanceOf(address(this));\n\n\n\n        require(prevBalance >= _value, \"Insufficient funds\");\n\n\n\n        bool success = address(_token).call(\n\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\n\n        );\n\n\n\n        if (!success) {\n\n            return false;\n\n        }\n\n\n\n        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\n\n\n\n        return true;\n",
          "message": "SafeERC20.safeTransfer (KyberConverter.sol#174-190) uses a dangerous strict equality:\n\t- require(bool,string)(prevBalance - _value == _token.balanceOf(address(this)),Transfer failed)\nSafeERC20.safeTransferFrom (KyberConverter.sol#199-222) uses a dangerous strict equality:\n\t- require(bool,string)(prevBalance - _value == _token.balanceOf(_from),Transfer failed)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public ManaToken = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942;\n",
          "message": "KyberConverter.ManaToken should be constant (KyberConverter.sol#278)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": 356,
          "vulnerability_code": "    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \n\n    public view returns(uint256 expectedRate, uint256 slippageRate) \n\n    {\n\n        (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n\n        if (expectedRate == 0 && address(_srcToken) == ManaToken) {\n\n            (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n\n        }\n",
          "message": "KyberConverter.getExpectedRate (KyberConverter.sol#349-356) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 136,
          "vulnerability_code": "    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \n",
          "message": "ITokenConverter.getExpectedRate (KyberConverter.sol#135-136) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": 151,
          "vulnerability_code": "    function trade(\n\n        IERC20 _srcToken,\n\n        uint _srcAmount,\n\n        IERC20 _destToken,\n\n        address _destAddress, \n\n        uint _maxDestAmount,\t\n\n        uint _minConversionRate,\t\n\n        address _walletId\n\n        ) \n",
          "message": "IKyberNetwork.trade (KyberConverter.sol#142-151) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 153,
          "vulnerability_to_line": 154,
          "vulnerability_code": "    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint _srcAmount) \n",
          "message": "IKyberNetwork.getExpectedRate (KyberConverter.sol#153-154) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 190,
          "vulnerability_code": "    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n\n        uint256 prevBalance = _token.balanceOf(address(this));\n\n\n\n        require(prevBalance >= _value, \"Insufficient funds\");\n\n\n\n        bool success = address(_token).call(\n\n            abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\n\n        );\n\n\n\n        if (!success) {\n\n            return false;\n\n        }\n\n\n\n        require(prevBalance - _value == _token.balanceOf(address(this)), \"Transfer failed\");\n\n\n\n        return true;\n",
          "message": "Low level call in SafeERC20.safeTransfer (KyberConverter.sol#174-190):\n\t-success = address(_token).call(abi.encodeWithSignature(transfer(address,uint256),_to,_value)) KyberConverter.sol#179-181\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": 222,
          "vulnerability_code": "    function safeTransferFrom(\n\n        IERC20 _token,\n\n        address _from,\n\n        address _to, \n\n        uint256 _value\n\n    ) internal returns (bool) \n\n    {\n\n        uint256 prevBalance = _token.balanceOf(_from);\n\n\n\n        require(prevBalance >= _value, \"Insufficient funds\");\n\n        require(_token.allowance(_from, address(this)) >= _value, \"Insufficient allowance\");\n\n\n\n        bool success = address(_token).call(\n\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value)\n\n        );\n\n\n\n        if (!success) {\n\n            return false;\n\n        }\n\n\n\n        require(prevBalance - _value == _token.balanceOf(_from), \"Transfer failed\");\n\n\n\n        return true;\n",
          "message": "Low level call in SafeERC20.safeTransferFrom (KyberConverter.sol#199-222):\n\t-success = address(_token).call(abi.encodeWithSignature(transferFrom(address,address,uint256),_from,_to,_value)) KyberConverter.sol#211-213\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": 248,
          "vulnerability_code": "    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\n\n        bool success = address(_token).call(\n\n            abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\n\n        ); \n\n\n\n        if (!success) {\n\n            return false;\n\n        }\n\n\n\n        require(_token.allowance(address(this), _spender) == _value, \"Approve failed\");\n\n\n\n        return true;\n",
          "message": "Low level call in SafeERC20.safeApprove (KyberConverter.sol#236-248):\n\t-success = address(_token).call(abi.encodeWithSignature(approve(address,uint256),_spender,_value)) KyberConverter.sol#237-239\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_token' of SafeERC20.safeTransfer (KyberConverter.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_to' of SafeERC20.safeTransfer (KyberConverter.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_value' of SafeERC20.safeTransfer (KyberConverter.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _token,\n",
          "message": "Parameter '_token' of SafeERC20.safeTransferFrom (KyberConverter.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _from,\n",
          "message": "Parameter '_from' of SafeERC20.safeTransferFrom (KyberConverter.sol#201) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _to, \n",
          "message": "Parameter '_to' of SafeERC20.safeTransferFrom (KyberConverter.sol#202) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _value\n",
          "message": "Parameter '_value' of SafeERC20.safeTransferFrom (KyberConverter.sol#203) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_token' of SafeERC20.safeApprove (KyberConverter.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_spender' of SafeERC20.safeApprove (KyberConverter.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\n",
          "message": "Parameter '_value' of SafeERC20.safeApprove (KyberConverter.sol#236) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\n",
          "message": "Parameter '_token' of SafeERC20.clearApprove (KyberConverter.sol#256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\n",
          "message": "Parameter '_spender' of SafeERC20.clearApprove (KyberConverter.sol#256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _srcToken,\n",
          "message": "Parameter '_srcToken' of KyberConverter.convert (KyberConverter.sol#286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IERC20 _destToken,\n",
          "message": "Parameter '_destToken' of KyberConverter.convert (KyberConverter.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 288,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _srcAmount,\n",
          "message": "Parameter '_srcAmount' of KyberConverter.convert (KyberConverter.sol#288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _destAmount\n",
          "message": "Parameter '_destAmount' of KyberConverter.convert (KyberConverter.sol#289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \n",
          "message": "Parameter '_srcToken' of KyberConverter.getExpectedRate (KyberConverter.sol#349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 349,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getExpectedRate(IERC20 _srcToken, IERC20 _destToken, uint256 _srcAmount) \n",
          "message": "Parameter '_destToken' of KyberConverter.getExpectedRate (KyberConverter.sol#349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (IKyberNetwork _kyber, address _walletId) public {\n",
          "message": "Parameter '_kyber' of KyberConverter. (KyberConverter.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor (IKyberNetwork _kyber, address _walletId) public {\n",
          "message": "Parameter '_walletId' of KyberConverter. (KyberConverter.sol#280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public ManaToken = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942;\n",
          "message": "Variable 'KyberConverter.ManaToken' (KyberConverter.sol#278) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public ManaToken = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract IKyberNetwork {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = address(_token).call(\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "            abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = address(_token).call(\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (expectedRate == 0 && address(_srcToken) == ManaToken) {\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 354,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (expectedRate, slippageRate) = kyber.getExpectedRate(_srcToken, _destToken, 1);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = address(_token).call(\n",
          "message": null
        }
      ]
    }
  }
}