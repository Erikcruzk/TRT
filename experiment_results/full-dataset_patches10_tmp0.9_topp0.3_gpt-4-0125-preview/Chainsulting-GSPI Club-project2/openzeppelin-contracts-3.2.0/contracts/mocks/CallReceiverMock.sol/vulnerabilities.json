{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _array.push(i);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        revert(\"CallReceiverMock: reverting\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function mockFunction() public payable returns (string memory) {\n\n        emit MockFunctionCalled();\n\n\n\n        return \"0x1234\";\n",
          "message": "Contract locking ether found in CallReceiverMock.sol:\n\tContract CallReceiverMock has payable functions:\n\t - mockFunction (CallReceiverMock.sol#13-17)\n\t - mockFunctionRevertsNoReason (CallReceiverMock.sol#25-27)\n\t - mockFunctionRevertsReason (CallReceiverMock.sol#29-31)\n\t - mockFunctionThrows (CallReceiverMock.sol#33-35)\n\t - mockFunctionOutOfGas (CallReceiverMock.sol#37-41)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function mockFunction() public payable returns (string memory) {\n\n        emit MockFunctionCalled();\n\n\n\n        return \"0x1234\";\n",
          "message": "CallReceiverMock.mockFunction (CallReceiverMock.sol#13-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function mockFunctionNonPayable() public returns (string memory) {\n\n        emit MockFunctionCalled();\n\n\n\n        return \"0x1234\";\n",
          "message": "CallReceiverMock.mockFunctionNonPayable (CallReceiverMock.sol#19-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function mockFunctionRevertsNoReason() public payable {\n\n        revert();\n",
          "message": "CallReceiverMock.mockFunctionRevertsNoReason (CallReceiverMock.sol#25-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function mockFunctionRevertsReason() public payable {\n\n        revert(\"CallReceiverMock: reverting\");\n",
          "message": "CallReceiverMock.mockFunctionRevertsReason (CallReceiverMock.sol#29-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function mockFunctionThrows() public payable {\n\n        assert(false);\n",
          "message": "CallReceiverMock.mockFunctionThrows (CallReceiverMock.sol#33-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function mockFunctionOutOfGas() public payable {\n\n        for (uint256 i = 0; ; ++i) {\n\n            _array.push(i);\n\n        }\n",
          "message": "CallReceiverMock.mockFunctionOutOfGas (CallReceiverMock.sol#37-41) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": "Detected issues with version pragma in CallReceiverMock.sol:\n\t- pragma solidity^0.6.0 (CallReceiverMock.sol#5): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract CallReceiverMock {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256[] private _array;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function mockFunctionThrows() public payable {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}