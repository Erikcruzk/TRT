pragma solidity >=0.4.24 <0.7.0;














abstract contract Initializable {

    


    bool private _initialized;

    


    bool private _initializing;

    


    modifier initializer() {
        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");

        bool isTopLevelCall = !_initializing;
        if (isTopLevelCall) {
            _initializing = true;
            _initialized = true;
        }

        _;

        if (isTopLevelCall) {
            _initializing = false;
        }
    }

    
    function _isConstructor() private view returns (bool) {
        
        
        
        
        
        address self = address(this);
        uint256 cs;
        
        assembly { cs := extcodesize(self) }
        return cs == 0;
    }
}





pragma solidity ^0.6.0;





// There isn't a direct vulnerability in the provided function related to SOLIDITY_LOCKED_MONEY. The concern might be misattributed or misidentified by the tool. Each function capable of receiving funds is also capable of updating the state accordingly. If you're concerned about a specific vulnerability not addressed by the code provided, please clarify or provide the exact function of concern.