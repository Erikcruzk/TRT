function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
    private returns (bool)
{
    if (!to.isContract()) {
        return true;
    }
    // Secure against reentrancy by updating the state before the external call
    bool success;
    bytes memory returndata;
    // Marking the sender as non-reentrant
    _beforeTokenTransfer(from, to, tokenId);
    // External call
    (success, returndata) = to.call(abi.encodeWithSelector(
        IERC721Receiver(to).onERC721Received.selector,
        _msgSender(),
        from,
        tokenId,
        _data
    ));
    if (success) {
        bytes4 retval = abi.decode(returndata, (bytes4));
        return (retval == _ERC721_RECEIVED);
    } else {
        if (returndata.length > 0) {
            // Look for revert reason and bubble it up if present
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert("ERC721: transfer to non ERC721Receiver implementer");
        }
    }
}