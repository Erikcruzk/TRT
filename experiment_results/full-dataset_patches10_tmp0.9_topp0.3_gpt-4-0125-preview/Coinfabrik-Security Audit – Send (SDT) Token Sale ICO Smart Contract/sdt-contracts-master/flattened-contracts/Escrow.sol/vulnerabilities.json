{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Escrow is IEscrow, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (lock.fee > 0 && lock.recipient == _recipient) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(_recipient, lock.value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(msg.sender, lock.fee);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(_recipient, lock.value.add(lock.fee));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 335,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (lock.fee > 0 && lock.sender != _recipient) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(_recipient, lock.value);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(msg.sender, lock.fee);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "      token.transfer(_recipient, lock.value.add(lock.fee));\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 340,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_59"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 313,
          "vulnerability_code": "  function release(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration != 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.recipient == _recipient || lock.sender == _recipient);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.recipient == _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
          "message": "Reentrancy in Escrow.release (Escrow.sol#279-313):\n\tExternal calls:\n\t- token.transfer(_recipient,lock.value) (Escrow.sol#294-295)\n\t- token.transfer(msg.sender,lock.fee) (Escrow.sol#295-296)\n\t- token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#297-298)\n\tState variables written after the call(s):\n\t- escrows (Escrow.sol#300-301)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 355,
          "vulnerability_code": "  function releaseUnlocked(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration == 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.sender != _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
          "message": "Reentrancy in Escrow.releaseUnlocked (Escrow.sol#322-355):\n\tExternal calls:\n\t- token.transfer(_recipient,lock.value) (Escrow.sol#336-337)\n\t- token.transfer(msg.sender,lock.fee) (Escrow.sol#337-338)\n\t- token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#339-340)\n\tState variables written after the call(s):\n\t- escrows (Escrow.sol#342-343)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 313,
          "vulnerability_code": "  function release(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration != 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.recipient == _recipient || lock.sender == _recipient);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.recipient == _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.release (Escrow.sol#279-313) does not use the value returned by external calls:\n\t-token.transfer(_recipient,lock.value) (Escrow.sol#294-295)\n\t-token.transfer(msg.sender,lock.fee) (Escrow.sol#295-296)\n\t-token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#297-298)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 355,
          "vulnerability_code": "  function releaseUnlocked(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration == 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.sender != _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.releaseUnlocked (Escrow.sol#322-355) does not use the value returned by external calls:\n\t-token.transfer(_recipient,lock.value) (Escrow.sol#336-337)\n\t-token.transfer(msg.sender,lock.fee) (Escrow.sol#337-338)\n\t-token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#339-340)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 385,
          "vulnerability_code": "  function claim(\n\n      address _arbitrator,\n\n      uint256 _transactionId\n\n  ) public {\n\n    Lock memory lock = escrows[_arbitrator][_transactionId];\n\n\n\n    require(lock.sender == msg.sender);\n\n    require(lock.paid);\n\n    require(lock.expiration < block.timestamp);\n\n    require(lock.expiration != 0);\n\n    require(lock.expiration != 1);\n\n\n\n    delete escrows[_arbitrator][_transactionId];\n\n\n\n    token.transfer(msg.sender, lock.value.add(lock.fee));\n\n\n\n    Released(\n\n      _arbitrator,\n\n      msg.sender,\n\n      _transactionId\n\n    );\n\n  }\n\n\n",
          "message": "Escrow.claim (Escrow.sol#362-385) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,lock.value.add(lock.fee)) (Escrow.sol#376-377)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": 413,
          "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n\n    require(_tokenAddress != address(token));\n\n\n\n    ISendToken erc20Token = ISendToken(_tokenAddress);\n\n    erc20Token.transfer(_transferTo, _value);\n\n  }\n",
          "message": "Escrow.transferToken (Escrow.sol#407-413) does not use the value returned by external calls:\n\t-erc20Token.transfer(_transferTo,_value) (Escrow.sol#411-412)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 385,
          "vulnerability_code": "  function claim(\n\n      address _arbitrator,\n\n      uint256 _transactionId\n\n  ) public {\n\n    Lock memory lock = escrows[_arbitrator][_transactionId];\n\n\n\n    require(lock.sender == msg.sender);\n\n    require(lock.paid);\n\n    require(lock.expiration < block.timestamp);\n\n    require(lock.expiration != 0);\n\n    require(lock.expiration != 1);\n\n\n\n    delete escrows[_arbitrator][_transactionId];\n\n\n\n    token.transfer(msg.sender, lock.value.add(lock.fee));\n\n\n\n    Released(\n\n      _arbitrator,\n\n      msg.sender,\n\n      _transactionId\n\n    );\n\n  }\n\n\n",
          "message": "Escrow.claim (Escrow.sol#362-385) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(lock.expiration < block.timestamp) (Escrow.sol#370-371)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": 245,
          "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public tokenRestricted {\n\n\n\n    require(_tokens > 0);\n\n    require(_fee >= 0);\n\n    require(escrows[_arbitrator][_transactionId].value == 0);\n\n\n\n    escrows[_arbitrator][_transactionId].sender = _sender;\n\n    escrows[_arbitrator][_transactionId].recipient = _recipient;\n\n    escrows[_arbitrator][_transactionId].value = _tokens;\n\n    escrows[_arbitrator][_transactionId].fee = _fee;\n\n    escrows[_arbitrator][_transactionId].expiration = _expiration;\n\n\n\n    Created(_sender, _recipient, _arbitrator, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.create (Escrow.sol#222-245) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public;\n\n\n",
          "message": "IEscrow.create (Escrow.sol#24-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 42,
          "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public;\n\n\n",
          "message": "IEscrow.fund (Escrow.sol#34-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 252,
          "vulnerability_to_line": 270,
          "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public tokenRestricted {\n\n\n\n    require(escrows[_arbitrator][_transactionId].sender == _sender);\n\n    require(escrows[_arbitrator][_transactionId].value == _tokens);\n\n    require(escrows[_arbitrator][_transactionId].fee == _fee);\n\n    require(escrows[_arbitrator][_transactionId].paid == false);\n\n\n\n    escrows[_arbitrator][_transactionId].paid = true;\n\n\n\n    Paid(_arbitrator, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.fund (Escrow.sol#252-270) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 54,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n\n\n",
          "message": "ISendToken.transfer (Escrow.sol#52-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 56,
          "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n\n\n",
          "message": "ISendToken.isVerified (Escrow.sol#54-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 58,
          "vulnerability_code": "  function verify(address _address) public;\n\n\n",
          "message": "ISendToken.verify (Escrow.sol#56-58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 60,
          "vulnerability_code": "  function unverify(address _address) public;\n\n\n",
          "message": "ISendToken.unverify (Escrow.sol#58-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 69,
          "vulnerability_code": "  function verifiedTransferFrom(\n\n      address from,\n\n      address to,\n\n      uint256 value,\n\n      uint256 referenceId,\n\n      uint256 exchangeRate,\n\n      uint256 fee\n\n  ) public;\n\n\n",
          "message": "ISendToken.verifiedTransferFrom (Escrow.sol#60-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 78,
          "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate\n\n  ) public;\n\n\n",
          "message": "ISendToken.issueExchangeRate (Escrow.sol#69-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 165,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
          "message": "Ownable.transferOwnership (Escrow.sol#159-165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": 210,
          "vulnerability_code": "  function getStatus(address _arbitrator, uint256 _transactionId) \n\n      public view returns(address, address, uint256, uint256, uint256, bool) {\n\n    return(\n\n      escrows[_arbitrator][_transactionId].sender,\n\n      escrows[_arbitrator][_transactionId].recipient,\n\n      escrows[_arbitrator][_transactionId].value,\n\n      escrows[_arbitrator][_transactionId].fee,\n\n      escrows[_arbitrator][_transactionId].expiration,\n\n      escrows[_arbitrator][_transactionId].paid\n\n    );\n\n  }\n\n\n",
          "message": "Escrow.getStatus (Escrow.sol#198-210) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": 214,
          "vulnerability_code": "  function isUnlocked(address _arbitrator, uint256 _transactionId) public view returns(bool) {\n\n    return escrows[_arbitrator][_transactionId].expiration == 1;\n\n  }\n\n\n",
          "message": "Escrow.isUnlocked (Escrow.sol#210-214) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 313,
          "vulnerability_code": "  function release(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration != 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.recipient == _recipient || lock.sender == _recipient);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.recipient == _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.release (Escrow.sol#279-313) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 355,
          "vulnerability_code": "  function releaseUnlocked(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration == 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.sender != _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.releaseUnlocked (Escrow.sol#322-355) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 385,
          "vulnerability_code": "  function claim(\n\n      address _arbitrator,\n\n      uint256 _transactionId\n\n  ) public {\n\n    Lock memory lock = escrows[_arbitrator][_transactionId];\n\n\n\n    require(lock.sender == msg.sender);\n\n    require(lock.paid);\n\n    require(lock.expiration < block.timestamp);\n\n    require(lock.expiration != 0);\n\n    require(lock.expiration != 1);\n\n\n\n    delete escrows[_arbitrator][_transactionId];\n\n\n\n    token.transfer(msg.sender, lock.value.add(lock.fee));\n\n\n\n    Released(\n\n      _arbitrator,\n\n      msg.sender,\n\n      _transactionId\n\n    );\n\n  }\n\n\n",
          "message": "Escrow.claim (Escrow.sol#362-385) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": 403,
          "vulnerability_code": "  function mediate(\n\n      uint256 _transactionId\n\n  ) public {\n\n    require(escrows[msg.sender][_transactionId].paid);\n\n    require(escrows[msg.sender][_transactionId].expiration != 0);\n\n    require(escrows[msg.sender][_transactionId].expiration != 1);\n\n\n\n    escrows[msg.sender][_transactionId].expiration = 0;\n\n\n\n    Dispute(msg.sender, _transactionId);\n\n  }\n\n\n",
          "message": "Escrow.mediate (Escrow.sol#391-403) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": 413,
          "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n\n    require(_tokenAddress != address(token));\n\n\n\n    ISendToken erc20Token = ISendToken(_tokenAddress);\n\n    erc20Token.transfer(_transferTo, _value);\n\n  }\n",
          "message": "Escrow.transferToken (Escrow.sol#407-413) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 5,
          "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
          "message": "Detected issues with version pragma in Escrow.sol:\n\t- pragma solidity^0.4.18 (Escrow.sol#3-5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 145,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
          "message": "Function 'Ownable.Ownable' (Escrow.sol#141-145) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": 224,
          "vulnerability_code": "      address _sender,\n",
          "message": "Parameter '_sender' of Escrow.create (Escrow.sol#223-224) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 225,
          "vulnerability_code": "      address _recipient,\n",
          "message": "Parameter '_recipient' of Escrow.create (Escrow.sol#224-225) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": 226,
          "vulnerability_code": "      address _arbitrator,\n",
          "message": "Parameter '_arbitrator' of Escrow.create (Escrow.sol#225-226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 227,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of Escrow.create (Escrow.sol#226-227) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": 228,
          "vulnerability_code": "      uint256 _tokens,\n",
          "message": "Parameter '_tokens' of Escrow.create (Escrow.sol#227-228) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 229,
          "vulnerability_code": "      uint256 _fee,\n",
          "message": "Parameter '_fee' of Escrow.create (Escrow.sol#228-229) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": 230,
          "vulnerability_code": "      uint256 _expiration\n",
          "message": "Parameter '_expiration' of Escrow.create (Escrow.sol#229-230) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 253,
          "vulnerability_to_line": 254,
          "vulnerability_code": "      address _sender,\n",
          "message": "Parameter '_sender' of Escrow.fund (Escrow.sol#253-254) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 254,
          "vulnerability_to_line": 255,
          "vulnerability_code": "      address _arbitrator,\n",
          "message": "Parameter '_arbitrator' of Escrow.fund (Escrow.sol#254-255) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 255,
          "vulnerability_to_line": 256,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of Escrow.fund (Escrow.sol#255-256) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 257,
          "vulnerability_code": "      uint256 _tokens,\n",
          "message": "Parameter '_tokens' of Escrow.fund (Escrow.sol#256-257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 258,
          "vulnerability_code": "      uint256 _fee\n",
          "message": "Parameter '_fee' of Escrow.fund (Escrow.sol#257-258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": 193,
          "vulnerability_code": "  function Escrow(address _token) public {\n\n    token = ISendToken(_token);\n\n  }\n\n\n",
          "message": "Function 'Escrow.Escrow' (Escrow.sol#189-193) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function Escrow(address _token) public {\n",
          "message": "Parameter '_token' of Escrow.Escrow (Escrow.sol#189) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getStatus(address _arbitrator, uint256 _transactionId) \n",
          "message": "Parameter '_arbitrator' of Escrow.getStatus (Escrow.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getStatus(address _arbitrator, uint256 _transactionId) \n",
          "message": "Parameter '_transactionId' of Escrow.getStatus (Escrow.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isUnlocked(address _arbitrator, uint256 _transactionId) public view returns(bool) {\n",
          "message": "Parameter '_arbitrator' of Escrow.isUnlocked (Escrow.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isUnlocked(address _arbitrator, uint256 _transactionId) public view returns(bool) {\n",
          "message": "Parameter '_transactionId' of Escrow.isUnlocked (Escrow.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 280,
          "vulnerability_to_line": 281,
          "vulnerability_code": "      address _sender,\n",
          "message": "Parameter '_sender' of Escrow.release (Escrow.sol#280-281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": 282,
          "vulnerability_code": "      address _recipient,\n",
          "message": "Parameter '_recipient' of Escrow.release (Escrow.sol#281-282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 283,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of Escrow.release (Escrow.sol#282-283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 284,
          "vulnerability_code": "      uint256 _exchangeRate\n",
          "message": "Parameter '_exchangeRate' of Escrow.release (Escrow.sol#283-284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 323,
          "vulnerability_to_line": 324,
          "vulnerability_code": "      address _sender,\n",
          "message": "Parameter '_sender' of Escrow.releaseUnlocked (Escrow.sol#323-324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 325,
          "vulnerability_code": "      address _recipient,\n",
          "message": "Parameter '_recipient' of Escrow.releaseUnlocked (Escrow.sol#324-325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": 326,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of Escrow.releaseUnlocked (Escrow.sol#325-326) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": 327,
          "vulnerability_code": "      uint256 _exchangeRate\n",
          "message": "Parameter '_exchangeRate' of Escrow.releaseUnlocked (Escrow.sol#326-327) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": 364,
          "vulnerability_code": "      address _arbitrator,\n",
          "message": "Parameter '_arbitrator' of Escrow.claim (Escrow.sol#363-364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": 365,
          "vulnerability_code": "      uint256 _transactionId\n",
          "message": "Parameter '_transactionId' of Escrow.claim (Escrow.sol#364-365) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": 393,
          "vulnerability_code": "      uint256 _transactionId\n",
          "message": "Parameter '_transactionId' of Escrow.mediate (Escrow.sol#392-393) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n",
          "message": "Parameter '_tokenAddress' of Escrow.transferToken (Escrow.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n",
          "message": "Parameter '_transferTo' of Escrow.transferToken (Escrow.sol#407) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n",
          "message": "Parameter '_value' of Escrow.transferToken (Escrow.sol#407) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function verify(address _address) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unverify(address _address) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "    escrows[_arbitrator][_transactionId].paid = true;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    erc20Token.transfer(_transferTo, _value);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}