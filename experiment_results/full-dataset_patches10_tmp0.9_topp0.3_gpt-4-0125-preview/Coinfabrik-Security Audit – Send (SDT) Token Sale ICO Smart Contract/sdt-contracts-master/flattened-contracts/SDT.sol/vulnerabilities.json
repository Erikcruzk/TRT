{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 350,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract SnapshotToken is ISnapshotToken, StandardToken, Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_77"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 34,
          "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public;\n\n\n",
          "message": "IEscrow.create (SDT.sol#24-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 42,
          "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public;\n\n\n",
          "message": "IEscrow.fund (SDT.sol#34-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": 58,
          "vulnerability_code": "  function verify(address _address) public;\n\n\n",
          "message": "ISendToken.verify (SDT.sol#56-58) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": 487,
          "vulnerability_code": "  function verify(address _address) public onlyOwner {\n\n    verifiedAddresses[_address] = true;\n\n  }\n\n\n",
          "message": "SendToken.verify (SDT.sol#483-487) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": 496,
          "vulnerability_code": "  function unverify(address _address) public onlyOwner {\n\n    verifiedAddresses[_address] = false;\n\n  }\n\n\n",
          "message": "SendToken.unverify (SDT.sol#492-496) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 60,
          "vulnerability_code": "  function unverify(address _address) public;\n\n\n",
          "message": "ISendToken.unverify (SDT.sol#58-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 69,
          "vulnerability_code": "  function verifiedTransferFrom(\n\n      address from,\n\n      address to,\n\n      uint256 value,\n\n      uint256 referenceId,\n\n      uint256 exchangeRate,\n\n      uint256 fee\n\n  ) public;\n\n\n",
          "message": "ISendToken.verifiedTransferFrom (SDT.sol#60-69) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": 540,
          "vulnerability_code": "  function verifiedTransferFrom(\n\n      address _from,\n\n      address _to,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate,\n\n      uint256 _fee\n\n  ) public verifiedResticted {\n\n    require(_exchangeRate > 0);\n\n\n\n    transferFrom(_from, _to, _value);\n\n    transferFrom(_from, msg.sender, _fee);\n\n\n\n    VerifiedTransfer(\n\n      _from,\n\n      _to,\n\n      msg.sender,\n\n      _value,\n\n      _referenceId,\n\n      _exchangeRate\n\n    );\n\n  }\n\n\n",
          "message": "SendToken.verifiedTransferFrom (SDT.sol#517-540) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 603,
          "vulnerability_to_line": 626,
          "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public escrowResticted {\n\n    bool noRate = (_exchangeRate == 0);\n\n    if (isVerified(_verifiedAddress)) {\n\n      require(!noRate);\n\n      VerifiedTransfer(\n\n        _from,\n\n        _to,\n\n        _verifiedAddress,\n\n        _value,\n\n        _transactionId,\n\n        _exchangeRate\n\n      );\n\n    } else {\n\n      require(noRate);\n\n    }\n\n  }\n",
          "message": "SendToken.issueExchangeRate (SDT.sol#603-626) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 69,
          "vulnerability_to_line": 78,
          "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate\n\n  ) public;\n\n\n",
          "message": "ISendToken.issueExchangeRate (SDT.sol#69-78) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": 418,
          "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public isPolls {\n\n    snapshotBlock = _blockNumber;\n\n  }\n",
          "message": "SnapshotToken.requestSnapshots (SDT.sol#415-418) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 98,
          "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
          "message": "ISnapshotToken.requestSnapshots (SDT.sol#97-98) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 137,
          "vulnerability_to_line": 143,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
          "message": "Ownable.transferOwnership (SDT.sol#137-143) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": 303,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n\n  }\n\n\n",
          "message": "StandardToken.allowance (SDT.sol#299-303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 240,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
          "message": "ERC20.allowance (SDT.sol#239-240) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": 242,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
          "message": "ERC20.approve (SDT.sol#241-242) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": 293,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n\n  }\n\n\n",
          "message": "StandardToken.approve (SDT.sol#287-293) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": 319,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n\n",
          "message": "StandardToken.increaseApproval (SDT.sol#313-319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": 340,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n\n",
          "message": "StandardToken.decreaseApproval (SDT.sol#329-340) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": 376,
          "vulnerability_code": "  function setPolls(address _address) public onlyOwner {\n\n    polls = _address;\n\n  }\n\n\n",
          "message": "SnapshotToken.setPolls (SDT.sol#372-376) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": 444,
          "vulnerability_code": "    function burn(uint256 _value) public {\n\n        require(_value <= balances[msg.sender]);\n\n        // no need to require value <= totalSupply, since that would imply the\n\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n\n    }\n",
          "message": "BurnableToken.burn (SDT.sol#434-444) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": 505,
          "vulnerability_code": "  function setEscrow(address _address) public onlyOwner {\n\n    escrow = IEscrow(_address);\n\n  }\n\n\n",
          "message": "SendToken.setEscrow (SDT.sol#501-505) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": 568,
          "vulnerability_code": "  function createEscrow(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public {\n\n    escrow.create(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      _transactionId,\n\n      _tokens,\n\n      _fee,\n\n      _expiration\n\n    );\n\n  }\n\n\n",
          "message": "SendToken.createEscrow (SDT.sol#549-568) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": 594,
          "vulnerability_code": "  function fundEscrow(\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public {\n\n    uint256 total = _tokens.add(_fee);\n\n    transfer(escrow, total);\n\n\n\n    escrow.fund(\n\n      msg.sender,\n\n      _arbitrator,\n\n      _transactionId,\n\n      _tokens,\n\n      _fee\n\n    );\n\n  }\n\n\n",
          "message": "SendToken.fundEscrow (SDT.sol#576-594) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 5,
          "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
          "message": "Detected issues with version pragma in SDT.sol:\n\t- pragma solidity^0.4.18 (SDT.sol#3-5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 119,
          "vulnerability_to_line": 123,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
          "message": "Function 'Ownable.Ownable' (SDT.sol#119-123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of BasicToken.balanceOf (SDT.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of BasicToken.transfer (SDT.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of BasicToken.transfer (SDT.sol#210) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_owner' of StandardToken.allowance (SDT.sol#299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
          "message": "Parameter '_spender' of StandardToken.allowance (SDT.sol#299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of StandardToken.transferFrom (SDT.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of StandardToken.transferFrom (SDT.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 265,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.transferFrom (SDT.sol#265) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.approve (SDT.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of StandardToken.approve (SDT.sol#287) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.increaseApproval (SDT.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
          "message": "Parameter '_addedValue' of StandardToken.increaseApproval (SDT.sol#313) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_spender' of StandardToken.decreaseApproval (SDT.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
          "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (SDT.sol#329) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public isPolls {\n",
          "message": "Parameter '_blockNumber' of SnapshotToken.requestSnapshots (SDT.sol#415) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256) {\n",
          "message": "Parameter '_owner' of SnapshotToken.takeSnapshot (SDT.sol#403) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of SnapshotToken.transfer (SDT.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 381,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of SnapshotToken.transfer (SDT.sol#381) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_from' of SnapshotToken.transferFrom (SDT.sol#393) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of SnapshotToken.transferFrom (SDT.sol#393) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 393,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of SnapshotToken.transferFrom (SDT.sol#393) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPolls(address _address) public onlyOwner {\n",
          "message": "Parameter '_address' of SnapshotToken.setPolls (SDT.sol#372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(uint256 _value) public {\n",
          "message": "Parameter '_value' of BurnableToken.burn (SDT.sol#434) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 474,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isVerified(address _address) public view returns(bool) {\n",
          "message": "Parameter '_address' of SendToken.isVerified (SDT.sol#474) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 483,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function verify(address _address) public onlyOwner {\n",
          "message": "Parameter '_address' of SendToken.verify (SDT.sol#483) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unverify(address _address) public onlyOwner {\n",
          "message": "Parameter '_address' of SendToken.unverify (SDT.sol#492) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": 519,
          "vulnerability_code": "      address _from,\n",
          "message": "Parameter '_from' of SendToken.verifiedTransferFrom (SDT.sol#518-519) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": 520,
          "vulnerability_code": "      address _to,\n",
          "message": "Parameter '_to' of SendToken.verifiedTransferFrom (SDT.sol#519-520) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": 521,
          "vulnerability_code": "      uint256 _value,\n",
          "message": "Parameter '_value' of SendToken.verifiedTransferFrom (SDT.sol#520-521) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 521,
          "vulnerability_to_line": 522,
          "vulnerability_code": "      uint256 _referenceId,\n",
          "message": "Parameter '_referenceId' of SendToken.verifiedTransferFrom (SDT.sol#521-522) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 522,
          "vulnerability_to_line": 523,
          "vulnerability_code": "      uint256 _exchangeRate,\n",
          "message": "Parameter '_exchangeRate' of SendToken.verifiedTransferFrom (SDT.sol#522-523) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 523,
          "vulnerability_to_line": 524,
          "vulnerability_code": "      uint256 _fee\n",
          "message": "Parameter '_fee' of SendToken.verifiedTransferFrom (SDT.sol#523-524) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 604,
          "vulnerability_to_line": 605,
          "vulnerability_code": "      address _from,\n",
          "message": "Parameter '_from' of SendToken.issueExchangeRate (SDT.sol#604-605) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": 606,
          "vulnerability_code": "      address _to,\n",
          "message": "Parameter '_to' of SendToken.issueExchangeRate (SDT.sol#605-606) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 607,
          "vulnerability_code": "      address _verifiedAddress,\n",
          "message": "Parameter '_verifiedAddress' of SendToken.issueExchangeRate (SDT.sol#606-607) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 607,
          "vulnerability_to_line": 608,
          "vulnerability_code": "      uint256 _value,\n",
          "message": "Parameter '_value' of SendToken.issueExchangeRate (SDT.sol#607-608) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": 609,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of SendToken.issueExchangeRate (SDT.sol#608-609) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": 610,
          "vulnerability_code": "      uint256 _exchangeRate\n",
          "message": "Parameter '_exchangeRate' of SendToken.issueExchangeRate (SDT.sol#609-610) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setEscrow(address _address) public onlyOwner {\n",
          "message": "Parameter '_address' of SendToken.setEscrow (SDT.sol#501) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 550,
          "vulnerability_to_line": 551,
          "vulnerability_code": "      address _sender,\n",
          "message": "Parameter '_sender' of SendToken.createEscrow (SDT.sol#550-551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 551,
          "vulnerability_to_line": 552,
          "vulnerability_code": "      address _recipient,\n",
          "message": "Parameter '_recipient' of SendToken.createEscrow (SDT.sol#551-552) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": 553,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of SendToken.createEscrow (SDT.sol#552-553) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 553,
          "vulnerability_to_line": 554,
          "vulnerability_code": "      uint256 _tokens,\n",
          "message": "Parameter '_tokens' of SendToken.createEscrow (SDT.sol#553-554) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 554,
          "vulnerability_to_line": 555,
          "vulnerability_code": "      uint256 _fee,\n",
          "message": "Parameter '_fee' of SendToken.createEscrow (SDT.sol#554-555) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": 556,
          "vulnerability_code": "      uint256 _expiration\n",
          "message": "Parameter '_expiration' of SendToken.createEscrow (SDT.sol#555-556) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": 578,
          "vulnerability_code": "      address _arbitrator,\n",
          "message": "Parameter '_arbitrator' of SendToken.fundEscrow (SDT.sol#577-578) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": 579,
          "vulnerability_code": "      uint256 _transactionId,\n",
          "message": "Parameter '_transactionId' of SendToken.fundEscrow (SDT.sol#578-579) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": 580,
          "vulnerability_code": "      uint256 _tokens,\n",
          "message": "Parameter '_tokens' of SendToken.fundEscrow (SDT.sol#579-580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 580,
          "vulnerability_to_line": 581,
          "vulnerability_code": "      uint256 _fee\n",
          "message": "Parameter '_fee' of SendToken.fundEscrow (SDT.sol#580-581) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 656,
          "vulnerability_code": "  function SDT(address _sale) public validAddress(_sale) {\n\n    verifiedAddresses[owner] = true;\n\n    totalSupply = 700000000 * 10 ** decimals;\n\n    balances[_sale] = totalSupply;\n\n  }\n",
          "message": "Function 'SDT.SDT' (SDT.sol#651-656) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function SDT(address _sale) public validAddress(_sale) {\n",
          "message": "Parameter '_sale' of SDT.SDT (SDT.sol#651) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 640,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(_address != address(0x0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 372,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setPolls(address _address) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 501,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setEscrow(address _address) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function verify(address _address) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unverify(address _address) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "  ) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping(address => uint256) balances;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 c = a + b;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}