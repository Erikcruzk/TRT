{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract TokenVesting is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    circulatingSupply += claimable;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public circulatingSupply = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].value,\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].vesting,\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].start,\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].claimed\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].value.sub(grants[_to][i].claimed)\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].value.sub(grants[_to][i].claimed)\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].value,\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].vesting,\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].start,\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        grants[_to][i].claimed\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_30"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 307,
          "vulnerability_code": "  function claim(address _to) internal {\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n\n    }\n\n\n\n    token.transfer(_to, claimable);\n\n    circulatingSupply += claimable;\n\n\n\n    NewTokenClaim(_to, claimable);\n\n  }\n",
          "message": "TokenVesting.claim (TokenVesting.sol#282-307) does not use the value returned by external calls:\n\t-token.transfer(_to,claimable) (TokenVesting.sol#302-303)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": 307,
          "vulnerability_code": "  function claim(address _to) internal {\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n\n    }\n\n\n\n    token.transfer(_to, claimable);\n\n    circulatingSupply += claimable;\n\n\n\n    NewTokenClaim(_to, claimable);\n\n  }\n",
          "message": "Reentrancy in TokenVesting.claim (TokenVesting.sol#282-307):\n\tExternal calls:\n\t- token.transfer(_to,claimable) (TokenVesting.sol#302-303)\n\tState variables written after the call(s):\n\t- circulatingSupply (TokenVesting.sol#303-304)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": 279,
          "vulnerability_code": "  function calculateVestedTokens(\n\n      uint256 _tokens,\n\n      uint256 _vesting,\n\n      uint256 _start,\n\n      uint256 _claimed\n\n  ) internal constant returns (uint256) {\n\n    uint256 time = block.timestamp;\n\n\n\n    if (time < _start) {\n\n      return 0;\n\n    }\n\n\n\n    if (time >= _vesting) {\n\n      return _tokens.sub(_claimed);\n\n    }\n\n\n\n    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\n\n      _vesting.sub(_start)\n\n    );\n\n\n\n    return vestedTokens.sub(_claimed);\n\n  }\n\n\n",
          "message": "TokenVesting.calculateVestedTokens (TokenVesting.sol#256-279) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- time < _start (TokenVesting.sol#264-268)\n\t- time >= _vesting (TokenVesting.sol#268-272)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 93,
          "vulnerability_code": "  uint256 public totalSupply;\n",
          "message": "ERC20Basic.totalSupply should be constant (TokenVesting.sol#92-93)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 82,
          "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
          "message": "Ownable.transferOwnership (TokenVesting.sol#76-82) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": 94,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
          "message": "ERC20Basic.balanceOf (TokenVesting.sol#93-94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 95,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
          "message": "ERC20Basic.transfer (TokenVesting.sol#94-95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": 155,
          "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n\n    token = ERC20Basic(_token);\n\n    ico = _ico;\n\n    initialized = true;\n\n    active = true;\n\n  }\n\n\n",
          "message": "TokenVesting.init (TokenVesting.sol#148-155) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": 159,
          "vulnerability_code": "  function stop() public isActive onlyOwner {\n\n    active = false;\n\n  }\n\n\n",
          "message": "TokenVesting.stop (TokenVesting.sol#155-159) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": 165,
          "vulnerability_code": "  function resume() public onlyOwner {\n\n    require(!active);\n\n    require(initialized);\n\n    active = true;\n\n  }\n\n\n",
          "message": "TokenVesting.resume (TokenVesting.sol#159-165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 189,
          "vulnerability_code": "  function grantVestedTokens(\n\n      address _to,\n\n      uint256 _value,\n\n      uint256 _start,\n\n      uint256 _vesting\n\n  ) public icoResticted isActive {\n\n    require(_value > 0);\n\n    require(_vesting > _start);\n\n    require(grants[_to].length < 10);\n\n\n\n    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\n\n    grants[_to].push(grant);\n\n\n\n    NewTokenGrant(_to, _value, _start, _vesting);\n\n  }\n\n\n",
          "message": "TokenVesting.grantVestedTokens (TokenVesting.sol#173-189) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": 196,
          "vulnerability_code": "  function claimTokens() public {\n\n    claim(msg.sender);\n\n  }\n\n\n",
          "message": "TokenVesting.claimTokens (TokenVesting.sol#192-196) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": 204,
          "vulnerability_code": "  function claimTokensFor(address _to) public onlyOwner {\n\n    claim(_to);\n\n  }\n\n\n",
          "message": "TokenVesting.claimTokensFor (TokenVesting.sol#200-204) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": 229,
          "vulnerability_code": "  function claimableTokens() public constant returns (uint256) {\n\n    address _to = msg.sender;\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return 0;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n    }\n\n    return claimable;\n\n  }\n\n\n",
          "message": "TokenVesting.claimableTokens (TokenVesting.sol#207-229) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": 249,
          "vulnerability_code": "  function totalVestedTokens() public constant returns (uint256) {\n\n    address _to = msg.sender;\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return 0;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimable = claimable.add(\n\n        grants[_to][i].value.sub(grants[_to][i].claimed)\n\n      );\n\n    }\n\n    return claimable;\n\n  }\n\n\n",
          "message": "TokenVesting.totalVestedTokens (TokenVesting.sol#232-249) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 5,
          "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
          "message": "Detected issues with version pragma in TokenVesting.sol:\n\t- pragma solidity^0.4.18 (TokenVesting.sol#3-5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
          "message": "Function 'Ownable.Ownable' (TokenVesting.sol#58-62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": 148,
          "vulnerability_code": "  function TokenVesting() public {\n\n    active = false;\n\n  }\n\n\n",
          "message": "Function 'TokenVesting.TokenVesting' (TokenVesting.sol#144-148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
          "message": "Parameter '_token' of TokenVesting.init (TokenVesting.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
          "message": "Parameter '_ico' of TokenVesting.init (TokenVesting.sol#148) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 175,
          "vulnerability_code": "      address _to,\n",
          "message": "Parameter '_to' of TokenVesting.grantVestedTokens (TokenVesting.sol#174-175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": 176,
          "vulnerability_code": "      uint256 _value,\n",
          "message": "Parameter '_value' of TokenVesting.grantVestedTokens (TokenVesting.sol#175-176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": 177,
          "vulnerability_code": "      uint256 _start,\n",
          "message": "Parameter '_start' of TokenVesting.grantVestedTokens (TokenVesting.sol#176-177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": 178,
          "vulnerability_code": "      uint256 _vesting\n",
          "message": "Parameter '_vesting' of TokenVesting.grantVestedTokens (TokenVesting.sol#177-178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimTokensFor(address _to) public onlyOwner {\n",
          "message": "Parameter '_to' of TokenVesting.claimTokensFor (TokenVesting.sol#200) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 258,
          "vulnerability_code": "      uint256 _tokens,\n",
          "message": "Parameter '_tokens' of TokenVesting.calculateVestedTokens (TokenVesting.sol#257-258) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 258,
          "vulnerability_to_line": 259,
          "vulnerability_code": "      uint256 _vesting,\n",
          "message": "Parameter '_vesting' of TokenVesting.calculateVestedTokens (TokenVesting.sol#258-259) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": 260,
          "vulnerability_code": "      uint256 _start,\n",
          "message": "Parameter '_start' of TokenVesting.calculateVestedTokens (TokenVesting.sol#259-260) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": 261,
          "vulnerability_code": "      uint256 _claimed\n",
          "message": "Parameter '_claimed' of TokenVesting.calculateVestedTokens (TokenVesting.sol#260-261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claim(address _to) internal {\n",
          "message": "Parameter '_to' of TokenVesting.claim (TokenVesting.sol#282) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function claimableTokens() public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalVestedTokens() public constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 256,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function calculateVestedTokens(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "  using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => TokenGrant[]) public grants;\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => TokenGrant[]) public grants;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}