{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < beneficiaries.length; j++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < newBeneficiaries.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        beneficiaries.push(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 133,
          "vulnerability_to_line": null,
          "vulnerability_code": "        beneficiariesIndices[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": null,
          "vulnerability_code": "        howManyBeneficiariesDecide = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < beneficiaries.length; j++) {\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delete beneficiariesIndices[beneficiaries[j]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "            delete beneficiariesIndices[beneficiaries[j]];\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(beneficiariesIndices[newBeneficiaries[i]] == 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates\");\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "state-variable-read-in-a-loop",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "            beneficiariesIndices[newBeneficiaries[i]] = i + 1;\n",
          "message": "Replace state variable reads and writes within loops with local variable reads and writes."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < beneficiaries.length; j++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < newBeneficiaries.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(howMany > 0, \"onlySomeBeneficiaries: howMany argument is zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(howMany <= beneficiaries.length, \"onlySomeBeneficiaries: howMany argument exceeds the number of Beneficiaries\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(howMany <= insideCallCount, \"checkHowManyBeneficiaries: nested beneficiaries modifier check require more beneficiarys\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiaryIndex < beneficiaries.length, \"checkHowManyBeneficiaries: msg.sender is not an beneficiary\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) == 0, \"checkHowManyBeneficiaries: beneficiary already voted for the operation\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) != 0, \"cancelPending: operation not found for this user\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newBeneficiaries.length > 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array is empty\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newBeneficiaries.length <= 256, \"transferBeneficiaryshipWithHowMany: beneficiaries count is greater then 256\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newHowManyBeneficiariesDecide > 0, \"transferBeneficiaryshipWithHowMany: newHowManybeneficiarysDecide equal to 0\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newHowManyBeneficiariesDecide <= newBeneficiaries.length, \"transferBeneficiaryShipWithHowMany: newHowManybeneficiarysDecide exceeds the number of beneficiarys\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(newBeneficiaries[i] != address(0), \"transferBeneficiaryShipWithHowMany: beneficiaries array contains zero\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(beneficiariesIndices[newBeneficiaries[i]] == 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allOperations.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < beneficiaries.length; j++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < newBeneficiaries.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "        beneficiariesGeneration++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(howMany > 0, \"onlySomeBeneficiaries: howMany argument is zero\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(howMany <= beneficiaries.length, \"onlySomeBeneficiaries: howMany argument exceeds the number of Beneficiaries\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(howMany <= insideCallCount, \"checkHowManyBeneficiaries: nested beneficiaries modifier check require more beneficiarys\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(beneficiaryIndex < beneficiaries.length, \"checkHowManyBeneficiaries: msg.sender is not an beneficiary\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) == 0, \"checkHowManyBeneficiaries: beneficiary already voted for the operation\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) != 0, \"cancelPending: operation not found for this user\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newBeneficiaries.length > 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array is empty\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newBeneficiaries.length <= 256, \"transferBeneficiaryshipWithHowMany: beneficiaries count is greater then 256\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newHowManyBeneficiariesDecide > 0, \"transferBeneficiaryshipWithHowMany: newHowManybeneficiarysDecide equal to 0\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(newHowManyBeneficiariesDecide <= newBeneficiaries.length, \"transferBeneficiaryShipWithHowMany: newHowManybeneficiarysDecide exceeds the number of beneficiarys\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 233,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(newBeneficiaries[i] != address(0), \"transferBeneficiaryShipWithHowMany: beneficiaries array contains zero\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(beneficiariesIndices[newBeneficiaries[i]] == 0, \"transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function isExistBeneficiary(address wallet) public view returns(bool) {\n\n        return beneficiariesIndices[wallet] > 0;\n",
          "message": "BeneficiaryOperations.isExistBeneficiary (BeneficiaryOperations.sol#36-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function beneficiaryIndices(address wallet) public view returns(uint256) {\n\n        return beneficiariesIndices[wallet];\n",
          "message": "BeneficiaryOperations.beneficiaryIndices (BeneficiaryOperations.sol#40-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function beneficiariesCount() public view returns(uint) {\n\n        return beneficiaries.length;\n",
          "message": "BeneficiaryOperations.beneficiariesCount (BeneficiaryOperations.sol#44-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function allOperationsCount() public view returns(uint) {\n\n        return allOperations.length;\n",
          "message": "BeneficiaryOperations.allOperationsCount (BeneficiaryOperations.sol#48-50) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 207,
          "vulnerability_code": "    function cancelPending(bytes32 operation) public onlyAnyBeneficiary {\n\n        uint beneficiaryIndex = beneficiariesIndices[msg.sender] - 1;\n\n        require((votesMaskByOperation[operation] & (2 ** beneficiaryIndex)) != 0, \"cancelPending: operation not found for this user\");\n\n        votesMaskByOperation[operation] &= ~(2 ** beneficiaryIndex);\n\n        uint operationVotesCount = votesCountByOperation[operation] - 1;\n\n        votesCountByOperation[operation] = operationVotesCount;\n\n        emit OperationDownvoted(operation, operationVotesCount, beneficiaries.length, msg.sender);\n\n        if (operationVotesCount == 0) {\n\n            deleteOperation(operation);\n\n            emit OperationCancelled(operation, msg.sender);\n\n        }\n",
          "message": "BeneficiaryOperations.cancelPending (BeneficiaryOperations.sol#196-207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 215,
          "vulnerability_code": "    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {\n\n        transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);\n",
          "message": "BeneficiaryOperations.transferBeneficiaryShip (BeneficiaryOperations.sol#213-215) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": "Detected issues with version pragma in BeneficiaryOperations.sol:\n\t- pragma solidity^0.5.0 (BeneficiaryOperations.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    event beneficiaryShipTransferred(address[] previousbeneficiaries, uint howManyBeneficiariesDecide, address[] newBeneficiarys, uint newHowManybeneficiarysDecide);\n",
          "message": "Event 'BeneficiaryOperations.beneficiaryShipTransferred' (BeneficiaryOperations.sol#27) is not in CapWords\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "                insideCallSender = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "                insideCallSender = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "                insideCallSender = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "                insideCallSender = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allOperations.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 241,
          "vulnerability_to_line": null,
          "vulnerability_code": "        allOperations.length = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < beneficiaries.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < newBeneficiaries.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 229,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint j = 0; j < beneficiaries.length; j++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < newBeneficiaries.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32[] public allOperations;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address[] public beneficiaries;\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}