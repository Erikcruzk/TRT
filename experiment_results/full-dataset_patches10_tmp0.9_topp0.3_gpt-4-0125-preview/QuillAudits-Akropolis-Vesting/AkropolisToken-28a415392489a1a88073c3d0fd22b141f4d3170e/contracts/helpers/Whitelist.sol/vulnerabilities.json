{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Whitelist is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingOwner = address(0);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == owner, \"Account is not owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == pendingOwner, \"Account is not pending owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_newOwner != address(0), \"Empty address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(whitelist[msg.sender] == true, \"Address is not in whitelist\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(permBalancesForWhitelist[msg.sender]==0 || permBalancesForWhitelist[msg.sender]>=value, \"Not permitted balance for transfer\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(permBalancesForWhitelist[msg.sender]==0 || permBalancesForWhitelist[msg.sender]>=value, \"Not permitted balance for transfer\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 180,
          "vulnerability_code": "    function isWhitelisted() public view returns (bool) {\n\n        bytes32 slot = keccak256(abi.encode(\"Whitelist\", \"whitelisted\"));\n\n        uint256 v;\n\n        assembly {\n\n            v := sload(slot)\n\n        }\n\n        return v != 0;\n",
          "message": "Whitelist.isWhitelisted (Whitelist.sol#173-180) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 171,
          "vulnerability_code": "    function setWhitelisted(bool value) internal {\n\n        bytes32 slot = keccak256(abi.encode(\"Whitelist\", \"whitelisted\"));\n\n        uint256 v = value ? 1 : 0;\n\n        assembly {\n\n            sstore(slot, v)\n\n        }\n",
          "message": "Whitelist.setWhitelisted uses assembly (Whitelist.sol#165-171)\n\t- Whitelist.sol#168-171\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": 180,
          "vulnerability_code": "    function isWhitelisted() public view returns (bool) {\n\n        bytes32 slot = keccak256(abi.encode(\"Whitelist\", \"whitelisted\"));\n\n        uint256 v;\n\n        assembly {\n\n            v := sload(slot)\n\n        }\n\n        return v != 0;\n",
          "message": "Whitelist.isWhitelisted uses assembly (Whitelist.sol#173-180)\n\t- Whitelist.sol#176-179\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != address(0), \"Empty address\");\n\n        pendingOwner = _newOwner;\n",
          "message": "Ownable.transferOwnership (Whitelist.sol#54-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function claimOwnership() onlyPendingOwner public {\n\n        emit OwnershipTransferred(owner, pendingOwner);\n\n        owner = pendingOwner;\n\n        pendingOwner = address(0);\n",
          "message": "Ownable.claimOwnership (Whitelist.sol#62-66) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": 118,
          "vulnerability_code": "    function addPermBalanceToWhitelist(address _owner, uint256 _balance) public onlyOwner {\n\n        permBalancesForWhitelist[_owner] = _balance;\n\n        emit AddPermBalanceToWhitelist(_owner, _balance);\n",
          "message": "Whitelist.addPermBalanceToWhitelist (Whitelist.sol#115-118) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": 126,
          "vulnerability_code": "    function removePermBalanceToWhitelist(address _owner) public onlyOwner {\n\n        permBalancesForWhitelist[_owner] = 0;\n\n        emit RemovePermBalanceToWhitelist(_owner);\n",
          "message": "Whitelist.removePermBalanceToWhitelist (Whitelist.sol#123-126) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 135,
          "vulnerability_code": "    function enableWhitelist() public onlyOwner {\n\n        setWhitelisted(true);\n\n        emit EnableWhitelist();\n",
          "message": "Whitelist.enableWhitelist (Whitelist.sol#132-135) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": 144,
          "vulnerability_code": "    function disableWhitelist() public onlyOwner {\n\n        setWhitelisted(false);\n\n        emit DisableWhitelist();\n",
          "message": "Whitelist.disableWhitelist (Whitelist.sol#141-144) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 152,
          "vulnerability_code": "    function addToWhitelist(address _address) public onlyOwner  {\n\n        whitelist[_address] = true;\n\n        emit AddToWhitelist(_address);\n",
          "message": "Whitelist.addToWhitelist (Whitelist.sol#149-152) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": 160,
          "vulnerability_code": "    function removeFromWhitelist(address _address) public onlyOwner {\n\n        whitelist[_address] = false;\n\n        emit RemoveFromWhitelist(_address);\n",
          "message": "Whitelist.removeFromWhitelist (Whitelist.sol#157-160) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (Whitelist.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPermBalanceToWhitelist(address _owner, uint256 _balance) public onlyOwner {\n",
          "message": "Parameter '_owner' of Whitelist.addPermBalanceToWhitelist (Whitelist.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 115,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPermBalanceToWhitelist(address _owner, uint256 _balance) public onlyOwner {\n",
          "message": "Parameter '_balance' of Whitelist.addPermBalanceToWhitelist (Whitelist.sol#115) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removePermBalanceToWhitelist(address _owner) public onlyOwner {\n",
          "message": "Parameter '_owner' of Whitelist.removePermBalanceToWhitelist (Whitelist.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addToWhitelist(address _address) public onlyOwner  {\n",
          "message": "Parameter '_address' of Whitelist.addToWhitelist (Whitelist.sol#149) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeFromWhitelist(address _address) public onlyOwner {\n",
          "message": "Parameter '_address' of Whitelist.removeFromWhitelist (Whitelist.sol#157) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        pendingOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isWhitelisted() public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 168,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isWhitelisted() public view returns (bool) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bytes32 slot = keccak256(abi.encode(\"Whitelist\", \"whitelisted\"));\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}