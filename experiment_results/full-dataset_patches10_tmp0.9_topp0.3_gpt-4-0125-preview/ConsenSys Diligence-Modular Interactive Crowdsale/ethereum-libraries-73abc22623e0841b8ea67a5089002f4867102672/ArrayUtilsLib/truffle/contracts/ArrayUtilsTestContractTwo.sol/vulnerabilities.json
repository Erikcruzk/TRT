{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 516,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "          i = self.length;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 776,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 938,
          "vulnerability_to_line": null,
          "vulnerability_code": "          i = self.length;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1198,
          "vulnerability_to_line": null,
          "vulnerability_code": "          i = self.length;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1296,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1457,
          "vulnerability_to_line": null,
          "vulnerability_code": "          i = self.length;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 476,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 492,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 493,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 494,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 723,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 725,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 737,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 738,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 752,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 753,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 983,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 984,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 985,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 998,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1012,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1013,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1014,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1243,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1244,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1256,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1257,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1258,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1272,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1274,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1502,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1503,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1504,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1515,
          "vulnerability_to_line": null,
          "vulnerability_code": "      temp = self[end];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1516,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[end] = self[0];\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1517,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self[0] = temp;\n",
          "message": "Consider swapping variables using `(self[end], self[0]) = (self[0], self[end])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1531,
          "vulnerability_to_line": null,
          "vulnerability_code": "          temp = self[swap];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1532,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[swap] = self[root];\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 1533,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self[root] = temp;\n",
          "message": "Consider swapping variables using `(self[swap], self[root]) = (self[root], self[swap])` to save gas"
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 166,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 459,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 487,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 719,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 978,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 979,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1239,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1267,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1268,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1497,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1498,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1526,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if((rChild <= end) && (self[swap]<self[rChild]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1527,
          "vulnerability_to_line": null,
          "vulnerability_code": "          swap = rChild;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 518,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 778,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1038,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1298,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 1557,
          "vulnerability_to_line": null,
          "vulnerability_code": "        i--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_81"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
          "message": "Array256Lib.sumElements (ArrayUtilsTestContractTwo.sol#37-45) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMax (ArrayUtilsTestContractTwo.sol#50-62) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 79,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMin (ArrayUtilsTestContractTwo.sol#67-79) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 129,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.indexOf (ArrayUtilsTestContractTwo.sol#87-129) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": 290,
          "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array128Lib.sumElements (ArrayUtilsTestContractTwo.sol#269-290) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 319,
          "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.getMax (ArrayUtilsTestContractTwo.sol#295-319) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 351,
          "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.getMin (ArrayUtilsTestContractTwo.sol#324-351) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": 422,
          "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.indexOf (ArrayUtilsTestContractTwo.sol#359-422) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": 583,
          "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array64Lib.sumElements (ArrayUtilsTestContractTwo.sol#562-583) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": 612,
          "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.getMax (ArrayUtilsTestContractTwo.sol#588-612) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 645,
          "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.getMin (ArrayUtilsTestContractTwo.sol#617-645) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": 843,
          "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array32Lib.sumElements (ArrayUtilsTestContractTwo.sol#822-843) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": 872,
          "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.getMax (ArrayUtilsTestContractTwo.sol#848-872) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": 905,
          "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.getMin (ArrayUtilsTestContractTwo.sol#877-905) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": 1103,
          "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array16Lib.sumElements (ArrayUtilsTestContractTwo.sol#1082-1103) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": 1132,
          "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.getMax (ArrayUtilsTestContractTwo.sol#1108-1132) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": 1165,
          "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.getMin (ArrayUtilsTestContractTwo.sol#1137-1165) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": 1363,
          "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array8Lib.sumElements (ArrayUtilsTestContractTwo.sol#1342-1363) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": 1392,
          "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.getMax (ArrayUtilsTestContractTwo.sol#1368-1392) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": 1424,
          "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.getMin (ArrayUtilsTestContractTwo.sol#1397-1424) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
          "message": "Array256Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#37-45)\n\t- ArrayUtilsTestContractTwo.sol#38-45\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#50-62)\n\t- ArrayUtilsTestContractTwo.sol#51-62\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 79,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#67-79)\n\t- ArrayUtilsTestContractTwo.sol#68-79\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": 129,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n\n\n          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let low := 0 } lt(low, sload(self_slot)) { low := add(low, 1) } {\n\n          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n\n          case 1 {\n\n            found := 1\n\n            index := low\n\n            low := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.indexOf uses assembly (ArrayUtilsTestContractTwo.sol#87-129)\n\t- ArrayUtilsTestContractTwo.sol#91-129\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": 290,
          "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array128Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#269-290)\n\t- ArrayUtilsTestContractTwo.sol#273-290\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 319,
          "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#295-319)\n\t- ArrayUtilsTestContractTwo.sol#299-319\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 351,
          "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#324-351)\n\t- ArrayUtilsTestContractTwo.sol#328-351\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": 422,
          "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n\n           public\n\n           view\n\n           returns(bool found, uint256 index) {\n\n    uint256 term;\n\n    assembly{\n\n      mstore(0x60,self_slot)\n\n      switch isSorted\n\n      case 1 {\n\n        let high := sub(sload(self_slot),1)\n\n        let mid := 0\n\n        let low := 0\n\n        for { } iszero(gt(low, high)) { } {\n\n          mid := div(add(low,high),2)\n\n          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n\n\n\n          switch mod(mid,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch lt(term,value)\n\n          case 1 {\n\n             low := add(mid,1)\n\n          }\n\n          case 0 {\n\n            switch gt(term,value)\n\n            case 1 {\n\n              high := sub(mid,1)\n\n            }\n\n            case 0 {\n\n              found := 1\n\n              index := mid\n\n              low := add(high,1)\n\n            }\n\n          }\n\n        }\n\n      }\n\n      case 0 {\n\n        for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n          term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n          switch mod(i,2)\n\n          case 1 {\n\n            for { let j := 0 } lt(j, 4) { j := add(j, 1) } {\n\n              term := div(term,4294967296)\n\n            }\n\n          }\n\n\n\n          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n\n\n\n          switch eq(term, value)\n\n          case 1 {\n\n            found := 1\n\n            index := i\n\n            i := sload(self_slot)\n\n          }\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.indexOf uses assembly (ArrayUtilsTestContractTwo.sol#359-422)\n\t- ArrayUtilsTestContractTwo.sol#364-422\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": 583,
          "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array64Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#562-583)\n\t- ArrayUtilsTestContractTwo.sol#566-583\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": 612,
          "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#588-612)\n\t- ArrayUtilsTestContractTwo.sol#592-612\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 645,
          "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#617-645)\n\t- ArrayUtilsTestContractTwo.sol#621-645\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": 843,
          "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array32Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#822-843)\n\t- ArrayUtilsTestContractTwo.sol#826-843\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": 872,
          "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#848-872)\n\t- ArrayUtilsTestContractTwo.sol#852-872\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": 905,
          "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#877-905)\n\t- ArrayUtilsTestContractTwo.sol#881-905\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": 1103,
          "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array16Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#1082-1103)\n\t- ArrayUtilsTestContractTwo.sol#1086-1103\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": 1132,
          "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#1108-1132)\n\t- ArrayUtilsTestContractTwo.sol#1112-1132\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": 1165,
          "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#1137-1165)\n\t- ArrayUtilsTestContractTwo.sol#1141-1165\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": 1363,
          "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array8Lib.sumElements uses assembly (ArrayUtilsTestContractTwo.sol#1342-1363)\n\t- ArrayUtilsTestContractTwo.sol#1346-1363\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": 1392,
          "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.getMax uses assembly (ArrayUtilsTestContractTwo.sol#1368-1392)\n\t- ArrayUtilsTestContractTwo.sol#1372-1392\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": 1424,
          "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.getMin uses assembly (ArrayUtilsTestContractTwo.sol#1397-1424)\n\t- ArrayUtilsTestContractTwo.sol#1401-1424\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 45,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n\n      }\n\n    }\n",
          "message": "Array256Lib.sumElements (ArrayUtilsTestContractTwo.sol#37-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 62,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n\n        case 1 {\n\n          maxValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMax (ArrayUtilsTestContractTwo.sol#50-62) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 79,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      minValue := sload(sha3(0x60,0x20))\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n\n        case 0 {\n\n          minValue := sload(add(sha3(0x60,0x20),i))\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.getMin (ArrayUtilsTestContractTwo.sol#67-79) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 149,
          "vulnerability_to_line": 207,
          "vulnerability_code": "  function heapSort(uint256[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint256 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array256Lib.heapSort (ArrayUtilsTestContractTwo.sol#149-207) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": 230,
          "vulnerability_code": "  function uniq(uint256[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array256Lib.uniq (ArrayUtilsTestContractTwo.sol#211-230) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": 290,
          "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array128Lib.sumElements (ArrayUtilsTestContractTwo.sol#269-290) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": 319,
          "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.getMax (ArrayUtilsTestContractTwo.sol#295-319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 351,
          "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,2)))\n\n\n\n        remainder := mod(i,2)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 4)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.getMin (ArrayUtilsTestContractTwo.sol#324-351) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": 500,
          "vulnerability_code": "  function heapSort(uint128[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint128 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array128Lib.heapSort (ArrayUtilsTestContractTwo.sol#442-500) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 504,
          "vulnerability_to_line": 523,
          "vulnerability_code": "  function uniq(uint128[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array128Lib.uniq (ArrayUtilsTestContractTwo.sol#504-523) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": 583,
          "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array64Lib.sumElements (ArrayUtilsTestContractTwo.sol#562-583) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": 612,
          "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.getMax (ArrayUtilsTestContractTwo.sol#588-612) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 645,
          "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,4)))\n\n\n\n        remainder := mod(i,4)\n\n\n\n        for { let j := 0 } lt(j, mul(remainder, 2)) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.getMin (ArrayUtilsTestContractTwo.sol#617-645) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": 760,
          "vulnerability_code": "  function heapSort(uint64[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint64 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array64Lib.heapSort (ArrayUtilsTestContractTwo.sol#702-760) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 764,
          "vulnerability_to_line": 783,
          "vulnerability_code": "  function uniq(uint64[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array64Lib.uniq (ArrayUtilsTestContractTwo.sol#764-783) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": 843,
          "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array32Lib.sumElements (ArrayUtilsTestContractTwo.sol#822-843) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": 872,
          "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.getMax (ArrayUtilsTestContractTwo.sol#848-872) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": 905,
          "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,8)))\n\n\n\n        remainder := mod(i,8)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,4294967296)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.getMin (ArrayUtilsTestContractTwo.sol#877-905) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 962,
          "vulnerability_to_line": 1020,
          "vulnerability_code": "  function heapSort(uint32[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint32 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array32Lib.heapSort (ArrayUtilsTestContractTwo.sol#962-1020) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1024,
          "vulnerability_to_line": 1043,
          "vulnerability_code": "  function uniq(uint32[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array32Lib.uniq (ArrayUtilsTestContractTwo.sol#1024-1043) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": 1103,
          "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array16Lib.sumElements (ArrayUtilsTestContractTwo.sol#1082-1103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": 1132,
          "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.getMax (ArrayUtilsTestContractTwo.sol#1108-1132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": 1165,
          "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,16)))\n\n\n\n        remainder := mod(i,16)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,65536)\n\n        }\n\n\n\n        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n\n\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.getMin (ArrayUtilsTestContractTwo.sol#1137-1165) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1222,
          "vulnerability_to_line": 1280,
          "vulnerability_code": "  function heapSort(uint16[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint16 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array16Lib.heapSort (ArrayUtilsTestContractTwo.sol#1222-1280) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1284,
          "vulnerability_to_line": 1303,
          "vulnerability_code": "  function uniq(uint16[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array16Lib.uniq (ArrayUtilsTestContractTwo.sol#1284-1303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": 1363,
          "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        sum := add(term,sum)\n\n\n\n      }\n\n    }\n",
          "message": "Array8Lib.sumElements (ArrayUtilsTestContractTwo.sol#1342-1363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": 1392,
          "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n      maxValue := 0\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch lt(maxValue, term)\n\n        case 1 {\n\n          maxValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.getMax (ArrayUtilsTestContractTwo.sol#1368-1392) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": 1424,
          "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n\n    uint256 term;\n\n    uint8 remainder;\n\n\n\n    assembly {\n\n      mstore(0x60,self_slot)\n\n\n\n      for { let i := 0 } lt(i, sload(self_slot)) { i := add(i, 1) } {\n\n        term := sload(add(sha3(0x60,0x20),div(i,32)))\n\n\n\n        remainder := mod(i,32)\n\n\n\n        for { let j := 0 } lt(j, remainder) { j := add(j, 1) } {\n\n          term := div(term,256)\n\n        }\n\n\n\n        term := and(0x00000000000000000000000000000000000000000000000000000000000000ff,term)\n\n        switch eq(i,0)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n        switch gt(minValue, term)\n\n        case 1 {\n\n          minValue := term\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.getMin (ArrayUtilsTestContractTwo.sol#1397-1424) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1481,
          "vulnerability_to_line": 1539,
          "vulnerability_code": "  function heapSort(uint8[] storage self) public {\n\n    uint256 end = self.length - 1;\n\n    uint256 start = getParentI(end);\n\n    uint256 root = start;\n\n    uint256 lChild;\n\n    uint256 rChild;\n\n    uint256 swap;\n\n    uint8 temp;\n\n    while(start >= 0){\n\n      root = start;\n\n      lChild = getLeftChildI(start);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end+1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n      if(start == 0)\n\n        break;\n\n      else\n\n        start = start - 1;\n\n    }\n\n    while(end > 0){\n\n      temp = self[end];\n\n      self[end] = self[0];\n\n      self[0] = temp;\n\n      end = end - 1;\n\n      root = 0;\n\n      lChild = getLeftChildI(0);\n\n      while(lChild <= end){\n\n        rChild = lChild + 1;\n\n        swap = root;\n\n        if(self[swap] < self[lChild])\n\n          swap = lChild;\n\n        if((rChild <= end) && (self[swap]<self[rChild]))\n\n          swap = rChild;\n\n        if(swap == root)\n\n          lChild = end + 1;\n\n        else {\n\n          temp = self[swap];\n\n          self[swap] = self[root];\n\n          self[root] = temp;\n\n          root = swap;\n\n          lChild = getLeftChildI(root);\n\n        }\n\n      }\n\n    }\n",
          "message": "Array8Lib.heapSort (ArrayUtilsTestContractTwo.sol#1481-1539) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1543,
          "vulnerability_to_line": 1562,
          "vulnerability_code": "  function uniq(uint8[] storage self) public returns (uint256 length) {\n\n    bool contains;\n\n    uint256 index;\n\n\n\n    for (uint256 i = 0; i < self.length; i++) {\n\n      (contains, index) = indexOf(self, self[i], false);\n\n\n\n      if (i > index) {\n\n        for (uint256 j = i; j < self.length - 1; j++){\n\n          self[j] = self[j + 1];\n\n        }\n\n\n\n        delete self[self.length - 1];\n\n        self.length--;\n\n        i--;\n\n      }\n\n    }\n\n\n\n    length = self.length;\n",
          "message": "Array8Lib.uniq (ArrayUtilsTestContractTwo.sol#1543-1562) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1591,
          "vulnerability_to_line": 1601,
          "vulnerability_code": "  function getSortedIndexOf256(uint256 value) returns (bool,uint256){\n\n    delete array256;\n\n    array256.push(1);\n\n    array256.push(3);\n\n    array256.push(4);\n\n    array256.push(7);\n\n    array256.push(8);\n\n    array256.push(9);\n\n    array256.push(1095);\n\n    return array256.indexOf(value,true);\n",
          "message": "ArrayUtilsTestContractTwo.getSortedIndexOf256 (ArrayUtilsTestContractTwo.sol#1591-1601) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1603,
          "vulnerability_to_line": 1617,
          "vulnerability_code": "  function getSortedIndexOf128(uint128 value) returns (bool,uint256) {\n\n    delete array128;\n\n    array128.push(0);\n\n    array128.push(1);\n\n    array128.push(2);\n\n    array128.push(3);\n\n    array128.push(4);\n\n    array128.push(5);\n\n    array128.push(6);\n\n    array128.push(7);\n\n    array128.push(8);\n\n    array128.push(9);\n\n    array128.push(1095);\n\n    return array128.indexOf(value,true);\n",
          "message": "ArrayUtilsTestContractTwo.getSortedIndexOf128 (ArrayUtilsTestContractTwo.sol#1603-1617) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1619,
          "vulnerability_to_line": 1633,
          "vulnerability_code": "  function getSortedIndexOf64(uint64 value) returns (bool,uint256) {\n\n    delete array64;\n\n    array64.push(0);\n\n    array64.push(1);\n\n    array64.push(2);\n\n    array64.push(3);\n\n    array64.push(4);\n\n    array64.push(5);\n\n    array64.push(6);\n\n    array64.push(7);\n\n    array64.push(8);\n\n    array64.push(9);\n\n    array64.push(1095);\n\n    return array64.indexOf(value,true);\n",
          "message": "ArrayUtilsTestContractTwo.getSortedIndexOf64 (ArrayUtilsTestContractTwo.sol#1619-1633) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": 1649,
          "vulnerability_code": "  function getSortedIndexOf32(uint32 value) returns (bool,uint256) {\n\n    delete array32;\n\n    array32.push(0);\n\n    array32.push(1);\n\n    array32.push(2);\n\n    array32.push(3);\n\n    array32.push(4);\n\n    array32.push(5);\n\n    array32.push(6);\n\n    array32.push(7);\n\n    array32.push(8);\n\n    array32.push(9);\n\n    array32.push(1095);\n\n    return array32.indexOf(value,true);\n",
          "message": "ArrayUtilsTestContractTwo.getSortedIndexOf32 (ArrayUtilsTestContractTwo.sol#1635-1649) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1651,
          "vulnerability_to_line": 1665,
          "vulnerability_code": "  function getSortedIndexOf16(uint16 value) returns (bool,uint256) {\n\n    delete array16;\n\n    array16.push(0);\n\n    array16.push(1);\n\n    array16.push(2);\n\n    array16.push(3);\n\n    array16.push(4);\n\n    array16.push(5);\n\n    array16.push(6);\n\n    array16.push(7);\n\n    array16.push(8);\n\n    array16.push(9);\n\n    array16.push(109);\n\n    return array16.indexOf(value,true);\n",
          "message": "ArrayUtilsTestContractTwo.getSortedIndexOf16 (ArrayUtilsTestContractTwo.sol#1651-1665) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1667,
          "vulnerability_to_line": 1681,
          "vulnerability_code": "  function getSortedIndexOf8(uint8 value) returns (bool,uint256) {\n\n    delete array8;\n\n    array8.push(0);\n\n    array8.push(1);\n\n    array8.push(2);\n\n    array8.push(3);\n\n    array8.push(4);\n\n    array8.push(5);\n\n    array8.push(6);\n\n    array8.push(7);\n\n    array8.push(8);\n\n    array8.push(9);\n\n    array8.push(109);\n\n    return array8.indexOf(value,true);\n",
          "message": "ArrayUtilsTestContractTwo.getSortedIndexOf8 (ArrayUtilsTestContractTwo.sol#1667-1681) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1683,
          "vulnerability_to_line": 1692,
          "vulnerability_code": "  function getUnsortedIndexOf256(uint256 value) returns (bool,uint256) {\n\n    delete array256;\n\n    array256.push(7);\n\n    array256.push(0xffff);\n\n    array256.push(3);\n\n    array256.push(1);\n\n    array256.push(9);\n\n    array256.push(1095);\n\n    return array256.indexOf(value,false);\n",
          "message": "ArrayUtilsTestContractTwo.getUnsortedIndexOf256 (ArrayUtilsTestContractTwo.sol#1683-1692) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1694,
          "vulnerability_to_line": 1703,
          "vulnerability_code": "  function getUnsortedIndexOf64(uint64 value) returns (bool,uint256) {\n\n    delete array64;\n\n    array64.push(7);\n\n    array64.push(0xffff);\n\n    array64.push(3);\n\n    array64.push(1);\n\n    array64.push(9);\n\n    array64.push(1095);\n\n    return array64.indexOf(value,false);\n",
          "message": "ArrayUtilsTestContractTwo.getUnsortedIndexOf64 (ArrayUtilsTestContractTwo.sol#1694-1703) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1705,
          "vulnerability_to_line": 1714,
          "vulnerability_code": "  function getNoIndexOf256(uint256 value, bool isSorted) returns (bool,uint256) {\n\n    delete array256;\n\n    array256.push(1);\n\n    array256.push(3);\n\n    array256.push(4);\n\n    array256.push(7);\n\n    array256.push(9);\n\n    array256.push(1095);\n\n    return array256.indexOf(value,isSorted);\n",
          "message": "ArrayUtilsTestContractTwo.getNoIndexOf256 (ArrayUtilsTestContractTwo.sol#1705-1714) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1716,
          "vulnerability_to_line": 1725,
          "vulnerability_code": "  function getNoIndexOf64(uint64 value, bool isSorted) returns (bool,uint256) {\n\n    delete array64;\n\n    array64.push(1);\n\n    array64.push(3);\n\n    array64.push(4);\n\n    array64.push(7);\n\n    array64.push(9);\n\n    array64.push(1095);\n\n    return array64.indexOf(value,isSorted);\n",
          "message": "ArrayUtilsTestContractTwo.getNoIndexOf64 (ArrayUtilsTestContractTwo.sol#1716-1725) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in ArrayUtilsTestContractTwo.sol:\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#235): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#528): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#788): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#1048): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#1308): it allows old versions\n\t- pragma solidity^0.4.18 (ArrayUtilsTestContractTwo.sol#1567): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1686,
          "vulnerability_to_line": null,
          "vulnerability_code": "    array256.push(0xffff);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1697,
          "vulnerability_to_line": null,
          "vulnerability_code": "    array64.push(0xffff);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 517,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 777,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1037,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
          "vulnerability_from_line": 1556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.length--;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(sload(add(sha3(0x60,0x20),i)),sum)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "      maxValue := sload(sha3(0x60,0x20))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), maxValue)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "          maxValue := sload(add(sha3(0x60,0x20),i))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "      minValue := sload(sha3(0x60,0x20))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        switch gt(sload(add(sha3(0x60,0x20),i)), minValue)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "          minValue := sload(add(sha3(0x60,0x20),i))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "          switch lt(sload(add(sha3(0x60,0x20),mid)),value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "            switch gt(sload(add(sha3(0x60,0x20),mid)),value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": null,
          "vulnerability_code": "          switch eq(sload(add(sha3(0x60,0x20),low)), value)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 277,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 304,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 373,
          "vulnerability_to_line": null,
          "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(mid,2)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "          term := sload(add(sha3(0x60,0x20),div(i,2)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 597,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 625,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,4)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 885,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,8)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1090,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1117,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1145,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,16)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1350,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1377,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1405,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := sload(add(sha3(0x60,0x20),div(i,32)))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 772,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1032,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1551,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 j = i; j < self.length - 1; j++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 508,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 768,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 934,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1028,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1194,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1288,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1453,
          "vulnerability_to_line": null,
          "vulnerability_code": "      for (uint256 i = 0; i<self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1547,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < self.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 160,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 189,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 453,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 482,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (low <= high) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 713,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 742,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 921,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (low <= high) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 973,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1181,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (low <= high) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1233,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1262,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1440,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (low <= high) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1492,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1521,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while(lChild <= end){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1048,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1308,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1567,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint256[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint256[] storage self) public view returns(uint256 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint256[] storage self) public view returns(uint256 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint256[] storage self, uint256 value, bool isSorted)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint128[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint128[] storage self) public view returns(uint128 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint128[] storage self) public view returns(uint128 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 359,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint128[] storage self, uint128 value, bool isSorted)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 562,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint64[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint64[] storage self) public view returns(uint64 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint64[] storage self) public view returns(uint64 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 822,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint32[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 848,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint32[] storage self) public view returns(uint32 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 877,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint32[] storage self) public view returns(uint32 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint16[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint16[] storage self) public view returns(uint16 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint16[] storage self) public view returns(uint16 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1342,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sumElements(uint8[] storage self) public view returns(uint256 sum) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1368,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMax(uint8[] storage self) public view returns(uint8 maxValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 1397,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getMin(uint8[] storage self) public view returns(uint8 minValue) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 1489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 450,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UINT_CANT_BE_NEGATIVE",
          "vulnerability_from_line": 1489,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while(start >= 0){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 68,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 566,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 592,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 621,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 826,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1086,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1346,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1372,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1401,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1591,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSortedIndexOf256(uint256 value) returns (bool,uint256){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1603,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSortedIndexOf128(uint128 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1619,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSortedIndexOf64(uint64 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1635,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSortedIndexOf32(uint32 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1651,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSortedIndexOf16(uint16 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1667,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSortedIndexOf8(uint8 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1683,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUnsortedIndexOf256(uint256 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1694,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getUnsortedIndexOf64(uint64 value) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1705,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getNoIndexOf256(uint256 value, bool isSorted) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1716,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getNoIndexOf64(uint64 value, bool isSorted) returns (bool,uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1582,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256[] array256;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1583,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint128[] array128;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1584,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint64[] array64;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1585,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint32[] array32;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1586,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint16[] array16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1587,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint8[] array8;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (NameError: name 'callstack' is not defined)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint16[] storage self, uint16 value, bool isSorted)\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint64[] storage self, uint64 value, bool isSorted)\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 1432,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint8[] storage self, uint8 value, bool isSorted)\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function indexOf(uint32[] storage self, uint32 value, bool isSorted)\n",
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Division bugs",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(term,sum)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "          term := and(term,0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 1236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 1236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1099,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(term,sum)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1098,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1125,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1153,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x000000000000000000000000000000000000000000000000000000000000ffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1183,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1195,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (self[i] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(term,sum)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x00000000000000000000000000000000000000000000000000000000ffffffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (self[i] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 976,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1029,
          "vulnerability_to_line": null,
          "vulnerability_code": "      (contains, index) = indexOf(self, self[i], false);\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1036,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(term,sum)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 605,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "        term := and(0x000000000000000000000000000000000000000000000000ffffffffffffffff,term)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 663,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 675,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (self[i] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 1442,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Division bugs",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1359,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sum := add(term,sum)\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1442,
          "vulnerability_to_line": null,
          "vulnerability_code": "          if (self[mid] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1454,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (self[i] == value) {\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1495,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(self[swap] < self[lChild])\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 1555,
          "vulnerability_to_line": null,
          "vulnerability_code": "        delete self[self.length - 1];\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1574,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract ArrayUtilsTestContractTwo {\n",
          "message": null
        }
      ]
    }
  }
}