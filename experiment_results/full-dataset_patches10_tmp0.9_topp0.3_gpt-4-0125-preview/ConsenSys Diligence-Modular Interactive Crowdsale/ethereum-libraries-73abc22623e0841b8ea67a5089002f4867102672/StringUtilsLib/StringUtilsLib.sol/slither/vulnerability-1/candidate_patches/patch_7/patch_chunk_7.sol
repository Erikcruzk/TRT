function memcpy(uint dest, uint src, uint len) private pure {
    // Optimization: If we know that len is divisible by 32, we can use a single 'for' loop,
    // plus a correction loop for the remaining bytes (if any)
    uint i;

    // Copy word-length chunks
    for(i = 0; i < len / 32; i++) {
        assembly {
            mstore(add(dest, mul(i, 32)), mload(add(src, mul(i, 32))))
        }
    }

    // Calculate the number of bytes left to copy and adjust pointers
    uint remaining = len % 32;
    uint offset = mul(i, 32);

    // Correction loop for the remaining bytes
    if(remaining > 0) {
        uint mask = 256**(32 - remaining) - 1;
        assembly {
            let srcpart := and(mload(add(src, offset)), not(mask))
            let destpart := and(mload(add(dest, offset)), mask)
            mstore(add(dest, offset), or(destpart, srcpart))
        }
    }
}