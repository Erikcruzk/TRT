function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)
                           public
                           returns (bool)
  {
    require(msg.sender != self.base.owner);
    require(self.base.validPurchase());
    require(self.isRegistered[msg.sender]);

    
    if ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&
        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))
    {
      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&
            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))
      {
        self.base.currentMilestone += 1;
      }

      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];

      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);

      LogAddressTokenCapChange(self.addressTokenCap, "Address cap has increased!");
      LogTokenPriceChange(self.base.tokensPerEth,"Token Price has changed!");
    }

    uint256 _numTokens; 
    uint256 _newBalance; 
    uint256 _weiTokens; 
    uint256 _leftoverWei = 0; // Fix applied here by initializing _leftoverWei
    uint256 _remainder; 
    uint256 _allowedWei;  
    bool err;

    if(self.addressTokenCap > 0) {
      
      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];

      (err, _allowedWei) = _allowedWei.times(1000000000000000000);
      require(!err);

      _allowedWei = _allowedWei/self.base.tokensPerEth;
    } else {
      
      _allowedWei = _amount;
    }
    require(_allowedWei > 0);
    _allowedWei = getMin(_amount,_allowedWei);
    _leftoverWei = _leftoverWei + (_amount - _allowedWei);

    
    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);
    require(!err);

    _numTokens = _weiTokens / 1000000000000000000;
    _remainder = _weiTokens % 1000000000000000000;
    _remainder = _remainder / self.base.tokensPerEth;
    _leftoverWei = _leftoverWei + _remainder;
    _amount = _amount - _remainder;
    self.base.leftoverWei[msg.sender] += _leftoverWei;

    
    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;

    assert(_numTokens <= self.base.token.balanceOf(this));

    
    (err,_newBalance) = self.base.ownerBalance.plus(_amount);
    require(!err);

    self.base.ownerBalance = _newBalance;   

    
    self.base.withdrawTokensMap[msg.sender] += _numTokens;
    self.tokensBought[msg.sender] += _numTokens;

    
    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);
    require(!err);
    self.base.withdrawTokensMap[self.base.owner] = _remainder;

    LogTokensBought(msg.sender, _numTokens);

    return true;
  }