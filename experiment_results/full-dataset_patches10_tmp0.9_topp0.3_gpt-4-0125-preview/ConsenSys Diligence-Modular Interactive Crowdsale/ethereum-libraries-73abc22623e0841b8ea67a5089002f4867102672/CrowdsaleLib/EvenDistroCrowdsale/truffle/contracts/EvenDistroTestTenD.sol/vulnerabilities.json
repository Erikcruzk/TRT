{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 313,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((self.owner == msg.sender) && (_newOwner > 0));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 325,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require((self.owner == msg.sender) && self.stillMinting);\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (crowdsaleActive(self) && nonZeroPurchase) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 610,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 611,
          "vulnerability_to_line": null,
          "vulnerability_code": "    } else {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "      LogErrorMsg(msg.value, \"Invalid Purchase! Check start time and amount of ether.\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 613,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 614,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 868,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 869,
          "vulnerability_to_line": null,
          "vulnerability_code": "      LogRegError(_registrant, \"Can only register users earlier than 2 hours before the sale!\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 871,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if ((!self.staticCap) && (now >= self.base.startTime - 2 hours)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 914,
          "vulnerability_to_line": null,
          "vulnerability_code": "      LogRegError(_registrant, \"Can only unregister users earlier than 2 hours before the sale!\");\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 915,
          "vulnerability_to_line": null,
          "vulnerability_code": "      return false;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1001,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1002,
          "vulnerability_to_line": null,
          "vulnerability_code": "        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1003,
          "vulnerability_to_line": null,
          "vulnerability_code": "    {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1005,
          "vulnerability_to_line": null,
          "vulnerability_code": "            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1006,
          "vulnerability_to_line": null,
          "vulnerability_code": "      {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "        self.base.currentMilestone += 1;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1008,
          "vulnerability_to_line": null,
          "vulnerability_code": "      }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1009,
          "vulnerability_to_line": null,
          "vulnerability_code": "\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1010,
          "vulnerability_to_line": null,
          "vulnerability_code": "      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 733,
          "vulnerability_to_line": null,
          "vulnerability_code": "      index++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "      index++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_29"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.times (EvenDistroTestTenD.sol#40-49) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.dividedBy (EvenDistroTestTenD.sol#57-72) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.plus (EvenDistroTestTenD.sol#80-89) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 106,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.minus (EvenDistroTestTenD.sol#97-106) is declared view but contains assembly code\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 1021,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _leftoverWei; //wei change for purchaser\n",
          "message": "_leftoverWei in EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#1021) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 287,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 _newAllowed;\n",
          "message": "_newAllowed in TokenLib.approveChange (EvenDistroTestTenD.sol#287) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 730,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 index;\n",
          "message": "index in CrowdsaleLib.getSaleData (EvenDistroTestTenD.sol#730) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": 1076,
          "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
          "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#992-1076) does not use the value returned by external calls:\n\t-self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]) (EvenDistroTestTenD.sol#1012)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string name,\n",
          "message": "CrowdsaleToken.CrowdsaleToken.name (local variable @ EvenDistroTestTenD.sol#401) shadows:\n\t- CrowdsaleToken.name (function @ EvenDistroTestTenD.sol#411-413)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string symbol,\n",
          "message": "CrowdsaleToken.CrowdsaleToken.symbol (local variable @ EvenDistroTestTenD.sol#402) shadows:\n\t- CrowdsaleToken.symbol (function @ EvenDistroTestTenD.sol#415-417)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 403,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   uint8 decimals,\n",
          "message": "CrowdsaleToken.CrowdsaleToken.decimals (local variable @ EvenDistroTestTenD.sol#403) shadows:\n\t- CrowdsaleToken.decimals (function @ EvenDistroTestTenD.sol#419-421)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 404,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   uint256 initialSupply,\n",
          "message": "CrowdsaleToken.CrowdsaleToken.initialSupply (local variable @ EvenDistroTestTenD.sol#404) shadows:\n\t- CrowdsaleToken.initialSupply (function @ EvenDistroTestTenD.sol#427-429)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1151,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string name,\n",
          "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.name (local variable @ EvenDistroTestTenD.sol#1151) shadows:\n\t- CrowdsaleTestTokenTenD.name (function @ EvenDistroTestTenD.sol#1161-1163)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string symbol,\n",
          "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.symbol (local variable @ EvenDistroTestTenD.sol#1152) shadows:\n\t- CrowdsaleTestTokenTenD.symbol (function @ EvenDistroTestTenD.sol#1165-1167)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1153,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   uint8 decimals,\n",
          "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.decimals (local variable @ EvenDistroTestTenD.sol#1153) shadows:\n\t- CrowdsaleTestTokenTenD.decimals (function @ EvenDistroTestTenD.sol#1169-1171)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 1154,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   uint256 initialSupply,\n",
          "message": "CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD.initialSupply (local variable @ EvenDistroTestTenD.sol#1154) shadows:\n\t- CrowdsaleTestTokenTenD.initialSupply (function @ EvenDistroTestTenD.sol#1177-1179)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.times uses assembly (EvenDistroTestTenD.sol#40-49)\n\t- EvenDistroTestTenD.sol#41-49\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.dividedBy uses assembly (EvenDistroTestTenD.sol#57-72)\n\t- EvenDistroTestTenD.sol#59-72\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.plus uses assembly (EvenDistroTestTenD.sol#80-89)\n\t- EvenDistroTestTenD.sol#81-89\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 106,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.minus uses assembly (EvenDistroTestTenD.sol#97-106)\n\t- EvenDistroTestTenD.sol#98-106\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 49,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := mul(a,b)\n\n      switch or(iszero(b), eq(div(res,b), a))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.times (EvenDistroTestTenD.sol#40-49) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 72,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n\n    uint256 res;\n\n    assembly{\n\n      switch iszero(b)\n\n      case 0 {\n\n        res := div(a,b)\n\n        let loc := mload(0x40)\n\n        mstore(add(loc,0x20),res)\n\n        i := mload(add(loc,0x20))\n\n      }\n\n      default {\n\n        err := 1\n\n        i := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.dividedBy (EvenDistroTestTenD.sol#57-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": 89,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n\n    assembly{\n\n      res := add(a,b)\n\n      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.plus (EvenDistroTestTenD.sol#80-89) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 106,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n\n    assembly{\n\n      res := sub(a,b)\n\n      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n\n      case 0 {\n\n        err := 1\n\n        res := 0\n\n      }\n\n    }\n",
          "message": "BasicMathLib.minus (EvenDistroTestTenD.sol#97-106) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 191,
          "vulnerability_code": "  function init(TokenStorage storage self,\n\n                address _owner,\n\n                string _name,\n\n                string _symbol,\n\n                uint8 _decimals,\n\n                uint256 _initial_supply,\n\n                bool _allowMinting)\n\n                public\n\n  {\n\n    require(!self.initialized);\n\n    self.initialized = true;\n\n    self.name = _name;\n\n    self.symbol = _symbol;\n\n    self.totalSupply = _initial_supply;\n\n    self.initialSupply = _initial_supply;\n\n    self.decimals = _decimals;\n\n    self.owner = _owner;\n\n    self.stillMinting = _allowMinting;\n\n    self.balances[_owner] = _initial_supply;\n",
          "message": "TokenLib.init (EvenDistroTestTenD.sol#172-191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": 210,
          "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    bool err;\n\n    uint256 balance;\n\n\n\n    (err,balance) = self.balances[msg.sender].minus(_value);\n\n    require(!err);\n\n    self.balances[msg.sender] = balance;\n\n    //It's not possible to overflow token supply\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n",
          "message": "TokenLib.transfer (EvenDistroTestTenD.sol#198-210) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 218,
          "vulnerability_to_line": 242,
          "vulnerability_code": "  function transferFrom(TokenStorage storage self,\n\n                        address _from,\n\n                        address _to,\n\n                        uint256 _value)\n\n                        public\n\n                        returns (bool)\n\n  {\n\n    var _allowance = self.allowed[_from][msg.sender];\n\n    bool err;\n\n    uint256 balanceOwner;\n\n    uint256 balanceSpender;\n\n\n\n    (err,balanceOwner) = self.balances[_from].minus(_value);\n\n    require(!err);\n\n\n\n    (err,balanceSpender) = _allowance.minus(_value);\n\n    require(!err);\n\n\n\n    self.balances[_from] = balanceOwner;\n\n    self.allowed[_from][msg.sender] = balanceSpender;\n\n    self.balances[_to] = self.balances[_to] + _value;\n\n\n\n    Transfer(_from, _to, _value);\n\n    return true;\n",
          "message": "TokenLib.transferFrom (EvenDistroTestTenD.sol#218-242) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": 250,
          "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n\n    return self.balances[_owner];\n",
          "message": "TokenLib.balanceOf (EvenDistroTestTenD.sol#248-250) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 264,
          "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n\n    // must set to zero before changing approval amount in accordance with spec\n\n    require((_value == 0) || (self.allowed[msg.sender][_spender] == 0));\n\n\n\n    self.allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n",
          "message": "TokenLib.approve (EvenDistroTestTenD.sol#257-264) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": 276,
          "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n\n                     public\n\n                     view\n\n                     returns (uint256 remaining) {\n\n    return self.allowed[_owner][_spender];\n",
          "message": "TokenLib.allowance (EvenDistroTestTenD.sol#271-276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": 306,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n\n                          public returns (bool)\n\n  {\n\n    uint256 _newAllowed;\n\n    bool err;\n\n\n\n    if(_increase) {\n\n      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n\n      require(!err);\n\n\n\n      self.allowed[msg.sender][_spender] = _newAllowed;\n\n    } else {\n\n      if (_valueChange > self.allowed[msg.sender][_spender]) {\n\n        self.allowed[msg.sender][_spender] = 0;\n\n      } else {\n\n        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n\n        self.allowed[msg.sender][_spender] = _newAllowed;\n\n      }\n\n    }\n\n\n\n    Approval(msg.sender, _spender, _newAllowed);\n\n    return true;\n",
          "message": "TokenLib.approveChange (EvenDistroTestTenD.sol#284-306) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 318,
          "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n\n    require((self.owner == msg.sender) && (_newOwner > 0));\n\n\n\n    self.owner = _newOwner;\n\n    OwnerChange(msg.sender, _newOwner);\n\n    return true;\n",
          "message": "TokenLib.changeOwner (EvenDistroTestTenD.sol#312-318) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": 336,
          "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n    require((self.owner == msg.sender) && self.stillMinting);\n\n    uint256 _newAmount;\n\n    bool err;\n\n\n\n    (err, _newAmount) = self.totalSupply.plus(_amount);\n\n    require(!err);\n\n\n\n    self.totalSupply =  _newAmount;\n\n    self.balances[self.owner] = self.balances[self.owner] + _amount;\n\n    Transfer(0x0, self.owner, _amount);\n\n    return true;\n",
          "message": "TokenLib.mintToken (EvenDistroTestTenD.sol#324-336) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": 347,
          "vulnerability_code": "  function closeMint(TokenStorage storage self) public returns (bool) {\n\n    require(self.owner == msg.sender);\n\n\n\n    self.stillMinting = false;\n\n    MintingClosed(true);\n\n    return true;\n",
          "message": "TokenLib.closeMint (EvenDistroTestTenD.sol#341-347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": 365,
          "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n\n      uint256 _newBalance;\n\n      bool err;\n\n\n\n      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n\n      require(!err);\n\n\n\n      self.balances[msg.sender] = _newBalance;\n\n      self.totalSupply = self.totalSupply - _amount;\n\n      Burn(msg.sender, _amount);\n\n      Transfer(msg.sender, 0x0, _amount);\n\n      return true;\n",
          "message": "TokenLib.burnToken (EvenDistroTestTenD.sol#353-365) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": 413,
          "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
          "message": "CrowdsaleToken.name (EvenDistroTestTenD.sol#411-413) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": 417,
          "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
          "message": "CrowdsaleToken.symbol (EvenDistroTestTenD.sol#415-417) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 419,
          "vulnerability_to_line": 421,
          "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
          "message": "CrowdsaleToken.decimals (EvenDistroTestTenD.sol#419-421) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 423,
          "vulnerability_to_line": 425,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
          "message": "CrowdsaleToken.totalSupply (EvenDistroTestTenD.sol#423-425) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 427,
          "vulnerability_to_line": 429,
          "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
          "message": "CrowdsaleToken.initialSupply (EvenDistroTestTenD.sol#427-429) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": 433,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
          "message": "CrowdsaleToken.balanceOf (EvenDistroTestTenD.sol#431-433) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": 437,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
          "message": "CrowdsaleToken.allowance (EvenDistroTestTenD.sol#435-437) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": 441,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
          "message": "CrowdsaleToken.transfer (EvenDistroTestTenD.sol#439-441) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": 445,
          "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
          "message": "CrowdsaleToken.transferFrom (EvenDistroTestTenD.sol#443-445) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": 449,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
          "message": "CrowdsaleToken.approve (EvenDistroTestTenD.sol#447-449) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 456,
          "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
          "message": "CrowdsaleToken.approveChange (EvenDistroTestTenD.sol#451-456) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 458,
          "vulnerability_to_line": 460,
          "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
          "message": "CrowdsaleToken.changeOwner (EvenDistroTestTenD.sol#458-460) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": 464,
          "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
          "message": "CrowdsaleToken.burnToken (EvenDistroTestTenD.sol#462-464) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": 588,
          "vulnerability_code": "  function init(CrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \trequire(self.owner == 0);\n\n    require(_saleData.length > 0);\n\n    require((_saleData.length%3) == 0); // ensure saleData is 3-item sets\n\n    require(_saleData[0] > (now + 2 hours));\n\n    require(_endTime > _saleData[0]);\n\n    require(_owner > 0);\n\n    require(_percentBurn <= 100);\n\n    self.owner = _owner;\n\n    self.startTime = _saleData[0];\n\n    self.endTime = _endTime;\n\n    self.token = _token;\n\n    self.percentBurn = _percentBurn;\n\n\n\n    uint256 _tempTime;\n\n    for(uint256 i = 0; i < _saleData.length; i += 3){\n\n      require(_saleData[i] > _tempTime);\n\n      require(_saleData[i + 1] > 0);\n\n      require((_saleData[i + 2] == 0) || (_saleData[i + 2] >= 100));\n\n      self.milestoneTimes.push(_saleData[i]);\n\n      self.saleData[_saleData[i]][0] = _saleData[i + 1];\n\n      self.saleData[_saleData[i]][1] = _saleData[i + 2];\n\n      _tempTime = _saleData[i];\n\n    }\n\n    changeTokenPrice(self, _saleData[1]);\n",
          "message": "CrowdsaleLib.init (EvenDistroTestTenD.sol#556-588) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 620,
          "vulnerability_to_line": 648,
          "vulnerability_code": "  function withdrawTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    bool ok;\n\n\n\n    if (self.withdrawTokensMap[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no tokens to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    if (msg.sender == self.owner) {\n\n      if(!crowdsaleEnded(self)){\n\n        LogErrorMsg(0, \"Owner cannot withdraw extra tokens until after the sale!\");\n\n        return false;\n\n      } else {\n\n        if(self.percentBurn > 0){\n\n          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n\n          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n\n          ok = self.token.burnToken(_burnAmount);\n\n          require(ok);\n\n        }\n\n      }\n\n    }\n\n\n\n    var total = self.withdrawTokensMap[msg.sender];\n\n    self.withdrawTokensMap[msg.sender] = 0;\n\n    ok = self.token.transfer(msg.sender, total);\n\n    require(ok);\n\n    LogTokensWithdrawn(msg.sender, total);\n\n    return true;\n",
          "message": "CrowdsaleLib.withdrawTokens (EvenDistroTestTenD.sol#620-648) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 653,
          "vulnerability_to_line": 664,
          "vulnerability_code": "  function withdrawLeftoverWei(CrowdsaleStorage storage self) public returns (bool) {\n\n    if (self.leftoverWei[msg.sender] == 0) {\n\n      LogErrorMsg(0, \"Sender has no extra wei to withdraw!\");\n\n      return false;\n\n    }\n\n\n\n    var total = self.leftoverWei[msg.sender];\n\n    self.leftoverWei[msg.sender] = 0;\n\n    msg.sender.transfer(total);\n\n    LogWeiWithdrawn(msg.sender, total);\n\n    return true;\n",
          "message": "CrowdsaleLib.withdrawLeftoverWei (EvenDistroTestTenD.sol#653-664) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 669,
          "vulnerability_to_line": 684,
          "vulnerability_code": "  function withdrawOwnerEth(CrowdsaleStorage storage self) public returns (bool) {\n\n    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n\n      LogErrorMsg(0, \"Cannot withdraw owner ether until after the sale!\");\n\n      return false;\n\n    }\n\n\n\n    require(msg.sender == self.owner);\n\n    require(self.ownerBalance > 0);\n\n\n\n    uint256 amount = self.ownerBalance;\n\n    self.ownerBalance = 0;\n\n    self.owner.transfer(amount);\n\n    LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale owner has withdrawn all funds!\");\n\n\n\n    return true;\n",
          "message": "CrowdsaleLib.withdrawOwnerEth (EvenDistroTestTenD.sol#669-684) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 705,
          "vulnerability_to_line": 718,
          "vulnerability_code": "  function setTokens(CrowdsaleStorage storage self) public returns (bool) {\n\n    require(msg.sender == self.owner);\n\n    require(!self.tokensSet);\n\n    require(now < self.endTime);\n\n\n\n    uint256 _tokenBalance;\n\n\n\n    _tokenBalance = self.token.balanceOf(this);\n\n    self.withdrawTokensMap[msg.sender] = _tokenBalance;\n\n    self.startingTokenBalance = _tokenBalance;\n\n    self.tokensSet = true;\n\n\n\n    return true;\n",
          "message": "CrowdsaleLib.setTokens (EvenDistroTestTenD.sol#705-718) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 724,
          "vulnerability_to_line": 742,
          "vulnerability_code": "  function getSaleData(CrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    uint256[3] memory _thisData;\n\n    uint256 index;\n\n\n\n    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n\n      index++;\n\n    }\n\n    if(index == 0)\n\n      index++;\n\n\n\n    _thisData[0] = self.milestoneTimes[index - 1];\n\n    _thisData[1] = self.saleData[_thisData[0]][0];\n\n    _thisData[2] = self.saleData[_thisData[0]][1];\n\n    return _thisData;\n",
          "message": "CrowdsaleLib.getSaleData (EvenDistroTestTenD.sol#724-742) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 747,
          "vulnerability_to_line": 749,
          "vulnerability_code": "  function getTokensSold(CrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
          "message": "CrowdsaleLib.getTokensSold (EvenDistroTestTenD.sol#747-749) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 837,
          "vulnerability_to_line": 855,
          "vulnerability_code": "  function init(EvenDistroCrowdsaleStorage storage self,\n\n                address _owner,\n\n                uint256[] _saleData,\n\n                uint256 _endTime,\n\n                uint8 _percentBurn,\n\n                uint256 _initialAddressTokenCap,\n\n                bool _staticCap,\n\n                CrowdsaleToken _token)\n\n                public\n\n  {\n\n  \tself.base.init(_owner,\n\n                   _saleData,\n\n                   _endTime,\n\n                   _percentBurn,\n\n                   _token);\n\n\n\n    self.addressTokenCap = _initialAddressTokenCap;\n\n    self.staticCap = _staticCap;\n",
          "message": "EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#837-855) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": 903,
          "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      registerUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
          "message": "EvenDistroCrowdsaleLib.registerUsers (EvenDistroTestTenD.sol#893-903) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 938,
          "vulnerability_to_line": 948,
          "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender == self.base.owner);\n\n\n\n    for (uint256 i = 0; i < _registrants.length; i++) {\n\n      unregisterUser(self,_registrants[i]);\n\n    }\n\n    return true;\n",
          "message": "EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroTestTenD.sol#938-948) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": 1076,
          "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n\n                           public\n\n                           returns (bool)\n\n  {\n\n    require(msg.sender != self.base.owner);\n\n    require(self.base.validPurchase());\n\n    require(self.isRegistered[msg.sender]);\n\n\n\n  \t// if the address cap increase interval has passed, update the current day and change the address cap\n\n  \tif ((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n        (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n    {\n\n      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n\n            (now > self.base.milestoneTimes[self.base.currentMilestone + 1]))\n\n      {\n\n        self.base.currentMilestone += 1;\n\n      }\n\n\n\n      self.addressTokenCap = self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][1];\n\n\n\n      self.base.changeTokenPrice(self.base.saleData[self.base.milestoneTimes[self.base.currentMilestone]][0]);\n\n\n\n      LogAddressTokenCapChange(self.addressTokenCap, \"Address cap has increased!\");\n\n      LogTokenPriceChange(self.base.tokensPerEth,\"Token Price has changed!\");\n\n  \t}\n\n\n\n    uint256 _numTokens; //number of tokens that will be purchased\n\n    uint256 _newBalance; //the new balance of the owner of the crowdsale\n\n    uint256 _weiTokens; //temp calc holder\n\n    uint256 _leftoverWei; //wei change for purchaser\n\n    uint256 _remainder; //temp calc holder\n\n    uint256 _allowedWei;  // tells how much more the buyer can contribute up to their cap\n\n    bool err;\n\n\n\n    if(self.addressTokenCap > 0) {\n\n      //_allowedWei represents tokens first, recycle variable to prevent stack depth issues\n\n      _allowedWei = self.addressTokenCap - self.tokensBought[msg.sender];\n\n\n\n      (err, _allowedWei) = _allowedWei.times(1000000000000000000);\n\n      require(!err);\n\n\n\n      _allowedWei = _allowedWei/self.base.tokensPerEth;\n\n    } else {\n\n      // if addressTokenCap is zero then there is no cap\n\n      _allowedWei = _amount;\n\n    }\n\n    require(_allowedWei > 0);\n\n    _allowedWei = getMin(_amount,_allowedWei);\n\n    _leftoverWei = _leftoverWei + (_amount - _allowedWei);\n\n\n\n    // Find the number of tokens as a function in wei\n\n    (err,_weiTokens) = _allowedWei.times(self.base.tokensPerEth);\n\n    require(!err);\n\n\n\n    _numTokens = _weiTokens / 1000000000000000000;\n\n    _remainder = _weiTokens % 1000000000000000000;\n\n    _remainder = _remainder / self.base.tokensPerEth;\n\n    _leftoverWei = _leftoverWei + _remainder;\n\n    _amount = _amount - _remainder;\n\n    self.base.leftoverWei[msg.sender] += _leftoverWei;\n\n\n\n    // can't overflow because it is under the cap\n\n    self.base.hasContributed[msg.sender] += _allowedWei - _remainder;\n\n\n\n    assert(_numTokens <= self.base.token.balanceOf(this));\n\n\n\n    // calculate the amount of ether in the owners balance\n\n    (err,_newBalance) = self.base.ownerBalance.plus(_amount);\n\n    require(!err);\n\n\n\n    self.base.ownerBalance = _newBalance;   // \"deposit\" the amount\n\n\n\n    // can't overflow because it will be under the cap\n\n    self.base.withdrawTokensMap[msg.sender] += _numTokens;\n\n    self.tokensBought[msg.sender] += _numTokens;\n\n\n\n    //subtract tokens from owner's share\n\n    (err,_remainder) = self.base.withdrawTokensMap[self.base.owner].minus(_numTokens);\n\n    require(!err);\n\n    self.base.withdrawTokensMap[self.base.owner] = _remainder;\n\n\n\n    LogTokensBought(msg.sender, _numTokens);\n\n\n\n    return true;\n",
          "message": "EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#992-1076) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1080,
          "vulnerability_to_line": 1083,
          "vulnerability_code": "  function setTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    calculateAddressTokenCap(self);\n\n    return self.base.setTokens();\n",
          "message": "EvenDistroCrowdsaleLib.setTokens (EvenDistroTestTenD.sol#1080-1083) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1085,
          "vulnerability_to_line": 1087,
          "vulnerability_code": "  function withdrawTokens(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawTokens();\n",
          "message": "EvenDistroCrowdsaleLib.withdrawTokens (EvenDistroTestTenD.sol#1085-1087) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1089,
          "vulnerability_to_line": 1091,
          "vulnerability_code": "  function withdrawLeftoverWei(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawLeftoverWei();\n",
          "message": "EvenDistroCrowdsaleLib.withdrawLeftoverWei (EvenDistroTestTenD.sol#1089-1091) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1093,
          "vulnerability_to_line": 1095,
          "vulnerability_code": "  function withdrawOwnerEth(EvenDistroCrowdsaleStorage storage self) public returns (bool) {\n\n    return self.base.withdrawOwnerEth();\n",
          "message": "EvenDistroCrowdsaleLib.withdrawOwnerEth (EvenDistroTestTenD.sol#1093-1095) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1097,
          "vulnerability_to_line": 1103,
          "vulnerability_code": "  function getSaleData(EvenDistroCrowdsaleStorage storage self, uint256 timestamp)\n\n                       public\n\n                       view\n\n                       returns (uint256[3])\n\n  {\n\n    return self.base.getSaleData(timestamp);\n",
          "message": "EvenDistroCrowdsaleLib.getSaleData (EvenDistroTestTenD.sol#1097-1103) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1105,
          "vulnerability_to_line": 1107,
          "vulnerability_code": "  function getTokensSold(EvenDistroCrowdsaleStorage storage self) public view returns (uint256) {\n\n    return self.base.getTokensSold();\n",
          "message": "EvenDistroCrowdsaleLib.getTokensSold (EvenDistroTestTenD.sol#1105-1107) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1109,
          "vulnerability_to_line": 1111,
          "vulnerability_code": "  function crowdsaleActive(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleActive();\n",
          "message": "EvenDistroCrowdsaleLib.crowdsaleActive (EvenDistroTestTenD.sol#1109-1111) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1113,
          "vulnerability_to_line": 1115,
          "vulnerability_code": "  function crowdsaleEnded(EvenDistroCrowdsaleStorage storage self) public view returns (bool) {\n\n    return self.base.crowdsaleEnded();\n",
          "message": "EvenDistroCrowdsaleLib.crowdsaleEnded (EvenDistroTestTenD.sol#1113-1115) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": 1163,
          "vulnerability_code": "  function name() public view returns (string) {\n\n    return token.name;\n",
          "message": "CrowdsaleTestTokenTenD.name (EvenDistroTestTenD.sol#1161-1163) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": 1167,
          "vulnerability_code": "  function symbol() public view returns (string) {\n\n    return token.symbol;\n",
          "message": "CrowdsaleTestTokenTenD.symbol (EvenDistroTestTenD.sol#1165-1167) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1169,
          "vulnerability_to_line": 1171,
          "vulnerability_code": "  function decimals() public view returns (uint8) {\n\n    return token.decimals;\n",
          "message": "CrowdsaleTestTokenTenD.decimals (EvenDistroTestTenD.sol#1169-1171) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1173,
          "vulnerability_to_line": 1175,
          "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return token.totalSupply;\n",
          "message": "CrowdsaleTestTokenTenD.totalSupply (EvenDistroTestTenD.sol#1173-1175) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1177,
          "vulnerability_to_line": 1179,
          "vulnerability_code": "  function initialSupply() public view returns (uint256) {\n\n    return token.initialSupply;\n",
          "message": "CrowdsaleTestTokenTenD.initialSupply (EvenDistroTestTenD.sol#1177-1179) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1181,
          "vulnerability_to_line": 1183,
          "vulnerability_code": "  function balanceOf(address who) public view returns (uint256) {\n\n    return token.balanceOf(who);\n",
          "message": "CrowdsaleTestTokenTenD.balanceOf (EvenDistroTestTenD.sol#1181-1183) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1185,
          "vulnerability_to_line": 1187,
          "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256) {\n\n    return token.allowance(owner, spender);\n",
          "message": "CrowdsaleTestTokenTenD.allowance (EvenDistroTestTenD.sol#1185-1187) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": 1191,
          "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool ok) {\n\n    return token.transfer(to, value);\n",
          "message": "CrowdsaleTestTokenTenD.transfer (EvenDistroTestTenD.sol#1189-1191) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1193,
          "vulnerability_to_line": 1195,
          "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool ok) {\n\n    return token.transferFrom(from, to, value);\n",
          "message": "CrowdsaleTestTokenTenD.transferFrom (EvenDistroTestTenD.sol#1193-1195) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1197,
          "vulnerability_to_line": 1199,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n\n    return token.approve(spender, value);\n",
          "message": "CrowdsaleTestTokenTenD.approve (EvenDistroTestTenD.sol#1197-1199) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1201,
          "vulnerability_to_line": 1206,
          "vulnerability_code": "  function approveChange(address spender, uint256 valueChange, bool increase)\n\n                         public\n\n                         returns (bool)\n\n  {\n\n    return token.approveChange(spender, valueChange, increase);\n",
          "message": "CrowdsaleTestTokenTenD.approveChange (EvenDistroTestTenD.sol#1201-1206) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1208,
          "vulnerability_to_line": 1210,
          "vulnerability_code": "  function changeOwner(address newOwner) public returns (bool ok) {\n\n    return token.changeOwner(newOwner);\n",
          "message": "CrowdsaleTestTokenTenD.changeOwner (EvenDistroTestTenD.sol#1208-1210) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1212,
          "vulnerability_to_line": 1214,
          "vulnerability_code": "  function burnToken(uint256 amount) public returns (bool ok) {\n\n    return token.burnToken(amount);\n",
          "message": "CrowdsaleTestTokenTenD.burnToken (EvenDistroTestTenD.sol#1212-1214) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": 1275,
          "vulnerability_code": "  function () payable {\n\n    sendPurchase();\n",
          "message": "EvenDistroTestTenD.fallback (EvenDistroTestTenD.sol#1273-1275) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": 1283,
          "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n\n    return sale.registerUser(_registrant);\n",
          "message": "EvenDistroTestTenD.registerUser (EvenDistroTestTenD.sol#1281-1283) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1285,
          "vulnerability_to_line": 1287,
          "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n\n    return sale.registerUsers(_registrants);\n",
          "message": "EvenDistroTestTenD.registerUsers (EvenDistroTestTenD.sol#1285-1287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": 1291,
          "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n\n    return sale.unregisterUser(_registrant);\n",
          "message": "EvenDistroTestTenD.unregisterUser (EvenDistroTestTenD.sol#1289-1291) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1293,
          "vulnerability_to_line": 1295,
          "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n\n    return sale.unregisterUsers(_registrants);\n",
          "message": "EvenDistroTestTenD.unregisterUsers (EvenDistroTestTenD.sol#1293-1295) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": 1299,
          "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n\n    return sale.isRegistered[_registrant];\n",
          "message": "EvenDistroTestTenD.isRegistered (EvenDistroTestTenD.sol#1297-1299) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1301,
          "vulnerability_to_line": 1303,
          "vulnerability_code": "  function withdrawTokens() returns (bool) {\n\n    return sale.withdrawTokens();\n",
          "message": "EvenDistroTestTenD.withdrawTokens (EvenDistroTestTenD.sol#1301-1303) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": 1307,
          "vulnerability_code": "  function withdrawLeftoverWei() returns (bool) {\n\n    return sale.withdrawLeftoverWei();\n",
          "message": "EvenDistroTestTenD.withdrawLeftoverWei (EvenDistroTestTenD.sol#1305-1307) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1309,
          "vulnerability_to_line": 1311,
          "vulnerability_code": "  function withdrawOwnerEth() returns (bool) {\n\n  \treturn sale.withdrawOwnerEth();\n",
          "message": "EvenDistroTestTenD.withdrawOwnerEth (EvenDistroTestTenD.sol#1309-1311) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1313,
          "vulnerability_to_line": 1315,
          "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n\n  \treturn sale.crowdsaleActive();\n",
          "message": "EvenDistroTestTenD.crowdsaleActive (EvenDistroTestTenD.sol#1313-1315) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1317,
          "vulnerability_to_line": 1319,
          "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n\n  \treturn sale.crowdsaleEnded();\n",
          "message": "EvenDistroTestTenD.crowdsaleEnded (EvenDistroTestTenD.sol#1317-1319) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1321,
          "vulnerability_to_line": 1323,
          "vulnerability_code": "  function setTokens() returns (bool) {\n\n    return sale.setTokens();\n",
          "message": "EvenDistroTestTenD.setTokens (EvenDistroTestTenD.sol#1321-1323) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1325,
          "vulnerability_to_line": 1327,
          "vulnerability_code": "  function getOwner() constant returns (address) {\n\n    return sale.base.owner;\n",
          "message": "EvenDistroTestTenD.getOwner (EvenDistroTestTenD.sol#1325-1327) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": 1331,
          "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n\n    return sale.base.tokensPerEth;\n",
          "message": "EvenDistroTestTenD.getTokensPerEth (EvenDistroTestTenD.sol#1329-1331) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1333,
          "vulnerability_to_line": 1335,
          "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n\n    return sale.base.startTime;\n",
          "message": "EvenDistroTestTenD.getStartTime (EvenDistroTestTenD.sol#1333-1335) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1337,
          "vulnerability_to_line": 1339,
          "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n\n    return sale.base.endTime;\n",
          "message": "EvenDistroTestTenD.getEndTime (EvenDistroTestTenD.sol#1337-1339) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1341,
          "vulnerability_to_line": 1343,
          "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n\n    return sale.base.ownerBalance;\n",
          "message": "EvenDistroTestTenD.getEthRaised (EvenDistroTestTenD.sol#1341-1343) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1345,
          "vulnerability_to_line": 1347,
          "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n\n    return sale.base.hasContributed[_buyer];\n",
          "message": "EvenDistroTestTenD.getContribution (EvenDistroTestTenD.sol#1345-1347) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": 1351,
          "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n\n    return sale.base.withdrawTokensMap[_buyer];\n",
          "message": "EvenDistroTestTenD.getTokenPurchase (EvenDistroTestTenD.sol#1349-1351) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": 1355,
          "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n\n    return sale.base.leftoverWei[_buyer];\n",
          "message": "EvenDistroTestTenD.getLeftoverWei (EvenDistroTestTenD.sol#1353-1355) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1357,
          "vulnerability_to_line": 1359,
          "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n\n    return sale.getSaleData(timestamp);\n",
          "message": "EvenDistroTestTenD.getSaleData (EvenDistroTestTenD.sol#1357-1359) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1361,
          "vulnerability_to_line": 1363,
          "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n\n    return sale.getTokensSold();\n",
          "message": "EvenDistroTestTenD.getTokensSold (EvenDistroTestTenD.sol#1361-1363) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": 1367,
          "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n\n    return sale.base.percentBurn;\n",
          "message": "EvenDistroTestTenD.getPercentBurn (EvenDistroTestTenD.sol#1365-1367) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1369,
          "vulnerability_to_line": 1371,
          "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n\n    return sale.addressTokenCap;\n",
          "message": "EvenDistroTestTenD.getAddressTokenCap (EvenDistroTestTenD.sol#1369-1371) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 1373,
          "vulnerability_to_line": 1375,
          "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n\n    return sale.numRegistered;\n",
          "message": "EvenDistroTestTenD.getNumRegistered (EvenDistroTestTenD.sol#1373-1375) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": "Detected issues with version pragma in EvenDistroTestTenD.sol:\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#3): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#111): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#370): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#469): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#754): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#1120): it allows old versions\n\t- pragma solidity^0.4.18 (EvenDistroTestTenD.sol#1219): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address _owner,\n",
          "message": "Parameter '_owner' of TokenLib.init (EvenDistroTestTenD.sol#173) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _name,\n",
          "message": "Parameter '_name' of TokenLib.init (EvenDistroTestTenD.sol#174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _symbol,\n",
          "message": "Parameter '_symbol' of TokenLib.init (EvenDistroTestTenD.sol#175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 _decimals,\n",
          "message": "Parameter '_decimals' of TokenLib.init (EvenDistroTestTenD.sol#176) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256 _initial_supply,\n",
          "message": "Parameter '_initial_supply' of TokenLib.init (EvenDistroTestTenD.sol#177) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 178,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bool _allowMinting)\n",
          "message": "Parameter '_allowMinting' of TokenLib.init (EvenDistroTestTenD.sol#178) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_to' of TokenLib.transfer (EvenDistroTestTenD.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer(TokenStorage storage self, address _to, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of TokenLib.transfer (EvenDistroTestTenD.sol#198) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 219,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        address _from,\n",
          "message": "Parameter '_from' of TokenLib.transferFrom (EvenDistroTestTenD.sol#219) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        address _to,\n",
          "message": "Parameter '_to' of TokenLib.transferFrom (EvenDistroTestTenD.sol#220) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        uint256 _value)\n",
          "message": "Parameter '_value' of TokenLib.transferFrom (EvenDistroTestTenD.sol#221) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(TokenStorage storage self, address _owner) public view returns (uint256 balance) {\n",
          "message": "Parameter '_owner' of TokenLib.balanceOf (EvenDistroTestTenD.sol#248) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_spender' of TokenLib.approve (EvenDistroTestTenD.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(TokenStorage storage self, address _spender, uint256 _value) public returns (bool) {\n",
          "message": "Parameter '_value' of TokenLib.approve (EvenDistroTestTenD.sol#257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
          "message": "Parameter '_owner' of TokenLib.allowance (EvenDistroTestTenD.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 271,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance(TokenStorage storage self, address _owner, address _spender)\n",
          "message": "Parameter '_spender' of TokenLib.allowance (EvenDistroTestTenD.sol#271) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
          "message": "Parameter '_spender' of TokenLib.approveChange (EvenDistroTestTenD.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
          "message": "Parameter '_valueChange' of TokenLib.approveChange (EvenDistroTestTenD.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n",
          "message": "Parameter '_increase' of TokenLib.approveChange (EvenDistroTestTenD.sol#284) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function changeOwner(TokenStorage storage self, address _newOwner) public returns (bool) {\n",
          "message": "Parameter '_newOwner' of TokenLib.changeOwner (EvenDistroTestTenD.sol#312) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 324,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mintToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
          "message": "Parameter '_amount' of TokenLib.mintToken (EvenDistroTestTenD.sol#324) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 353,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function burnToken(TokenStorage storage self, uint256 _amount) public returns (bool) {\n",
          "message": "Parameter '_amount' of TokenLib.burnToken (EvenDistroTestTenD.sol#353) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 400,
          "vulnerability_to_line": 409,
          "vulnerability_code": "  function CrowdsaleToken(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
          "message": "Function 'CrowdsaleToken.CrowdsaleToken' (EvenDistroTestTenD.sol#400-409) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address _owner,\n",
          "message": "Parameter '_owner' of CrowdsaleLib.init (EvenDistroTestTenD.sol#557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256[] _saleData,\n",
          "message": "Parameter '_saleData' of CrowdsaleLib.init (EvenDistroTestTenD.sol#558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256 _endTime,\n",
          "message": "Parameter '_endTime' of CrowdsaleLib.init (EvenDistroTestTenD.sol#559) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 560,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 _percentBurn,\n",
          "message": "Parameter '_percentBurn' of CrowdsaleLib.init (EvenDistroTestTenD.sol#560) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "                CrowdsaleToken _token)\n",
          "message": "Parameter '_token' of CrowdsaleLib.init (EvenDistroTestTenD.sol#561) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 691,
          "vulnerability_to_line": null,
          "vulnerability_code": "                            uint256 _tokensPerEth)\n",
          "message": "Parameter '_tokensPerEth' of CrowdsaleLib.changeTokenPrice (EvenDistroTestTenD.sol#691) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 838,
          "vulnerability_to_line": null,
          "vulnerability_code": "                address _owner,\n",
          "message": "Parameter '_owner' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#838) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256[] _saleData,\n",
          "message": "Parameter '_saleData' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#839) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256 _endTime,\n",
          "message": "Parameter '_endTime' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#840) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 841,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint8 _percentBurn,\n",
          "message": "Parameter '_percentBurn' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#841) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 842,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256 _initialAddressTokenCap,\n",
          "message": "Parameter '_initialAddressTokenCap' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#842) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 843,
          "vulnerability_to_line": null,
          "vulnerability_code": "                bool _staticCap,\n",
          "message": "Parameter '_staticCap' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#843) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 844,
          "vulnerability_to_line": null,
          "vulnerability_code": "                CrowdsaleToken _token)\n",
          "message": "Parameter '_token' of EvenDistroCrowdsaleLib.init (EvenDistroTestTenD.sol#844) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
          "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.registerUser (EvenDistroTestTenD.sol#861) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
          "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.registerUsers (EvenDistroTestTenD.sol#893) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 908,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUser(EvenDistroCrowdsaleStorage storage self, address _registrant)\n",
          "message": "Parameter '_registrant' of EvenDistroCrowdsaleLib.unregisterUser (EvenDistroTestTenD.sol#908) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 938,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
          "message": "Parameter '_registrants' of EvenDistroCrowdsaleLib.unregisterUsers (EvenDistroTestTenD.sol#938) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function receivePurchase(EvenDistroCrowdsaleStorage storage self, uint256 _amount)\n",
          "message": "Parameter '_amount' of EvenDistroCrowdsaleLib.receivePurchase (EvenDistroTestTenD.sol#992) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1150,
          "vulnerability_to_line": 1159,
          "vulnerability_code": "  function CrowdsaleTestTokenTenD(address owner,\n\n                                   string name,\n\n                                   string symbol,\n\n                                   uint8 decimals,\n\n                                   uint256 initialSupply,\n\n                                   bool allowMinting)\n\n                                   public\n\n  {\n\n    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n",
          "message": "Function 'CrowdsaleTestTokenTenD.CrowdsaleTestTokenTenD' (EvenDistroTestTenD.sol#1150-1159) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": 1257,
          "vulnerability_code": "  function EvenDistroTestTenD(\n\n    address owner,\n\n    uint256[] saleData,\n\n    uint256 endTime,\n\n    uint8 percentBurn,\n\n    uint256 initialAddressTokenCap,\n\n    bool staticCap,\n\n    CrowdsaleToken token)\n\n  {\n\n  \tsale.init(owner, saleData, endTime, percentBurn, initialAddressTokenCap, staticCap, token);\n",
          "message": "Function 'EvenDistroTestTenD.EvenDistroTestTenD' (EvenDistroTestTenD.sol#1247-1257) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n",
          "message": "Parameter '_registrant' of EvenDistroTestTenD.registerUser (EvenDistroTestTenD.sol#1281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1285,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n",
          "message": "Parameter '_registrants' of EvenDistroTestTenD.registerUsers (EvenDistroTestTenD.sol#1285) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n",
          "message": "Parameter '_registrant' of EvenDistroTestTenD.unregisterUser (EvenDistroTestTenD.sol#1289) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1293,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n",
          "message": "Parameter '_registrants' of EvenDistroTestTenD.unregisterUsers (EvenDistroTestTenD.sol#1293) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
          "message": "Parameter '_registrant' of EvenDistroTestTenD.isRegistered (EvenDistroTestTenD.sol#1297) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1345,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
          "message": "Parameter '_buyer' of EvenDistroTestTenD.getContribution (EvenDistroTestTenD.sol#1345) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
          "message": "Parameter '_buyer' of EvenDistroTestTenD.getTokenPurchase (EvenDistroTestTenD.sol#1349) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
          "message": "Parameter '_buyer' of EvenDistroTestTenD.getLeftoverWei (EvenDistroTestTenD.sol#1353) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1313,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1317,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1325,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwner() constant returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1333,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1337,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1341,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1345,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 1373,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 1197,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool ok) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < _saleData.length; i += 3){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 899,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for (uint256 i = 0; i < _registrants.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 970,
          "vulnerability_to_line": null,
          "vulnerability_code": "    for(uint256 i = 0; i < self.base.milestoneTimes.length; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 732,
          "vulnerability_to_line": null,
          "vulnerability_code": "    while((index < self.milestoneTimes.length) && (self.milestoneTimes[index] < timestamp)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1004,
          "vulnerability_to_line": null,
          "vulnerability_code": "      while((self.base.milestoneTimes.length > self.base.currentMilestone + 1) &&\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 1242,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract EvenDistroTestTenD {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 370,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 469,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 754,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1120,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 1219,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 1274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    sendPurchase();\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _name,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 175,
          "vulnerability_to_line": null,
          "vulnerability_code": "                string _symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string name,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function name() public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function symbol() public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256[] _saleData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 839,
          "vulnerability_to_line": null,
          "vulnerability_code": "                uint256[] _saleData,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 938,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUsers(EvenDistroCrowdsaleStorage storage self, address[] _registrants)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1151,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string name,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1152,
          "vulnerability_to_line": null,
          "vulnerability_code": "                                   string symbol,\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function name() public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1165,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function symbol() public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly{\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1247,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function EvenDistroTestTenD(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1273,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function () payable {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1277,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function sendPurchase() payable returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1281,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUser(address _registrant) returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1285,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function registerUsers(address[] _registrants) returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1289,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUser(address _registrant) returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1293,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function unregisterUsers(address[] _registrants) returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function isRegistered(address _registrant) constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1301,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdrawTokens() returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1305,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdrawLeftoverWei() returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1309,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdrawOwnerEth() returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1313,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function crowdsaleActive() constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1317,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function crowdsaleEnded() constant returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1321,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function setTokens() returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1325,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getOwner() constant returns (address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1329,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokensPerEth() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1333,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getStartTime() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1337,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getEndTime() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1341,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getEthRaised() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1345,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getContribution(address _buyer) constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1349,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokenPurchase(address _buyer) constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1353,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getLeftoverWei(address _buyer) constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1357,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getSaleData(uint256 timestamp) constant returns (uint256[3]) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1361,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getTokensSold() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1365,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getPercentBurn() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1369,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAddressTokenCap() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1373,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getNumRegistered() constant returns (uint256) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 1245,
          "vulnerability_to_line": null,
          "vulnerability_code": "  EvenDistroCrowdsaleLib.EvenDistroCrowdsaleStorage sale;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (NameError: name 'callstack' is not defined)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := add(a,b)\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := sub(a,b)\n",
          "message": "The arithmetic operator can underflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "  \treturn (now >= self.startTime && now <= self.endTime);\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Exception State (SWC 110)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Division bugs",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "      switch or(iszero(b), eq(div(res,b), a))\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "      res := mul(a,b)\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 661,
          "vulnerability_to_line": null,
          "vulnerability_code": "    msg.sender.transfer(total);\n",
          "message": null
        },
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 680,
          "vulnerability_to_line": null,
          "vulnerability_code": "    self.owner.transfer(amount);\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 634,
          "vulnerability_to_line": null,
          "vulnerability_code": "          uint256 _burnAmount = (self.withdrawTokensMap[msg.sender] * self.percentBurn)/100;\n",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 670,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if ((!crowdsaleEnded(self)) && (self.token.balanceOf(this)>0)) {\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 635,
          "vulnerability_to_line": null,
          "vulnerability_code": "          self.withdrawTokensMap[msg.sender] = self.withdrawTokensMap[msg.sender] - _burnAmount;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 748,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return self.startingTokenBalance - self.withdrawTokensMap[self.owner];\n",
          "message": null
        }
      ]
    }
  }
}