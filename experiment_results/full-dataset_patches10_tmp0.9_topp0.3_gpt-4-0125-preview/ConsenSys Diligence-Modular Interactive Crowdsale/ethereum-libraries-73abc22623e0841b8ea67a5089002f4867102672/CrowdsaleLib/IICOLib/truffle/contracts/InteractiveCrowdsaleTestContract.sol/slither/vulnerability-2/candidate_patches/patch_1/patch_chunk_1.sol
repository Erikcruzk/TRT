function retreiveFinalResult() public returns (bool) {
    require(now > sale.base.endTime);
    require(sale.personalCaps[msg.sender] > 0);

    uint256 numTokens;
    uint256 remainder;

    if(!sale.isFinalized){
      require(setCanceled(sale));
      require(sale.isCanceled);
    }

    if (sale.isCanceled) {
      
      sale.base.leftoverWei[msg.sender] += sale.base.hasContributed[msg.sender];
      sale.base.hasContributed[msg.sender] = 0;
      LogErrorMsg(sale.totalValuation, "Sale is canceled, all bids have been refunded!");
      return true;
    }

    if (sale.personalCaps[msg.sender] < sale.totalValuation) {

      
      sale.base.leftoverWei[msg.sender] += sale.base.hasContributed[msg.sender];

      
      sale.base.hasContributed[msg.sender] = 0;

      return sale.base.withdrawLeftoverWei();

    } else if (sale.personalCaps[msg.sender] == sale.totalValuation) {

      
      uint256 refundAmount = (sale.q*sale.base.hasContributed[msg.sender])/100;

      
      sale.base.leftoverWei[msg.sender] += refundAmount;

      
      sale.base.hasContributed[msg.sender] -= refundAmount;
    }

    LogErrorMsg(sale.base.hasContributed[msg.sender],"contribution");
    LogErrorMsg(sale.pricePurchasedAt[msg.sender],"price");
    LogErrorMsg(sale.q,"percentage");
    
    (numTokens, remainder) = calculateTokenPurchase(sale.base.hasContributed[msg.sender],
                                                    sale.pricePurchasedAt[msg.sender]);

    
    sale.base.withdrawTokensMap[msg.sender] += numTokens;
    sale.valueCommitted = sale.valueCommitted - remainder;
    sale.base.leftoverWei[msg.sender] += remainder;

    
    uint256 _fullBonus;
    uint256 _fullBonusPrice = (sale.base.tokensPerEth*(100 + sale.priceBonusPercent))/100;
    (_fullBonus, remainder) = calculateTokenPurchase(sale.base.hasContributed[msg.sender], _fullBonusPrice);
    uint256 _leftoverBonus = _fullBonus - numTokens;
    sale.base.token.burnToken(_leftoverBonus);

    sale.base.hasContributed[msg.sender] = 0;

    
    sale.base.withdrawTokens();

    sale.base.withdrawLeftoverWei();
}