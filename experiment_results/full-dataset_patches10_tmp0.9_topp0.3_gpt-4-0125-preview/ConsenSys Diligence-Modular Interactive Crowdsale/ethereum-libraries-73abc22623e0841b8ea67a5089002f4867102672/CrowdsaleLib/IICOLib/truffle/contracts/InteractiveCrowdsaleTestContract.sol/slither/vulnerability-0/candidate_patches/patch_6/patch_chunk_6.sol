function withdrawBid(InteractiveCrowdsaleStorage storage self) public returns (bool) {
  
  require(self.personalCaps[msg.sender] > 0);

  uint256 refundWei;
  
  
  if (now >= self.endWithdrawalTime) {
    require(self.personalCaps[msg.sender] < self.totalValuation);

    
    refundWei = self.base.hasContributed[msg.sender];

  } else {
    require(!self.hasManuallyWithdrawn[msg.sender]);  
    




    
    
    
    
    
    

    uint256 multiplierPercent = (100 * (self.endWithdrawalTime - now)) /
                                (self.endWithdrawalTime - self.base.startTime);
    refundWei = (multiplierPercent * self.base.hasContributed[msg.sender]) / 100;


    self.valuationSums[self.personalCaps[msg.sender]] -= refundWei;
    self.numBidsAtValuation[self.personalCaps[msg.sender]] -= 1;

    self.pricePurchasedAt[msg.sender] = self.pricePurchasedAt[msg.sender] -
                                        ((self.pricePurchasedAt[msg.sender] - self.base.tokensPerEth) / 3);

    self.hasManuallyWithdrawn[msg.sender] = true;

  }

  
  self.base.leftoverWei[msg.sender] += refundWei;

  
  self.base.hasContributed[msg.sender] -= refundWei;


  uint256 _proposedCommit;
  uint256 _proposedValue;
  uint256 _currentBucket;
  bool loop;
  bool exists;

  
  
  if(self.personalCaps[msg.sender] >= self.totalValuation){

    
    _proposedCommit = self.valueCommitted - refundWei;

    
    if(_proposedCommit <= self.currentBucket){
      
      if(self.totalValuation > self.currentBucket){
        _proposedCommit += self.valuationSums[self.currentBucket];
      }

      if(_proposedCommit >= self.currentBucket){
        _proposedValue = self.currentBucket;
      } else {
        
        loop = true;
      }
    } else {
      if(self.totalValuation == self.currentBucket){
        _proposedValue = self.totalValuation;
      } else {
        _proposedValue = _proposedCommit;
      }
    }

    if(loop){
      
      (exists,_currentBucket) = self.valuationsList.getAdjacent(self.currentBucket, PREV);
      while(_proposedCommit <= _currentBucket){
        
        _proposedCommit += self.valuationSums[_currentBucket];
        
        if(_proposedCommit >= _currentBucket){
          _proposedValue = _currentBucket;
        } else {
          (exists,_currentBucket) = self.valuationsList.getAdjacent(_currentBucket, PREV);
        }
      }

      if(_proposedValue == 0) { _proposedValue = _proposedCommit; }

      self.currentBucket = _currentBucket;
    }

    self.totalValuation = _proposedValue;
    self.valueCommitted = _proposedCommit;
  }

  LogBidWithdrawn(msg.sender, refundWei, self.personalCaps[msg.sender]);
  BucketAndValuationAndCommitted(self.currentBucket, self.totalValuation, self.valueCommitted);
  return true;
}