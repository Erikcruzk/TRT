function beginMigration(WalletData storage self, bool confirm, bytes data) public returns (bool,bytes32) {
  bytes32 id = keccak256("beginMigration");
  uint256 txIndex = self.transactionInfo[id].length;
  bool allGood;

  if (msg.sender != address(this)) {
    if (!confirm) {
      allGood = self.revokeConfirm(id);
      return (allGood, id);
    } else {
      if (txIndex == 0 || self.transactionInfo[id][txIndex - 1].success) {
        require(self.ownerIndex[msg.sender] > 0);

        self.transactionInfo[id].length++;
        self.transactionInfo[id][txIndex].confirmRequired = self.requiredAdmin;
        self.transactionInfo[id][txIndex].day = now / 1 days;
        self.transactions[now / 1 days].push(id);
      } else {
        txIndex--;
        allGood = self.checkNotConfirmed(id, txIndex);
        if (!allGood)
          return (false, id);
      }
    }
    self.transactionInfo[id][txIndex].confirmedOwners.push(uint256(msg.sender));
    self.transactionInfo[id][txIndex].confirmCount++;
  } else {
    txIndex--;
  }

  if (self.transactionInfo[id][txIndex].confirmCount ==
      self.transactionInfo[id][txIndex].confirmRequired) {
    self.transactionInfo[id][txIndex].success = true;
    delete self.transactionInfo[id][txIndex].data;
    // Migration logic goes here
  } else {
    if (self.transactionInfo[id][txIndex].data.length == 0)
      self.transactionInfo[id][txIndex].data = data;

    uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[id][txIndex].confirmRequired,
                                            self.transactionInfo[id][txIndex].confirmCount);
    LogTransactionConfirmed(id, msg.sender, confirmsNeeded);
  }

  return (true, id);
}