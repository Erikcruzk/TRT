function beginMigration(WalletData storage self,
                        address _to,
                        bool _confirm,
                        bytes _data)
                        public
                        returns (bool,bytes32)
{
  require(msg.sender == address(this));
  bytes32 _id = keccak256("beginMigration",_to);
  uint256 _txIndex = self.transactionInfo[_id].length;
  bool allGood;

  if(!_confirm) {
    allGood = self.revokeConfirm(_id);
    return (allGood,_id);
  } else {
    if(_txIndex == 0 || self.transactionInfo[_id][_txIndex - 1].success){
      require(self.ownerIndex[msg.sender] > 0);

      self.transactionInfo[_id].push();
      _txIndex = self.transactionInfo[_id].length - 1; // Assign the new transaction index after pushing
      self.transactionInfo[_id][_txIndex].confirmRequired = self.requiredAdmin;
      self.transactionInfo[_id][_txIndex].day = now / 1 days;
      self.transactions[now / 1 days].push(_id);
    } else {
      _txIndex--;
      allGood = self.checkNotConfirmed(_id, _txIndex);
      if(!allGood)
        return (false,_id);
    }
  }

  self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));
  self.transactionInfo[_id][_txIndex].confirmCount++;

  if(self.transactionInfo[_id][_txIndex].confirmCount ==
     self.transactionInfo[_id][_txIndex].confirmRequired)
  {
    self.transactionInfo[_id][_txIndex].success = true;
    delete self.transactionInfo[_id][_txIndex].data;
    self.ownerIndex[_to] = self.owners.length;
    self.owners.push(_to);
  } else {
    if(self.transactionInfo[_id][_txIndex].data.length == 0)
      self.transactionInfo[_id][_txIndex].data = _data;

    uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,
                                             self.transactionInfo[_id][_txIndex].confirmCount);
    LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);
  }

  return (true,_id);
}