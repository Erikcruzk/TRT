function beginMigration(WalletData storage self, bool _confirm, bytes _data) public returns (bool,bytes32) {
  bytes32 _id = keccak256("beginMigration");
  uint256 _txIndex = self.transactionInfo[_id].length;
  bool allGood;

  if(msg.sender != address(this)){
    if(!_confirm) {
      allGood = self.revokeConfirm(_id);
      return (allGood,_id);
    } else {
      if(_txIndex == 0 || self.transactionInfo[_id][_txIndex - 1].success){
        require(self.ownerIndex[msg.sender] > 0);

        self.transactionInfo[_id].length++;
        self.transactionInfo[_id][_txIndex].confirmRequired = self.requiredAdmin;
        self.transactionInfo[_id][_txIndex].day = now / 1 days;
        self.transactions[now / 1 days].push(_id);
      } else {
        _txIndex--;
        allGood = self.checkNotConfirmed(_id, _txIndex);
        if(!allGood)
          return (false,_id);
      }
    }

    self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));
    self.transactionInfo[_id][_txIndex].confirmCount++;
  } else {
    _txIndex--;
  }

  if(self.transactionInfo[_id][_txIndex].confirmCount ==
     self.transactionInfo[_id][_txIndex].confirmRequired)
  {
    self.transactionInfo[_id][_txIndex].success = true;
    delete self.transactionInfo[_id][_txIndex].data;
    // Additional logic for migration would be placed here.
  } else {
    if(self.transactionInfo[_id][_txIndex].data.length == 0)
      self.transactionInfo[_id][_txIndex].data = _data;

    uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,
                                             self.transactionInfo[_id][_txIndex].confirmCount);
    LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);
  }

  return (true,_id);
}