function beginMigration(WalletMainLib.WalletData storage self, address _to) public {
  require(self.ownerIndex[msg.sender] > 0);
  bytes32 _id = keccak256("beginMigration");
  uint256 _txIndex = self.transactionInfo[_id].length;

  if(_txIndex == 0 || self.transactionInfo[_id][_txIndex - 1].success){
    self.transactionInfo[_id].length++;
    _txIndex = self.transactionInfo[_id].length - 1; // Use the length before increment to get the current index
    self.transactionInfo[_id][_txIndex].day = now / 1 days;
    self.transactionInfo[_id][_txIndex].data = abi.encodeWithSignature("doMigration(address)", _to);
    self.transactions[now / 1 days].push(_id);
  } else {
    _txIndex--; // Use the transaction index of the ongoing transaction
  }

  bool found;
  uint256 index;
  (found, index) = self.transactionInfo[_id][_txIndex].confirmedOwners.indexOf(uint256(msg.sender), false);
  if(!found){
    self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));
    self.transactionInfo[_id][_txIndex].confirmCount++;
  }

  uint256 confirmsNeeded = self.calcConfirmsNeeded(self.requiredAdmin, self.transactionInfo[_id][_txIndex].confirmCount);
  if(confirmsNeeded == 0){
    address(this).call(self.transactionInfo[_id][_txIndex].data);
    self.transactionInfo[_id][_txIndex].success = true;
  }
}