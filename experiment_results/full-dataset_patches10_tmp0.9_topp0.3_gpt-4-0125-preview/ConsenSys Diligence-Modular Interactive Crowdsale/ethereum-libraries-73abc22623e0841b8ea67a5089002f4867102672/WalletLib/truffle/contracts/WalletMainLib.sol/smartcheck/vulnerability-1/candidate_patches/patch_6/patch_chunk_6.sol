function beginMigration(WalletData storage self) public returns (bool) {
  require(self.ownerIndex[msg.sender] > 0);
  bytes32 _id = keccak256("beginMigration");
  uint256 _txIndex = self.transactionInfo[_id].length;
  if(_txIndex == 0 || self.transactionInfo[_id][_txIndex - 1].success){
    self.transactionInfo[_id].length++;
    self.transactionInfo[_id][_txIndex].day = now / 1 days;
    self.transactionInfo[_id][_txIndex].data = msg.data;
    self.transactionInfo[_id][_txIndex].success = false;
    self.transactionInfo[_id][_txIndex].confirmRequired = self.requiredAdmin;
    self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));
    self.transactionInfo[_id][_txIndex].confirmCount = 1;
  } else {
    _txIndex--;
    bool found;
    uint256 index;
    (found, index) = self.transactionInfo[_id][_txIndex].confirmedOwners.indexOf(uint256(msg.sender), false);
    if(found){
      LogErrorMsg(index, "Owner already confirmed");
      LogTransactionFailed(_id, msg.sender);
      return false;
    }
    self.transactionInfo[_id][_txIndex].confirmedOwners.push(uint256(msg.sender));
    self.transactionInfo[_id][_txIndex].confirmCount++;
  }
  if(self.transactionInfo[_id][_txIndex].confirmCount == self.transactionInfo[_id][_txIndex].confirmRequired){
    self.transactionInfo[_id][_txIndex].success = true;
    delete self.transactionInfo[_id][_txIndex].data;
    LogTransactionComplete(_id, address(this), 0, msg.data);
  } else {
    uint256 confirmsNeeded = calcConfirmsNeeded(self.transactionInfo[_id][_txIndex].confirmRequired,
                                             self.transactionInfo[_id][_txIndex].confirmCount);
    LogTransactionConfirmed(_id, msg.sender, confirmsNeeded);
  }
  return true;
}