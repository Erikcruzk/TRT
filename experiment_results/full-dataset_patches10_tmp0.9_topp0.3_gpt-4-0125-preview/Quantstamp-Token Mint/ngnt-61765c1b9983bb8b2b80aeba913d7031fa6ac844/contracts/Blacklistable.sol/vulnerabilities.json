{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Blacklistable is Ownable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        setOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        require(newOwner != address(0));\n\n        emit OwnershipTransferred(owner(), newOwner);\n\n        setOwner(newOwner);\n",
          "message": "Ownable.transferOwnership (Blacklistable.sol#63-67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": 112,
          "vulnerability_code": "    function isBlacklisted(address _account) public view returns (bool) {\n\n        return blacklisted[_account];\n",
          "message": "Blacklistable.isBlacklisted (Blacklistable.sol#110-112) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": 121,
          "vulnerability_code": "    function blacklist(address _account) public onlyBlacklister {\n\n        blacklisted[_account] = true;\n\n        emit Blacklisted(_account);\n",
          "message": "Blacklistable.blacklist (Blacklistable.sol#118-121) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": 130,
          "vulnerability_code": "    function unBlacklist(address _account) public onlyBlacklister {\n\n        blacklisted[_account] = false;\n\n        emit UnBlacklisted(_account);\n",
          "message": "Blacklistable.unBlacklist (Blacklistable.sol#127-130) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": 136,
          "vulnerability_code": "    function updateBlacklister(address _newBlacklister) public onlyOwner {\n\n        require(_newBlacklister != address(0));\n\n        blacklister = _newBlacklister;\n\n        emit BlacklisterChanged(blacklister);\n",
          "message": "Blacklistable.updateBlacklister (Blacklistable.sol#132-136) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.5;\n",
          "message": "Detected issues with version pragma in Blacklistable.sol:\n\t- pragma solidity0.5.5 (Blacklistable.sol#3): it allows old versions\n\t- pragma solidity0.5.5 (Blacklistable.sol#72): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isBlacklisted(address _account) public view returns (bool) {\n",
          "message": "Parameter '_account' of Blacklistable.isBlacklisted (Blacklistable.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function blacklist(address _account) public onlyBlacklister {\n",
          "message": "Parameter '_account' of Blacklistable.blacklist (Blacklistable.sol#118) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function unBlacklist(address _account) public onlyBlacklister {\n",
          "message": "Parameter '_account' of Blacklistable.unBlacklist (Blacklistable.sol#127) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function updateBlacklister(address _newBlacklister) public onlyOwner {\n",
          "message": "Parameter '_newBlacklister' of Blacklistable.updateBlacklister (Blacklistable.sol#132) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "UNKNOWN INSTRUCTION: SHR"
      ],
      "vulnerability_findings": []
    }
  }
}