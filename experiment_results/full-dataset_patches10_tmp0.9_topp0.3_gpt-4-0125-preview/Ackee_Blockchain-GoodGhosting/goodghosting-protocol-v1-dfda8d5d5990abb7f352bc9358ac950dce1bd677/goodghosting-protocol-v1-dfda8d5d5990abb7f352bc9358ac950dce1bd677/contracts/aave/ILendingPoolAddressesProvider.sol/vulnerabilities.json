{
  "smartbugs_completed": "No vulnerabilities found",
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_24"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPool() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPool (ILendingPoolAddressesProvider.sol#14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolImpl(address _pool) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolImpl (ILendingPoolAddressesProvider.sol#15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress(bytes32 id) public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getAddress (ILendingPoolAddressesProvider.sol#16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPoolCore() public virtual view returns (address payable);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPoolCore (ILendingPoolAddressesProvider.sol#18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolCoreImpl(address _lendingPoolCore) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolCoreImpl (ILendingPoolAddressesProvider.sol#19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPoolConfigurator() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPoolConfigurator (ILendingPoolAddressesProvider.sol#21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolConfiguratorImpl(address _configurator) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolConfiguratorImpl (ILendingPoolAddressesProvider.sol#22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPoolDataProvider() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPoolDataProvider (ILendingPoolAddressesProvider.sol#24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolDataProviderImpl(address _provider) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolDataProviderImpl (ILendingPoolAddressesProvider.sol#25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPoolParametersProvider() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPoolParametersProvider (ILendingPoolAddressesProvider.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolParametersProviderImpl(address _parametersProvider) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolParametersProviderImpl (ILendingPoolAddressesProvider.sol#28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getTokenDistributor() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getTokenDistributor (ILendingPoolAddressesProvider.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenDistributor(address _tokenDistributor) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setTokenDistributor (ILendingPoolAddressesProvider.sol#31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getFeeProvider() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getFeeProvider (ILendingPoolAddressesProvider.sol#34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setFeeProviderImpl(address _feeProvider) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setFeeProviderImpl (ILendingPoolAddressesProvider.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPoolLiquidationManager() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPoolLiquidationManager (ILendingPoolAddressesProvider.sol#37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolLiquidationManager(address _manager) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolLiquidationManager (ILendingPoolAddressesProvider.sol#38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingPoolManager() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingPoolManager (ILendingPoolAddressesProvider.sol#40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingPoolManager(address _lendingPoolManager) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingPoolManager (ILendingPoolAddressesProvider.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPriceOracle() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getPriceOracle (ILendingPoolAddressesProvider.sol#43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPriceOracle(address _priceOracle) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setPriceOracle (ILendingPoolAddressesProvider.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getLendingRateOracle() public virtual view returns (address);\n",
          "message": "ILendingPoolAddressesProvider.getLendingRateOracle (ILendingPoolAddressesProvider.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLendingRateOracle(address _lendingRateOracle) public virtual;\n",
          "message": "ILendingPoolAddressesProvider.setLendingRateOracle (ILendingPoolAddressesProvider.sol#47) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.11;\n",
          "message": "Detected issues with version pragma in ILendingPoolAddressesProvider.sol:\n\t- pragma solidity0.6.11 (ILendingPoolAddressesProvider.sol#5): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}