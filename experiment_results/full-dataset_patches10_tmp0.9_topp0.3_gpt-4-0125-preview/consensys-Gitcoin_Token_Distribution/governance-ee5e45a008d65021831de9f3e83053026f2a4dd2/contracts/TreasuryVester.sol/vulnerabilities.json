{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 208,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address gtc_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address recipient_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint vestingAmount_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 211,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint vestingBegin_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint vestingCliff_,\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint vestingEnd_\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingBegin_ >= block.timestamp, 'TreasuryVester::constructor: vesting begin too early');\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingCliff_ >= vestingBegin_, 'TreasuryVester::constructor: cliff is too early');\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingBegin_ >= block.timestamp, 'TreasuryVester::constructor: vesting begin too early');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingCliff_ >= vestingBegin_, 'TreasuryVester::constructor: cliff is too early');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingEnd_ > vestingCliff_, 'TreasuryVester::constructor: end is too early');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == recipient, 'TreasuryVester::setRecipient: unauthorized');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= vestingCliff, 'TreasuryVester::claim: not time yet');\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingBegin_ >= block.timestamp, 'TreasuryVester::constructor: vesting begin too early');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingCliff_ >= vestingBegin_, 'TreasuryVester::constructor: cliff is too early');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingEnd_ > vestingCliff_, 'TreasuryVester::constructor: end is too early');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender == recipient, 'TreasuryVester::setRecipient: unauthorized');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= vestingCliff, 'TreasuryVester::claim: not time yet');\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "unused-return",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 245,
          "vulnerability_code": "    function claim() public {\n\n        require(block.timestamp >= vestingCliff, 'TreasuryVester::claim: not time yet');\n\n        uint amount;\n\n        if (block.timestamp >= vestingEnd) {\n\n            amount = IGtc(gtc).balanceOf(address(this));\n\n        } else {\n\n            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\n\n            lastUpdate = block.timestamp;\n\n        }\n\n        IGtc(gtc).transfer(recipient, amount);\n",
          "message": "TreasuryVester.claim (TreasuryVester.sol#235-245) does not use the value returned by external calls:\n\t-IGtc(gtc).transfer(recipient,amount) (TreasuryVester.sol#244)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 207,
          "vulnerability_to_line": 228,
          "vulnerability_code": "    constructor(\n\n        address gtc_,\n\n        address recipient_,\n\n        uint vestingAmount_,\n\n        uint vestingBegin_,\n\n        uint vestingCliff_,\n\n        uint vestingEnd_\n\n    ) public {\n\n        require(vestingBegin_ >= block.timestamp, 'TreasuryVester::constructor: vesting begin too early');\n\n        require(vestingCliff_ >= vestingBegin_, 'TreasuryVester::constructor: cliff is too early');\n\n        require(vestingEnd_ > vestingCliff_, 'TreasuryVester::constructor: end is too early');\n\n\n\n        gtc = gtc_;\n\n        recipient = recipient_;\n\n\n\n        vestingAmount = vestingAmount_;\n\n        vestingBegin = vestingBegin_;\n\n        vestingCliff = vestingCliff_;\n\n        vestingEnd = vestingEnd_;\n\n\n\n        lastUpdate = vestingBegin;\n",
          "message": "TreasuryVester.constructor (TreasuryVester.sol#207-228) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(vestingBegin_ >= block.timestamp,TreasuryVester::constructor: vesting begin too early) (TreasuryVester.sol#215)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 245,
          "vulnerability_code": "    function claim() public {\n\n        require(block.timestamp >= vestingCliff, 'TreasuryVester::claim: not time yet');\n\n        uint amount;\n\n        if (block.timestamp >= vestingEnd) {\n\n            amount = IGtc(gtc).balanceOf(address(this));\n\n        } else {\n\n            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\n\n            lastUpdate = block.timestamp;\n\n        }\n\n        IGtc(gtc).transfer(recipient, amount);\n",
          "message": "TreasuryVester.claim (TreasuryVester.sol#235-245) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= vestingEnd (TreasuryVester.sol#238-243)\n\t- require(bool,string)(block.timestamp >= vestingCliff,TreasuryVester::claim: not time yet) (TreasuryVester.sol#236)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": 233,
          "vulnerability_code": "    function setRecipient(address recipient_) public {\n\n        require(msg.sender == recipient, 'TreasuryVester::setRecipient: unauthorized');\n\n        recipient = recipient_;\n",
          "message": "TreasuryVester.setRecipient (TreasuryVester.sol#230-233) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 245,
          "vulnerability_code": "    function claim() public {\n\n        require(block.timestamp >= vestingCliff, 'TreasuryVester::claim: not time yet');\n\n        uint amount;\n\n        if (block.timestamp >= vestingEnd) {\n\n            amount = IGtc(gtc).balanceOf(address(this));\n\n        } else {\n\n            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\n\n            lastUpdate = block.timestamp;\n\n        }\n\n        IGtc(gtc).transfer(recipient, amount);\n",
          "message": "TreasuryVester.claim (TreasuryVester.sol#235-245) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": "Detected issues with version pragma in TreasuryVester.sol:\n\t- pragma solidity^0.5.16 (TreasuryVester.sol#3): it allows old versions\n\t- pragma solidity^0.5.16 (TreasuryVester.sol#192): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 230,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRecipient(address recipient_) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.16;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(vestingBegin_ >= block.timestamp, 'TreasuryVester::constructor: vesting begin too early');\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 236,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp >= vestingCliff, 'TreasuryVester::claim: not time yet');\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 238,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (block.timestamp >= vestingEnd) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IGtc(gtc).transfer(recipient, amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 244,
          "vulnerability_to_line": null,
          "vulnerability_code": "        IGtc(gtc).transfer(recipient, amount);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}