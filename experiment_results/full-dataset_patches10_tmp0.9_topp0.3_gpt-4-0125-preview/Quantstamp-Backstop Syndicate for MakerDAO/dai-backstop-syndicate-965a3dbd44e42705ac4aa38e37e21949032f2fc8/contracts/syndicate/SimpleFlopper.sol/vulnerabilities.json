{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 106,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address auction) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _auction = IFlopper(auction);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 114,
          "vulnerability_to_line": 116,
          "vulnerability_code": "  function isEnabled() public view returns (bool status) {\n\n    return (_auction.live() == 1) ? true : false;\n",
          "message": "SimpleFlopper.isEnabled (SimpleFlopper.sol#114-116) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 120,
          "vulnerability_to_line": 122,
          "vulnerability_code": "  function getTotalNumberOfAuctions() public view returns (uint256 auctionID) {\n\n    return _auction.kicks();\n",
          "message": "SimpleFlopper.getTotalNumberOfAuctions (SimpleFlopper.sol#120-122) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 128,
          "vulnerability_code": "  function getFlopperAddress() public view returns (address flopper) {\n\n    return address(_auction);\n",
          "message": "SimpleFlopper.getFlopperAddress (SimpleFlopper.sol#126-128) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": 142,
          "vulnerability_code": "  function getAuctionInformation() public view returns (\n\n    uint256 bidIncrement,\n\n    uint256 repriceIncrement,\n\n    uint256 bidDuration,\n\n    uint256 auctionDuration\n\n  ) {\n\n    return (_auction.beg(), _auction.pad(), _auction.ttl(), _auction.tau());\n",
          "message": "SimpleFlopper.getAuctionInformation (SimpleFlopper.sol#135-142) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 158,
          "vulnerability_code": "  function getCurrentBid(uint256 auctionID) public view returns (\n\n    uint256 amountDAI,\n\n    uint256 amountMKR,\n\n    address bidder,\n\n    uint48 bidDeadline,\n\n    uint48 auctionDeadline\n\n  ) {\n\n    return _auction.bids(auctionID);\n",
          "message": "SimpleFlopper.getCurrentBid (SimpleFlopper.sol#150-158) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.16;\n",
          "message": "Detected issues with version pragma in SimpleFlopper.sol:\n\t- pragma solidity0.5.16 (SimpleFlopper.sol#3): it allows old versions\n\t- pragma solidity0.5.16 (SimpleFlopper.sol#99): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function wards(address) external view returns (uint256);\n",
          "message": "Parameter '' of IFlopper.wards (SimpleFlopper.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bids(uint256) external view returns (\n",
          "message": "Parameter '' of IFlopper.bids (SimpleFlopper.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ONE() external pure returns (uint256);\n",
          "message": "Function 'IFlopper.ONE' (SimpleFlopper.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 165,
          "vulnerability_to_line": 167,
          "vulnerability_code": "  function _reprice(uint256 auctionID) internal {\n\n    _auction.tick(auctionID);\n",
          "message": "Function 'SimpleFlopper._reprice' (SimpleFlopper.sol#165-167) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": 174,
          "vulnerability_code": "  function _bid(uint256 auctionID, uint256 amountMKR, uint256 amountDAI) internal {\n\n    _auction.dent(auctionID, amountMKR, amountDAI);\n",
          "message": "Function 'SimpleFlopper._bid' (SimpleFlopper.sol#172-174) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": 181,
          "vulnerability_code": "  function _finalize(uint256 auctionID) internal {\n\n    _auction.deal(auctionID);\n",
          "message": "Function 'SimpleFlopper._finalize' (SimpleFlopper.sol#179-181) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "  IFlopper private _auction;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function bids(uint256) external view returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getAuctionInformation() public view returns (\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function getCurrentBid(uint256 auctionID) public view returns (\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return (_auction.beg(), _auction.pad(), _auction.ttl(), _auction.tau());\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    return (_auction.beg(), _auction.pad(), _auction.ttl(), _auction.tau());\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}