{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "  bytes32   public  name = \"\";\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor() public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    owner = msg.sender;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    emit LogSetOwner(msg.sender);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 336,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(uint supply) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _balances[msg.sender] = supply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "    _supply = supply;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 339,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(bytes32 symbol_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    symbol = symbol_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 429,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 430,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 431,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 463,
          "vulnerability_to_line": null,
          "vulnerability_code": "    if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "      _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_26"
      ],
      "vulnerability_findings": [
        {
          "name": "locked-ether",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 269,
          "vulnerability_code": "  function stop() public payable auth note {\n\n    stopped = true;\n",
          "message": "Contract locking ether found in DSToken.sol:\n\tContract DSToken has payable functions:\n\t - stop (DSToken.sol#267-269)\n\t - start (DSToken.sol#270-272)\n\tBut does not have a function to withdraw the ether\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256  public  decimals = 18; // standard token precision. override to customize\n",
          "message": "DSToken.decimals should be constant (DSToken.sol#407)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n",
          "message": "DSAuthority.canCall (DSToken.sol#29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 52,
          "vulnerability_code": "  function setOwner(address owner_)\n\n    public\n\n    auth\n\n  {\n\n    owner = owner_;\n\n    emit LogSetOwner(owner);\n",
          "message": "DSAuth.setOwner (DSToken.sol#46-52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 60,
          "vulnerability_code": "  function setAuthority(DSAuthority authority_)\n\n    public\n\n    auth\n\n  {\n\n    authority = authority_;\n\n    emit LogSetAuthority(address(authority));\n",
          "message": "DSAuth.setAuthority (DSToken.sol#54-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 269,
          "vulnerability_code": "  function stop() public payable auth note {\n\n    stopped = true;\n",
          "message": "DSStop.stop (DSToken.sol#267-269) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": 272,
          "vulnerability_code": "  function start() public payable auth note {\n\n    stopped = false;\n",
          "message": "DSStop.start (DSToken.sol#270-272) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function totalSupply() public view returns (uint supply);\n",
          "message": "ERC20.totalSupply (DSToken.sol#296) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 341,
          "vulnerability_to_line": 343,
          "vulnerability_code": "  function totalSupply() public view returns (uint) {\n\n    return _supply;\n",
          "message": "DSTokenBase.totalSupply (DSToken.sol#341-343) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf( address who ) public view returns (uint value);\n",
          "message": "ERC20.balanceOf (DSToken.sol#297) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": 346,
          "vulnerability_code": "  function balanceOf(address src) public view returns (uint) {\n\n    return _balances[src];\n",
          "message": "DSTokenBase.balanceOf (DSToken.sol#344-346) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function allowance( address owner, address spender ) public view returns (uint _allowance);\n",
          "message": "ERC20.allowance (DSToken.sol#298) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": 349,
          "vulnerability_code": "  function allowance(address src, address guy) public view returns (uint) {\n\n    return _approvals[src][guy];\n",
          "message": "DSTokenBase.allowance (DSToken.sol#347-349) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function transfer( address to, uint value) public returns (bool ok);\n",
          "message": "ERC20.transfer (DSToken.sol#300) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": 353,
          "vulnerability_code": "  function transfer(address dst, uint wad) public returns (bool) {\n\n    return transferFrom(msg.sender, dst, wad);\n",
          "message": "DSTokenBase.transfer (DSToken.sol#351-353) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": 418,
          "vulnerability_code": "  function approve(address guy) public stoppable returns (bool) {\n\n    return super.approve(guy, uint(-1));\n",
          "message": "DSToken.approve (DSToken.sol#416-418) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": 443,
          "vulnerability_code": "  function push(address dst, uint wad) public {\n\n    transferFrom(msg.sender, dst, wad);\n",
          "message": "DSToken.push (DSToken.sol#441-443) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": 446,
          "vulnerability_code": "  function pull(address src, uint wad) public {\n\n    transferFrom(src, msg.sender, wad);\n",
          "message": "DSToken.pull (DSToken.sol#444-446) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 447,
          "vulnerability_to_line": 449,
          "vulnerability_code": "  function move(address src, address dst, uint wad) public {\n\n    transferFrom(src, dst, wad);\n",
          "message": "DSToken.move (DSToken.sol#447-449) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 453,
          "vulnerability_code": "  function mint(uint wad) public {\n\n    mint(msg.sender, wad);\n",
          "message": "DSToken.mint (DSToken.sol#451-453) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": 456,
          "vulnerability_code": "  function burn(uint wad) public {\n\n    burn(msg.sender, wad);\n",
          "message": "DSToken.burn (DSToken.sol#454-456) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 475,
          "vulnerability_to_line": 477,
          "vulnerability_code": "  function setName(bytes32 name_) public auth {\n\n    name = name_;\n",
          "message": "DSToken.setName (DSToken.sol#475-477) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.16;\n",
          "message": "Detected issues with version pragma in DSToken.sol:\n\t- pragma solidity0.5.16 (DSToken.sol#10): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256                      _supply;\n",
          "message": "Variable 'DSTokenBase._supply' (DSToken.sol#332) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256)             _balances;\n",
          "message": "Variable 'DSTokenBase._balances' (DSToken.sol#333) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint256))  _approvals;\n",
          "message": "Variable 'DSTokenBase._approvals' (DSToken.sol#334) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 371,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address guy, uint wad) public returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address guy) public stoppable returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ERC20_APPROVE",
          "vulnerability_from_line": 420,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function approve(address guy, uint wad) public stoppable returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 259,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract DSStop is DSNote, DSAuth {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 122,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint constant WAD = 10 ** 18;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint constant RAY = 10 ** 27;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256                      _supply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => uint256)             _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 334,
          "vulnerability_to_line": null,
          "vulnerability_code": "  mapping (address => mapping (address => uint256))  _approvals;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}