{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 public kicks = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "  constructor(address vat_, address gem_) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 144,
          "vulnerability_to_line": null,
          "vulnerability_code": "    wards[msg.sender] = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 145,
          "vulnerability_to_line": null,
          "vulnerability_code": "    vat = VatLike(vat_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "    gem = GemLike(gem_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    live = 1;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 148,
          "vulnerability_to_line": null,
          "vulnerability_code": "  }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(wards[msg.sender] == 1, \"Flopper/not-authorized\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 164,
          "vulnerability_to_line": null,
          "vulnerability_code": "    else revert(\"Flopper/file-unrecognized-param\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 173,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(live == 1, \"Flopper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(kicks < uint256(-1), \"Flopper/overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(bids[id].end < now, \"Flopper/not-finished\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 186,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(bids[id].tic == 0, \"Flopper/bid-already-placed\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 191,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(live == 1, \"Flopper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 192,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bids[id].tic > now || bids[id].tic == 0,\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Flopper/already-finished-tic\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 197,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(bids[id].end > now, \"Flopper/already-finished-end\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 199,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(lot < bids[id].lot, \"Flopper/lot-not-lower\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "      mul(beg, lot) <= mul(bids[id].lot, ONE),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 203,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Flopper/insufficient-decrease\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(live == 1, \"Flopper/not-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Flopper/not-finished\"\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 227,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(live == 0, \"Flopper/still-live\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "    require(\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 215,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 216,
          "vulnerability_to_line": null,
          "vulnerability_code": "      \"Flopper/not-finished\"\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 217,
          "vulnerability_to_line": null,
          "vulnerability_code": "    );\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 220,
          "vulnerability_code": "  function deal(uint256 id) external note {\n\n    require(live == 1, \"Flopper/not-live\");\n\n    require(\n\n      bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),\n\n      \"Flopper/not-finished\"\n\n    );\n\n    gem.mint(bids[id].guy, bids[id].lot);\n\n    delete bids[id];\n",
          "message": "Reentrancy in Flopper.deal (Flopper.sol#212-220):\n\tExternal calls:\n\t- gem.mint(bids[id].guy,bids[id].lot) (Flopper.sol#218)\n\tState variables written after the call(s):\n\t- bids (Flopper.sol#219)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 190,
          "vulnerability_to_line": 211,
          "vulnerability_code": "  function dent(uint256 id, uint256 lot, uint256 bid) external note {\n\n    require(live == 1, \"Flopper/not-live\");\n\n    require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n\n    require(\n\n      bids[id].tic > now || bids[id].tic == 0,\n\n      \"Flopper/already-finished-tic\"\n\n    );\n\n    require(bids[id].end > now, \"Flopper/already-finished-end\");\n\n\n\n    require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n\n    require(lot < bids[id].lot, \"Flopper/lot-not-lower\");\n\n    require(\n\n      mul(beg, lot) <= mul(bids[id].lot, ONE),\n\n      \"Flopper/insufficient-decrease\"\n\n    );\n\n\n\n    vat.move(msg.sender, bids[id].guy, bid);\n\n\n\n    bids[id].guy = msg.sender;\n\n    bids[id].lot = lot;\n\n    bids[id].tic = add(uint48(now), ttl);\n",
          "message": "Reentrancy in Flopper.dent (Flopper.sol#190-211):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (Flopper.sol#206)\n\tState variables written after the call(s):\n\t- bids (Flopper.sol#208)\n\t- bids (Flopper.sol#209)\n\t- bids (Flopper.sol#210)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": 231,
          "vulnerability_code": "  function yank(uint256 id) external note {\n\n    require(live == 0, \"Flopper/still-live\");\n\n    require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n\n    vat.suck(vow, bids[id].guy, bids[id].bid);\n\n    delete bids[id];\n",
          "message": "Reentrancy in Flopper.yank (Flopper.sol#226-231):\n\tExternal calls:\n\t- vat.suck(vow,bids[id].guy,bids[id].bid) (Flopper.sol#229)\n\tState variables written after the call(s):\n\t- bids (Flopper.sol#230)\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.5.16;\n",
          "message": "Detected issues with version pragma in Flopper.sol:\n\t- pragma solidity0.5.16 (Flopper.sol#12): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function move(address, address, uint256) external;\n",
          "message": "Parameter '' of VatLike.move (Flopper.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function move(address, address, uint256) external;\n",
          "message": "Parameter '_scope_0' of VatLike.move (Flopper.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function move(address, address, uint256) external;\n",
          "message": "Parameter '_scope_1' of VatLike.move (Flopper.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function suck(address, address, uint256) external;\n",
          "message": "Parameter '' of VatLike.suck (Flopper.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function suck(address, address, uint256) external;\n",
          "message": "Parameter '_scope_0' of VatLike.suck (Flopper.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function suck(address, address, uint256) external;\n",
          "message": "Parameter '_scope_1' of VatLike.suck (Flopper.sol#85) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) external;\n",
          "message": "Parameter '' of GemLike.mint (Flopper.sol#88) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 88,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function mint(address, uint256) external;\n",
          "message": "Parameter '_scope_0' of GemLike.mint (Flopper.sol#88) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_REVERT_REQUIRE",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": null,
          "vulnerability_code": "    else if (what == \"tau\") tau = uint48(data);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 130,
          "vulnerability_to_line": null,
          "vulnerability_code": "  uint256 constant ONE = 1.00E18;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}