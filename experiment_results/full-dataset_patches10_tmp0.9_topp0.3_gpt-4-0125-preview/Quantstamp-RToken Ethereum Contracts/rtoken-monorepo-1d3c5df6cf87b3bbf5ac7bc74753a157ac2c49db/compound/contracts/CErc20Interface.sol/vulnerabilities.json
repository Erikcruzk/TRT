{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.21 <0.6.0;\n",
          "message": "Detected issues with version pragma in CErc20Interface.sol:\n\t- pragma solidity>=0.4.21<0.6.0 (CErc20Interface.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function _setComptroller(\n\n        address newComptroller\n\n    ) external returns (\n\n        uint256\n",
          "message": "Function 'CErc20Interface._setComptroller' (CErc20Interface.sol#76-80) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function _reduceReserves(\n\n        uint256 reduceAmount\n\n    ) external returns (\n\n        uint256\n",
          "message": "Function 'CErc20Interface._reduceReserves' (CErc20Interface.sol#90-94) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 175,
          "vulnerability_code": "    function _setPendingAdmin(\n\n        address newPendingAdmin\n\n    ) external returns (\n\n        uint256\n",
          "message": "Function 'CErc20Interface._setPendingAdmin' (CErc20Interface.sol#171-175) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 209,
          "vulnerability_to_line": 211,
          "vulnerability_code": "    function _acceptAdmin() external returns (\n\n        uint256\n",
          "message": "Function 'CErc20Interface._acceptAdmin' (CErc20Interface.sol#209-211) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 213,
          "vulnerability_to_line": 217,
          "vulnerability_code": "    function _setInterestRateModel(\n\n        address newInterestRateModel\n\n    ) external returns (\n\n        uint256\n",
          "message": "Function 'CErc20Interface._setInterestRateModel' (CErc20Interface.sol#213-217) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 239,
          "vulnerability_to_line": 243,
          "vulnerability_code": "    function _setReserveFactor(\n\n        uint256 newReserveFactorMantissa\n\n    ) external returns (\n\n        uint256\n",
          "message": "Function 'CErc20Interface._setReserveFactor' (CErc20Interface.sol#239-243) is not in mixedCase\n"
        },
        {
          "name": "erc20-indexed",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 351,
          "vulnerability_code": "interface CErc20Interface {\n\n\n\n    function name() external view returns (\n\n        string memory\n\n    );\n\n\n\n    function approve(\n\n        address spender,\n\n        uint256 amount\n\n    ) external returns (\n\n        bool\n\n    );\n\n\n\n    function repayBorrow(\n\n        uint256 repayAmount\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function reserveFactorMantissa() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function borrowBalanceCurrent(\n\n        address account\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function totalSupply() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function exchangeRateStored() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function transferFrom(\n\n        address src,\n\n        address dst,\n\n        uint256 amount\n\n    ) external returns (\n\n        bool\n\n    );\n\n\n\n    function repayBorrowBehalf(\n\n        address borrower,\n\n        uint256 repayAmount\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function pendingAdmin() external view returns (\n\n        address\n\n    );\n\n\n\n    function decimals() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function balanceOfUnderlying(\n\n        address owner\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function getCash() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function _setComptroller(\n\n        address newComptroller\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function totalBorrows() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function comptroller() external view returns (\n\n        address\n\n    );\n\n\n\n    function _reduceReserves(\n\n        uint256 reduceAmount\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function initialExchangeRateMantissa() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function accrualBlockNumber() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function underlying() external view returns (\n\n        address\n\n    );\n\n\n\n    function balanceOf(\n\n        address owner\n\n    ) external view returns (\n\n        uint256\n\n    );\n\n\n\n    function totalBorrowsCurrent() external returns (\n\n        uint256\n\n    );\n\n\n\n    function redeemUnderlying(\n\n        uint256 redeemAmount\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function totalReserves() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function symbol() external view returns (\n\n        string memory\n\n    );\n\n\n\n    function borrowBalanceStored(\n\n        address account\n\n    ) external view returns (\n\n        uint256\n\n    );\n\n\n\n    function mint(\n\n        uint256 mintAmount\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function accrueInterest() external returns (\n\n        uint256\n\n    );\n\n\n\n    function transfer(\n\n        address dst,\n\n        uint256 amount\n\n    ) external returns (\n\n        bool\n\n    );\n\n\n\n    function borrowIndex() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function supplyRatePerBlock() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function seize(\n\n        address liquidator,\n\n        address borrower,\n\n        uint256 seizeTokens\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function _setPendingAdmin(\n\n        address newPendingAdmin\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function exchangeRateCurrent() external returns (\n\n        uint256\n\n    );\n\n\n\n    function getAccountSnapshot(\n\n        address account\n\n    ) external view returns (\n\n        uint256,\n\n        uint256,\n\n        uint256,\n\n        uint256\n\n    );\n\n\n\n    function borrow(\n\n        uint256 borrowAmount\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function redeem(\n\n        uint256 redeemTokens\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function allowance(\n\n        address owner,\n\n        address spender\n\n    ) external view returns (\n\n        uint256\n\n    );\n\n\n\n    function _acceptAdmin() external returns (\n\n        uint256\n\n    );\n\n\n\n    function _setInterestRateModel(\n\n        address newInterestRateModel\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function interestRateModel() external view returns (\n\n        address\n\n    );\n\n\n\n    function liquidateBorrow(\n\n        address borrower,\n\n        uint256 repayAmount,\n\n        address cTokenCollateral\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function admin() external view returns (\n\n        address\n\n    );\n\n\n\n    function borrowRatePerBlock() external view returns (\n\n        uint256\n\n    );\n\n\n\n    function _setReserveFactor(\n\n        uint256 newReserveFactorMantissa\n\n    ) external returns (\n\n        uint256\n\n    );\n\n\n\n    function isCToken() external view returns (\n\n        bool\n\n    );\n\n\n\n    /*\n\n    constructor(\n\n        address underlying_,\n\n        address comptroller_,\n\n        address interestRateModel_,\n\n        uint256 initialExchangeRateMantissa_,\n\n        string  calldata name_,\n\n        string  calldata symbol_,\n\n        uint256 decimals_\n\n    );\n\n    */\n\n\n\n    event AccrueInterest(\n\n        uint256 interestAccumulated,\n\n        uint256 borrowIndex,\n\n        uint256 totalBorrows\n\n    );\n\n\n\n    event Mint(\n\n        address minter,\n\n        uint256 mintAmount,\n\n        uint256 mintTokens\n\n    );\n\n\n\n    event Redeem(\n\n        address redeemer,\n\n        uint256 redeemAmount,\n\n        uint256 redeemTokens\n\n    );\n\n\n\n    event Borrow(\n\n        address borrower,\n\n        uint256 borrowAmount,\n\n        uint256 accountBorrows,\n\n        uint256 totalBorrows\n\n    );\n\n\n\n    event RepayBorrow(\n\n        address payer,\n\n        address borrower,\n\n        uint256 repayAmount,\n\n        uint256 accountBorrows,\n\n        uint256 totalBorrows\n\n    );\n\n\n\n    event LiquidateBorrow(\n\n        address liquidator,\n\n        address borrower,\n\n        uint256 repayAmount,\n\n        address cTokenCollateral,\n\n        uint256 seizeTokens\n\n    );\n\n\n\n    event NewPendingAdmin(\n\n        address oldPendingAdmin,\n\n        address newPendingAdmin\n\n    );\n\n\n\n    event NewAdmin(\n\n        address oldAdmin,\n\n        address newAdmin\n\n    );\n\n\n\n    event NewComptroller(\n\n        address oldComptroller,\n\n        address newComptroller\n\n    );\n\n\n\n    event NewMarketInterestRateModel(\n\n        address oldInterestRateModel,\n\n        address newInterestRateModel\n\n    );\n\n\n\n    event NewReserveFactor(\n\n        uint256 oldReserveFactorMantissa,\n\n        uint256 newReserveFactorMantissa\n\n    );\n\n\n\n    event ReservesReduced(\n\n        address admin,\n\n        uint256 reduceAmount,\n\n        uint256 newTotalReserves\n\n    );\n\n\n\n    event Failure(\n\n        uint256 error,\n\n        uint256 info,\n\n        uint256 detail\n\n    );\n\n\n\n    event Transfer(\n\n        address from,\n\n        address to,\n\n        uint256 amount\n\n    );\n\n\n\n    event Approval(\n\n        address owner,\n\n        address spender,\n\n        uint256 amount\n\n    );\n\n\n",
          "message": "CErc20Interface (CErc20Interface.sol#6-351) does not mark important ERC20 parameters as 'indexed':\n\t-Transfer (CErc20Interface.sol#339-343) does not index parameter 'from'\n\t-Transfer (CErc20Interface.sol#339-343) does not index parameter 'to'\n\t-Approval (CErc20Interface.sol#345-349) does not index parameter 'owner'\n\t-Approval (CErc20Interface.sol#345-349) does not index parameter 'spender'\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.21 <0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.21 <0.6.0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 183,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ) external view returns (\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}