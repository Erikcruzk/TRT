{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "use-ownable2step",
          "vulnerability_from_line": 193,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract Controller is IController, Ownable, Claimable {\n",
          "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _account_, bool _transferable_) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = _account_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _isTransferable = _transferable_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "        // Emit the LockedOwnership event if no longer transferable.\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!_isTransferable) {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "            emit LockedOwnership(_account_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit TransferredOwnership(address(0), _account_);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 210,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _ownerAddress_, bool _transferable_) Ownable(_ownerAddress_, _transferable_) public { }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 454,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ENS ensAddr) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 455,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ens = ensAddr;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _ensReg_) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 672,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _ensRegistry = _ensReg_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 673,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _ens = ENS(_ensRegistry);\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 674,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(bytes32 _controllerNameHash_) internal {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 721,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _controllerNode = _controllerNameHash_;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 722,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isOwner(msg.sender), \"sender is not an owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isTransferable, \"ownership is not transferable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"owner cannot be set to zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 83,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isTransferable, \"ownership is not transferable\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 214,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isAdmin(msg.sender), \"sender is not an admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(isController(msg.sender), \"sender is not a controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isAdmin[_account], \"provided account is already an admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isController[_account], \"provided account is already a controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isOwner(_account), \"provided account is already the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"provided account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 284,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isAdmin[_account], \"provided account is not an admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isAdmin[_account], \"provided account is already an admin\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isController[_account], \"provided account is already a controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isOwner(_account), \"provided account is already the owner\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"provided account is the zero address\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isController[_account], \"provided account is not a controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 726,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isController(msg.sender), \"sender is not a controller\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 574,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "                data = record.abis[contentType];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _adminCount--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _controllerCount--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _adminCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _controllerCount++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"owner cannot be set to zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 273,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isAdmin[_account], \"provided account is already an admin\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isController[_account], \"provided account is already a controller\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isOwner(_account), \"provided account is already the owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 276,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"provided account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isAdmin[_account], \"provided account is already an admin\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isController[_account], \"provided account is already a controller\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(!_isOwner(_account), \"provided account is already the owner\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_account != address(0), \"provided account is the zero address\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_isController[_account], \"provided account is not a controller\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_65"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function _claim(address _to, address _asset, uint _amount) internal {\n\n        // address(0) is used to denote ETH\n\n        if (_asset == address(0)) {\n\n            _to.transfer(_amount);\n\n        } else {\n\n            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n\n        }\n\n\n\n        emit Claimed(_to, _asset, _amount);\n",
          "message": "Claimable._claim (controllable.sol#147-156) sends eth to arbitrary user\n\tDangerous calls:\n\t- _to.transfer(_amount) (controllable.sol#150)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 361,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n",
          "message": "ENS.setSubnodeOwner.owner (local variable @ controllable.sol#361) shadows:\n\t- ENS.owner (function @ controllable.sol#365)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResolver(bytes32 node, address resolver) external;\n",
          "message": "ENS.setResolver.resolver (local variable @ controllable.sol#362) shadows:\n\t- ENS.resolver (function @ controllable.sol#366)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwner(bytes32 node, address owner) external;\n",
          "message": "ENS.setOwner.owner (local variable @ controllable.sol#363) shadows:\n\t- ENS.owner (function @ controllable.sol#365)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 364,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTTL(bytes32 node, uint64 ttl) external;\n",
          "message": "ENS.setTTL.ttl (local variable @ controllable.sol#364) shadows:\n\t- ENS.ttl (function @ controllable.sol#367)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddr(bytes32 node, address addr) public only_owner(node) {\n",
          "message": "PublicResolver.setAddr.addr (local variable @ controllable.sol#464) shadows:\n\t- PublicResolver.addr (function @ controllable.sol#617-619)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setName(bytes32 node, string name) public only_owner(node) {\n",
          "message": "PublicResolver.setName.name (local variable @ controllable.sol#499) shadows:\n\t- PublicResolver.name (function @ controllable.sol#588-590)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": "Different versions of Solidity is used in controllable.sol:\n\t- Version used: ['>=0.4.24', '^0.4.24', '^0.4.25']\n\t- controllable.sol#21 declares pragma solidity^0.4.25\n\t- controllable.sol#105 declares pragma solidity^0.4.25\n\t- controllable.sol#135 declares pragma solidity^0.4.25\n\t- controllable.sol#179 declares pragma solidity^0.4.25\n\t- controllable.sol#344 declares pragma solidity>=0.4.24\n\t- controllable.sol#401 declares pragma solidity^0.4.24\n\t- controllable.sol#658 declares pragma solidity^0.4.25\n\t- controllable.sol#710 declares pragma solidity^0.4.25\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 92,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
          "message": "Ownable.owner (controllable.sol#92-94) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 464,
          "vulnerability_to_line": 467,
          "vulnerability_code": "    function setAddr(bytes32 node, address addr) public only_owner(node) {\n\n        records[node].addr = addr;\n\n        emit AddrChanged(node, addr);\n",
          "message": "PublicResolver.setAddr (controllable.sol#464-467) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 477,
          "vulnerability_to_line": 480,
          "vulnerability_code": "    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n\n        records[node].content = hash;\n\n        emit ContentChanged(node, hash);\n",
          "message": "PublicResolver.setContent (controllable.sol#477-480) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": 491,
          "vulnerability_code": "    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n\n        records[node].multihash = hash;\n\n        emit MultihashChanged(node, hash);\n",
          "message": "PublicResolver.setMultihash (controllable.sol#488-491) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": 502,
          "vulnerability_code": "    function setName(bytes32 node, string name) public only_owner(node) {\n\n        records[node].name = name;\n\n        emit NameChanged(node, name);\n",
          "message": "PublicResolver.setName (controllable.sol#499-502) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": 518,
          "vulnerability_code": "    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n\n        // Content types must be powers of 2\n\n        require(((contentType - 1) & contentType) == 0);\n\n        \n\n        records[node].abis[contentType] = data;\n\n        emit ABIChanged(node, contentType);\n",
          "message": "PublicResolver.setABI (controllable.sol#512-518) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 526,
          "vulnerability_to_line": 529,
          "vulnerability_code": "    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n\n        records[node].pubkey = PublicKey(x, y);\n\n        emit PubkeyChanged(node, x, y);\n",
          "message": "PublicResolver.setPubkey (controllable.sol#526-529) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": 541,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n\n        records[node].text[key] = value;\n\n        emit TextChanged(node, key, key);\n",
          "message": "PublicResolver.setText (controllable.sol#538-541) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": 551,
          "vulnerability_code": "    function text(bytes32 node, string key) public view returns (string) {\n\n        return records[node].text[key];\n",
          "message": "PublicResolver.text (controllable.sol#549-551) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 559,
          "vulnerability_to_line": 561,
          "vulnerability_code": "    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n\n        return (records[node].pubkey.x, records[node].pubkey.y);\n",
          "message": "PublicResolver.pubkey (controllable.sol#559-561) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 580,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n\n        Record storage record = records[node];\n\n        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n\n                data = record.abis[contentType];\n\n                return;\n\n            }\n\n        }\n\n        contentType = 0;\n",
          "message": "PublicResolver.ABI (controllable.sol#571-580) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": 590,
          "vulnerability_code": "    function name(bytes32 node) public view returns (string) {\n\n        return records[node].name;\n",
          "message": "PublicResolver.name (controllable.sol#588-590) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 599,
          "vulnerability_to_line": 601,
          "vulnerability_code": "    function content(bytes32 node) public view returns (bytes32) {\n\n        return records[node].content;\n",
          "message": "PublicResolver.content (controllable.sol#599-601) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": 610,
          "vulnerability_code": "    function multihash(bytes32 node) public view returns (bytes) {\n\n        return records[node].multihash;\n",
          "message": "PublicResolver.multihash (controllable.sol#608-610) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 619,
          "vulnerability_code": "    function addr(bytes32 node) public view returns (address) {\n\n        return records[node].addr;\n",
          "message": "PublicResolver.addr (controllable.sol#617-619) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 626,
          "vulnerability_to_line": 635,
          "vulnerability_code": "    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n\n        return interfaceID == ADDR_INTERFACE_ID ||\n\n        interfaceID == CONTENT_INTERFACE_ID ||\n\n        interfaceID == NAME_INTERFACE_ID ||\n\n        interfaceID == ABI_INTERFACE_ID ||\n\n        interfaceID == PUBKEY_INTERFACE_ID ||\n\n        interfaceID == TEXT_INTERFACE_ID ||\n\n        interfaceID == MULTIHASH_INTERFACE_ID ||\n\n        interfaceID == INTERFACE_META_ID;\n",
          "message": "PublicResolver.supportsInterface (controllable.sol#626-635) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _account_, bool _transferable_) internal {\n",
          "message": "Parameter '_account_' of Ownable. (controllable.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _account_, bool _transferable_) internal {\n",
          "message": "Parameter '_transferable_' of Ownable. (controllable.sol#36) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _account, bool _transferable) external onlyOwner {\n",
          "message": "Parameter '_account' of Ownable.transferOwnership (controllable.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _account, bool _transferable) external onlyOwner {\n",
          "message": "Parameter '_transferable' of Ownable.transferOwnership (controllable.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": 100,
          "vulnerability_code": "    function _isOwner(address _address) internal view returns (bool) {\n\n        return _address == _owner;\n",
          "message": "Function 'Ownable._isOwner' (controllable.sol#98-100) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isOwner(address _address) internal view returns (bool) {\n",
          "message": "Parameter '_address' of Ownable._isOwner (controllable.sol#98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) external returns (bool);\n",
          "message": "Parameter '' of ERC20.approve (controllable.sol#109) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 109,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function approve(address, uint256) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ERC20.approve (controllable.sol#109) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 110,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
          "message": "Parameter '' of ERC20.balanceOf (controllable.sol#110) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) external returns (bool);\n",
          "message": "Parameter '' of ERC20.transfer (controllable.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 111,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transfer(address, uint) external returns (bool);\n",
          "message": "Parameter '_scope_0' of ERC20.transfer (controllable.sol#111) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": 156,
          "vulnerability_code": "    function _claim(address _to, address _asset, uint _amount) internal {\n\n        // address(0) is used to denote ETH\n\n        if (_asset == address(0)) {\n\n            _to.transfer(_amount);\n\n        } else {\n\n            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n\n        }\n\n\n\n        emit Claimed(_to, _asset, _amount);\n",
          "message": "Function 'Claimable._claim' (controllable.sol#147-156) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _claim(address _to, address _asset, uint _amount) internal {\n",
          "message": "Parameter '_to' of Claimable._claim (controllable.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _claim(address _to, address _asset, uint _amount) internal {\n",
          "message": "Parameter '_asset' of Claimable._claim (controllable.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 147,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _claim(address _to, address _asset, uint _amount) internal {\n",
          "message": "Parameter '_amount' of Claimable._claim (controllable.sol#147) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 184,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isController(address) external view returns (bool);\n",
          "message": "Parameter '' of IController.isController (controllable.sol#184) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isController(address _account) public view returns (bool) {\n",
          "message": "Parameter '_account' of Controller.isController (controllable.sol#267) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addAdmin(address _account) external onlyOwner {\n",
          "message": "Parameter '_account' of Controller.addAdmin (controllable.sol#226) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 232,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeAdmin(address _account) external onlyOwner {\n",
          "message": "Parameter '_account' of Controller.removeAdmin (controllable.sol#232) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 243,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addController(address _account) external onlyAdmin {\n",
          "message": "Parameter '_account' of Controller.addController (controllable.sol#243) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function removeController(address _account) external onlyAdmin {\n",
          "message": "Parameter '_account' of Controller.removeController (controllable.sol#249) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function isAdmin(address _account) public view returns (bool) {\n",
          "message": "Parameter '_account' of Controller.isAdmin (controllable.sol#261) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": 280,
          "vulnerability_code": "    function _addAdmin(address _account) private {\n\n        require(!_isAdmin[_account], \"provided account is already an admin\");\n\n        require(!_isController[_account], \"provided account is already a controller\");\n\n        require(!_isOwner(_account), \"provided account is already the owner\");\n\n        require(_account != address(0), \"provided account is the zero address\");\n\n        _isAdmin[_account] = true;\n\n        _adminCount++;\n\n        emit AddedAdmin(msg.sender, _account);\n",
          "message": "Function 'Controller._addAdmin' (controllable.sol#272-280) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 272,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addAdmin(address _account) private {\n",
          "message": "Parameter '_account' of Controller._addAdmin (controllable.sol#272) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": 288,
          "vulnerability_code": "    function _removeAdmin(address _account) private {\n\n        require(_isAdmin[_account], \"provided account is not an admin\");\n\n        _isAdmin[_account] = false;\n\n        _adminCount--;\n\n        emit RemovedAdmin(msg.sender, _account);\n",
          "message": "Function 'Controller._removeAdmin' (controllable.sol#283-288) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 283,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removeAdmin(address _account) private {\n",
          "message": "Parameter '_account' of Controller._removeAdmin (controllable.sol#283) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": 299,
          "vulnerability_code": "    function _addController(address _account) private {\n\n        require(!_isAdmin[_account], \"provided account is already an admin\");\n\n        require(!_isController[_account], \"provided account is already a controller\");\n\n        require(!_isOwner(_account), \"provided account is already the owner\");\n\n        require(_account != address(0), \"provided account is the zero address\");\n\n        _isController[_account] = true;\n\n        _controllerCount++;\n\n        emit AddedController(msg.sender, _account);\n",
          "message": "Function 'Controller._addController' (controllable.sol#291-299) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _addController(address _account) private {\n",
          "message": "Parameter '_account' of Controller._addController (controllable.sol#291) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": 307,
          "vulnerability_code": "    function _removeController(address _account) private {\n\n        require(_isController[_account], \"provided account is not a controller\");\n\n        _isController[_account] = false;\n\n        _controllerCount--;\n\n        emit RemovedController(msg.sender, _account);\n",
          "message": "Function 'Controller._removeController' (controllable.sol#302-307) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _removeController(address _account) private {\n",
          "message": "Parameter '_account' of Controller._removeController (controllable.sol#302) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _to, address _asset, uint _amount) external onlyOwner {\n",
          "message": "Parameter '_to' of Controller.claim (controllable.sol#310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _to, address _asset, uint _amount) external onlyOwner {\n",
          "message": "Parameter '_asset' of Controller.claim (controllable.sol#310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 310,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function claim(address _to, address _asset, uint _amount) external onlyOwner {\n",
          "message": "Parameter '_amount' of Controller.claim (controllable.sol#310) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": 580,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n\n        Record storage record = records[node];\n\n        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n\n                data = record.abis[contentType];\n\n                return;\n\n            }\n\n        }\n\n        contentType = 0;\n",
          "message": "Function 'PublicResolver.ABI' (controllable.sol#571-580) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 445,
          "vulnerability_to_line": 448,
          "vulnerability_code": "    modifier only_owner(bytes32 node) {\n\n        require(ens.owner(node) == msg.sender);\n\n        _;\n",
          "message": "Modifier 'PublicResolver.only_owner' (controllable.sol#445-448) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _ensReg_) internal {\n",
          "message": "Parameter '_ensReg_' of ENSResolvable. (controllable.sol#671) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": 686,
          "vulnerability_code": "    function _ensResolve(bytes32 _nodeHash) internal view returns (address) {\n\n        return PublicResolver(_ens.resolver(_nodeHash)).addr(_nodeHash);\n",
          "message": "Function 'ENSResolvable._ensResolve' (controllable.sol#684-686) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 684,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _ensResolve(bytes32 _nodeHash) internal view returns (address) {\n",
          "message": "Parameter '_nodeHash' of ENSResolvable._ensResolve (controllable.sol#684) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 720,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(bytes32 _controllerNameHash_) internal {\n",
          "message": "Parameter '_controllerNameHash_' of Controllable. (controllable.sol#720) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": 738,
          "vulnerability_code": "    function _isController(address _account) internal view returns (bool) {\n\n        return IController(_ensResolve(_controllerNode)).isController(_account);\n",
          "message": "Function 'Controllable._isController' (controllable.sol#736-738) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function _isController(address _account) internal view returns (bool) {\n",
          "message": "Parameter '_account' of Controllable._isController (controllable.sol#736) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 85,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _owner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 105,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 135,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 179,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 401,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 658,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _owner;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bool private _isTransferable;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 201,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private _isAdmin;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private _adminCount;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 204,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => bool) private _isController;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 205,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint private _controllerCount;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 665,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ENS private _ens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 668,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address private _ensRegistry;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 716,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes32 private _controllerNode;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 488,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 499,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setName(bytes32 node, string name) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function text(bytes32 node, string key) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 549,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function text(bytes32 node, string key) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name(bytes32 node) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 608,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multihash(bytes32 node) public view returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 409,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 410,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 411,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 413,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 414,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 415,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 416,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ENS ens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (bytes32 => Record) records;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _adminCount++;\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _adminCount--;\n",
          "message": null
        },
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 538,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 571,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ens.owner(node) == msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        records[node].pubkey = PublicKey(x, y);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 527,
          "vulnerability_to_line": null,
          "vulnerability_code": "        records[node].pubkey = PublicKey(x, y);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 152,
          "vulnerability_to_line": null,
          "vulnerability_code": "            require(ERC20(_asset).transfer(_to, _amount), \"ERC20 token transfer was unsuccessful\");\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ens.owner(node) == msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 478,
          "vulnerability_to_line": null,
          "vulnerability_code": "        records[node].content = hash;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(ens.owner(node) == msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        records[node].addr = addr;\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 465,
          "vulnerability_to_line": null,
          "vulnerability_code": "        records[node].addr = addr;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 278,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _adminCount++;\n",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _controllerCount++;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 286,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _adminCount--;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _controllerCount--;\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 589,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return records[node].name;\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 609,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return records[node].multihash;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 514,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(((contentType - 1) & contentType) == 0);\n",
          "message": null
        }
      ]
    }
  }
}