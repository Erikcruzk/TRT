{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(ENS ensAddr) public {\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "        ens = ensAddr;\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "non-payable-constructor",
          "vulnerability_from_line": 142,
          "vulnerability_to_line": null,
          "vulnerability_code": "    }\n",
          "message": "Consider making costructor payable to save gas."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 260,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 261,
          "vulnerability_to_line": null,
          "vulnerability_code": "                data = record.abis[contentType];\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "                return;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 263,
          "vulnerability_to_line": null,
          "vulnerability_code": "            }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_24"
      ],
      "vulnerability_findings": [
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n",
          "message": "ENS.setSubnodeOwner.owner (local variable @ PublicResolver.sol#47) shadows:\n\t- ENS.owner (function @ PublicResolver.sol#51)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setResolver(bytes32 node, address resolver) external;\n",
          "message": "ENS.setResolver.resolver (local variable @ PublicResolver.sol#48) shadows:\n\t- ENS.resolver (function @ PublicResolver.sol#52)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setOwner(bytes32 node, address owner) external;\n",
          "message": "ENS.setOwner.owner (local variable @ PublicResolver.sol#49) shadows:\n\t- ENS.owner (function @ PublicResolver.sol#51)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTTL(bytes32 node, uint64 ttl) external;\n",
          "message": "ENS.setTTL.ttl (local variable @ PublicResolver.sol#50) shadows:\n\t- ENS.ttl (function @ PublicResolver.sol#53)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setAddr(bytes32 node, address addr) public only_owner(node) {\n",
          "message": "PublicResolver.setAddr.addr (local variable @ PublicResolver.sol#150) shadows:\n\t- PublicResolver.addr (function @ PublicResolver.sol#303-305)\n"
        },
        {
          "name": "shadowing-local",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setName(bytes32 node, string name) public only_owner(node) {\n",
          "message": "PublicResolver.setName.name (local variable @ PublicResolver.sol#185) shadows:\n\t- PublicResolver.name (function @ PublicResolver.sol#274-276)\n"
        },
        {
          "name": "pragma",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": "Different versions of Solidity is used in PublicResolver.sol:\n\t- Version used: ['>=0.4.24', '^0.4.24']\n\t- PublicResolver.sol#30 declares pragma solidity>=0.4.24\n\t- PublicResolver.sol#87 declares pragma solidity^0.4.24\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 153,
          "vulnerability_code": "    function setAddr(bytes32 node, address addr) public only_owner(node) {\n\n        records[node].addr = addr;\n\n        emit AddrChanged(node, addr);\n",
          "message": "PublicResolver.setAddr (PublicResolver.sol#150-153) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 163,
          "vulnerability_to_line": 166,
          "vulnerability_code": "    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n\n        records[node].content = hash;\n\n        emit ContentChanged(node, hash);\n",
          "message": "PublicResolver.setContent (PublicResolver.sol#163-166) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": 177,
          "vulnerability_code": "    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n\n        records[node].multihash = hash;\n\n        emit MultihashChanged(node, hash);\n",
          "message": "PublicResolver.setMultihash (PublicResolver.sol#174-177) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": 188,
          "vulnerability_code": "    function setName(bytes32 node, string name) public only_owner(node) {\n\n        records[node].name = name;\n\n        emit NameChanged(node, name);\n",
          "message": "PublicResolver.setName (PublicResolver.sol#185-188) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": 204,
          "vulnerability_code": "    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n\n        // Content types must be powers of 2\n\n        require(((contentType - 1) & contentType) == 0);\n\n        \n\n        records[node].abis[contentType] = data;\n\n        emit ABIChanged(node, contentType);\n",
          "message": "PublicResolver.setABI (PublicResolver.sol#198-204) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 212,
          "vulnerability_to_line": 215,
          "vulnerability_code": "    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n\n        records[node].pubkey = PublicKey(x, y);\n\n        emit PubkeyChanged(node, x, y);\n",
          "message": "PublicResolver.setPubkey (PublicResolver.sol#212-215) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": 227,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n\n        records[node].text[key] = value;\n\n        emit TextChanged(node, key, key);\n",
          "message": "PublicResolver.setText (PublicResolver.sol#224-227) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": 237,
          "vulnerability_code": "    function text(bytes32 node, string key) public view returns (string) {\n\n        return records[node].text[key];\n",
          "message": "PublicResolver.text (PublicResolver.sol#235-237) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": 247,
          "vulnerability_code": "    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n\n        return (records[node].pubkey.x, records[node].pubkey.y);\n",
          "message": "PublicResolver.pubkey (PublicResolver.sol#245-247) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n\n        Record storage record = records[node];\n\n        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n\n                data = record.abis[contentType];\n\n                return;\n\n            }\n\n        }\n\n        contentType = 0;\n",
          "message": "PublicResolver.ABI (PublicResolver.sol#257-266) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": 276,
          "vulnerability_code": "    function name(bytes32 node) public view returns (string) {\n\n        return records[node].name;\n",
          "message": "PublicResolver.name (PublicResolver.sol#274-276) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 285,
          "vulnerability_to_line": 287,
          "vulnerability_code": "    function content(bytes32 node) public view returns (bytes32) {\n\n        return records[node].content;\n",
          "message": "PublicResolver.content (PublicResolver.sol#285-287) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": 296,
          "vulnerability_code": "    function multihash(bytes32 node) public view returns (bytes) {\n\n        return records[node].multihash;\n",
          "message": "PublicResolver.multihash (PublicResolver.sol#294-296) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": 305,
          "vulnerability_code": "    function addr(bytes32 node) public view returns (address) {\n\n        return records[node].addr;\n",
          "message": "PublicResolver.addr (PublicResolver.sol#303-305) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 312,
          "vulnerability_to_line": 321,
          "vulnerability_code": "    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n\n        return interfaceID == ADDR_INTERFACE_ID ||\n\n        interfaceID == CONTENT_INTERFACE_ID ||\n\n        interfaceID == NAME_INTERFACE_ID ||\n\n        interfaceID == ABI_INTERFACE_ID ||\n\n        interfaceID == PUBKEY_INTERFACE_ID ||\n\n        interfaceID == TEXT_INTERFACE_ID ||\n\n        interfaceID == MULTIHASH_INTERFACE_ID ||\n\n        interfaceID == INTERFACE_META_ID;\n",
          "message": "PublicResolver.supportsInterface (PublicResolver.sol#312-321) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": 266,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n\n        Record storage record = records[node];\n\n        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n\n                data = record.abis[contentType];\n\n                return;\n\n            }\n\n        }\n\n        contentType = 0;\n",
          "message": "Function 'PublicResolver.ABI' (PublicResolver.sol#257-266) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 131,
          "vulnerability_to_line": 134,
          "vulnerability_code": "    modifier only_owner(bytes32 node) {\n\n        require(ens.owner(node) == msg.sender);\n\n        _;\n",
          "message": "Modifier 'PublicResolver.only_owner' (PublicResolver.sol#131-134) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 87,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 174,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 185,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setName(bytes32 node, string name) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 198,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function text(bytes32 node, string key) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 235,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function text(bytes32 node, string key) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 274,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function name(bytes32 node) public view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function multihash(bytes32 node) public view returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 95,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 98,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 99,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 100,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 102,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 127,
          "vulnerability_to_line": null,
          "vulnerability_code": "    ENS ens;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 129,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (bytes32 => Record) records;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setText(bytes32 node, string key, string value) public only_owner(node) {\n",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 257,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 275,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return records[node].name;\n",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return records[node].multihash;\n",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(((contentType - 1) & contentType) == 0);\n",
          "message": null
        }
      ]
    }
  }
}