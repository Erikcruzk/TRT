{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 832,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    if(subindex == n.length)\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "array-length-outside-loop",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "unnecessary-checked-arithmetic-in-loop",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i=0; i< n_random_bytes; i++) {\n",
          "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 945,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((_nbytes > 0) && (_nbytes <= 32));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-multiple-require",
          "vulnerability_from_line": 1064,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n",
          "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 784,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 785,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 786,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 787,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 788,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 789,
          "vulnerability_to_line": null,
          "vulnerability_code": "            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 880,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 881,
          "vulnerability_to_line": null,
          "vulnerability_code": "                if (decimals){\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 882,
          "vulnerability_to_line": null,
          "vulnerability_code": "                   if (_b == 0) break;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    else _b--;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 884,
          "vulnerability_to_line": null,
          "vulnerability_code": "                }\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 885,
          "vulnerability_to_line": null,
          "vulnerability_code": "                mint *= 10;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 886,
          "vulnerability_to_line": null,
          "vulnerability_code": "                mint += uint(bresult[i]) - 48;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 887,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else if (bresult[i] == 46) decimals = true;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1223,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (v != 27 && v != 28)\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 1224,
          "vulnerability_to_line": null,
          "vulnerability_code": "            return (false, 0);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-prefix-decrement-not-postfix",
          "vulnerability_from_line": 883,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    else _b--;\n",
          "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < minLength; i ++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 830,
          "vulnerability_to_line": null,
          "vulnerability_code": "                        subindex++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 898,
          "vulnerability_to_line": null,
          "vulnerability_code": "            len++;\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        },
        {
          "name": "use-prefix-increment-not-postfix",
          "vulnerability_from_line": 1087,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint256 i=0; i< n_random_bytes; i++) {\n",
          "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_RECEIVED_SIGNAL_37"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 102,
          "vulnerability_code": "    function init(buffer memory buf, uint _capacity) internal pure {\n\n        uint capacity = _capacity;\n\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n\n        // Allocate space for the buffer data\n\n        buf.capacity = capacity;\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            mstore(buf, ptr)\n\n            mstore(ptr, 0)\n\n            mstore(0x40, add(ptr, capacity))\n\n        }\n",
          "message": "Buffer.init (oraclizeAPI_0.4.25.sol#91-102) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 162,
          "vulnerability_code": "    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n\n        if(data.length + buf.buf.length > buf.capacity) {\n\n            resize(buf, max(buf.capacity, data.length) * 2);\n\n        }\n\n\n\n        uint dest;\n\n        uint src;\n\n        uint len = data.length;\n\n        assembly {\n\n            // Memory address of the buffer data\n\n            let bufptr := mload(buf)\n\n            // Length of existing buffer data\n\n            let buflen := mload(bufptr)\n\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n\n            dest := add(add(bufptr, buflen), 32)\n\n            // Update buffer length\n\n            mstore(bufptr, add(buflen, mload(data)))\n\n            src := add(data, 32)\n\n        }\n\n\n\n        // Copy word-length chunks while possible\n\n        for(; len >= 32; len -= 32) {\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n            dest += 32;\n\n            src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint mask = 256 ** (32 - len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask))\n\n            let destpart := and(mload(dest), mask)\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n\n\n\n        return buf;\n",
          "message": "Buffer.append (oraclizeAPI_0.4.25.sol#124-162) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 187,
          "vulnerability_code": "    function append(buffer memory buf, uint8 data) internal pure {\n\n        if(buf.buf.length + 1 > buf.capacity) {\n\n            resize(buf, buf.capacity * 2);\n\n        }\n\n\n\n        assembly {\n\n            // Memory address of the buffer data\n\n            let bufptr := mload(buf)\n\n            // Length of existing buffer data\n\n            let buflen := mload(bufptr)\n\n            // Address = buffer address + buffer length + sizeof(buffer length)\n\n            let dest := add(add(bufptr, buflen), 32)\n\n            mstore8(dest, data)\n\n            // Update buffer length\n\n            mstore(bufptr, add(buflen, 1))\n\n        }\n",
          "message": "Buffer.append (oraclizeAPI_0.4.25.sol#171-187) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 214,
          "vulnerability_code": "    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n\n        if(len + buf.buf.length > buf.capacity) {\n\n            resize(buf, max(buf.capacity, len) * 2);\n\n        }\n\n\n\n        uint mask = 256 ** len - 1;\n\n        assembly {\n\n            // Memory address of the buffer data\n\n            let bufptr := mload(buf)\n\n            // Length of existing buffer data\n\n            let buflen := mload(bufptr)\n\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n\n            let dest := add(add(bufptr, buflen), len)\n\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n\n            // Update buffer length\n\n            mstore(bufptr, add(buflen, len))\n\n        }\n\n        return buf;\n",
          "message": "Buffer.appendInt (oraclizeAPI_0.4.25.sol#196-214) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": 773,
          "vulnerability_code": "    function getCodeSize(address _addr) view internal returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n",
          "message": "usingOraclize.getCodeSize (oraclizeAPI_0.4.25.sol#769-773) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": 1157,
          "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n\n        uint minLength = length + toOffset;\n\n\n\n        // Buffer too small\n\n        require(to.length >= minLength); // Should be a better way?\n\n\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n\n        uint i = 32 + fromOffset;\n\n        uint j = 32 + toOffset;\n\n\n\n        while (i < (32 + fromOffset + length)) {\n\n            assembly {\n\n                let tmp := mload(add(from, i))\n\n                mstore(add(to, j), tmp)\n\n            }\n\n            i += 32;\n\n            j += 32;\n\n        }\n\n\n\n        return to;\n",
          "message": "usingOraclize.copyBytes (oraclizeAPI_0.4.25.sol#1137-1157) is declared view but contains assembly code\n"
        },
        {
          "name": "constant-function",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": 1234,
          "vulnerability_code": "    function safeMemoryCleaner() internal pure {\n\n        assembly {\n\n            let fmem := mload(0x40)\n\n            codecopy(fmem, codesize, sub(msize, fmem))\n\n        }\n",
          "message": "usingOraclize.safeMemoryCleaner (oraclizeAPI_0.4.25.sol#1229-1234) is declared view but contains assembly code\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 308,
          "vulnerability_to_line": 316,
          "vulnerability_code": "    modifier oraclizeAPI {\n\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n\n            oraclize_setNetwork(networkID_auto);\n\n\n\n        if(address(oraclize) != OAR.getAddress())\n\n            oraclize = OraclizeI(OAR.getAddress());\n\n\n\n        _;\n",
          "message": "Reentrancy in usingOraclize.oraclizeAPI (oraclizeAPI_0.4.25.sol#308-316):\n\tExternal calls:\n\t- address(oraclize) != OAR.getAddress() (oraclizeAPI_0.4.25.sol#312-313)\n\t- oraclize = OraclizeI(OAR.getAddress()) (oraclizeAPI_0.4.25.sol#313)\n\tState variables written after the call(s):\n\t- oraclize (oraclizeAPI_0.4.25.sol#313)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 913,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Buffer.buffer memory buf;\n",
          "message": "buf in usingOraclize.stra2cbor (oraclizeAPI_0.4.25.sol#913) is a local variable never initialiazed\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 925,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Buffer.buffer memory buf;\n",
          "message": "buf in usingOraclize.ba2cbor (oraclizeAPI_0.4.25.sol#925) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 228,
          "vulnerability_to_line": 244,
          "vulnerability_code": "    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\n\n        if(value <= 23) {\n\n            buf.append(uint8((major << 5) | value));\n\n        } else if(value <= 0xFF) {\n\n            buf.append(uint8((major << 5) | 24));\n\n            buf.appendInt(value, 1);\n\n        } else if(value <= 0xFFFF) {\n\n            buf.append(uint8((major << 5) | 25));\n\n            buf.appendInt(value, 2);\n\n        } else if(value <= 0xFFFFFFFF) {\n\n            buf.append(uint8((major << 5) | 26));\n\n            buf.appendInt(value, 4);\n\n        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n\n            buf.append(uint8((major << 5) | 27));\n\n            buf.appendInt(value, 8);\n\n        }\n",
          "message": "CBOR.encodeType (oraclizeAPI_0.4.25.sol#228-244) does not use the value returned by external calls:\n\t-buf.appendInt(value,1) (oraclizeAPI_0.4.25.sol#233)\n\t-buf.appendInt(value,2) (oraclizeAPI_0.4.25.sol#236)\n\t-buf.appendInt(value,4) (oraclizeAPI_0.4.25.sol#239)\n\t-buf.appendInt(value,8) (oraclizeAPI_0.4.25.sol#242)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": 265,
          "vulnerability_code": "    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n\n        buf.append(value);\n",
          "message": "CBOR.encodeBytes (oraclizeAPI_0.4.25.sol#262-265) does not use the value returned by external calls:\n\t-buf.append(value) (oraclizeAPI_0.4.25.sol#264)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": 270,
          "vulnerability_code": "    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n\n        buf.append(bytes(value));\n",
          "message": "CBOR.encodeString (oraclizeAPI_0.4.25.sol#267-270) does not use the value returned by external calls:\n\t-buf.append(bytes(value)) (oraclizeAPI_0.4.25.sol#269)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 990,
          "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10;\n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            // the following variables can be relaxed\n\n            // check relaxed random contract under ethereum-examples repo\n\n            // for an idea on how to override and replace comit hash vars\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly {\n\n            mstore(add(delay, 0x20), _delay)\n\n        }\n\n\n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n\n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n\n        return queryId;\n",
          "message": "Reentrancy in usingOraclize.oraclize_newRandomDSQuery (oraclizeAPI_0.4.25.sol#944-990):\n\tExternal calls:\n\t- sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash() (oraclizeAPI_0.4.25.sol#952)\n\t- queryId = oraclize_query(random,args,_customGasLimit) (oraclizeAPI_0.4.25.sol#971)\n\tExternal calls sending eth:\n\t- queryId = oraclize_query(random,args,_customGasLimit) (oraclizeAPI_0.4.25.sol#971)\n\tState variables written after the call(s):\n\t- oraclize_network_name (oraclizeAPI_0.4.25.sol#971)\n\t- oraclize_randomDS_args (oraclizeAPI_0.4.25.sol#988)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": 102,
          "vulnerability_code": "    function init(buffer memory buf, uint _capacity) internal pure {\n\n        uint capacity = _capacity;\n\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n\n        // Allocate space for the buffer data\n\n        buf.capacity = capacity;\n\n        assembly {\n\n            let ptr := mload(0x40)\n\n            mstore(buf, ptr)\n\n            mstore(ptr, 0)\n\n            mstore(0x40, add(ptr, capacity))\n\n        }\n",
          "message": "Buffer.init uses assembly (oraclizeAPI_0.4.25.sol#91-102)\n\t- oraclizeAPI_0.4.25.sol#96-102\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": 162,
          "vulnerability_code": "    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n\n        if(data.length + buf.buf.length > buf.capacity) {\n\n            resize(buf, max(buf.capacity, data.length) * 2);\n\n        }\n\n\n\n        uint dest;\n\n        uint src;\n\n        uint len = data.length;\n\n        assembly {\n\n            // Memory address of the buffer data\n\n            let bufptr := mload(buf)\n\n            // Length of existing buffer data\n\n            let buflen := mload(bufptr)\n\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n\n            dest := add(add(bufptr, buflen), 32)\n\n            // Update buffer length\n\n            mstore(bufptr, add(buflen, mload(data)))\n\n            src := add(data, 32)\n\n        }\n\n\n\n        // Copy word-length chunks while possible\n\n        for(; len >= 32; len -= 32) {\n\n            assembly {\n\n                mstore(dest, mload(src))\n\n            }\n\n            dest += 32;\n\n            src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint mask = 256 ** (32 - len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(src), not(mask))\n\n            let destpart := and(mload(dest), mask)\n\n            mstore(dest, or(destpart, srcpart))\n\n        }\n\n\n\n        return buf;\n",
          "message": "Buffer.append uses assembly (oraclizeAPI_0.4.25.sol#124-162)\n\t- oraclizeAPI_0.4.25.sol#132-145\n\t- oraclizeAPI_0.4.25.sol#146-149\n\t- oraclizeAPI_0.4.25.sol#155-161\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": 187,
          "vulnerability_code": "    function append(buffer memory buf, uint8 data) internal pure {\n\n        if(buf.buf.length + 1 > buf.capacity) {\n\n            resize(buf, buf.capacity * 2);\n\n        }\n\n\n\n        assembly {\n\n            // Memory address of the buffer data\n\n            let bufptr := mload(buf)\n\n            // Length of existing buffer data\n\n            let buflen := mload(bufptr)\n\n            // Address = buffer address + buffer length + sizeof(buffer length)\n\n            let dest := add(add(bufptr, buflen), 32)\n\n            mstore8(dest, data)\n\n            // Update buffer length\n\n            mstore(bufptr, add(buflen, 1))\n\n        }\n",
          "message": "Buffer.append uses assembly (oraclizeAPI_0.4.25.sol#171-187)\n\t- oraclizeAPI_0.4.25.sol#176-187\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": 214,
          "vulnerability_code": "    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n\n        if(len + buf.buf.length > buf.capacity) {\n\n            resize(buf, max(buf.capacity, len) * 2);\n\n        }\n\n\n\n        uint mask = 256 ** len - 1;\n\n        assembly {\n\n            // Memory address of the buffer data\n\n            let bufptr := mload(buf)\n\n            // Length of existing buffer data\n\n            let buflen := mload(bufptr)\n\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n\n            let dest := add(add(bufptr, buflen), len)\n\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n\n            // Update buffer length\n\n            mstore(bufptr, add(buflen, len))\n\n        }\n\n        return buf;\n",
          "message": "Buffer.appendInt uses assembly (oraclizeAPI_0.4.25.sol#196-214)\n\t- oraclizeAPI_0.4.25.sol#202-213\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": 773,
          "vulnerability_code": "    function getCodeSize(address _addr) view internal returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n",
          "message": "usingOraclize.getCodeSize uses assembly (oraclizeAPI_0.4.25.sol#769-773)\n\t- oraclizeAPI_0.4.25.sol#770-773\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 990,
          "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10;\n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            // the following variables can be relaxed\n\n            // check relaxed random contract under ethereum-examples repo\n\n            // for an idea on how to override and replace comit hash vars\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly {\n\n            mstore(add(delay, 0x20), _delay)\n\n        }\n\n\n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n\n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n\n        return queryId;\n",
          "message": "usingOraclize.oraclize_newRandomDSQuery uses assembly (oraclizeAPI_0.4.25.sol#944-990)\n\t- oraclizeAPI_0.4.25.sol#953-962\n\t- oraclizeAPI_0.4.25.sol#963-967\n\t- oraclizeAPI_0.4.25.sol#975-988\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 999,
          "vulnerability_to_line": 1025,
          "vulnerability_code": "    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n\n        bool sigok;\n\n        address signer;\n\n\n\n        bytes32 sigr;\n\n        bytes32 sigs;\n\n\n\n        bytes memory sigr_ = new bytes(32);\n\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n\n        bytes memory sigs_ = new bytes(32);\n\n        offset += 32 + 2;\n\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n\n\n        assembly {\n\n            sigr := mload(add(sigr_, 32))\n\n            sigs := mload(add(sigs_, 32))\n\n        }\n\n\n\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n\n        if (address(keccak256(pubkey)) == signer) return true;\n\n        else {\n\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n\n            return (address(keccak256(pubkey)) == signer);\n\n        }\n",
          "message": "usingOraclize.verifySig uses assembly (oraclizeAPI_0.4.25.sol#999-1025)\n\t- oraclizeAPI_0.4.25.sol#1013-1019\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": 1157,
          "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n\n        uint minLength = length + toOffset;\n\n\n\n        // Buffer too small\n\n        require(to.length >= minLength); // Should be a better way?\n\n\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n\n        uint i = 32 + fromOffset;\n\n        uint j = 32 + toOffset;\n\n\n\n        while (i < (32 + fromOffset + length)) {\n\n            assembly {\n\n                let tmp := mload(add(from, i))\n\n                mstore(add(to, j), tmp)\n\n            }\n\n            i += 32;\n\n            j += 32;\n\n        }\n\n\n\n        return to;\n",
          "message": "usingOraclize.copyBytes uses assembly (oraclizeAPI_0.4.25.sol#1137-1157)\n\t- oraclizeAPI_0.4.25.sol#1148-1152\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": 1186,
          "vulnerability_code": "    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n\n        // We do our own memory management here. Solidity uses memory offset\n\n        // 0x40 to store the current end of memory. We write past it (as\n\n        // writes are memory extensions), but don't update the offset so\n\n        // Solidity will reuse it. The memory used here is only needed for\n\n        // this context.\n\n\n\n        // FIXME: inline assembly can't access return values\n\n        bool ret;\n\n        address addr;\n\n\n\n        assembly {\n\n            let size := mload(0x40)\n\n            mstore(size, hash)\n\n            mstore(add(size, 32), v)\n\n            mstore(add(size, 64), r)\n\n            mstore(add(size, 96), s)\n\n\n\n            // NOTE: we can reuse the request memory because we deal with\n\n            //       the return code\n\n            ret := call(3000, 1, 0, size, 128, size, 32)\n\n            addr := mload(size)\n\n        }\n\n\n\n        return (ret, addr);\n",
          "message": "usingOraclize.safer_ecrecover uses assembly (oraclizeAPI_0.4.25.sol#1161-1186)\n\t- oraclizeAPI_0.4.25.sol#1172-1185\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": 1227,
          "vulnerability_code": "    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        if (sig.length != 65)\n\n          return (false, 0);\n\n\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        assembly {\n\n            r := mload(add(sig, 32))\n\n            s := mload(add(sig, 64))\n\n\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n\n            // 'mload' will pad with zeroes if we overread.\n\n            // There is no 'mload8' to do this, but that would be nicer.\n\n            v := byte(0, mload(add(sig, 96)))\n\n\n\n            // Alternative solution:\n\n            // 'byte' is not working due to the Solidity parser, so lets\n\n            // use the second best option, 'and'\n\n            // v := and(mload(add(sig, 65)), 255)\n\n        }\n\n\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n\n        // to match the YP range of [27, 28]\n\n        //\n\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n\n        if (v < 27)\n\n          v += 27;\n\n\n\n        if (v != 27 && v != 28)\n\n            return (false, 0);\n\n\n\n        return safer_ecrecover(hash, v, r, s);\n",
          "message": "usingOraclize.ecrecovery uses assembly (oraclizeAPI_0.4.25.sol#1189-1227)\n\t- oraclizeAPI_0.4.25.sol#1200-1220\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": 1234,
          "vulnerability_code": "    function safeMemoryCleaner() internal pure {\n\n        assembly {\n\n            let fmem := mload(0x40)\n\n            codecopy(fmem, codesize, sub(msize, fmem))\n\n        }\n",
          "message": "usingOraclize.safeMemoryCleaner uses assembly (oraclizeAPI_0.4.25.sol#1229-1234)\n\t- oraclizeAPI_0.4.25.sol#1230-1234\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    address public cbAddress;\n",
          "message": "OraclizeI.cbAddress should be constant (oraclizeAPI_0.4.25.sol#39)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
          "message": "OraclizeI.query2 (oraclizeAPI_0.4.25.sol#42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n",
          "message": "OraclizeI.queryN (oraclizeAPI_0.4.25.sol#44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(string _datasource) public returns (uint _dsprice);\n",
          "message": "OraclizeI.getPrice (oraclizeAPI_0.4.25.sol#46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n",
          "message": "OraclizeI.getPrice (oraclizeAPI_0.4.25.sol#47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getAddress() public returns (address _addr);\n",
          "message": "OraclizeAddrResolverI.getAddress (oraclizeAPI_0.4.25.sol#54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 364,
          "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n\n        __callback(myid, result, new bytes(0));\n",
          "message": "usingOraclize.__callback (oraclizeAPI_0.4.25.sol#362-364) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.22;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version\n",
          "message": "Detected issues with version pragma in oraclizeAPI_0.4.25.sol:\n\t- pragma solidity>=0.4.22 (oraclizeAPI_0.4.25.sol#36): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n",
          "message": "Function 'OraclizeI.query_withGasLimit' (oraclizeAPI_0.4.25.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n",
          "message": "Function 'OraclizeI.query2_withGasLimit' (oraclizeAPI_0.4.25.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n",
          "message": "Function 'OraclizeI.queryN_withGasLimit' (oraclizeAPI_0.4.25.sol#45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n",
          "message": "Function 'OraclizeI.randomDS_getSessionPubKeyHash' (oraclizeAPI_0.4.25.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 86,
          "vulnerability_to_line": 89,
          "vulnerability_code": "    struct buffer {\n\n        bytes buf;\n\n        uint capacity;\n",
          "message": "Struct 'Buffer.buffer' (oraclizeAPI_0.4.25.sol#86-89) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(buffer memory buf, uint _capacity) internal pure {\n",
          "message": "Parameter '_capacity' of Buffer.init (oraclizeAPI_0.4.25.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 289,
          "vulnerability_to_line": 1236,
          "vulnerability_code": "contract usingOraclize {\n\n    uint constant day = 60*60*24;\n\n    uint constant week = 60*60*24*7;\n\n    uint constant month = 60*60*24*30;\n\n    byte constant proofType_NONE = 0x00;\n\n    byte constant proofType_TLSNotary = 0x10;\n\n    byte constant proofType_Ledger = 0x30;\n\n    byte constant proofType_Android = 0x40;\n\n    byte constant proofType_Native = 0xF0;\n\n    byte constant proofStorage_IPFS = 0x01;\n\n    uint8 constant networkID_auto = 0;\n\n    uint8 constant networkID_mainnet = 1;\n\n    uint8 constant networkID_testnet = 2;\n\n    uint8 constant networkID_morden = 2;\n\n    uint8 constant networkID_consensys = 161;\n\n\n\n    OraclizeAddrResolverI OAR;\n\n\n\n    OraclizeI oraclize;\n\n    modifier oraclizeAPI {\n\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n\n            oraclize_setNetwork(networkID_auto);\n\n\n\n        if(address(oraclize) != OAR.getAddress())\n\n            oraclize = OraclizeI(OAR.getAddress());\n\n\n\n        _;\n\n    }\n\n    modifier coupon(string code){\n\n        oraclize = OraclizeI(OAR.getAddress());\n\n        _;\n\n    }\n\n\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n\n      return oraclize_setNetwork();\n\n      networkID; // silence the warning and remain backwards compatible\n\n    }\n\n    function oraclize_setNetwork() internal returns(bool){\n\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n\n            oraclize_setNetworkName(\"eth_mainnet\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n\n            oraclize_setNetworkName(\"eth_ropsten3\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n\n            oraclize_setNetworkName(\"eth_kovan\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n\n            oraclize_setNetworkName(\"eth_rinkeby\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n\n            return true;\n\n        }\n\n        return false;\n\n    }\n\n\n\n    function __callback(bytes32 myid, string result) public {\n\n        __callback(myid, result, new bytes(0));\n\n    }\n\n    function __callback(bytes32 myid, string result, bytes proof) public {\n\n      return;\n\n      // Following should never be reached with a preceding return, however\n\n      // this is just a placeholder function, ideally meant to be defined in\n\n      // child contract when proofs are used\n\n      myid; result; proof; // Silence compiler warnings\n\n      oraclize = OraclizeI(0); // Additional compiler silence about making function pure/view. \n\n    }\n\n\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource);\n\n    }\n\n\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(0, datasource, arg);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n\n        return oraclize.cbAddress();\n\n    }\n\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n\n        return oraclize.setProofType(proofP);\n\n    }\n\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n\n        return oraclize.setCustomGasPrice(gasPrice);\n\n    }\n\n\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n\n        return oraclize.randomDS_getSessionPubKeyHash();\n\n    }\n\n\n\n    function getCodeSize(address _addr) view internal returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n\n    }\n\n\n\n    function parseAddr(string _a) internal pure returns (address){\n\n        bytes memory tmp = bytes(_a);\n\n        uint160 iaddr = 0;\n\n        uint160 b1;\n\n        uint160 b2;\n\n        for (uint i=2; i<2+2*20; i+=2){\n\n            iaddr *= 256;\n\n            b1 = uint160(tmp[i]);\n\n            b2 = uint160(tmp[i+1]);\n\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n\n            iaddr += (b1*16+b2);\n\n        }\n\n        return address(iaddr);\n\n    }\n\n\n\n    function strCompare(string _a, string _b) internal pure returns (int) {\n\n        bytes memory a = bytes(_a);\n\n        bytes memory b = bytes(_b);\n\n        uint minLength = a.length;\n\n        if (b.length < minLength) minLength = b.length;\n\n        for (uint i = 0; i < minLength; i ++)\n\n            if (a[i] < b[i])\n\n                return -1;\n\n            else if (a[i] > b[i])\n\n                return 1;\n\n        if (a.length < b.length)\n\n            return -1;\n\n        else if (a.length > b.length)\n\n            return 1;\n\n        else\n\n            return 0;\n\n    }\n\n\n\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n\n        bytes memory h = bytes(_haystack);\n\n        bytes memory n = bytes(_needle);\n\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n\n            return -1;\n\n        else if(h.length > (2**128 -1))\n\n            return -1;\n\n        else\n\n        {\n\n            uint subindex = 0;\n\n            for (uint i = 0; i < h.length; i ++)\n\n            {\n\n                if (h[i] == n[0])\n\n                {\n\n                    subindex = 1;\n\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n\n                    {\n\n                        subindex++;\n\n                    }\n\n                    if(subindex == n.length)\n\n                        return int(i);\n\n                }\n\n            }\n\n            return -1;\n\n        }\n\n    }\n\n\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n\n        bytes memory _ba = bytes(_a);\n\n        bytes memory _bb = bytes(_b);\n\n        bytes memory _bc = bytes(_c);\n\n        bytes memory _bd = bytes(_d);\n\n        bytes memory _be = bytes(_e);\n\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n\n        bytes memory babcde = bytes(abcde);\n\n        uint k = 0;\n\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n\n        return string(babcde);\n\n    }\n\n\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n\n        return strConcat(_a, _b, _c, _d, \"\");\n\n    }\n\n\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n\n        return strConcat(_a, _b, _c, \"\", \"\");\n\n    }\n\n\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n\n        return strConcat(_a, _b, \"\", \"\", \"\");\n\n    }\n\n\n\n    // parseInt\n\n    function parseInt(string _a) internal pure returns (uint) {\n\n        return parseInt(_a, 0);\n\n    }\n\n\n\n    // parseInt(parseFloat*10^_b)\n\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n\n        bytes memory bresult = bytes(_a);\n\n        uint mint = 0;\n\n        bool decimals = false;\n\n        for (uint i=0; i<bresult.length; i++){\n\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n\n                if (decimals){\n\n                   if (_b == 0) break;\n\n                    else _b--;\n\n                }\n\n                mint *= 10;\n\n                mint += uint(bresult[i]) - 48;\n\n            } else if (bresult[i] == 46) decimals = true;\n\n        }\n\n        if (_b > 0) mint *= 10**_b;\n\n        return mint;\n\n    }\n\n\n\n    function uint2str(uint i) internal pure returns (string){\n\n        if (i == 0) return \"0\";\n\n        uint j = i;\n\n        uint len;\n\n        while (j != 0){\n\n            len++;\n\n            j /= 10;\n\n        }\n\n        bytes memory bstr = new bytes(len);\n\n        uint k = len - 1;\n\n        while (i != 0){\n\n            bstr[k--] = byte(48 + i % 10);\n\n            i /= 10;\n\n        }\n\n        return string(bstr);\n\n    }\n\n\n\n    using CBOR for Buffer.buffer;\n\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\n\n        safeMemoryCleaner();\n\n        Buffer.buffer memory buf;\n\n        Buffer.init(buf, 1024);\n\n        buf.startArray();\n\n        for (uint i = 0; i < arr.length; i++) {\n\n            buf.encodeString(arr[i]);\n\n        }\n\n        buf.endSequence();\n\n        return buf.buf;\n\n    }\n\n\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n\n        safeMemoryCleaner();\n\n        Buffer.buffer memory buf;\n\n        Buffer.init(buf, 1024);\n\n        buf.startArray();\n\n        for (uint i = 0; i < arr.length; i++) {\n\n            buf.encodeBytes(arr[i]);\n\n        }\n\n        buf.endSequence();\n\n        return buf.buf;\n\n    }\n\n\n\n    string oraclize_network_name;\n\n    function oraclize_setNetworkName(string _network_name) internal {\n\n        oraclize_network_name = _network_name;\n\n    }\n\n\n\n    function oraclize_getNetworkName() internal view returns (string) {\n\n        return oraclize_network_name;\n\n    }\n\n\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10;\n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            // the following variables can be relaxed\n\n            // check relaxed random contract under ethereum-examples repo\n\n            // for an idea on how to override and replace comit hash vars\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly {\n\n            mstore(add(delay, 0x20), _delay)\n\n        }\n\n\n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n\n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n\n        return queryId;\n\n    }\n\n\n\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n\n        oraclize_randomDS_args[queryId] = commitment;\n\n    }\n\n\n\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n\n        bool sigok;\n\n        address signer;\n\n\n\n        bytes32 sigr;\n\n        bytes32 sigs;\n\n\n\n        bytes memory sigr_ = new bytes(32);\n\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n\n        bytes memory sigs_ = new bytes(32);\n\n        offset += 32 + 2;\n\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n\n\n        assembly {\n\n            sigr := mload(add(sigr_, 32))\n\n            sigs := mload(add(sigs_, 32))\n\n        }\n\n\n\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n\n        if (address(keccak256(pubkey)) == signer) return true;\n\n        else {\n\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n\n            return (address(keccak256(pubkey)) == signer);\n\n        }\n\n    }\n\n\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n\n        bool sigok;\n\n\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n\n\n        bytes memory appkey1_pubkey = new bytes(64);\n\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n\n\n        bytes memory tosign2 = new bytes(1+65+32);\n\n        tosign2[0] = byte(1); //role\n\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n\n\n        if (sigok == false) return false;\n\n\n\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n\n\n        bytes memory tosign3 = new bytes(1+65);\n\n        tosign3[0] = 0xFE;\n\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n\n\n        return sigok;\n\n    }\n\n\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        require(proofVerified);\n\n\n\n        _;\n\n    }\n\n\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        if (proofVerified == false) return 2;\n\n\n\n        return 0;\n\n    }\n\n\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n\n        bool match_ = true;\n\n\n\n        require(prefix.length == n_random_bytes);\n\n\n\n        for (uint256 i=0; i< n_random_bytes; i++) {\n\n            if (content[i] != prefix[i]) match_ = false;\n\n        }\n\n\n\n        return match_;\n\n    }\n\n\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n\n        bytes memory keyhash = new bytes(32);\n\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(context_name, queryId)))))) return false;\n\n\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n\n        // This is to verify that the computed args match with the ones specified in the query.\n\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n\n\n        bytes memory sessionPubkey = new bytes(64);\n\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n\n        if (oraclize_randomDS_args[queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))){ //unonce, nbytes and sessionKeyHash match\n\n            delete oraclize_randomDS_args[queryId];\n\n        } else return false;\n\n\n\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n\n        bytes memory tosign1 = new bytes(32+8+1+32);\n\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n\n        }\n\n\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n\n    }\n\n\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n\n        uint minLength = length + toOffset;\n\n\n\n        // Buffer too small\n\n        require(to.length >= minLength); // Should be a better way?\n\n\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n\n        uint i = 32 + fromOffset;\n\n        uint j = 32 + toOffset;\n\n\n\n        while (i < (32 + fromOffset + length)) {\n\n            assembly {\n\n                let tmp := mload(add(from, i))\n\n                mstore(add(to, j), tmp)\n\n            }\n\n            i += 32;\n\n            j += 32;\n\n        }\n\n\n\n        return to;\n\n    }\n\n\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n\n        // We do our own memory management here. Solidity uses memory offset\n\n        // 0x40 to store the current end of memory. We write past it (as\n\n        // writes are memory extensions), but don't update the offset so\n\n        // Solidity will reuse it. The memory used here is only needed for\n\n        // this context.\n\n\n\n        // FIXME: inline assembly can't access return values\n\n        bool ret;\n\n        address addr;\n\n\n\n        assembly {\n\n            let size := mload(0x40)\n\n            mstore(size, hash)\n\n            mstore(add(size, 32), v)\n\n            mstore(add(size, 64), r)\n\n            mstore(add(size, 96), s)\n\n\n\n            // NOTE: we can reuse the request memory because we deal with\n\n            //       the return code\n\n            ret := call(3000, 1, 0, size, 128, size, 32)\n\n            addr := mload(size)\n\n        }\n\n\n\n        return (ret, addr);\n\n    }\n\n\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        if (sig.length != 65)\n\n          return (false, 0);\n\n\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        assembly {\n\n            r := mload(add(sig, 32))\n\n            s := mload(add(sig, 64))\n\n\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n\n            // 'mload' will pad with zeroes if we overread.\n\n            // There is no 'mload8' to do this, but that would be nicer.\n\n            v := byte(0, mload(add(sig, 96)))\n\n\n\n            // Alternative solution:\n\n            // 'byte' is not working due to the Solidity parser, so lets\n\n            // use the second best option, 'and'\n\n            // v := and(mload(add(sig, 65)), 255)\n\n        }\n\n\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n\n        // to match the YP range of [27, 28]\n\n        //\n\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n\n        if (v < 27)\n\n          v += 27;\n\n\n\n        if (v != 27 && v != 28)\n\n            return (false, 0);\n\n\n\n        return safer_ecrecover(hash, v, r, s);\n\n    }\n\n\n\n    function safeMemoryCleaner() internal pure {\n\n        assembly {\n\n            let fmem := mload(0x40)\n\n            codecopy(fmem, codesize, sub(msize, fmem))\n\n        }\n\n    }\n\n\n",
          "message": "Contract 'usingOraclize' (oraclizeAPI_0.4.25.sol#289-1236) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 322,
          "vulnerability_to_line": 325,
          "vulnerability_code": "    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n\n      return oraclize_setNetwork();\n\n      networkID; // silence the warning and remain backwards compatible\n",
          "message": "Function 'usingOraclize.oraclize_setNetwork' (oraclizeAPI_0.4.25.sol#322-325) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 326,
          "vulnerability_to_line": 360,
          "vulnerability_code": "    function oraclize_setNetwork() internal returns(bool){\n\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n\n            oraclize_setNetworkName(\"eth_mainnet\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n\n            oraclize_setNetworkName(\"eth_ropsten3\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n\n            oraclize_setNetworkName(\"eth_kovan\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n\n            oraclize_setNetworkName(\"eth_rinkeby\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n\n            return true;\n\n        }\n\n        return false;\n",
          "message": "Function 'usingOraclize.oraclize_setNetwork' (oraclizeAPI_0.4.25.sol#326-360) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": 364,
          "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n\n        __callback(myid, result, new bytes(0));\n",
          "message": "Function 'usingOraclize.__callback' (oraclizeAPI_0.4.25.sol#362-364) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": 372,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n      return;\n\n      // Following should never be reached with a preceding return, however\n\n      // this is just a placeholder function, ideally meant to be defined in\n\n      // child contract when proofs are used\n\n      myid; result; proof; // Silence compiler warnings\n\n      oraclize = OraclizeI(0); // Additional compiler silence about making function pure/view. \n",
          "message": "Function 'usingOraclize.__callback' (oraclizeAPI_0.4.25.sol#365-372) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": 376,
          "vulnerability_code": "    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource);\n",
          "message": "Function 'usingOraclize.oraclize_getPrice' (oraclizeAPI_0.4.25.sol#374-376) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": 380,
          "vulnerability_code": "    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_getPrice' (oraclizeAPI_0.4.25.sol#378-380) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": 386,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(0, datasource, arg);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#382-386) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": 391,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#387-391) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": 396,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#392-396) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": 401,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#397-401) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": 406,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#402-406) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": 411,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#407-411) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": 416,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#412-416) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": 421,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#417-421) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": 427,
          "vulnerability_code": "    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#422-427) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": 433,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#428-433) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": 439,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#434-439) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": 445,
          "vulnerability_code": "    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#440-445) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": 450,
          "vulnerability_code": "    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#446-450) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": 455,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#451-455) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": 460,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#456-460) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": 465,
          "vulnerability_code": "    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#461-465) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": 472,
          "vulnerability_code": "    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#467-472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": 478,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#473-478) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": 484,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#479-484) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": 490,
          "vulnerability_code": "    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#485-490) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": 497,
          "vulnerability_code": "    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#491-497) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": 504,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#498-504) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": 511,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#505-511) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": 518,
          "vulnerability_code": "    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#512-518) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": 527,
          "vulnerability_code": "    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#520-527) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": 535,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#528-535) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": 543,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#536-543) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": 551,
          "vulnerability_code": "    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#544-551) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": 560,
          "vulnerability_code": "    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#552-560) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": 569,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#561-569) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": 578,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#570-578) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": 587,
          "vulnerability_code": "    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#579-587) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": 593,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#588-593) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": 599,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#594-599) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": 605,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#600-605) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": 611,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#606-611) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": 616,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#612-616) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": 621,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#617-621) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": 626,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#622-626) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": 631,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#627-631) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": 638,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#633-638) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": 644,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#639-644) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": 650,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#645-650) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": 656,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#651-656) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": 663,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#657-663) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": 670,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#664-670) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": 677,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#671-677) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": 684,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#678-684) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 686,
          "vulnerability_to_line": 693,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#686-693) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": 701,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#694-701) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": 709,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#702-709) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": 717,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#710-717) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": 726,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#718-726) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": 735,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#727-735) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": 744,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#736-744) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 745,
          "vulnerability_to_line": 753,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
          "message": "Function 'usingOraclize.oraclize_query' (oraclizeAPI_0.4.25.sol#745-753) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 755,
          "vulnerability_to_line": 757,
          "vulnerability_code": "    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n\n        return oraclize.cbAddress();\n",
          "message": "Function 'usingOraclize.oraclize_cbAddress' (oraclizeAPI_0.4.25.sol#755-757) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 758,
          "vulnerability_to_line": 760,
          "vulnerability_code": "    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n\n        return oraclize.setProofType(proofP);\n",
          "message": "Function 'usingOraclize.oraclize_setProof' (oraclizeAPI_0.4.25.sol#758-760) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 761,
          "vulnerability_to_line": 763,
          "vulnerability_code": "    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n\n        return oraclize.setCustomGasPrice(gasPrice);\n",
          "message": "Function 'usingOraclize.oraclize_setCustomGasPrice' (oraclizeAPI_0.4.25.sol#761-763) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 765,
          "vulnerability_to_line": 767,
          "vulnerability_code": "    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n\n        return oraclize.randomDS_getSessionPubKeyHash();\n",
          "message": "Function 'usingOraclize.oraclize_randomDS_getSessionPubKeyHash' (oraclizeAPI_0.4.25.sol#765-767) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseAddr(string _a) internal pure returns (address){\n",
          "message": "Parameter '_a' of usingOraclize.parseAddr (oraclizeAPI_0.4.25.sol#775) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
          "message": "Parameter '_a' of usingOraclize.strCompare (oraclizeAPI_0.4.25.sol#795) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
          "message": "Parameter '_b' of usingOraclize.strCompare (oraclizeAPI_0.4.25.sol#795) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
          "message": "Parameter '_haystack' of usingOraclize.indexOf (oraclizeAPI_0.4.25.sol#813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
          "message": "Parameter '_needle' of usingOraclize.indexOf (oraclizeAPI_0.4.25.sol#813) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": "Parameter '_a' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#840) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": "Parameter '_b' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#840) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": "Parameter '_c' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#840) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": "Parameter '_d' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#840) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": "Parameter '_e' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#840) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": "Parameter '_a' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#857) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": "Parameter '_b' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#857) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": "Parameter '_c' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#857) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": "Parameter '_d' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#857) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": "Parameter '_a' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#861) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": "Parameter '_b' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#861) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": "Parameter '_c' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#861) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
          "message": "Parameter '_a' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#865) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
          "message": "Parameter '_b' of usingOraclize.strConcat (oraclizeAPI_0.4.25.sol#865) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a) internal pure returns (uint) {\n",
          "message": "Parameter '_a' of usingOraclize.parseInt (oraclizeAPI_0.4.25.sol#870) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
          "message": "Parameter '_a' of usingOraclize.parseInt (oraclizeAPI_0.4.25.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
          "message": "Parameter '_b' of usingOraclize.parseInt (oraclizeAPI_0.4.25.sol#875) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 936,
          "vulnerability_to_line": 938,
          "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n\n        oraclize_network_name = _network_name;\n",
          "message": "Function 'usingOraclize.oraclize_setNetworkName' (oraclizeAPI_0.4.25.sol#936-938) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 936,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n",
          "message": "Parameter '_network_name' of usingOraclize.oraclize_setNetworkName (oraclizeAPI_0.4.25.sol#936) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 940,
          "vulnerability_to_line": 942,
          "vulnerability_code": "    function oraclize_getNetworkName() internal view returns (string) {\n\n        return oraclize_network_name;\n",
          "message": "Function 'usingOraclize.oraclize_getNetworkName' (oraclizeAPI_0.4.25.sol#940-942) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": 990,
          "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10;\n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            // the following variables can be relaxed\n\n            // check relaxed random contract under ethereum-examples repo\n\n            // for an idea on how to override and replace comit hash vars\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly {\n\n            mstore(add(delay, 0x20), _delay)\n\n        }\n\n\n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n\n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n\n\n        oraclize_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n\n        return queryId;\n",
          "message": "Function 'usingOraclize.oraclize_newRandomDSQuery' (oraclizeAPI_0.4.25.sol#944-990) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n",
          "message": "Parameter '_delay' of usingOraclize.oraclize_newRandomDSQuery (oraclizeAPI_0.4.25.sol#944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n",
          "message": "Parameter '_nbytes' of usingOraclize.oraclize_newRandomDSQuery (oraclizeAPI_0.4.25.sol#944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 944,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n",
          "message": "Parameter '_customGasLimit' of usingOraclize.oraclize_newRandomDSQuery (oraclizeAPI_0.4.25.sol#944) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 992,
          "vulnerability_to_line": 994,
          "vulnerability_code": "    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n\n        oraclize_randomDS_args[queryId] = commitment;\n",
          "message": "Function 'usingOraclize.oraclize_randomDS_setCommitment' (oraclizeAPI_0.4.25.sol#992-994) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": 1060,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n\n        bool sigok;\n\n\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n\n\n        bytes memory appkey1_pubkey = new bytes(64);\n\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n\n\n        bytes memory tosign2 = new bytes(1+65+32);\n\n        tosign2[0] = byte(1); //role\n\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n\n\n        if (sigok == false) return false;\n\n\n\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n\n\n        bytes memory tosign3 = new bytes(1+65);\n\n        tosign3[0] = 0xFE;\n\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n\n\n        return sigok;\n",
          "message": "Function 'usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity' (oraclizeAPI_0.4.25.sol#1027-1060) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": 1080,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        if (proofVerified == false) return 2;\n\n\n\n        return 0;\n",
          "message": "Function 'usingOraclize.oraclize_randomDS_proofVerify__returnCode' (oraclizeAPI_0.4.25.sol#1072-1080) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
          "message": "Parameter '_queryId' of usingOraclize.oraclize_randomDS_proofVerify__returnCode (oraclizeAPI_0.4.25.sol#1072) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
          "message": "Parameter '_result' of usingOraclize.oraclize_randomDS_proofVerify__returnCode (oraclizeAPI_0.4.25.sol#1072) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
          "message": "Parameter '_proof' of usingOraclize.oraclize_randomDS_proofVerify__returnCode (oraclizeAPI_0.4.25.sol#1072) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n",
          "message": "Parameter 'n_random_bytes' of usingOraclize.matchBytes32Prefix (oraclizeAPI_0.4.25.sol#1082) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": 1134,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n\n        bytes memory keyhash = new bytes(32);\n\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(context_name, queryId)))))) return false;\n\n\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n\n        // This is to verify that the computed args match with the ones specified in the query.\n\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n\n\n        bytes memory sessionPubkey = new bytes(64);\n\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n\n        if (oraclize_randomDS_args[queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))){ //unonce, nbytes and sessionKeyHash match\n\n            delete oraclize_randomDS_args[queryId];\n\n        } else return false;\n\n\n\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n\n        bytes memory tosign1 = new bytes(32+8+1+32);\n\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n\n        }\n\n\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n",
          "message": "Function 'usingOraclize.oraclize_randomDS_proofVerify__main' (oraclizeAPI_0.4.25.sol#1094-1134) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
          "message": "Parameter 'context_name' of usingOraclize.oraclize_randomDS_proofVerify__main (oraclizeAPI_0.4.25.sol#1094) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": 1186,
          "vulnerability_code": "    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n\n        // We do our own memory management here. Solidity uses memory offset\n\n        // 0x40 to store the current end of memory. We write past it (as\n\n        // writes are memory extensions), but don't update the offset so\n\n        // Solidity will reuse it. The memory used here is only needed for\n\n        // this context.\n\n\n\n        // FIXME: inline assembly can't access return values\n\n        bool ret;\n\n        address addr;\n\n\n\n        assembly {\n\n            let size := mload(0x40)\n\n            mstore(size, hash)\n\n            mstore(add(size, 32), v)\n\n            mstore(add(size, 64), r)\n\n            mstore(add(size, 96), s)\n\n\n\n            // NOTE: we can reuse the request memory because we deal with\n\n            //       the return code\n\n            ret := call(3000, 1, 0, size, 128, size, 32)\n\n            addr := mload(size)\n\n        }\n\n\n\n        return (ret, addr);\n",
          "message": "Function 'usingOraclize.safer_ecrecover' (oraclizeAPI_0.4.25.sol#1161-1186) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant day = 60*60*24;\n",
          "message": "Constant 'usingOraclize.day' (oraclizeAPI_0.4.25.sol#290) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant week = 60*60*24*7;\n",
          "message": "Constant 'usingOraclize.week' (oraclizeAPI_0.4.25.sol#291) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant month = 60*60*24*30;\n",
          "message": "Constant 'usingOraclize.month' (oraclizeAPI_0.4.25.sol#292) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_NONE = 0x00;\n",
          "message": "Constant 'usingOraclize.proofType_NONE' (oraclizeAPI_0.4.25.sol#293) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_TLSNotary = 0x10;\n",
          "message": "Constant 'usingOraclize.proofType_TLSNotary' (oraclizeAPI_0.4.25.sol#294) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": "Constant 'usingOraclize.proofType_Ledger' (oraclizeAPI_0.4.25.sol#295) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Android = 0x40;\n",
          "message": "Constant 'usingOraclize.proofType_Android' (oraclizeAPI_0.4.25.sol#296) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Native = 0xF0;\n",
          "message": "Constant 'usingOraclize.proofType_Native' (oraclizeAPI_0.4.25.sol#297) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
          "message": "Constant 'usingOraclize.proofStorage_IPFS' (oraclizeAPI_0.4.25.sol#298) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_auto = 0;\n",
          "message": "Constant 'usingOraclize.networkID_auto' (oraclizeAPI_0.4.25.sol#299) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_mainnet = 1;\n",
          "message": "Constant 'usingOraclize.networkID_mainnet' (oraclizeAPI_0.4.25.sol#300) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_testnet = 2;\n",
          "message": "Constant 'usingOraclize.networkID_testnet' (oraclizeAPI_0.4.25.sol#301) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_morden = 2;\n",
          "message": "Constant 'usingOraclize.networkID_morden' (oraclizeAPI_0.4.25.sol#302) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_consensys = 161;\n",
          "message": "Constant 'usingOraclize.networkID_consensys' (oraclizeAPI_0.4.25.sol#303) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OraclizeAddrResolverI OAR;\n",
          "message": "Variable 'usingOraclize.OAR' (oraclizeAPI_0.4.25.sol#305) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string oraclize_network_name;\n",
          "message": "Variable 'usingOraclize.oraclize_network_name' (oraclizeAPI_0.4.25.sol#935) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n",
          "message": "Variable 'usingOraclize.oraclize_randomDS_args' (oraclizeAPI_0.4.25.sol#996) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n",
          "message": "Variable 'usingOraclize.oraclize_randomDS_sessionKeysHashVerified' (oraclizeAPI_0.4.25.sol#997) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 1062,
          "vulnerability_to_line": 1070,
          "vulnerability_code": "    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        require(proofVerified);\n\n\n\n        _;\n",
          "message": "Modifier 'usingOraclize.oraclize_randomDS_proofVerify' (oraclizeAPI_0.4.25.sol#1062-1070) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant day = 60*60*24;\n",
          "message": "usingOraclize.day (oraclizeAPI_0.4.25.sol#290) is never used in usingOraclize\nusingOraclize.week (oraclizeAPI_0.4.25.sol#291) is never used in usingOraclize\nusingOraclize.month (oraclizeAPI_0.4.25.sol#292) is never used in usingOraclize\nusingOraclize.proofType_NONE (oraclizeAPI_0.4.25.sol#293) is never used in usingOraclize\nusingOraclize.proofType_TLSNotary (oraclizeAPI_0.4.25.sol#294) is never used in usingOraclize\nusingOraclize.proofType_Ledger (oraclizeAPI_0.4.25.sol#295) is never used in usingOraclize\nusingOraclize.proofType_Android (oraclizeAPI_0.4.25.sol#296) is never used in usingOraclize\nusingOraclize.proofType_Native (oraclizeAPI_0.4.25.sol#297) is never used in usingOraclize\nusingOraclize.proofStorage_IPFS (oraclizeAPI_0.4.25.sol#298) is never used in usingOraclize\nusingOraclize.networkID_mainnet (oraclizeAPI_0.4.25.sol#300) is never used in usingOraclize\nusingOraclize.networkID_testnet (oraclizeAPI_0.4.25.sol#301) is never used in usingOraclize\nusingOraclize.networkID_morden (oraclizeAPI_0.4.25.sol#302) is never used in usingOraclize\nusingOraclize.networkID_consensys (oraclizeAPI_0.4.25.sol#303) is never used in usingOraclize\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 327,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 328,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 332,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 333,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 337,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 338,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 342,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 347,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 348,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 351,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 352,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 355,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 356,
          "vulnerability_to_line": null,
          "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 231,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if(value <= 0xFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 234,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if(value <= 0xFFFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 237,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if(value <= 0xFFFFFFFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 240,
          "vulnerability_to_line": null,
          "vulnerability_code": "        } else if(value <= 0xFFFFFFFFFFFFFFFF) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_NONE = 0x00;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_TLSNotary = 0x10;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Android = 0x40;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Native = 0xF0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1007,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint offset = 4+(uint(dersig[3]) - 0x20);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1011,
          "vulnerability_to_line": null,
          "vulnerability_code": "        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 1051,
          "vulnerability_to_line": null,
          "vulnerability_code": "        tosign3[0] = 0xFE;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCodeSize(address _addr) view internal returns(uint _size) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 800,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < minLength; i ++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 823,
          "vulnerability_to_line": null,
          "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 849,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 850,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 851,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 852,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 853,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 879,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 916,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 928,
          "vulnerability_to_line": null,
          "vulnerability_code": "        for (uint i = 0; i < arr.length; i++) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 828,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
          "message": null
        },
        {
          "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
          "vulnerability_from_line": 1147,
          "vulnerability_to_line": null,
          "vulnerability_code": "        while (i < (32 + fromOffset + length)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_LOCKED_MONEY",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "contract OraclizeI {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity >=0.4.22;// Incompatible compiler version... please select one stated within pragma solidity or use different oraclizeAPI version\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 220,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_INT = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 221,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 222,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_BYTES = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 223,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_STRING = 3;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 224,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_MAP = 5;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 226,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function init(buffer memory buf, uint _capacity) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function append(buffer memory buf, uint8 data) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
          "vulnerability_from_line": 1229,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safeMemoryCleaner() internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
          "vulnerability_from_line": 769,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getCodeSize(address _addr) view internal returns(uint _size) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1161,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UNCHECKED_CALL",
          "vulnerability_from_line": 363,
          "vulnerability_to_line": null,
          "vulnerability_code": "        __callback(myid, result, new bytes(0));\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(string _datasource) public returns (uint _dsprice);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 124,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 262,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 267,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 365,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 374,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 382,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 387,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 392,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 397,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 402,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 407,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 412,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 417,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 422,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 428,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 434,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 446,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 451,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 456,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 461,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 467,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 473,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 485,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 491,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 505,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 512,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 520,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 528,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 536,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 552,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 561,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 570,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 579,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 588,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 594,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 600,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 606,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 612,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 617,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 622,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 627,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 633,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 639,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 645,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 651,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 657,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 664,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 671,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 678,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 686,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 694,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 702,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 710,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 718,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 727,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 736,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 745,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 775,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseAddr(string _a) internal pure returns (address){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 795,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 813,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 840,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 857,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 861,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 865,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 870,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a) internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 875,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 893,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function uint2str(uint i) internal pure returns (string){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stra2cbor(string[] arr) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 911,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function stra2cbor(string[] arr) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 923,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 936,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 940,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_getNetworkName() internal view returns (string) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 999,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 999,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1027,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1072,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1082,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1094,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1137,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_UPGRADE_TO_050",
          "vulnerability_from_line": 1189,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 96,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 132,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 146,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 155,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 176,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 202,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 953,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 963,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 975,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1013,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1148,
          "vulnerability_to_line": null,
          "vulnerability_code": "            assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1172,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1200,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
          "vulnerability_from_line": 1230,
          "vulnerability_to_line": null,
          "vulnerability_code": "        assembly {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 290,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant day = 60*60*24;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 291,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant week = 60*60*24*7;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 292,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint constant month = 60*60*24*30;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 293,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_NONE = 0x00;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 294,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_TLSNotary = 0x10;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 295,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 296,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Android = 0x40;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 297,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofType_Native = 0xF0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 298,
          "vulnerability_to_line": null,
          "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 299,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_auto = 0;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 300,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_mainnet = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 301,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_testnet = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 302,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_morden = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 303,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint8 constant networkID_consensys = 161;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 305,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OraclizeAddrResolverI OAR;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 307,
          "vulnerability_to_line": null,
          "vulnerability_code": "    OraclizeI oraclize;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 935,
          "vulnerability_to_line": null,
          "vulnerability_code": "    string oraclize_network_name;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 996,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 997,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 362,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n",
          "message": null
        }
      ]
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}