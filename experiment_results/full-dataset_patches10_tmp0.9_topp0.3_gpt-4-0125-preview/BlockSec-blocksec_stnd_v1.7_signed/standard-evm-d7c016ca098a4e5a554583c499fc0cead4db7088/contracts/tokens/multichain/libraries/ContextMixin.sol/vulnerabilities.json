{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "constant-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function msgSender() internal view returns (address payable sender) {\n\n        if (msg.sender == address(this)) {\n\n            bytes memory array = msg.data;\n\n            uint256 index = msg.data.length;\n\n            assembly {\n\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n\n                sender := and(\n\n                    mload(add(array, index)),\n\n                    0xffffffffffffffffffffffffffffffffffffffff\n\n                )\n\n            }\n\n        } else {\n\n            sender = msg.sender;\n\n        }\n\n        return sender;\n",
          "message": "ContextMixin.msgSender (ContextMixin.sol#10-25) is declared view but contains assembly code\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function msgSender() internal view returns (address payable sender) {\n\n        if (msg.sender == address(this)) {\n\n            bytes memory array = msg.data;\n\n            uint256 index = msg.data.length;\n\n            assembly {\n\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n\n                sender := and(\n\n                    mload(add(array, index)),\n\n                    0xffffffffffffffffffffffffffffffffffffffff\n\n                )\n\n            }\n\n        } else {\n\n            sender = msg.sender;\n\n        }\n\n        return sender;\n",
          "message": "ContextMixin.msgSender uses assembly (ContextMixin.sol#10-25)\n\t- ContextMixin.sol#14-20\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity 0.6.12;\n",
          "message": "Detected issues with version pragma in ContextMixin.sol:\n\t- pragma solidity0.6.12 (ContextMixin.sol#7): it allows old versions\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function msgSender() internal view returns (address payable sender) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender == address(this)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender == address(this)) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "            bytes memory array = msg.data;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint256 index = msg.data.length;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "                sender := and(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "                sender := and(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    mload(add(array, index)),\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "                    mload(add(array, index)),\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "execution failed"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "input files do not contain any valid contracts"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}