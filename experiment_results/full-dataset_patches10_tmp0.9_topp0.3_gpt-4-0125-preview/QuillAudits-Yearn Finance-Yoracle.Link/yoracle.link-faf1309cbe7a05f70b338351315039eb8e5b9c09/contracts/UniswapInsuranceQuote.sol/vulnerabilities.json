{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 157,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint _temp = _amountIn;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _amountIn = _baseOut;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 159,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _baseOut = _temp;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 170,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint _temp = _amountIn;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 171,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _amountIn = _baseOut;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 172,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _baseOut = _temp;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 194,
          "vulnerability_to_line": null,
          "vulnerability_code": "            uint _temp = _amountIn;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 195,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _amountIn = _baseOut;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "non-optimal-variables-swap",
          "vulnerability_from_line": 196,
          "vulnerability_to_line": null,
          "vulnerability_code": "            _baseOut = _temp;\n",
          "message": "Consider swapping variables using `(_amountIn, _baseOut) = (_baseOut, _amountIn)` to save gas"
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-custom-error-not-require",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
        },
        {
          "name": "use-short-revert-string",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
          "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "solc-version",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity =0.6.6;\n",
          "message": "Detected issues with version pragma in UniswapInsuranceQuote.sol:\n\t- pragma solidity=0.6.6 (UniswapInsuranceQuote.sol#3): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 90,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function DOMAIN_SEPARATOR() external view returns (bytes32);\n",
          "message": "Function 'IUniswapV2Pair.DOMAIN_SEPARATOR' (UniswapInsuranceQuote.sol#90) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 91,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function PERMIT_TYPEHASH() external pure returns (bytes32);\n",
          "message": "Function 'IUniswapV2Pair.PERMIT_TYPEHASH' (UniswapInsuranceQuote.sol#91) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 108,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function MINIMUM_LIQUIDITY() external pure returns (uint);\n",
          "message": "Function 'IUniswapV2Pair.MINIMUM_LIQUIDITY' (UniswapInsuranceQuote.sol#108) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initialize(address, address) external;\n",
          "message": "Parameter '' of IUniswapV2Pair.initialize (UniswapInsuranceQuote.sol#123) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 123,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function initialize(address, address) external;\n",
          "message": "Parameter '_scope_0' of IUniswapV2Pair.initialize (UniswapInsuranceQuote.sol#123) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    UniswapOracleProxy constant ORACLE = UniswapOracleProxy(0x0b5A6b318c39b60e7D8462F888e7fbA89f75D02F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    UniswapRouter constant ROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 112,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 118,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function burn(address to) external returns (uint amount0, uint amount1);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function getReserves(IUniswapV2Pair pair, address tokenOut) public view returns (uint, uint) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
          "vulnerability_from_line": 177,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function calculateReturn(IUniswapV2Pair pair, uint amountIn) public view returns (uint balanceA, uint balanceB, address tokenA) {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 140,
          "vulnerability_to_line": null,
          "vulnerability_code": "    UniswapOracleProxy constant ORACLE = UniswapOracleProxy(0x0b5A6b318c39b60e7D8462F888e7fbA89f75D02F);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_VISIBILITY",
          "vulnerability_from_line": 141,
          "vulnerability_to_line": null,
          "vulnerability_code": "    UniswapRouter constant ROUTER = UniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (IndexError: pop from empty list)"
      ],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": false,
      "errors": [
        "Solc experienced a fatal error"
      ],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}