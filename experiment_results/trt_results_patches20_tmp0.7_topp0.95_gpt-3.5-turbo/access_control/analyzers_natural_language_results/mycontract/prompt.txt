/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.24;

contract MyContract {
    address owner;

    function MyContract() public {
        owner = msg.sender;
    }

    function sendTo(address receiver, uint amount) public {
        require(tx.origin == owner);
        receiver.transfer(amount);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: access_control at Line 10-13:
    function sendTo(address receiver, uint amount) public {
        require(tx.origin == owner);
        receiver.transfer(amount);
///  Message:MyContract.sendTo (mycontract.sol#10-13) sends eth to arbitrary user
///   	Dangerous calls:
///   	- receiver.transfer(amount) (mycontract.sol#12)
/// 1.2. Vulnerability: access_control at Line 11:
        require(tx.origin == owner);
///  Message:MyContract.sendTo uses tx.origin for authorization:
///   	- require(bool)(tx.origin == owner) (mycontract.sol#11)


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: access_control at Line 11:
        require(tx.origin == owner);
///  Message:Use of tx.origin as a part of authorization control.
///   The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
///   Classification: SWC-115



/// Repaired Solidity Smart Contract