/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.24;

contract Proxy {
    address owner;

    constructor() public {
        owner = msg.sender;
    }

    function forward(address callee, bytes _data) public {
        require(callee.delegatecall(_data));
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: access_control at Line 10-12:
    function forward(address callee, bytes _data) public {
        require(callee.delegatecall(_data));
///  Message:Proxy.forward (proxy.sol#10-12) uses delegatecall to a input-controlled function id
///   	require(bool)(callee.delegatecall(_data)) (proxy.sol#11)


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: access_control at Line 11:
        require(callee.delegatecall(_data));
///  Message:The contract delegates execution to another contract with a user-supplied address.
///   The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
///   Classification: SWC-112


/// 3. Maian Analysis Results
/// 3.1. Vulnerability: access_control



/// Repaired Solidity Smart Contract