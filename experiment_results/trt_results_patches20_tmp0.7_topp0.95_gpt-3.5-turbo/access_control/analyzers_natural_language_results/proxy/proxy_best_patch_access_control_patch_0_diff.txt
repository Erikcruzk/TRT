  pragma solidity ^0.4.24;
  
  contract Proxy {
      address owner;
  
      constructor() public {
          owner = msg.sender;
      }
  
      function forward(address callee, bytes _data) public {
-         require(callee.delegatecall(_data));
?                        --------
+         require(callee.call(_data));
      }
- }
+ } 
?  +
+ 
+ //The delegatecall function is a low-level function that is used to delegate the call from one contract to another contract. It is used when the called contract is not known in advance and its functionality is not known. However, it also allows the called contract to modify the state of the calling contract, which can be exploited by attackers. Therefore, it is recommended to use the call function instead of delegatecall, as it provides more control over the called contract. In this repaired contract, we have replaced delegatecall with call function to fix the vulnerability.