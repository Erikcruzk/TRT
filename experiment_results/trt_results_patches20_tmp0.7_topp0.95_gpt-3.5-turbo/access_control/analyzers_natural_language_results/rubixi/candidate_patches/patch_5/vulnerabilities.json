{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_23"
      ],
      "vulnerability_findings": [
        {
          "name": "calls-loop",
          "vulnerability_from_line": 63,
          "vulnerability_to_line": null,
          "vulnerability_code": "            participants[payoutOrder].etherAddress.transfer(payoutToSend);",
          "message": "Rubixi.addPayout has external calls inside a loop:\n\t- participants[payoutOrder].etherAddress.transfer(payoutToSend) (patch_5.sol#63)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() payable {\n        init();",
          "message": "Rubixi.fallback (patch_5.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": 87,
          "vulnerability_code": "    function collectFeesInEther(uint _amt) onlyowner {\n        _amt *= 1 ether;\n        if (_amt > collectedFees) {\n            collectAllFees();\n        }\n\n        require(collectedFees > 0);\n\n        creator.transfer(_amt);\n        collectedFees -= _amt;",
          "message": "Rubixi.collectFeesInEther (patch_5.sol#77-87) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": 95,
          "vulnerability_code": "    function collectPercentOfFees(uint _pcent) onlyowner {\n        require(collectedFees > 0 && _pcent <= 100);\n\n        uint feesToCollect = (collectedFees * _pcent) / 100;\n        creator.transfer(feesToCollect);\n        collectedFees -= feesToCollect;",
          "message": "Rubixi.collectPercentOfFees (patch_5.sol#89-95) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": 99,
          "vulnerability_code": "    function changeOwner(address _owner) onlyowner {\n        creator = _owner;",
          "message": "Rubixi.changeOwner (patch_5.sol#97-99) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": 105,
          "vulnerability_code": "    function changeMultiplier(uint _mult) onlyowner {\n        require(_mult <= 300 && _mult >= 120);\n\n        pyramidMultiplier = _mult;",
          "message": "Rubixi.changeMultiplier (patch_5.sol#101-105) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": 111,
          "vulnerability_code": "    function changeFeePercentage(uint _fee) onlyowner {\n        require(_fee <= 10);\n\n        feePercent = _fee;",
          "message": "Rubixi.changeFeePercentage (patch_5.sol#107-111) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 113,
          "vulnerability_to_line": 119,
          "vulnerability_code": "    function currentMultiplier()\n        constant\n        returns (uint multiplier, string info)\n    {\n        multiplier = pyramidMultiplier;\n        info = \"This multiplier applies to you as soon as transaction is received, may be lowered to hasten payouts or increased if payouts are fast enough. Due to no float or decimals, multiplier is x100 for a fractional multiplier e.g. 250 is actually a 2.5x multiplier. Capped at 3x max and 1.2x min.\";",
          "message": "Rubixi.currentMultiplier (patch_5.sol#113-119) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 121,
          "vulnerability_to_line": 124,
          "vulnerability_code": "    function currentFeePercentage() constant returns (uint fee, string info) {\n        fee = feePercent;\n        info = \"Shown in % form. Fee is halved(50%) for amounts equal or greater than 50 ethers. (Fee may change, but is capped to a maximum of 10%)\";",
          "message": "Rubixi.currentFeePercentage (patch_5.sol#121-124) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 126,
          "vulnerability_to_line": 132,
          "vulnerability_code": "    function currentPyramidBalanceApproximately()\n        constant\n        returns (uint pyramidBalance, string info)\n    {\n        pyramidBalance = balance / 1 ether;\n        info = \"All balance values are measured in Ethers, note that due to no decimal placing, these values show up as integers only, within the contract itself you will get the exact decimal value you are supposed to\";",
          "message": "Rubixi.currentPyramidBalanceApproximately (patch_5.sol#126-132) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 134,
          "vulnerability_to_line": 141,
          "vulnerability_code": "    function nextPayoutWhenPyramidBalanceTotalsApproximately()\n        constant\n        returns (uint balancePayout)\n    {\n        if (payoutOrder < participants.length) {\n            balancePayout = participants[payoutOrder].payout / 1 ether;\n        }",
          "message": "Rubixi.nextPayoutWhenPyramidBalanceTotalsApproximately (patch_5.sol#134-141) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 143,
          "vulnerability_to_line": 148,
          "vulnerability_code": "    function feesSeperateFromBalanceApproximately()\n        constant\n        returns (uint fees)\n    {\n        fees = collectedFees / 1 ether;",
          "message": "Rubixi.feesSeperateFromBalanceApproximately (patch_5.sol#143-148) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 150,
          "vulnerability_to_line": 152,
          "vulnerability_code": "    function totalParticipants() constant returns (uint count) {\n        count = participants.length;",
          "message": "Rubixi.totalParticipants (patch_5.sol#150-152) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 154,
          "vulnerability_to_line": 159,
          "vulnerability_code": "    function numberOfParticipantsWaitingForPayout()\n        constant\n        returns (uint count)\n    {\n        count = participants.length - payoutOrder;",
          "message": "Rubixi.numberOfParticipantsWaitingForPayout (patch_5.sol#154-159) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 161,
          "vulnerability_to_line": 168,
          "vulnerability_code": "    function participantDetails(\n        uint orderInPyramid\n    ) constant returns (address Address, uint Payout) {\n        if (orderInPyramid < participants.length) {\n            Address = participants[orderInPyramid].etherAddress;\n            Payout = participants[orderInPyramid].payout / 1 ether;\n        }",
          "message": "Rubixi.participantDetails (patch_5.sol#161-168) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.15 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function Rubixi() {\n        creator = msg.sender;",
          "message": "Function 'Rubixi.Rubixi' (patch_5.sol#12-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addPayout(uint _fee) private {",
          "message": "Parameter '_fee' of Rubixi.addPayout (patch_5.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 77,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collectFeesInEther(uint _amt) onlyowner {",
          "message": "Parameter '_amt' of Rubixi.collectFeesInEther (patch_5.sol#77) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 89,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collectPercentOfFees(uint _pcent) onlyowner {",
          "message": "Parameter '_pcent' of Rubixi.collectPercentOfFees (patch_5.sol#89) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 97,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _owner) onlyowner {",
          "message": "Parameter '_owner' of Rubixi.changeOwner (patch_5.sol#97) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 101,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeMultiplier(uint _mult) onlyowner {",
          "message": "Parameter '_mult' of Rubixi.changeMultiplier (patch_5.sol#101) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 107,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeFeePercentage(uint _fee) onlyowner {",
          "message": "Parameter '_fee' of Rubixi.changeFeePercentage (patch_5.sol#107) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 139,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balancePayout = participants[payoutOrder].payout / 1 ether;",
          "message": null
        },
        {
          "name": "Integer Underflow",
          "vulnerability_from_line": 158,
          "vulnerability_to_line": null,
          "vulnerability_code": "        count = participants.length - payoutOrder;",
          "message": null
        }
      ]
    },
    "manticore-0.3.7": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _amt *= 1 ether;",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "maian": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Not destructible (no self-destruct)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "DAOConstantGas",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "TODTransfer",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "TODAmount",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "TODReceiver",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}