/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.22;

contract Phishable {
    address public owner;

    constructor(address _owner) {
        owner = _owner;
    }

    function() public payable {}

    function withdrawAll(address _recipient) public {
        require(tx.origin == owner);
        _recipient.transfer(this.balance);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: access_control at Line 12-15:
    function withdrawAll(address _recipient) public {
        require(tx.origin == owner);
        _recipient.transfer(this.balance);
///  Message:Phishable.withdrawAll (phishable.sol#12-15) sends eth to arbitrary user
///   	Dangerous calls:
///   	- _recipient.transfer(this.balance) (phishable.sol#14)
/// 1.2. Vulnerability: access_control at Line 13:
        require(tx.origin == owner);
///  Message:Phishable.withdrawAll uses tx.origin for authorization:
///   	- require(bool)(tx.origin == owner) (phishable.sol#13)


/// 2. Mythril-0.23.15 Analysis Results
/// 2.1. Vulnerability: access_control at Line 13:
        require(tx.origin == owner);
///  Message:Use of tx.origin as a part of authorization control.
///   The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
///   Classification: SWC-115
/// 2.2. Vulnerability: access_control at Line 14:
        _recipient.transfer(this.balance);
///  Message:Any sender can withdraw Ether from the contract account.
///   Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
///   Classification: SWC-105



/// Repaired Solidity Smart Contract