{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        uint256 amount = calculatedFibNumber * 1 ether;\n        require(amount > 0);\n        calculatedFibNumber = 0;\n        msg.sender.transfer(amount);",
          "message": "FibonacciBalance.withdraw (patch_16.sol#18-26) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(amount) (patch_16.sol#25)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        uint256 amount = calculatedFibNumber * 1 ether;\n        require(amount > 0);\n        calculatedFibNumber = 0;\n        msg.sender.transfer(amount);",
          "message": "FibonacciBalance.withdraw (patch_16.sol#18-26) uses delegatecall to a input-controlled function id\n\trequire(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) (patch_16.sol#21)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "FibonacciBalance.fallback (patch_16.sol#28-30) uses delegatecall to a input-controlled function id\n\trequire(bool)(fibonacciLibrary.delegatecall(msg.data)) (patch_16.sol#29)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        uint256 amount = calculatedFibNumber * 1 ether;\n        require(amount > 0);\n        calculatedFibNumber = 0;\n        msg.sender.transfer(amount);",
          "message": "Reentrancy in FibonacciBalance.withdraw (patch_16.sol#18-26):\n\tExternal calls:\n\t- require(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) (patch_16.sol#21)\n\tState variables written after the call(s):\n\t- calculatedFibNumber (patch_16.sol#24)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public start = 3;",
          "message": "FibonacciBalance.start should be constant (patch_16.sol#8)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        uint256 amount = calculatedFibNumber * 1 ether;\n        require(amount > 0);\n        calculatedFibNumber = 0;\n        msg.sender.transfer(amount);",
          "message": "FibonacciBalance.withdraw (patch_16.sol#18-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "FibonacciBalance.fallback (patch_16.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function setStart(uint _start) public {\n        start = _start;",
          "message": "FibonacciLib.setStart (patch_16.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function setFibonacci(uint n) public {\n        calculatedFibNumber = fibonacci(n);",
          "message": "FibonacciLib.setFibonacci (patch_16.sol#41-43) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        uint256 amount = calculatedFibNumber * 1 ether;\n        require(amount > 0);\n        calculatedFibNumber = 0;\n        msg.sender.transfer(amount);",
          "message": "Low level call in FibonacciBalance.withdraw (patch_16.sol#18-26):\n\t-require(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) patch_16.sol#21\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "Low level call in FibonacciBalance.fallback (patch_16.sol#28-30):\n\t-require(bool)(fibonacciLibrary.delegatecall(msg.data)) patch_16.sol#29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _fibonacciLibrary) public payable {",
          "message": "Parameter '_fibonacciLibrary' of FibonacciBalance. (patch_16.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant fibSig = bytes4(keccak256(\"setFibonacci(uint256)\"));",
          "message": "Constant 'FibonacciBalance.fibSig' (patch_16.sol#11) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStart(uint _start) public {",
          "message": "Parameter '_start' of FibonacciLib.setStart (patch_16.sol#37) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "manticore-0.3.7": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Delegatecall to user-supplied address (SWC 112)",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "The contract delegates execution to another contract with a user-supplied address.\nThe smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.\nClassification: SWC-112"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (n == 1) return start + 1;",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else return fibonacci(n - 1) + fibonacci(n - 2);",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "maian": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Not destructible (no self-destruct)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether leak (no send)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether lock (Ether refused)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Not destructible (no self-destruct)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether leak (no send)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether lock (Ether refused)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "TODAmount",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}