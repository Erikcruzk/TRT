{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        require(msg.sender.send(calculatedFibNumber * 1 ether), \"Transfer failed\");",
          "message": "FibonacciBalance.withdraw (patch_8.sol#17-22) sends eth to arbitrary user\n\tDangerous calls:\n\t- require(bool,string)(msg.sender.send(calculatedFibNumber * 1000000000000000000),Transfer failed) (patch_8.sol#21)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        require(msg.sender.send(calculatedFibNumber * 1 ether), \"Transfer failed\");",
          "message": "FibonacciBalance.withdraw (patch_8.sol#17-22) uses delegatecall to a input-controlled function id\n\trequire(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) (patch_8.sol#20)\n"
        },
        {
          "name": "controlled-delegatecall",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "FibonacciBalance.fallback (patch_8.sol#24-26) uses delegatecall to a input-controlled function id\n\trequire(bool)(fibonacciLibrary.delegatecall(msg.data)) (patch_8.sol#25)\n"
        },
        {
          "name": "uninitialized-state",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public calculatedFibNumber;",
          "message": "FibonacciBalance.calculatedFibNumber (patch_8.sol#6) is never initialized. It is used in:\n\t- withdraw (patch_8.sol#17-22)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public calculatedFibNumber;",
          "message": "FibonacciBalance.calculatedFibNumber should be constant (patch_8.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        require(msg.sender.send(calculatedFibNumber * 1 ether), \"Transfer failed\");",
          "message": "FibonacciBalance.withdraw (patch_8.sol#17-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "FibonacciBalance.fallback (patch_8.sol#24-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function setStart(uint _start) public {\n        start = _start;",
          "message": "FibonacciLib.setStart (patch_8.sol#33-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function setFibonacci(uint n) public {\n        calculatedFibNumber = fibonacci(n);",
          "message": "FibonacciLib.setFibonacci (patch_8.sol#37-39) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function withdraw() public {\n        withdrawalCounter += 1;\n\n        require(fibonacciLibrary.delegatecall(fibSig, withdrawalCounter));\n        require(msg.sender.send(calculatedFibNumber * 1 ether), \"Transfer failed\");",
          "message": "Low level call in FibonacciBalance.withdraw (patch_8.sol#17-22):\n\t-require(bool)(fibonacciLibrary.delegatecall(fibSig,withdrawalCounter)) patch_8.sol#20\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function() public {\n        require(fibonacciLibrary.delegatecall(msg.data));",
          "message": "Low level call in FibonacciBalance.fallback (patch_8.sol#24-26):\n\t-require(bool)(fibonacciLibrary.delegatecall(msg.data)) patch_8.sol#25\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _fibonacciLibrary) public payable {",
          "message": "Parameter '_fibonacciLibrary' of FibonacciBalance. (patch_8.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    bytes4 constant fibSig = bytes4(keccak256(\"setFibonacci(uint256)\"));",
          "message": "Constant 'FibonacciBalance.fibSig' (patch_8.sol#10) is not in UPPER_CASE_WITH_UNDERSCORES\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setStart(uint _start) public {",
          "message": "Parameter '_start' of FibonacciLib.setStart (patch_8.sol#33) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "manticore-0.3.7": {
      "successfull_analysis": false,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": []
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else if (n == 1) return start + 1;",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        },
        {
          "name": "Integer Arithmetic Bugs (SWC 101)",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        else return fibonacci(n - 1) + fibonacci(n - 2);",
          "message": "The arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \nClassification: SWC-101"
        }
      ]
    },
    "maian": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Not destructible (no self-destruct)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether leak (no send)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether lock (Ether refused)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "Not destructible (no self-destruct)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether leak (no send)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "No Ether lock (Ether refused)",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}