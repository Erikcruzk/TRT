  pragma solidity ^0.4.18;
  
  contract Token {
-     mapping(address => uint) balances;
+     mapping(address => uint256) balances;
?                            +++
-     uint public totalSupply;
+     uint256 public totalSupply;
?         +++
  
-     function Token(uint _initialSupply) {
+     constructor(uint256 _initialSupply) public {
          balances[msg.sender] = totalSupply = _initialSupply;
      }
  
-     function transfer(address _to, uint _value) public returns (bool) {
+     function transfer(address _to, uint256 _value) public returns (bool) {
?                                        +++
-         require(balances[msg.sender] - _value >= 0);
+         require(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]);
  
          balances[msg.sender] -= _value;
          balances[_to] += _value;
          return true;
      }
  
-     function balanceOf(address _owner) public constant returns (uint balance) {
+     function balanceOf(address _owner) public constant returns (uint256 balance) {
?                                                                     +++
          return balances[_owner];
      }
- }
+ }