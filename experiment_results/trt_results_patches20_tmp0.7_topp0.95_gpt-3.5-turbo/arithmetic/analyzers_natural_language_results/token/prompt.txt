/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.18;

contract Token {
    mapping(address => uint) balances;
    uint public totalSupply;

    function Token(uint _initialSupply) {
        balances[msg.sender] = totalSupply = _initialSupply;
    }

    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
    }

    function balanceOf(address _owner) public constant returns (uint balance) {
        return balances[_owner];
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Osiris Analysis Results
/// 1.1. Vulnerability: arithmetic at Line 15:
        balances[_to] += _value;
/// 1.2. Vulnerability: arithmetic at Line 12:
        require(balances[msg.sender] - _value >= 0);
/// 1.3. Vulnerability: arithmetic at Line 14:
        balances[msg.sender] -= _value;


/// 2. Oyente Analysis Results
/// 2.1. Vulnerability: arithmetic at Line 15:
        balances[_to] += _value;
/// 2.2. Vulnerability: arithmetic at Line 14:
        balances[msg.sender] -= _value;


/// 3. Smartcheck Analysis Results
/// 3.1. Vulnerability: arithmetic at Line 12:
        require(balances[msg.sender] - _value >= 0);


/// 4. Mythril-0.23.15 Analysis Results
/// 4.1. Vulnerability: arithmetic at Line 12:
        require(balances[msg.sender] - _value >= 0);
///  Message:The arithmetic operator can underflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101
/// 4.2. Vulnerability: arithmetic at Line 14:
        balances[msg.sender] -= _value;
///  Message:The arithmetic operator can underflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101
/// 4.3. Vulnerability: arithmetic at Line 15:
        balances[_to] += _value;
///  Message:The arithmetic operator can overflow.
///   It is possible to cause an integer overflow or underflow in the arithmetic operation. 
///   Classification: SWC-101



/// Repaired Solidity Smart Contract