{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function getBalance(address u) constant returns (uint) {\n        return userBalance[u];",
          "message": "Reentrance.getBalance (patch_11.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function addToBalance() payable {\n        userBalance[msg.sender] += msg.value;",
          "message": "Reentrance.addToBalance (patch_11.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() {\n        require(!locked[msg.sender]); // Check if the user is already withdrawing\n        locked[msg.sender] = true; // Lock the user\n        uint balanceToWithdraw = userBalance[msg.sender]; // Store the balance to withdraw\n        userBalance[msg.sender] = 0; // Set user balance to 0 before external call\n        locked[msg.sender] = false; // Unlock the user\n        if (!(msg.sender.call.value(balanceToWithdraw)())) { // External call to send Ether\n            revert(); // Revert if the external call fails\n        }",
          "message": "Reentrance.withdrawBalance (patch_11.sol#15-24) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_11.sol:\n\t- pragma solidity^0.4.15 (patch_11.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() {\n        require(!locked[msg.sender]); // Check if the user is already withdrawing\n        locked[msg.sender] = true; // Lock the user\n        uint balanceToWithdraw = userBalance[msg.sender]; // Store the balance to withdraw\n        userBalance[msg.sender] = 0; // Set user balance to 0 before external call\n        locked[msg.sender] = false; // Unlock the user\n        if (!(msg.sender.call.value(balanceToWithdraw)())) { // External call to send Ether\n            revert(); // Revert if the external call fails\n        }",
          "message": "Low level call in Reentrance.withdrawBalance (patch_11.sol#15-24):\n\t-! (msg.sender.call.value(balanceToWithdraw)()) patch_11.sol#21-23\n"
        }
      ]
    },
    "manticore-0.3.7": {
      "successfull_analysis": false,
      "errors": [
        "exception (manticore.core.state.Concretize)",
        "exception (manticore.exceptions.ManticoreError: Forking on unfeasible constraint set)"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalance[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    },
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (!(msg.sender.call.value(balanceToWithdraw)())) { // External call to send Ether",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        }
      ]
    }
  }
}