{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "manticore-0.3.7": {
      "successfull_analysis": false,
      "errors": [
        "exception (manticore.core.state.Concretize)",
        "exception (manticore.exceptions.ManticoreError: Forking on unfeasible constraint set)"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 28,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount);\n        require(!locked[msg.sender]);\n        \n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        require(userBalances[msg.sender] > 0);\n        require(!locked[msg.sender]);\n        \n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true;\n\n        bool success = msg.sender.send(amountToWithdraw);\n        require(success);\n\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;\n    }",
          "message": "Reentrancy_cross_function (patch_0.sol#3-28) has incorrect ERC20 function interface(s):\n\t-transfer (patch_0.sol#7-13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount);\n        require(!locked[msg.sender]);\n        \n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;",
          "message": "Reentrancy_cross_function.transfer (patch_0.sol#7-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(userBalances[msg.sender] > 0);\n        require(!locked[msg.sender]);\n        \n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true;\n\n        bool success = msg.sender.send(amountToWithdraw);\n        require(success);\n\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;",
          "message": "Reentrancy_cross_function.withdrawBalance (patch_0.sol#15-27) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 28,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount);\n        require(!locked[msg.sender]);\n        \n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        require(userBalances[msg.sender] > 0);\n        require(!locked[msg.sender]);\n        \n        uint amountToWithdraw = userBalances[msg.sender];\n        locked[msg.sender] = true;\n\n        bool success = msg.sender.send(amountToWithdraw);\n        require(success);\n\n        userBalances[msg.sender] = 0;\n        locked[msg.sender] = false;\n    }",
          "message": "Contract 'Reentrancy_cross_function' (patch_0.sol#3-28) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        bool success = msg.sender.send(amountToWithdraw);",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAOConstantGas",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}