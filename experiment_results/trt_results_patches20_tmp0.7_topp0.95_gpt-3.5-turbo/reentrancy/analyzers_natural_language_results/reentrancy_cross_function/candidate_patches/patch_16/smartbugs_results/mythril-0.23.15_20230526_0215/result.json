{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 12,
            "contract": "Reentrancy_cross_function",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x2",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405234801561000f575f80fd5b506107108061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80635fd8c71014610038578063a9059cbb14610042575b5f80fd5b61004061005e565b005b61005c60048036038101906100579190610480565b6102c8565b005b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156100e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100df90610518565b60405180910390fd5b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f811161016a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016190610580565b60405180910390fd5b6001805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f3373ffffffffffffffffffffffffffffffffffffffff1682604051610224906105cb565b5f6040518083038185875af1925050503d805f811461025e576040519150601f19603f3d011682016040523d82523d5f602084013e610263565b606091505b5050905080610270575f80fd5b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033e90610629565b60405180910390fd5b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546103929190610674565b92505081905550805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546103e491906106a7565b925050819055505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61041c826103f3565b9050919050565b61042c81610412565b8114610436575f80fd5b50565b5f8135905061044781610423565b92915050565b5f819050919050565b61045f8161044d565b8114610469575f80fd5b50565b5f8135905061047a81610456565b92915050565b5f8060408385031215610496576104956103ef565b5b5f6104a385828601610439565b92505060206104b48582860161046c565b9150509250929050565b5f82825260208201905092915050565b7f5265656e7472616e742063616c6c2064657465637465640000000000000000005f82015250565b5f6105026017836104be565b915061050d826104ce565b602082019050919050565b5f6020820190508181035f83015261052f816104f6565b9050919050565b7f4e6f2062616c616e636520746f207769746864726177000000000000000000005f82015250565b5f61056a6016836104be565b915061057582610536565b602082019050919050565b5f6020820190508181035f8301526105978161055e565b9050919050565b5f81905092915050565b50565b5f6105b65f8361059e565b91506105c1826105a8565b5f82019050919050565b5f6105d5826105ab565b9150819050919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000005f82015250565b5f6106136014836104be565b915061061e826105df565b602082019050919050565b5f6020820190508181035f83015261064081610607565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61067e8261044d565b91506106898361044d565b92508282019050808211156106a1576106a0610647565b5b92915050565b5f6106b18261044d565b91506106bc8361044d565b92508282039050818111156106d4576106d3610647565b5b9291505056fea26469706673582212207760a23ddebda7a03c51a5a4d56412bb83abb6d15b7e602fa800230e1bc8cae164736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x1"
                    }
                ]
            },
            "filename": "experiment_results/trt_results_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/analyzers_natural_language_results/reentrancy_cross_function/candidate_patches/patch_16/patch_16.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
