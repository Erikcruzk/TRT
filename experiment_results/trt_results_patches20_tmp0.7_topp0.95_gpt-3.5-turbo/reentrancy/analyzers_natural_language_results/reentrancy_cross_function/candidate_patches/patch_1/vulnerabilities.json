{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "manticore-0.3.7": {
      "successfull_analysis": false,
      "errors": [
        "exception (manticore.core.state.Concretize)",
        "exception (manticore.exceptions.ManticoreError: Forking on unfeasible constraint set)"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_6"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Reentrancy attack detected\");\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0, \"No balance to withdraw\");\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(), \"Failed to send Ether\");\n\n        locked[msg.sender] = false;",
          "message": "Reentrancy in Reentrancy_cross_function.withdrawBalance (patch_1.sol#13-24):\n\tExternal calls:\n\t- require(bool,string)(msg.sender.call.value(amountToWithdraw)(),Failed to send Ether) (patch_1.sol#21)\n\tState variables written after the call(s):\n\t- locked (patch_1.sol#23)\n"
        },
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 25,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount, \"Insufficient balance\");\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Reentrancy attack detected\");\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0, \"No balance to withdraw\");\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(), \"Failed to send Ether\");\n\n        locked[msg.sender] = false;\n    }",
          "message": "Reentrancy_cross_function (patch_1.sol#3-25) has incorrect ERC20 function interface(s):\n\t-transfer (patch_1.sol#7-11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount, \"Insufficient balance\");\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;",
          "message": "Reentrancy_cross_function.transfer (patch_1.sol#7-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Reentrancy attack detected\");\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0, \"No balance to withdraw\");\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(), \"Failed to send Ether\");\n\n        locked[msg.sender] = false;",
          "message": "Reentrancy_cross_function.withdrawBalance (patch_1.sol#13-24) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Reentrancy attack detected\");\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0, \"No balance to withdraw\");\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(), \"Failed to send Ether\");\n\n        locked[msg.sender] = false;",
          "message": "Low level call in Reentrancy_cross_function.withdrawBalance (patch_1.sol#13-24):\n\t-require(bool,string)(msg.sender.call.value(amountToWithdraw)(),Failed to send Ether) patch_1.sol#21\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 25,
          "vulnerability_code": "contract Reentrancy_cross_function {\n    mapping(address => uint) private userBalances;\n    mapping(address => bool) private locked;\n\n    function transfer(address to, uint amount) public {\n        require(userBalances[msg.sender] >= amount, \"Insufficient balance\");\n        userBalances[to] += amount;\n        userBalances[msg.sender] -= amount;\n    }\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender], \"Reentrancy attack detected\");\n        uint amountToWithdraw = userBalances[msg.sender];\n        require(amountToWithdraw > 0, \"No balance to withdraw\");\n\n        locked[msg.sender] = true;\n        userBalances[msg.sender] = 0;\n\n        require(msg.sender.call.value(amountToWithdraw)(), \"Failed to send Ether\");\n\n        locked[msg.sender] = false;\n    }",
          "message": "Contract 'Reentrancy_cross_function' (patch_1.sol#3-25) is not in CapWords\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[to] += amount;",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        },
        {
          "name": "DAO",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}