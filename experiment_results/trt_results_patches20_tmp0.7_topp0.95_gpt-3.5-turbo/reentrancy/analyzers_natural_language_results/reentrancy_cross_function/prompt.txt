/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract Reentrancy_cross_function {
    mapping(address => uint) private userBalances;

    function transfer(address to, uint amount) {
        if (userBalances[msg.sender] >= amount) {
            userBalances[to] += amount;
            userBalances[msg.sender] -= amount;
        }
    }

    function withdrawBalance() public {
        uint amountToWithdraw = userBalances[msg.sender];

        (bool success, ) = msg.sender.call.value(amountToWithdraw)("");
        require(success);
        userBalances[msg.sender] = 0;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Oyente Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 16:
        (bool success, ) = msg.sender.call.value(amountToWithdraw)("");


/// 2. Slither Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 13-19:
    function withdrawBalance() public {
        uint amountToWithdraw = userBalances[msg.sender];

        (bool success, ) = msg.sender.call.value(amountToWithdraw)("");
        require(success);
        userBalances[msg.sender] = 0;
///  Message:Reentrancy in Reentrancy_cross_function.withdrawBalance (reentrancy_cross_function.sol#13-19):
///   	External calls:
///   	- (success) = msg.sender.call.value(amountToWithdraw)() (reentrancy_cross_function.sol#16)
///   	State variables written after the call(s):
///   	- userBalances (reentrancy_cross_function.sol#18)


/// 3. Securify Analysis Results
/// 3.1. Vulnerability: reentrancy


/// 4. Mythril-0.23.15 Analysis Results
/// 4.1. Vulnerability: reentrancy at Line 16:
        (bool success, ) = msg.sender.call.value(amountToWithdraw)("");
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107
/// 4.2. Vulnerability: reentrancy at Line 18:
        userBalances[msg.sender] = 0;
///  Message:Write to persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107



/// Repaired Solidity Smart Contract