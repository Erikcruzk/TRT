  pragma solidity ^0.4.19;
  
  contract DEP_BANK {
      mapping(address => uint256) public balances;
  
      uint public MinSum;
  
      LogFile Log;
  
-     bool intitalized;
?              -
+     bool initialized;
?            +
  
+     modifier onlyInitialized() {
+         require(initialized);
+         _;
+     }
+ 
-     function SetMinSum(uint _val) public {
+     function SetMinSum(uint _val) public onlyInitialized {
?                                          ++++++++++++++++
-         if (intitalized) throw;
          MinSum = _val;
      }
  
-     function SetLogFile(address _log) public {
+     function SetLogFile(address _log) public onlyInitialized {
?                                              ++++++++++++++++
-         if (intitalized) throw;
          Log = LogFile(_log);
      }
  
      function Initialized() public {
-         intitalized = true;
?             -
+         initialized = true;
?           +
      }
  
      function Deposit() public payable {
          balances[msg.sender] += msg.value;
          Log.AddMessage(msg.sender, msg.value, "Put");
      }
  
-     function Collect(uint _am) public payable {
+     function Collect(uint _am) public onlyInitialized payable {
?                                      ++++++++++++++++
-         if (balances[msg.sender] >= MinSum && balances[msg.sender] >= _am) {
?          ^^                                                               ^^
+         require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);
?         ++++ ^^                                                               ^
-             if (msg.sender.call.value(_am)()) {
-                 balances[msg.sender] -= _am;
? --------
+         balances[msg.sender] -= _am;
-                 Log.AddMessage(msg.sender, _am, "Collect");
? --------
+         Log.AddMessage(msg.sender, _am, "Collect");
+         msg.sender.transfer(_am);
-             }
-         }
      }
  
      function() public payable {
          Deposit();
      }
  }
  
  contract LogFile {
      struct Message {
          address Sender;
          string Data;
          uint Val;
          uint Time;
      }
  
      Message[] public History;
  
-     Message LastMsg;
- 
      function AddMessage(address _adr, uint _val, string _data) public {
-         LastMsg.Sender = _adr;
-         LastMsg.Time = now;
-         LastMsg.Val = _val;
-         LastMsg.Data = _data;
+         Message memory msgToAdd = Message({
+             Sender: _adr,
+             Data: _data,
+             Val: _val,
+             Time: now
+         });
-         History.push(LastMsg);
?                      ^^^^^
+         History.push(msgToAdd);
?                      ^  +++++
      }
- }
+ }