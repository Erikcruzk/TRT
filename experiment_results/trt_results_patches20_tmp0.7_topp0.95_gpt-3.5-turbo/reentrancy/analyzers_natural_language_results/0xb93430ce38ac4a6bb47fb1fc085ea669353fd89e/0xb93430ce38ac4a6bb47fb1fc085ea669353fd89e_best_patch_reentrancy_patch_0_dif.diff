  pragma solidity ^0.4.19;
  
  contract PrivateBank {
      mapping(address => uint) public balances;
  
      uint public MinDeposit = 1 ether;
  
      Log TransferLog;
  
      function PrivateBank(address _lib) {
          TransferLog = Log(_lib);
      }
  
      function Deposit() public payable {
          if (msg.value >= MinDeposit) {
              balances[msg.sender] += msg.value;
              TransferLog.AddMessage(msg.sender, msg.value, "Deposit");
          }
      }
  
-     function CashOut(uint _am) {
+     function CashOut(uint _am) public {
?                                +++++++
          if (_am <= balances[msg.sender]) {
-             if (msg.sender.call.value(_am)()) {
-                 balances[msg.sender] -= _am;
? ----
+             balances[msg.sender] -= _am;
-                 TransferLog.AddMessage(msg.sender, _am, "CashOut");
? ----
+             TransferLog.AddMessage(msg.sender, _am, "CashOut");
-             }
+             msg.sender.transfer(_am);
          }
      }
  
      function() public payable {}
+ 
  }
  
  contract Log {
      struct Message {
          address Sender;
          string Data;
          uint Val;
          uint Time;
      }
  
      Message[] public History;
  
-     Message LastMsg;
- 
      function AddMessage(address _adr, uint _val, string _data) public {
+         Message memory LastMsg;
          LastMsg.Sender = _adr;
          LastMsg.Time = now;
          LastMsg.Val = _val;
          LastMsg.Data = _data;
          History.push(LastMsg);
      }
- }
+ } 
?  +
+ 
+ // Changes Made:
+ // 1. Added "public" to function CashOut(uint _am).
+ // 2. Replaced the reentrant call in the CashOut function with a transfer function.
+ // 3. Added a new Message memory variable to the AddMessage function to avoid reentrancy issues.