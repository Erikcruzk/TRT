/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract PENNY_BY_PENNY {
    struct Holder {
        uint unlockTime;
        uint balance;
    }

    mapping(address => Holder) public Acc;

    uint public MinSum;

    LogFile Log;

    bool intitalized;

    function SetMinSum(uint _val) public {
        if (intitalized) throw;
        MinSum = _val;
    }

    function SetLogFile(address _log) public {
        if (intitalized) throw;
        Log = LogFile(_log);
    }

    function Initialized() public {
        intitalized = true;
    }

    function Put(uint _lockTime) public payable {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        if (now + _lockTime > acc.unlockTime) acc.unlockTime = now + _lockTime;
        Log.AddMessage(msg.sender, msg.value, "Put");
    }

    function Collect(uint _am) public payable {
        var acc = Acc[msg.sender];
        if (
            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
        ) {
            if (msg.sender.call.value(_am)()) {
                acc.balance -= _am;
                Log.AddMessage(msg.sender, _am, "Collect");
            }
        }
    }

    function() public payable {
        Put(0);
    }
}

contract LogFile {
    struct Message {
        address Sender;
        string Data;
        uint Val;
        uint Time;
    }

    Message[] public History;

    Message LastMsg;

    function AddMessage(address _adr, uint _val, string _data) public {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Oyente Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 43:
            if (msg.sender.call.value(_am)()) {


/// 2. Slither Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 38-48:
    function Collect(uint _am) public payable {
        var acc = Acc[msg.sender];
        if (
            acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime
        ) {
            if (msg.sender.call.value(_am)()) {
                acc.balance -= _am;
                Log.AddMessage(msg.sender, _am, "Collect");
            }
        }
///  Message:Reentrancy in PENNY_BY_PENNY.Collect (0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#38-48):
///   	External calls:
///   	- msg.sender.call.value(_am)() (0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#43-46)
///   	State variables written after the call(s):
///   	- Acc (0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol#44)


/// 3. Securify Analysis Results
/// 3.1. Vulnerability: reentrancy


/// 4. Mythril-0.23.15 Analysis Results
/// 4.1. Vulnerability: reentrancy at Line 35:
        Log.AddMessage(msg.sender, msg.value, "Put");
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107
/// 4.2. Vulnerability: reentrancy at Line 43:
            if (msg.sender.call.value(_am)()) {
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107
/// 4.3. Vulnerability: reentrancy at Line 44:
                acc.balance -= _am;
///  Message:Read of persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107
/// 4.4. Vulnerability: reentrancy at Line 44:
                acc.balance -= _am;
///  Message:Write to persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107
/// 4.5. Vulnerability: reentrancy at Line 45:
                Log.AddMessage(msg.sender, _am, "Collect");
///  Message:Read of persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107
/// 4.6. Vulnerability: reentrancy at Line 45:
                Log.AddMessage(msg.sender, _am, "Collect");
///  Message:Write to persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107



/// Repaired Solidity Smart Contract