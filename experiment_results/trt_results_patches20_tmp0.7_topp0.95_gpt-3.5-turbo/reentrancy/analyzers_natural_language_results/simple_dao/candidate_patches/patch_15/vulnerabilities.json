{
  "smartbugs_completed": true,
  "analyzer_results": {
    "mythril-0.23.15": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Unprotected Ether Withdrawal (SWC 105)",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(amount);",
          "message": "Any sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\nClassification: SWC-105"
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function donate(address to) public payable {\n        credit[to] += msg.value;",
          "message": "SimpleDAO.donate (patch_15.sol#9-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function withdraw(uint amount) public {\n        require(!frozenAccount[msg.sender], \"Your account is frozen\");\n        require(credit[msg.sender] >= amount, \"Insufficient balance\");\n        credit[msg.sender] -= amount;\n        msg.sender.transfer(amount);",
          "message": "SimpleDAO.withdraw (patch_15.sol#13-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function queryCredit(address to) public view returns (uint) {\n        return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_15.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function freezeAccount(address target, bool freeze) public {\n        require(msg.sender == address(0x123), \"Only the contract owner can freeze accounts\");\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);",
          "message": "SimpleDAO.freezeAccount (patch_15.sol#24-28) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.26;",
          "message": "Detected issues with version pragma in patch_15.sol:\n\t- pragma solidity^0.4.26 (patch_15.sol#1): it allows old versions\n"
        }
      ]
    },
    "manticore-0.3.7": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Integer Overflow",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "        credit[to] += msg.value;",
          "message": null
        }
      ]
    },
    "securify": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "MissingInputValidation",
          "vulnerability_from_line": null,
          "vulnerability_to_line": null,
          "vulnerability_code": null,
          "message": null
        }
      ]
    }
  }
}