/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract ReentrancyDAO {
    mapping(address => uint) credit;
    uint balance;

    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;

            bool callResult = msg.sender.call.value(oCredit)();
            require(callResult);
            credit[msg.sender] = 0;
        }
    }

    function deposit() public payable {
        credit[msg.sender] += msg.value;
        balance += msg.value;
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Oyente Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 12:
            bool callResult = msg.sender.call.value(oCredit)();


/// 2. Slither Analysis Results
/// 2.1. Vulnerability: reentrancy at Line 7-16:
    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;

            bool callResult = msg.sender.call.value(oCredit)();
            require(callResult);
            credit[msg.sender] = 0;
        }
///  Message:Reentrancy in ReentrancyDAO.withdrawAll (reentrancy_dao.sol#7-16):
///   	External calls:
///   	- callResult = msg.sender.call.value(oCredit)() (reentrancy_dao.sol#12)
///   	State variables written after the call(s):
///   	- credit (reentrancy_dao.sol#14)


/// 3. Securify Analysis Results
/// 3.1. Vulnerability: reentrancy


/// 4. Mythril-0.23.15 Analysis Results
/// 4.1. Vulnerability: reentrancy at Line 12:
            bool callResult = msg.sender.call.value(oCredit)();
///  Message:A call to a user-supplied address is executed.
///   An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
///   Classification: SWC-107
/// 4.2. Vulnerability: reentrancy at Line 14:
            credit[msg.sender] = 0;
///  Message:Write to persistent state following external call
///   The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
///   Classification: SWC-107



/// Repaired Solidity Smart Contract