{
    "docker": {
        "command": null,
        "detach": true,
        "entrypoint": "'/sb/bin/do_solidity.sh' '/sb/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol' '/sb/bin'",
        "image": "smartbugs/security:usolc",
        "user": 0,
        "volumes": {
            "/tmp/tmpg5i64vv6": {
                "bind": "/sb",
                "mode": "rw"
            }
        }
    },
    "filename": "experiment_results/trt_results_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/analyzers_natural_language_results/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e/0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol",
    "platform": {
        "cpu": "AMD EPYC 7742 64-Core Processor",
        "python": "3.11.3.final.0 (64 bit)",
        "release": "5.4.0-146-generic",
        "smartbugs": "2.0.7",
        "system": "Linux",
        "version": "#163-Ubuntu SMP Fri Mar 17 18:26:02 UTC 2023"
    },
    "result": {
        "duration": 955.2667489051819,
        "exit_code": 0,
        "logs": null,
        "output": "result.tar",
        "start": 1685066423.1888707
    },
    "runid": "20230526_0156",
    "solc": "0.4.26",
    "tool": {
        "bin": "scripts",
        "command": null,
        "cpu_quota": null,
        "entrypoint": "'$BIN/do_solidity.sh' '$FILENAME' '$BIN'",
        "id": "securify",
        "image": "smartbugs/security:usolc",
        "info": "Securify uses formal verification, also relying on static analysis checks. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not.",
        "mem_limit": null,
        "mode": "solidity",
        "name": "Securify",
        "origin": "https://github.com/eth-sri/securify",
        "output": "/results/",
        "parser": "parser.py",
        "solc": true,
        "version": null
    }
}
