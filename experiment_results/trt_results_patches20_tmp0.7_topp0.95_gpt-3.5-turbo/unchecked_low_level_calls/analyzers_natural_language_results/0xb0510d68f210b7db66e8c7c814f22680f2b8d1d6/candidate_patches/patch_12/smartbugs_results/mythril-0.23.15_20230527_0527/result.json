{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "address": 6,
            "contract": "Splitter",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6080604052335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000053620002c660201b60201c565b5062000064620002c660201b60201c565b5062000075620002c660201b60201c565b5062000086620002c660201b60201c565b5060015f815481106200009e576200009d620003f9565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f8081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180815481106200012b576200012a620003f9565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f600181526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600281548110620001ba57620001b9620003f9565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f600281526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600381548110620002495762000248620003f9565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660025f600381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620004ca565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000358576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034f90620004aa565b60405180910390fd5b5f6040516200036790620003eb565b604051809103905ff08015801562000381573d5f803e3d5ffd5b509050600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505090565b6106918062001a6683390190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e206372656174652061206e657720707570705f8201527f6574000000000000000000000000000000000000000000000000000000000000602082015250565b5f6200049260228362000426565b91506200049f8262000436565b604082019050919050565b5f6020820190508181035f830152620004c38162000484565b9050919050565b61158e80620004d85f395ff3fe60806040526004361061007e575f3560e01c806354dfbca81161004d57806354dfbca81461010f5780636f2641e1146101375780638da5cb5b146101735780638dd7d6d11461019d57610085565b80630a46e3e9146100895780632daeb49a146100c55780633ccfd60b146100cf5780634962b964146100e557610085565b3661008557005b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa91906109a0565b6101c7565b6040516100bc9190610a0a565b60405180910390f35b6100cd610202565b005b3480156100da575f80fd5b506100e361062b565b005b3480156100f0575f80fd5b506100f961071d565b6040516101069190610a32565b60405180910390f35b34801561011a575f80fd5b5061013560048036038101906101309190610a75565b610729565b005b348015610142575f80fd5b5061015d600480360381019061015891906109a0565b6107ea565b60405161016a9190610a0a565b60405180910390f35b34801561017e575f80fd5b5061018761081a565b6040516101949190610a0a565b60405180910390f35b3480156101a8575f80fd5b506101b161083d565b6040516101be9190610a0a565b60405180910390f35b600181815481106101d6575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028690610b0d565b60405180910390fd5b60043461029c9190610b58565b6003819055505f60025f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600354620c3500906040516102fe90610bb5565b5f60405180830381858888f193505050503d805f8114610339576040519150601f19603f3d011682016040523d82523d5f602084013e61033e565b606091505b5050905080610382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037990610c13565b60405180910390fd5b5f60025f600181526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600354620c3500906040516103df90610bb5565b5f60405180830381858888f193505050503d805f811461041a576040519150601f19603f3d011682016040523d82523d5f602084013e61041f565b606091505b5050905080610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610c7b565b60405180910390fd5b5f60025f600281526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600354620c3500906040516104c090610bb5565b5f60405180830381858888f193505050503d805f81146104fb576040519150601f19603f3d011682016040523d82523d5f602084013e610500565b606091505b5050905080610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b90610ce3565b60405180910390fd5b5f60025f600381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600354620c3500906040516105a190610bb5565b5f60405180830381858888f193505050503d805f81146105dc576040519150601f19603f3d011682016040523d82523d5f602084013e6105e1565b606091505b5050905080610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90610d4b565b60405180910390fd5b50505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90610db3565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f1935050505015801561071a573d5f803e3d5ffd5b50565b5f600180549050905090565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078e90610e1b565b60405180910390fd5b8060025f8481526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c390610ea9565b60405180910390fd5b5f6040516108d99061095c565b604051809103905ff0801580156108f2573d5f803e3d5ffd5b509050600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505090565b61069180610ec883390190565b5f80fd5b5f819050919050565b61097f8161096d565b8114610989575f80fd5b50565b5f8135905061099a81610976565b92915050565b5f602082840312156109b5576109b4610969565b5b5f6109c28482850161098c565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6109f4826109cb565b9050919050565b610a04816109ea565b82525050565b5f602082019050610a1d5f8301846109fb565b92915050565b610a2c8161096d565b82525050565b5f602082019050610a455f830184610a23565b92915050565b610a54816109ea565b8114610a5e575f80fd5b50565b5f81359050610a6f81610a4b565b92915050565b5f8060408385031215610a8b57610a8a610969565b5b5f610a988582860161098c565b9250506020610aa985828601610a61565b9150509250929050565b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e2066756e64207075707065747300000000005f82015250565b5f610af7601b83610ab3565b9150610b0282610ac3565b602082019050919050565b5f6020820190508181035f830152610b2481610aeb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610b628261096d565b9150610b6d8361096d565b925082610b7d57610b7c610b2b565b5b828204905092915050565b5f81905092915050565b50565b5f610ba05f83610b88565b9150610bab82610b92565b5f82019050919050565b5f610bbf82610b95565b9150819050919050565b7f4661696c656420746f2073656e642066756e647320746f2070757070657420315f82015250565b5f610bfd602083610ab3565b9150610c0882610bc9565b602082019050919050565b5f6020820190508181035f830152610c2a81610bf1565b9050919050565b7f4661696c656420746f2073656e642066756e647320746f2070757070657420325f82015250565b5f610c65602083610ab3565b9150610c7082610c31565b602082019050919050565b5f6020820190508181035f830152610c9281610c59565b9050919050565b7f4661696c656420746f2073656e642066756e647320746f2070757070657420335f82015250565b5f610ccd602083610ab3565b9150610cd882610c99565b602082019050919050565b5f6020820190508181035f830152610cfa81610cc1565b9050919050565b7f4661696c656420746f2073656e642066756e647320746f2070757070657420345f82015250565b5f610d35602083610ab3565b9150610d4082610d01565b602082019050919050565b5f6020820190508181035f830152610d6281610d29565b9050919050565b7f4f6e6c79206f776e65722063616e2077697468647261770000000000000000005f82015250565b5f610d9d601783610ab3565b9150610da882610d69565b602082019050919050565b5f6020820190508181035f830152610dca81610d91565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f610e05600f83610ab3565b9150610e1082610dd1565b602082019050919050565b5f6020820190508181035f830152610e3281610df9565b9050919050565b7f4f6e6c79206f776e65722063616e206372656174652061206e657720707570705f8201527f6574000000000000000000000000000000000000000000000000000000000000602082015250565b5f610e93602283610ab3565b9150610e9e82610e39565b604082019050919050565b5f6020820190508181035f830152610ec081610e87565b905091905056fe608060405273509cb8cb2f8ba04ae81eec394175707edd37e1095f808081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735c035bb4cb7dacbfee076a5e61aa39a10da2e95660015f8081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105bb806100d65f395ff3fe608060405260043610610037575f3560e01c806335898c89146101835780633ccfd60b146101bf5780639811c7c1146101d55761017f565b3661017f575f808081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017d575f805f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634620927c0906040516100f7906103b1565b5f60405180830381858888f193505050503d805f8114610132576040519150601f19603f3d011682016040523d82523d5f602084013e610137565b606091505b505090508061017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017290610445565b60405180910390fd5b505b005b5f80fd5b34801561018e575f80fd5b506101a960048036038101906101a4919061049a565b610211565b6040516101b69190610504565b60405180910390f35b3480156101ca575f80fd5b506101d3610241565b005b3480156101e0575f80fd5b506101fb60048036038101906101f6919061049a565b610355565b6040516102089190610504565b60405180910390f35b6001602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610567565b60405180910390fd5b60015f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610352573d5f803e3d5ffd5b50565b5f602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f81905092915050565b50565b5f61039c5f83610384565b91506103a78261038e565b5f82019050919050565b5f6103bb82610391565b9150819050919050565b5f82825260208201905092915050565b7f4661696c656420746f20666f72776172642066756e647320746f2074617267655f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f61042f6021836103c5565b915061043a826103d5565b604082019050919050565b5f6020820190508181035f83015261045c81610423565b9050919050565b5f80fd5b5f819050919050565b61047981610467565b8114610483575f80fd5b50565b5f8135905061049481610470565b92915050565b5f602082840312156104af576104ae610463565b5b5f6104bc84828501610486565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104ee826104c5565b9050919050565b6104fe816104e4565b82525050565b5f6020820190506105175f8301846104f5565b92915050565b7f4f6e6c79206d61737465722063616e20776974686472617700000000000000005f82015250565b5f6105516018836103c5565b915061055c8261051d565b602082019050919050565b5f6020820190508181035f83015261057e81610545565b905091905056fea2646970667358221220269f8754bd075b09eacfb016ce5645c49ff585e5d229bafe547b2c211663149564736f6c63430008140033a26469706673582212203e589d9a180d40ba6434197cbe8c104896d081b95cf479b5cf720fcb6913337964736f6c63430008140033608060405273509cb8cb2f8ba04ae81eec394175707edd37e1095f808081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735c035bb4cb7dacbfee076a5e61aa39a10da2e95660015f8081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105bb806100d65f395ff3fe608060405260043610610037575f3560e01c806335898c89146101835780633ccfd60b146101bf5780639811c7c1146101d55761017f565b3661017f575f808081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017d575f805f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634620927c0906040516100f7906103b1565b5f60405180830381858888f193505050503d805f8114610132576040519150601f19603f3d011682016040523d82523d5f602084013e610137565b606091505b505090508061017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017290610445565b60405180910390fd5b505b005b5f80fd5b34801561018e575f80fd5b506101a960048036038101906101a4919061049a565b610211565b6040516101b69190610504565b60405180910390f35b3480156101ca575f80fd5b506101d3610241565b005b3480156101e0575f80fd5b506101fb60048036038101906101f6919061049a565b610355565b6040516102089190610504565b60405180910390f35b6001602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610567565b60405180910390fd5b60015f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610352573d5f803e3d5ffd5b50565b5f602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f81905092915050565b50565b5f61039c5f83610384565b91506103a78261038e565b5f82019050919050565b5f6103bb82610391565b9150819050919050565b5f82825260208201905092915050565b7f4661696c656420746f20666f72776172642066756e647320746f2074617267655f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f61042f6021836103c5565b915061043a826103d5565b604082019050919050565b5f6020820190508181035f83015261045c81610423565b9050919050565b5f80fd5b5f819050919050565b61047981610467565b8114610483575f80fd5b50565b5f8135905061049481610470565b92915050565b5f602082840312156104af576104ae610463565b5b5f6104bc84828501610486565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104ee826104c5565b9050919050565b6104fe816104e4565b82525050565b5f6020820190506105175f8301846104f5565b92915050565b7f4f6e6c79206d61737465722063616e20776974686472617700000000000000005f82015250565b5f6105516018836103c5565b915061055c8261051d565b602082019050919050565b5f6020820190508181035f83015261057e81610545565b905091905056fea2646970667358221220269f8754bd075b09eacfb016ce5645c49ff585e5d229bafe547b2c211663149564736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "experiment_results/trt_results_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/unchecked_low_level_calls/analyzers_natural_language_results/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6/candidate_patches/patch_12/patch_12.sol",
            "function": "constructor",
            "line": 10,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        },
        {
            "address": 12,
            "contract": "SafeMath",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e7b62ca58ee1d8876d03768e7479cb11d4ab2a134b13eac263c45eafea5ef4b564736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "experiment_results/trt_results_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/unchecked_low_level_calls/analyzers_natural_language_results/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6/candidate_patches/patch_12/patch_12.sol",
            "function": "constructor",
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values). This issue is reported for internal compiler generated code.\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Low"
        },
        {
            "address": 26,
            "contract": "Puppet",
            "exploit": {
                "initialState": {
                    "accounts": {
                        "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe": {
                            "balance": "0x1",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        },
                        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef": {
                            "balance": "0x0",
                            "code": "",
                            "nonce": 0,
                            "storage": "{}"
                        }
                    }
                },
                "steps": [
                    {
                        "address": "",
                        "calldata": "",
                        "input": "0x608060405273509cb8cb2f8ba04ae81eec394175707edd37e1095f808081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735c035bb4cb7dacbfee076a5e61aa39a10da2e95660015f8081526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105bb806100d65f395ff3fe608060405260043610610037575f3560e01c806335898c89146101835780633ccfd60b146101bf5780639811c7c1146101d55761017f565b3661017f575f808081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017d575f805f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634620927c0906040516100f7906103b1565b5f60405180830381858888f193505050503d805f8114610132576040519150601f19603f3d011682016040523d82523d5f602084013e610137565b606091505b505090508061017b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017290610445565b60405180910390fd5b505b005b5f80fd5b34801561018e575f80fd5b506101a960048036038101906101a4919061049a565b610211565b6040516101b69190610504565b60405180910390f35b3480156101ca575f80fd5b506101d3610241565b005b3480156101e0575f80fd5b506101fb60048036038101906101f6919061049a565b610355565b6040516102089190610504565b60405180910390f35b6001602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610567565b60405180910390fd5b60015f8081526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610352573d5f803e3d5ffd5b50565b5f602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f81905092915050565b50565b5f61039c5f83610384565b91506103a78261038e565b5f82019050919050565b5f6103bb82610391565b9150819050919050565b5f82825260208201905092915050565b7f4661696c656420746f20666f72776172642066756e647320746f2074617267655f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f61042f6021836103c5565b915061043a826103d5565b604082019050919050565b5f6020820190508181035f83015261045c81610423565b9050919050565b5f80fd5b5f819050919050565b61047981610467565b8114610483575f80fd5b50565b5f8135905061049481610470565b92915050565b5f602082840312156104af576104ae610463565b5b5f6104bc84828501610486565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104ee826104c5565b9050919050565b6104fe816104e4565b82525050565b5f6020820190506105175f8301846104f5565b92915050565b7f4f6e6c79206d61737465722063616e20776974686472617700000000000000005f82015250565b5f6105516018836103c5565b915061055c8261051d565b602082019050919050565b5f6020820190508181035f83015261057e81610545565b905091905056fea2646970667358221220269f8754bd075b09eacfb016ce5645c49ff585e5d229bafe547b2c211663149564736f6c63430008140033",
                        "name": "unknown",
                        "origin": "0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe",
                        "value": "0x0"
                    }
                ]
            },
            "filename": "experiment_results/trt_results_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/unchecked_low_level_calls/analyzers_natural_language_results/0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6/candidate_patches/patch_12/patch_12.sol",
            "function": "constructor",
            "line": 67,
            "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110",
            "name": "Exception State (SWC 110)",
            "severity": "Medium"
        }
    ],
    "infos": [],
    "parser": {
        "id": "mythril-0.23.15",
        "mode": "solidity",
        "version": "2023/01/20"
    }
}
