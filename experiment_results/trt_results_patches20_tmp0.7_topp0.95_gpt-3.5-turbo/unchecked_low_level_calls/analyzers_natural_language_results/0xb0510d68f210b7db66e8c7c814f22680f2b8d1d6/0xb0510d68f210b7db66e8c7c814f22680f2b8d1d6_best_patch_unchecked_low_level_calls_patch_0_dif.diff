- pragma solidity ^0.4.23;
?                    ^ ^^
+ pragma solidity ^0.8.0;
?                    ^ ^
  
  contract Splitter {
      address public owner;
      address[] public puppets;
      mapping(uint256 => address) public extra;
-     address private _addy;
      uint256 private _share;
-     uint256 private _count;
  
-     constructor() public payable {
?                   -------
+     constructor() payable {
          owner = msg.sender;
          newPuppet();
          newPuppet();
          newPuppet();
          newPuppet();
          extra[0] = puppets[0];
          extra[1] = puppets[1];
          extra[2] = puppets[2];
          extra[3] = puppets[3];
      }
  
      function withdraw() public {
-         require(msg.sender == owner);
+         require(msg.sender == owner, "Only owner can withdraw.");
-         owner.transfer(address(this).balance);
+         payable(owner).transfer(address(this).balance);
?         ++++++++     +
      }
  
-     function getPuppetCount() public constant returns (uint256 puppetCount) {
?                                      ^^^^^^^^
+     function getPuppetCount() public view returns (uint256 puppetCount) {
?                                      ^^^^
          return puppets.length;
      }
  
-     function newPuppet() public returns (address newPuppet) {
?                                                 ----------
+     function newPuppet() public returns (address) {
-         require(msg.sender == owner);
+         require(msg.sender == owner, "Only owner can create puppets.");
-         Puppet p = new Puppet();
+         Puppet p = new Puppet{value: 0}();
?                              ++++++++++
-         puppets.push(p);
+         puppets.push(address(p));
?                      ++++++++ +
-         return p;
+         return address(p);
?                ++++++++ +
      }
  
      function setExtra(uint256 _id, address _newExtra) public {
-         require(_newExtra != address(0));
+         require(_newExtra != address(0), "Invalid address.");
?                                        ++++++++++++++++++++
          extra[_id] = _newExtra;
      }
  
      function fundPuppets() public payable {
-         require(msg.sender == owner);
+         require(msg.sender == owner, "Only owner can fund puppets.");
-         _share = SafeMath.div(msg.value, 4);
?                  -------------         ^  -
+         _share = msg.value / 4;
?                           ^^
  
-         extra[0].call.value(_share).gas(800000)();
- 
-         extra[1].call.value(_share).gas(800000)();
- 
-         extra[2].call.value(_share).gas(800000)();
- 
-         extra[3].call.value(_share).gas(800000)();
+         (bool success0, ) = payable(extra[0]).call{value: _share, gas: 800000}("");
+         require(success0, "Payment failed.");
+         
+         (bool success1, ) = payable(extra[1]).call{value: _share, gas: 800000}("");
+         require(success1, "Payment failed.");
+         
+         (bool success2, ) = payable(extra[2]).call{value: _share, gas: 800000}("");
+         require(success2, "Payment failed.");
+         
+         (bool success3, ) = payable(extra[3]).call{value: _share, gas: 800000}("");
+         require(success3, "Payment failed.");
      }
  
-     function() public payable {}
+     receive() external payable {}
  }
  
  contract Puppet {
      mapping(uint256 => address) public target;
      mapping(uint256 => address) public master;
  
-     constructor() public payable {
?                   -------
+     constructor() payable {
          target[0] = 0x509Cb8cB2F8ba04aE81eEC394175707Edd37e109;
          master[0] = 0x5C035Bb4Cb7dacbfeE076A5e61AA39a10da2E956;
      }
  
-     function() public payable {
+     receive() external payable {
          if (msg.sender != target[0]) {
-             target[0].call.value(msg.value).gas(600000)();
+             (bool success, ) = payable(target[0]).call{value: msg.value, gas: 600000}("");
+             require(success, "Payment failed.");
          }
      }
  
      function withdraw() public {
-         require(msg.sender == master[0]);
+         require(msg.sender == master[0], "Only master can withdraw.");
-         master[0].transfer(address(this).balance);
+         payable(master[0]).transfer(address(this).balance);
?         ++++++++         +
      }
- }
+ } 
?  +
  
  library SafeMath {
      function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
          if (a == 0) {
              return 0;
          }
          c = a * b;
          assert(c / a == b);
          return c;
      }
  
      function div(uint256 a, uint256 b) internal pure returns (uint256) {
          return a / b;
      }
  
      function sub(uint256 a, uint256 b) internal pure returns (uint256) {
          assert(b <= a);
          return a - b;
      }
  
      function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
          c = a + b;
          assert(c >= a);
          return c;
      }
- }
+ }