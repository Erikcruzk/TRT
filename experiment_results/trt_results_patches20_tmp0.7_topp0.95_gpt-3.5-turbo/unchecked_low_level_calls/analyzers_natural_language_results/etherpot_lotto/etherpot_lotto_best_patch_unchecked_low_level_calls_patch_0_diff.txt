- pragma solidity ^0.4.0;
?                      ^
+ pragma solidity ^0.4.24;
?                      ^^
  
  contract Lotto {
      uint public constant blocksPerRound = 6800;
  
      uint public constant ticketPrice = 100000000000000000;
  
      uint public constant blockReward = 5000000000000000000;
  
-     function getBlocksPerRound() constant returns (uint) {
?                                   ^^^^^^^
+     function getBlocksPerRound() public view returns (uint) {
?                                  +++++ ^^^^^
          return blocksPerRound;
      }
  
-     function getTicketPrice() constant returns (uint) {
?                                ^^^^^^^
+     function getTicketPrice() public view returns (uint) {
?                               +++++ ^^^^^
          return ticketPrice;
      }
  
      struct Round {
          address[] buyers;
          uint pot;
          uint ticketsCount;
          mapping(uint => bool) isCashed;
          mapping(address => uint) ticketsCountByBuyer;
      }
      mapping(uint => Round) rounds;
  
-     function getRoundIndex() constant returns (uint) {
?                               ^^^^^^^
+     function getRoundIndex() public view returns (uint) {
?                              +++++ ^^^^^
          return block.number / blocksPerRound;
      }
  
      function getIsCashed(
          uint roundIndex,
          uint subpotIndex
-     ) constant returns (bool) {
+     ) public view returns (bool) {
          return rounds[roundIndex].isCashed[subpotIndex];
      }
  
      function calculateWinner(
          uint roundIndex,
          uint subpotIndex
-     ) constant returns (address) {
?        ^^^^^^^
+     ) public view returns (address) {
?       +++++ ^^^^^
-         var decisionBlockNumber = getDecisionBlockNumber(
?         ^^^
+         uint decisionBlockNumber = getDecisionBlockNumber(roundIndex, subpotIndex);
?         ^^^^                                              +++++++++++++++++++++++++
-             roundIndex,
-             subpotIndex
-         );
  
-         if (decisionBlockNumber > block.number) return;
?                                                 ^^^^^^^
+         if (decisionBlockNumber > block.number) {
?                                                 ^
+             return address(0);
+         }
  
-         var decisionBlockHash = getHashOfBlock(decisionBlockNumber);
?         ^^^                     ^^^^^^^^^^
+         bytes32 decisionBlockHash = blockhash(decisionBlockNumber);
?         ^^^^^^^                     ^    ++++
+         uint winningTicketIndex = uint(decisionBlockHash) % rounds[roundIndex].ticketsCount;
-         var winningTicketIndex = decisionBlockHash %
-             rounds[roundIndex].ticketsCount;
  
-         var ticketIndex = uint256(0);
?         ^^^               -------- -
+         uint ticketIndex = 0;
?         ^^^^
  
+         for (uint buyerIndex = 0; buyerIndex < rounds[roundIndex].buyers.length; buyerIndex++) {
-         for (
-             var buyerIndex = 0;
-             buyerIndex < rounds[roundIndex].buyers.length;
-             buyerIndex++
-         ) {
-             var buyer = rounds[roundIndex].buyers[buyerIndex];
?             -
+             address buyer = rounds[roundIndex].buyers[buyerIndex];
?              ++ +++
              ticketIndex += rounds[roundIndex].ticketsCountByBuyer[buyer];
  
              if (ticketIndex > winningTicketIndex) {
                  return buyer;
              }
          }
      }
  
      function getDecisionBlockNumber(
          uint roundIndex,
          uint subpotIndex
-     ) constant returns (uint) {
+     ) public view returns (uint) {
          return ((roundIndex + 1) * blocksPerRound) + subpotIndex;
      }
  
-     function getSubpotsCount(uint roundIndex) constant returns (uint) {
?                                                ^^^^^^^
+     function getSubpotsCount(uint roundIndex) public view returns (uint) {
?                                               +++++ ^^^^^
-         var subpotsCount = rounds[roundIndex].pot / blockReward;
?         ^^^
+         uint subpotsCount = rounds[roundIndex].pot / blockReward;
?         ^^^^
  
-         if (rounds[roundIndex].pot % blockReward > 0) subpotsCount++;
?                                                       ^^^^^^^^^^^^^^^
+         if (rounds[roundIndex].pot % blockReward > 0) {
?                                                       ^
+             subpotsCount++;
+         }
  
          return subpotsCount;
      }
  
-     function getSubpot(uint roundIndex) constant returns (uint) {
?                                          ^^^^^^^
+     function getSubpot(uint roundIndex) public view returns (uint) {
?                                         +++++ ^^^^^
          return rounds[roundIndex].pot / getSubpotsCount(roundIndex);
      }
  
-     function cash(uint roundIndex, uint subpotIndex) {
+     function cash(uint roundIndex, uint subpotIndex) public {
?                                                      +++++++
-         var subpotsCount = getSubpotsCount(roundIndex);
?         ^^^
+         uint subpotsCount = getSubpotsCount(roundIndex);
?         ^^^^
  
-         if (subpotIndex >= subpotsCount) return;
?                                          ^^^^^^^
+         if (subpotIndex >= subpotsCount) {
?                                          ^
+             return;
+         }
  
-         var decisionBlockNumber = getDecisionBlockNumber(
?         ^^^
+         uint decisionBlockNumber = getDecisionBlockNumber(roundIndex, subpotIndex);
?         ^^^^                                              +++++++++++++++++++++++++
-             roundIndex,
-             subpotIndex
-         );
  
-         if (decisionBlockNumber > block.number) return;
?                                                 ^^^^^^^
+         if (decisionBlockNumber > block.number) {
?                                                 ^
+             return;
+         }
  
-         if (rounds[roundIndex].isCashed[subpotIndex]) return;
?                                                       ^^^^^^^
+         if (rounds[roundIndex].isCashed[subpotIndex]) {
?                                                       ^
+             return;
+         }
  
-         var winner = calculateWinner(roundIndex, subpotIndex);
?         -
+         address winner = calculateWinner(roundIndex, subpotIndex);
?          ++ +++
-         var subpot = getSubpot(roundIndex);
?         ^^^
+         uint subpot = getSubpot(roundIndex);
?         ^^^^
  
+         require(winner != address(0));
-         winner.send(subpot);
?                  ^^
+         winner.transfer(subpot);
?                ++++ + ^
  
          rounds[roundIndex].isCashed[subpotIndex] = true;
-     }
- 
-     function getHashOfBlock(uint blockIndex) constant returns (uint) {
-         return uint(block.blockhash(blockIndex));
      }
  
      function getBuyers(
          uint roundIndex,
          address buyer
-     ) constant returns (address[]) {
?        ^^^^^^^
+     ) public view returns (address[]) {
?       +++++ ^^^^^
          return rounds[roundIndex].buyers;
      }
  
      function getTicketsCountByBuyer(
          uint roundIndex,
          address buyer
-     ) constant returns (uint) {
+     ) public view returns (uint) {
          return rounds[roundIndex].ticketsCountByBuyer[buyer];
      }
  
-     function getPot(uint roundIndex) constant returns (uint) {
?                                       ^^^^^^^
+     function getPot(uint roundIndex) public view returns (uint) {
?                                      +++++ ^^^^^
          return rounds[roundIndex].pot;
      }
  
-     function() {
+     function() public payable {
-         var roundIndex = getRoundIndex();
?         ^^^
+         uint roundIndex = getRoundIndex();
?         ^^^^
-         var value = msg.value - (msg.value % ticketPrice);
?         ^^^
+         uint value = msg.value - (msg.value % ticketPrice);
?         ^^^^
  
-         if (value == 0) return;
?                         ^^^^^^^
+         if (value == 0) {
?                         ^
+             msg.sender.transfer(msg.value);
+             return;
+         }
  
          if (value < msg.value) {
-             msg.sender.send(msg.value - value);
?                          ^^
+             msg.sender.transfer(msg.value - value);
?                        ++++ + ^
          }
  
-         var ticketsCount = value / ticketPrice;
?         ^^^
+         uint ticketsCount = value / ticketPrice;
?         ^^^^
          rounds[roundIndex].ticketsCount += ticketsCount;
  
          if (rounds[roundIndex].ticketsCountByBuyer[msg.sender] == 0) {
-             var buyersLength = rounds[roundIndex].buyers.length++;
-             rounds[roundIndex].buyers[buyersLength] = msg.sender;
?                                      ^^ --- ----- ^^^^
+             rounds[roundIndex].buyers.push(msg.sender);
?                                      ^^   ^          +
          }
  
          rounds[roundIndex].ticketsCountByBuyer[msg.sender] += ticketsCount;
          rounds[roundIndex].ticketsCount += ticketsCount;
  
          rounds[roundIndex].pot += value;
      }
- }
+ }