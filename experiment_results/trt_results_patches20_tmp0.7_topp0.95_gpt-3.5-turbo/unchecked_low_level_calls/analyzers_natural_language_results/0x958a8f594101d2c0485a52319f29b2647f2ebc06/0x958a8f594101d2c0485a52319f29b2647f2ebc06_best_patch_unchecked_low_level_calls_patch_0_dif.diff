  pragma solidity ^0.4.16;
  
  contract Owned {
      modifier onlyOwner() {
          require(msg.sender == owner);
          _;
      }
  
      address public owner;
  
-     function Owned() {
+     constructor() public {
          owner = msg.sender;
      }
  
      address public newOwner;
  
-     function changeOwner(address _newOwner) onlyOwner {
+     function changeOwner(address _newOwner) public onlyOwner {
?                                             +++++++
          newOwner = _newOwner;
      }
  
-     function acceptOwnership() {
+     function acceptOwnership() public {
?                                +++++++
          if (msg.sender == newOwner) {
              owner = newOwner;
          }
      }
  
-     function execute(address _dst, uint _value, bytes _data) onlyOwner {
+     function execute(address _dst, uint _value, bytes _data) public onlyOwner {
?                                                             +++++++
-         _dst.call.value(_value)(_data);
+         require(_dst.call.value(_value)(_data));
?         ++++++++                              +
      }
  }
  
  contract Marriage is Owned {
      string public partner1;
      string public partner2;
      uint public marriageDate;
      string public marriageStatus;
      string public vows;
  
      Event[] public majorEvents;
      Message[] public messages;
  
      struct Event {
          uint date;
          string name;
          string description;
          string url;
      }
  
      struct Message {
          uint date;
          string nameFrom;
          string text;
          string url;
          uint value;
      }
  
      modifier areMarried() {
-         require(sha3(marriageStatus) == sha3("Married"));
?                 ^^ ^                    ^^ ^
+         require(keccak256(marriageStatus) == keccak256("Married"));
?                 ^^^^ ^^^^                    ^^^^ ^^^^
          _;
      }
  
-     function Marriage(address _owner) {
+     constructor(address _owner) public {
          owner = _owner;
      }
  
-     function numberOfMajorEvents() public constant returns (uint) {
?                                           ^^^^^^^^
+     function numberOfMajorEvents() public view returns (uint) {
?                                           ^^^^
          return majorEvents.length;
      }
  
-     function numberOfMessages() public constant returns (uint) {
?                                        ^^^^^^^^
+     function numberOfMessages() public view returns (uint) {
?                                        ^^^^
          return messages.length;
      }
  
      function createMarriage(
          string _partner1,
          string _partner2,
          string _vows,
-         string url
+         string _url
?                +
-     ) onlyOwner {
+     ) public onlyOwner {
?      +++++++
          require(majorEvents.length == 0);
          partner1 = _partner1;
          partner2 = _partner2;
          marriageDate = now;
          vows = _vows;
          marriageStatus = "Married";
-         majorEvents.push(Event(now, "Marriage", vows, url));
+         majorEvents.push(Event(now, "Marriage", vows, _url));
?                                                       +
-         MajorEvent("Marrigage", vows, url);
?                          -
+         emit MajorEvent("Marriage", vows, _url);
?        +++++                              +
      }
  
-     function setStatus(string status, string url) onlyOwner {
+     function setStatus(string _status, string _url) public onlyOwner {
?                               +               +    +++++++
-         marriageStatus = status;
+         marriageStatus = _status;
?                          +
-         setMajorEvent("Changed Status", status, url);
+         setMajorEvent("Changed Status", _status, _url);
?                                         +        +
      }
  
      function setMajorEvent(
-         string name,
+         string _name,
?                +
-         string description,
+         string _description,
?                +
-         string url
+         string _url
?                +
-     ) onlyOwner areMarried {
+     ) public onlyOwner areMarried {
?      +++++++
-         majorEvents.push(Event(now, name, description, url));
+         majorEvents.push(Event(now, _name, _description, _url));
?                                     +      +             +
-         MajorEvent(name, description, url);
+         emit MajorEvent(_name, _description, _url);
?        +++++            +      +             +
      }
  
      function sendMessage(
-         string nameFrom,
+         string _nameFrom,
?                +
-         string text,
+         string _text,
?                +
-         string url
+         string _url
?                +
-     ) payable areMarried {
+     ) public payable areMarried {
?      +++++++
          if (msg.value > 0) {
-             owner.transfer(this.balance);
?                            ^^^  ^  ^^^
+             owner.transfer(msg.value);
?                            ^ + ^  ^
          }
-         messages.push(Message(now, nameFrom, text, url, msg.value));
+         messages.push(Message(now, _nameFrom, _text, _url, msg.value));
?                                    +          +      +
-         MessageSent(nameFrom, text, url, msg.value);
+         emit MessageSent(_nameFrom, _text, _url, msg.value);
?        +++++             +          +      +
      }
  
      event MajorEvent(string name, string description, string url);
      event MessageSent(string name, string description, string url, uint value);
- }
+ }