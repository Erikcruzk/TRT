- /*
-  * @source: etherscan.io 
-  * @author: -
-  * @vulnerable_at_lines: 44
-  */
- 
  pragma solidity ^0.4.19;
  
- contract Ownable
+ contract Ownable {
?                 ++
- {
-     address newOwner;
+     address public newOwner;
?            +++++++
+     address public owner;
+ 
+     function Ownable() public {
-     address owner = msg.sender;
?     ^^^^^^^
+         owner = msg.sender;
?     ^^^
-     
+     }
?     +
+ 
-     function changeOwner(address addr)
+     function changeOwner(address addr) public onlyOwner {
?                                       +++++++++++++++++++
-     public
-     onlyOwner
-     {
          newOwner = addr;
      }
-     
+ 
-     function confirmOwner() 
+     function confirmOwner() public {
?                             ++++++++
-     public
-     {
-         if(msg.sender==newOwner)
?          ^
+         require(msg.sender == newOwner);
?         ++++ ^^           +  +         +
-         {
-             owner=newOwner;
? ----
+         owner = newOwner;
?              + +
-         }
+         newOwner = address(0);
      }
-     
+ 
-     modifier onlyOwner
+     modifier onlyOwner() {
?                       ++++
-     {
-         if(owner == msg.sender)_;
+         require(msg.sender == owner);
+         _;
      }
  }
  
- contract Token is Ownable
+ contract Token is Ownable {
?                          ++
- {
-     address owner = msg.sender;
-     function WithdrawToken(address token, uint256 amount,address to)
?              ^
+     function withdrawToken(address token, uint256 amount, address to) public onlyOwner {
?              ^                                           +           +++++++++++++++++++
-     public 
-     onlyOwner
-     {
-          // <yes> <report> UNCHECKED_LL_CALLS
-         token.call(bytes4(sha3("transfer(address,uint256)")),to,amount); 
?                           ^^ ^                                          -
+         require(token.call(bytes4(keccak256("transfer(address,uint256)")), to, amount));
?         ++++++++                  ^^^^ ^^^^                               +   +       +
      }
  }
  
- contract TokenBank is Token
+ contract TokenBank is Token {
?                            ++
- {
-     uint public MinDeposit;
?                 ^
+     uint public minDeposit;
?                 ^
-     mapping (address => uint) public Holders;
?                                      ^
+     mapping (address => uint) public holders;
?                                      ^
+ 
-     
-      ///Constructor
-     function initTokenBank()
?              ----
+     function TokenBank() public {
?                         +++++++++
-     public
-     {
          owner = msg.sender;
-         MinDeposit = 1 ether;
?         ^
+         minDeposit = 1 ether;
?         ^
      }
+ 
+     function() public payable {
-     
-     function()
-     payable
-     {
-         Deposit();
?         ^
+         deposit();
?         ^
      }
+ 
+     function deposit() public payable {
-    
-     function Deposit() 
-     payable
-     {
-         if(msg.value>MinDeposit)
?                      ^
+         if(msg.value > minDeposit) {
?                     + ^^          ++
-         {
-             Holders[msg.sender]+=msg.value;
?             ^
+             holders[msg.sender] += msg.value;
?             ^                  +  +
          }
      }
-     
+ 
-     function WitdrawTokenToHolder(address _to,address _token,uint _amount)
?              ^
+     function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {
?              ^  +                              +               +             +++++++++++++++++++
-     public
-     onlyOwner
-     {
-         if(Holders[_to]>0)
?            ^
+         if(holders[_to] > 0) {
?            ^           + +  ++
-         {
-             Holders[_to]=0;
?             ^
+             holders[_to] = 0;
?             ^           + +
-             WithdrawToken(_token,_amount,_to);     
?             ^                                 -----
+             withdrawToken(_token, _amount, _to);
?             ^                    +        +
          }
      }
-    
+ 
-     function WithdrawToHolder(address _addr, uint _wei) 
?              ^
+     function withdrawToHolder(address _addr, uint _wei) public onlyOwner {
?              ^                                          ++++++++++++++++++
+         if(holders[_addr] > 0 && _addr.call.value(_wei)()) {
-     public
-     onlyOwner
-     payable
-     {
-         if(Holders[_addr]>0)
-         {
-             if(_addr.call.value(_wei)())
-             {
-                 Holders[_addr]-=_wei;
?             ^^^^^
+             holders[_addr] -= _wei;
?             ^             +  +
-             }
          }
      }
  }