function _payFreelancer() private {
        uint256 amount = workPrice
            .mul(
                percentNumbers
                    .safeSub(employerPercent)
                    .safeDiv(1e6)
            );

        IERC20(tokenContractAddress).transfer(freelancerAddress, amount);
        IERC20(tokenContractAddress).transfer(
            deployedFromContract.feeAddress(),
            workPrice.safeSub(amount)
        );
    }

    function _payEmployer() private {
        if (isBNB) {
            employerAddress.transfer(workPrice);
        } else {
            IERC20(tokenContractAddress).transfer(employerAddress, workPrice);
        }
    }

    function employerReceiveFile(uint256 _puan, string memory _remark) external nonReentrant {
        require(msg.sender == employerAddress, "Only employer can call this function");
        require(freelancerSendFiles, "Freelancer must send files first");
        require(!employerReceiveFiles, "Employer has already received the files");

        _payFreelancer();
        deployedFromContract.setPuan(_puan, freelancerAddress);
        employerRemark = _remark;
        employerReceiveFiles = true;
        workEndDate = block.timestamp;
    }

    function employerCancel(string memory _description) external {
        require(msg.sender == employerAddress, "Only employer can call this function");
        require(argonShield, "Argon shield must be active");
        require(approverStartDate == 0, "Approver start date should be 0");
        require(!employerReceiveFiles, "Employer has already received the files");
        require(freelancerSendFiles, "Freelancer must send files first");

        approverConfirmStatus = 0;
        employerCancelDescription = _description;
        approverStartDate = block.timestamp;
    }

    function confirmApprover(string memory _description) external nonReentrant requireForApprover {
        require(now > approverStartDate.safeAdd(5 days), "Approver confirmation period has not passed yet");
        require(isApprover(msg.sender), "Only approver can call this function");

        // Function implementation can go here
    }