/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_23"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 86
      },
      {
        "name": "shadowing-state",
        "line_of_vulnerability": 38
      },
      {
        "name": "deprecated-standards",
        "line_of_vulnerability": 43
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 14
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 21
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 53
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 60
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 75
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 86
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 7
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 39
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 86
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 39
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 66
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 75
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 75
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 75
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 75
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 86
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 86
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 86
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 49
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 50
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Callstack Depth Attack Vulnerability",
        "line_of_vulnerability": 43
      },
      {
        "name": "Integer Underflow",
        "line_of_vulnerability": 96
      },
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 94
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 71
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 94
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 96
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: etherscan.io 
 * @author: -
 * @vulnerable_at_lines: 94
 */

pragma solidity ^0.4.19;

contract Ownable
{
    address newOwner;
    address owner = msg.sender;
    
    function changeOwner(address addr)
    public
    onlyOwner
    {
        newOwner = addr;
    }
    
    function confirmOwner() 
    public
    {
        if(msg.sender==newOwner)
        {
            owner=newOwner;
        }
    }
    
    modifier onlyOwner
    {
        if(owner == msg.sender)_;
    }
}

contract Token is Ownable
{
    address owner = msg.sender;
    function WithdrawToken(address token, uint256 amount,address to)
    public 
    onlyOwner
    {
        token.call(bytes4(sha3("transfer(address,uint256)")),to,amount); 
    }
}

contract TokenBank is Token
{
    uint public MinDeposit;
    mapping (address => uint) public Holders;
    
     ///Constructor
    function initTokenBank()
    public
    {
        owner = msg.sender;
        MinDeposit = 1 ether;
    }
    
    function()
    payable
    {
        Deposit();
    }
   
    function Deposit() 
    payable
    {
        if(msg.value>MinDeposit)
        {
            Holders[msg.sender]+=msg.value;
        }
    }
    
    function WitdrawTokenToHolder(address _to,address _token,uint _amount)
    public
    onlyOwner
    {
        if(Holders[_to]>0)
        {
            Holders[_to]=0;
            WithdrawToken(_token,_amount,_to);     
        }
    }
   
    function WithdrawToHolder(address _addr, uint _wei) 
    public
    onlyOwner
    payable
    {
        if(Holders[_addr]>0)
        {
            // <yes> <report> REENTRANCY
            if(_addr.call.value(_wei)())
            {
                Holders[_addr]-=_wei;
            }
        }
    }
}

/// Repaired Solidity Smart Contract