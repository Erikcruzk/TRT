/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_5"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 13
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 13
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 24
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 7
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 13
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Callstack Depth Attack Vulnerability",
        "line_of_vulnerability": 18
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Callstack bug",
        "line_of_vulnerability": 18
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 25
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 26
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 18
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 16
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite
 * @author: Suhabe Bugrara
 * @vulnerable_at_lines: 18
 */

pragma solidity ^0.4.19;

contract ReentrancyDAO {
    mapping (address => uint) credit;
    uint balance;

    function withdrawAll() public {
        uint oCredit = credit[msg.sender];
        if (oCredit > 0) {
            balance -= oCredit;
            // <yes> <report> REENTRANCY
            bool callResult = msg.sender.call.value(oCredit)();
            require (callResult);
            credit[msg.sender] = 0;
        }
    }

    function deposit() public payable {
        credit[msg.sender] += msg.value;
        balance += msg.value;
    }
}


/// Repaired Solidity Smart Contract