/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 21
      },
      {
        "name": "erc20-interface",
        "line_of_vulnerability": 9
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 14
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 21
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 7
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 21
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 9
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Callstack Depth Attack Vulnerability",
        "line_of_vulnerability": 24
      },
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 24
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": []
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Callstack bug",
        "line_of_vulnerability": 24
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 16
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 24
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/
 * @author: consensys
 * @vulnerable_at_lines: 24
 */

pragma solidity ^0.4.0;

contract Reentrancy_cross_function {

    // INSECURE
    mapping (address => uint) private userBalances;

    function transfer(address to, uint amount) {
        if (userBalances[msg.sender] >= amount) {
            userBalances[to] += amount;
            userBalances[msg.sender] -= amount;
        }
    }

    function withdrawBalance() public {
        uint amountToWithdraw = userBalances[msg.sender];
        // <yes> <report> REENTRANCY
        (bool success, ) = msg.sender.call.value(amountToWithdraw)(""); // At this point, the caller's code is executed, and can call transfer()
        require(success);
        userBalances[msg.sender] = 0;
    }
}


/// Repaired Solidity Smart Contract