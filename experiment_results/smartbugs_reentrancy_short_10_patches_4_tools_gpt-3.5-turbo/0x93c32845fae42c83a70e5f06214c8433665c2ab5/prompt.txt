/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_21"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 21
      },
      {
        "name": "constable-states",
        "line_of_vulnerability": 54
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 21
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 37
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 76
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 21
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 9
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 11
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 11
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 21
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 21
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 56
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 50
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 52
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 54
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 76
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 76
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 76
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 76
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 72
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 74
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 29
      },
      {
        "name": "Timestamp Dependency",
        "line_of_vulnerability": 26
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 2
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 83
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 83
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 29
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 32
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 31
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      },
      {
        "name": "Straw man contract",
        "line_of_vulnerability": 32
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: etherscan.io 
 * @author: -
 * @vulnerable_at_lines: 29
 */

pragma solidity ^0.4.25;

contract X_WALLET
{
    function Put(uint _unlockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        acc.unlockTime = _unlockTime>now?_unlockTime:now;
        LogFile.AddMessage(msg.sender,msg.value,"Put");
    }

    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            // <yes> <report> REENTRANCY
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                LogFile.AddMessage(msg.sender,_am,"Collect");
            }
        }
    }

    function() 
    public 
    payable
    {
        Put(0);
    }

    struct Holder   
    {
        uint unlockTime;
        uint balance;
    }

    mapping (address => Holder) public Acc;

    Log LogFile;

    uint public MinSum = 1 ether;    

    function X_WALLET(address log) public{
        LogFile = Log(log);
    }
}


contract Log 
{
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }

    Message[] public History;

    Message LastMsg;

    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// Repaired Solidity Smart Contract