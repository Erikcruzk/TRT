/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_30"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 55
      },
      {
        "name": "deprecated-standards",
        "line_of_vulnerability": 28
      },
      {
        "name": "deprecated-standards",
        "line_of_vulnerability": 35
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 25
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 32
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 39
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 55
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 71
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 95
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 7
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 55
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 9
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 25
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 25
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 32
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 32
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 39
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 45
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 45
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 55
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 55
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 17
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 19
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 21
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 95
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 95
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 95
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 95
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 91
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 93
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": []
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      },
      {
        "name": "Straw man contract",
        "line_of_vulnerability": 66
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 2
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 51
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 51
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 63
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 66
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 65
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: etherscan.io 
 * @author: -
 * @vulnerable_at_lines: 63
 */

pragma solidity ^0.4.19;

contract PENNY_BY_PENNY  
{
    struct Holder   
    {
        uint unlockTime;
        uint balance;
    }
    
    mapping (address => Holder) public Acc;
    
    uint public MinSum;
    
    LogFile Log;
    
    bool intitalized;
    
    function SetMinSum(uint _val)
    public
    {
        if(intitalized)throw;
        MinSum = _val;
    }
    
    function SetLogFile(address _log)
    public
    {
        if(intitalized)throw;
        Log = LogFile(_log);
    }
    
    function Initialized()
    public
    {
        intitalized = true;
    }
    
    function Put(uint _lockTime)
    public
    payable
    {
        var acc = Acc[msg.sender];
        acc.balance += msg.value;
        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;
        Log.AddMessage(msg.sender,msg.value,"Put");
    }
    
    function Collect(uint _am)
    public
    payable
    {
        var acc = Acc[msg.sender];
        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)
        {
            // <yes> <report> REENTRANCY
            if(msg.sender.call.value(_am)())
            {
                acc.balance-=_am;
                Log.AddMessage(msg.sender,_am,"Collect");
            }
        }
    }
    
    function() 
    public 
    payable
    {
        Put(0);
    }
    
}


contract LogFile
{
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// Repaired Solidity Smart Contract