/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_26"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 48
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 20
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 27
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 34
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 48
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 63
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 88
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 8
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 48
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 10
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 20
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 20
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 27
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 27
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 34
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 40
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 48
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 48
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 14
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 16
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 88
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 88
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 88
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 88
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 84
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 86
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 55
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      },
      {
        "name": "Straw man contract",
        "line_of_vulnerability": 58
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 44
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 55
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 58
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 57
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 3
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract

/*
 * @source: etherscan.io 
 * @author: -
 * @vulnerable_at_lines: 55
 */

pragma solidity ^0.4.19;

contract ACCURAL_DEPOSIT
{
    mapping (address=>uint256) public balances;   
   
    uint public MinSum = 1 ether;
    
    LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);
    
    bool intitalized;
    
    function SetMinSum(uint _val)
    public
    {
        if(intitalized)revert();
        MinSum = _val;
    }
    
    function SetLogFile(address _log)
    public
    {
        if(intitalized)revert();
        Log = LogFile(_log);
    }
    
    function Initialized()
    public
    {
        intitalized = true;
    }
    
    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,"Put");
    }
    
    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            // <yes> <report> REENTRANCY
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,"Collect");
            }
        }
    }
    
    function() 
    public 
    payable
    {
        Deposit();
    }
    
}



contract LogFile
{
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// Repaired Solidity Smart Contract