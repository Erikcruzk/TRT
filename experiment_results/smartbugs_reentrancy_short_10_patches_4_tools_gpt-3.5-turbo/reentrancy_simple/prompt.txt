/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 20
      },
      {
        "name": "deprecated-standards",
        "line_of_vulnerability": 25
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 12
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 16
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 20
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 7
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 20
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Integer Overflow",
        "line_of_vulnerability": 17
      },
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 24
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 17
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 24
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/reentrancy/Reentrancy.sol
 * @author: -
 * @vulnerable_at_lines: 24
 */

 pragma solidity ^0.4.15;

 contract Reentrance {
     mapping (address => uint) userBalance;

     function getBalance(address u) constant returns(uint){
         return userBalance[u];
     }

     function addToBalance() payable{
         userBalance[msg.sender] += msg.value;
     }

     function withdrawBalance(){
         // send userBalance[msg.sender] ethers to msg.sender
         // if mgs.sender is a contract, it will call its fallback function
         // <yes> <report> REENTRANCY
         if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){
             throw;
         }
         userBalance[msg.sender] = 0;
     }
 }


/// Repaired Solidity Smart Contract