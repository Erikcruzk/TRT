/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_22"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 33
      },
      {
        "name": "constable-states",
        "line_of_vulnerability": 13
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 22
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 33
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 48
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 67
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 7
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 33
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 9
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 17
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 17
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 22
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 33
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 33
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 13
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 15
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 67
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 67
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 67
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 67
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 63
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 65
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 40
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      },
      {
        "name": "Straw man contract",
        "line_of_vulnerability": 43
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 2
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 28
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 40
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 43
      },
      {
        "name": "Underflow bugs",
        "line_of_vulnerability": 42
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: etherscan.io 
 * @author: -
 * @vulnerable_at_lines: 40
 */

pragma solidity ^0.4.19;

contract Private_Bank
{
    mapping (address => uint) public balances;
    
    uint public MinDeposit = 1 ether;
    
    Log TransferLog;
    
    function Private_Bank(address _log)
    {
        TransferLog = Log(_log);
    }
    
    function Deposit()
    public
    payable
    {
        if(msg.value > MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");
        }
    }
    
    function CashOut(uint _am)
    public
    payable
    {
        if(_am<=balances[msg.sender])
        {
            // <yes> <report> REENTRANCY
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,"CashOut");
            }
        }
    }
    
    function() public payable{}    
    
}

contract Log 
{
   
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// Repaired Solidity Smart Contract