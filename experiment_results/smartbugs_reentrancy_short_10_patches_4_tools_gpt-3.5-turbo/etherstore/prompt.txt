/// The task is to repair a Solidity Smart Contract

/// According to the following smart contract analyzers, this Solidity Smart Contract is vulnerable to the following attacks

{
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy-eth",
        "line_of_vulnerability": 20
      },
      {
        "name": "constable-states",
        "line_of_vulnerability": 12
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 16
      },
      {
        "name": "external-function",
        "line_of_vulnerability": 20
      },
      {
        "name": "solc-version",
        "line_of_vulnerability": 8
      },
      {
        "name": "low-level-calls",
        "line_of_vulnerability": 20
      },
      {
        "name": "naming-convention",
        "line_of_vulnerability": 20
      }
    ]
  },
  "oyente": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Integer Overflow",
        "line_of_vulnerability": 17
      },
      {
        "name": "Re-Entrancy Vulnerability",
        "line_of_vulnerability": 27
      },
      {
        "name": "Timestamp Dependency",
        "line_of_vulnerability": 25
      }
    ]
  },
  "honeybadger": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Money flow",
        "line_of_vulnerability": null
      }
    ]
  },
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 17
      },
      {
        "name": "Overflow bugs",
        "line_of_vulnerability": 25
      },
      {
        "name": "Reentrancy bug",
        "line_of_vulnerability": 27
      },
      {
        "name": "Time dependency bug",
        "line_of_vulnerability": 25
      }
    ]
  }
}

/// Vulnerable Solidity Smart Contract
/*
 * @source: https://github.com/sigp/solidity-security-blog
 * @author: Suhabe Bugrara
 * @vulnerable_at_lines: 27
 */

//added pragma version
pragma solidity ^0.4.0;

contract EtherStore {

    uint256 public withdrawalLimit = 1 ether;
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;

    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(_weiToWithdraw <= withdrawalLimit);
        // limit the time allowed to withdraw
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        // <yes> <report> REENTRANCY
        require(msg.sender.call.value(_weiToWithdraw)());
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
    }
 }


/// Repaired Solidity Smart Contract