{
    "docker": {
        "command": null,
        "detach": true,
        "entrypoint": "'/sb/bin/do_solidity.sh' '/sb/simple_dao.sol' '/sb/bin'",
        "image": "smartbugs/security:usolc",
        "user": 0,
        "volumes": {
            "/var/folders/pc/1ws5qy153vdgg93k7ngyjmkh0000gn/T/tmpn8c_wb2z": {
                "bind": "/sb",
                "mode": "rw"
            }
        }
    },
    "filename": "experiment_results/test_trt_results_prompt_comparison_patches20_tmp0.7_topp0.95_gpt-3.5-turbo/reentrancy/analyzers_natural_language_results/simple_dao/simple_dao.sol",
    "platform": {
        "cpu": "Apple M1 Pro",
        "python": "3.10.4.final.0 (64 bit)",
        "release": "22.5.0",
        "smartbugs": "2.0.7",
        "system": "Darwin",
        "version": "Darwin Kernel Version 22.5.0: Mon Apr 24 20:52:24 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6000"
    },
    "result": {
        "duration": 331.3680307865143,
        "exit_code": 137,
        "logs": "result.log",
        "output": "result.tar",
        "start": 1691742514.217885
    },
    "runid": "20230811_0828",
    "solc": "0.4.26",
    "tool": {
        "bin": "scripts",
        "command": null,
        "cpu_quota": null,
        "entrypoint": "'$BIN/do_solidity.sh' '$FILENAME' '$BIN'",
        "id": "securify",
        "image": "smartbugs/security:usolc",
        "info": "Securify uses formal verification, also relying on static analysis checks. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not.",
        "mem_limit": null,
        "mode": "solidity",
        "name": "Securify",
        "origin": "https://github.com/eth-sri/securify",
        "output": "/results/",
        "parser": "parser.py",
        "solc": true,
        "version": null
    }
}
