{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_to.call.value(_amount)());",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;",
          "message": "Ownable.changeOwner (patch_5.sol#16-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n        newOwner = address(0);",
          "message": "Ownable.acceptOwnership (patch_5.sol#20-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function withdrawToken(address _token, address _to, uint256 _amount) public onlyOwner {\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount));",
          "message": "Token.withdrawToken (patch_5.sol#28-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function () payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_5.sol#41-43) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {\n        if (holders[_to] > 0) {\n            holders[_to] = 0;\n            Token token = Token(_token);\n            token.withdrawToken(_token, _to, _amount);\n        }",
          "message": "TokenBank.withdrawTokenToHolder (patch_5.sol#51-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function withdrawToHolder(address _to, uint _amount) public onlyOwner {\n        require(holders[_to] >= _amount);\n        holders[_to] -= _amount;\n        require(_to.call.value(_amount)());",
          "message": "TokenBank.withdrawToHolder (patch_5.sol#59-63) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.19 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function withdrawToken(address _token, address _to, uint256 _amount) public onlyOwner {\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount));",
          "message": "Low level call in Token.withdrawToken (patch_5.sol#28-30):\n\t-require(bool)(_token.call(bytes4(keccak256()(transfer(address,uint256))),_to,_amount)) patch_5.sol#29\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function withdrawToHolder(address _to, uint _amount) public onlyOwner {\n        require(holders[_to] >= _amount);\n        holders[_to] -= _amount;\n        require(_to.call.value(_amount)());",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_5.sol#59-63):\n\t-require(bool)(_to.call.value(_amount)()) patch_5.sol#62\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_5.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Ownable.changeOwner (patch_5.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, address _to, uint256 _amount) public onlyOwner {",
          "message": "Parameter '_token' of Token.withdrawToken (patch_5.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, address _to, uint256 _amount) public onlyOwner {",
          "message": "Parameter '_to' of Token.withdrawToken (patch_5.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, address _to, uint256 _amount) public onlyOwner {",
          "message": "Parameter '_amount' of Token.withdrawToken (patch_5.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function TokenBank() {\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_5.sol#37-39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_5.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_5.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_5.sol#51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _to, uint _amount) public onlyOwner {",
          "message": "Parameter '_to' of TokenBank.withdrawToHolder (patch_5.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _to, uint _amount) public onlyOwner {",
          "message": "Parameter '_amount' of TokenBank.withdrawToHolder (patch_5.sol#59) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}