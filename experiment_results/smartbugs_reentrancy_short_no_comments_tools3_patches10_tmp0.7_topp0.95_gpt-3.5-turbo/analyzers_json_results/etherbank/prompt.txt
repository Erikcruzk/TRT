/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;
contract EtherBank{
    mapping (address => uint) userBalances;
    function getBalance(address user) constant returns(uint) {  
		return userBalances[user];
	}

	function addToBalance() {  
		userBalances[msg.sender] += msg.value;
	}

	function withdrawBalance() {  
		uint amountToWithdraw = userBalances[msg.sender];
		if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
		userBalances[msg.sender] = 0;
	}    
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 14,
        "vulnerability_to_line": null,
        "vulnerability_code": "\t\tif (!(msg.sender.call.value(amountToWithdraw)())) { throw; }",
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 12,
        "vulnerability_to_line": 16,
        "vulnerability_code": "\tfunction withdrawBalance() {  \n\t\tuint amountToWithdraw = userBalances[msg.sender];\n\t\tif (!(msg.sender.call.value(amountToWithdraw)())) { throw; }\n\t\tuserBalances[msg.sender] = 0;",
        "message": "Reentrancy in EtherBank.withdrawBalance (etherbank.sol#12-16):\n\tExternal calls:\n\t- ! (msg.sender.call.value(amountToWithdraw)()) (etherbank.sol#14)\n\tState variables written after the call(s):\n\t- userBalances (etherbank.sol#15)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract