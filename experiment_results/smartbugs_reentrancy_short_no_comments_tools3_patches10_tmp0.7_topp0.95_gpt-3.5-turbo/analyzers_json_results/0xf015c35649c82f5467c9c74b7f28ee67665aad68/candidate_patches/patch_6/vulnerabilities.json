{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "MY_BANK.MinSum should be constant (patch_6.sol#11)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(_amount > 0 && Acc[msg.sender].balance >= _amount && now > Acc[msg.sender].unlockTime && _amount >= MinSum);\n        Acc[msg.sender].balance -= _amount;\n        LogFile.addMessage(msg.sender, _amount, \"Withdrawal\");\n        msg.sender.transfer(_amount);\n        emit Withdrawal(msg.sender, _amount);",
          "message": "MY_BANK.withdraw (patch_6.sol#28-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function() public payable {\n        deposit(0);",
          "message": "MY_BANK.fallback (patch_6.sol#36-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 58,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.addMessage (patch_6.sol#52-58) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 39,
          "vulnerability_code": "contract MY_BANK {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n    Log LogFile;\n    uint public MinSum = 1 ether;\n\n    event Deposit(address indexed _from, uint _value);\n    event Withdrawal(address indexed _to, uint _value);\n\n    function MY_BANK(address log) public {\n        LogFile = Log(log);\n    }\n\n    function deposit(uint _unlockTime) public payable {\n        require(msg.value > 0);\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.addMessage(msg.sender, msg.value, \"Deposit\");\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint _amount) public {\n        require(_amount > 0 && Acc[msg.sender].balance >= _amount && now > Acc[msg.sender].unlockTime && _amount >= MinSum);\n        Acc[msg.sender].balance -= _amount;\n        LogFile.addMessage(msg.sender, _amount, \"Withdrawal\");\n        msg.sender.transfer(_amount);\n        emit Withdrawal(msg.sender, _amount);\n    }\n\n    function() public payable {\n        deposit(0);\n    }",
          "message": "Contract 'MY_BANK' (patch_6.sol#3-39) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function MY_BANK(address log) public {\n        LogFile = Log(log);",
          "message": "Function 'MY_BANK.MY_BANK' (patch_6.sol#16-18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of MY_BANK.deposit (patch_6.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of MY_BANK.withdraw (patch_6.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'MY_BANK.Acc' (patch_6.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'MY_BANK.LogFile' (patch_6.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'MY_BANK.MinSum' (patch_6.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_6.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_6.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_6.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_6.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message LastMsg;",
          "message": "Variable 'Log.LastMsg' (patch_6.sol#50) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_amount > 0 && Acc[msg.sender].balance >= _amount && now > Acc[msg.sender].unlockTime && _amount >= MinSum);",
          "message": null
        }
      ]
    }
  }
}