{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function getBalance(address u) constant public returns(uint){\n        return userBalance[u];",
          "message": "Reentrance.getBalance (patch_2.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function addToBalance() public payable{\n        require(userBalance[msg.sender] + msg.value >= userBalance[msg.sender]);\n        userBalance[msg.sender] += msg.value;",
          "message": "Reentrance.addToBalance (patch_2.sol#10-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function withdrawBalance() public {\n        uint balance = userBalance[msg.sender];\n        userBalance[msg.sender] = 0;\n        msg.sender.transfer(balance);",
          "message": "Reentrance.withdrawBalance (patch_2.sol#15-19) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.15;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.15 (patch_2.sol#1): it allows old versions\n"
        }
      ]
    }
  }
}