{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 81,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender]+= msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Log.addMessage(msg.sender,_am,\"Collect\");",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 76,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory newMsg;",
          "message": "newMsg in LogFile.addMessage (patch_2.sol#76) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;",
          "message": "PERSONAL_BANK.setMinSum (patch_2.sol#13-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "PERSONAL_BANK.setLogFile (patch_2.sol#20-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function initialize()\n    public\n    {\n        initialized = true;",
          "message": "PERSONAL_BANK.initialize (patch_2.sol#27-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am);\n        balances[msg.sender]-=_am;\n        require(msg.sender.call.value(_am)());\n        Log.addMessage(msg.sender,_am,\"Collect\");",
          "message": "PERSONAL_BANK.collect (patch_2.sol#41-48) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function() \n    public \n    payable\n    {\n        deposit();",
          "message": "PERSONAL_BANK.fallback (patch_2.sol#50-55) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)\n    public\n    {\n        Message memory newMsg;\n        newMsg.Sender = _adr;\n        newMsg.Time = now;\n        newMsg.Val = _val;\n        newMsg.Data = _data;\n        History.push(newMsg);",
          "message": "LogFile.addMessage (patch_2.sol#73-82) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am);\n        balances[msg.sender]-=_am;\n        require(msg.sender.call.value(_am)());\n        Log.addMessage(msg.sender,_am,\"Collect\");",
          "message": "Low level call in PERSONAL_BANK.collect (patch_2.sol#41-48):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_2.sol#46\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 57,
          "vulnerability_code": "contract PERSONAL_BANK\n{\n    mapping (address=>uint256) public balances;   \n   \n    uint public MinSum = 1 ether;\n    \n    LogFile public Log;\n    \n    bool public initialized;\n    \n    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;\n    }\n    \n    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n    \n    function initialize()\n    public\n    {\n        initialized = true;\n    }\n    \n    function deposit()\n    public\n    payable\n    {\n        balances[msg.sender]+= msg.value;\n        Log.addMessage(msg.sender,msg.value,\"Put\");\n    }\n    \n    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am);\n        balances[msg.sender]-=_am;\n        require(msg.sender.call.value(_am)());\n        Log.addMessage(msg.sender,_am,\"Collect\");\n    }\n    \n    function() \n    public \n    payable\n    {\n        deposit();\n    }\n    ",
          "message": "Contract 'PERSONAL_BANK' (patch_2.sol#3-57) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val)",
          "message": "Parameter '_val' of PERSONAL_BANK.setMinSum (patch_2.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log)",
          "message": "Parameter '_log' of PERSONAL_BANK.setLogFile (patch_2.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am)",
          "message": "Parameter '_am' of PERSONAL_BANK.collect (patch_2.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'PERSONAL_BANK.MinSum' (patch_2.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile public Log;",
          "message": "Variable 'PERSONAL_BANK.Log' (patch_2.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_2.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_val' of LogFile.addMessage (patch_2.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_data' of LogFile.addMessage (patch_2.sol#73) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 71,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_2.sol#71) is not in mixedCase\n"
        }
      ]
    }
  }
}