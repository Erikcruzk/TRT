{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public MinDeposit = 1 ether;",
          "message": "ETH_VAULT.MinDeposit should be constant (patch_1.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "ETH_VAULT.Deposit (patch_1.sol#12-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function CashOut(uint256 _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        require(msg.sender.call.value(_am)());",
          "message": "ETH_VAULT.CashOut (patch_1.sol#18-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}    ",
          "message": "ETH_VAULT.fallback (patch_1.sol#25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function AddMessage(address _adr, uint256 _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(newMessage);",
          "message": "Log.AddMessage (patch_1.sol#37-45) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function CashOut(uint256 _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        require(msg.sender.call.value(_am)());",
          "message": "Low level call in ETH_VAULT.CashOut (patch_1.sol#18-23):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_1.sol#22\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 26,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping (address => uint256) public balances;\n    uint256 public MinDeposit = 1 ether;\n    Log TransferLog;\n\n    function ETH_VAULT(address _log) public {\n        TransferLog = Log(_log);\n    }\n\n    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function CashOut(uint256 _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        require(msg.sender.call.value(_am)());\n    }\n\n    function() public payable {}    ",
          "message": "Contract 'ETH_VAULT' (patch_1.sol#3-26) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_VAULT.ETH_VAULT' (patch_1.sol#8-10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {",
          "message": "Parameter '_log' of ETH_VAULT.ETH_VAULT (patch_1.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "Function 'ETH_VAULT.Deposit' (patch_1.sol#12-16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function CashOut(uint256 _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n        require(msg.sender.call.value(_am)());",
          "message": "Function 'ETH_VAULT.CashOut' (patch_1.sol#18-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint256 _am) public {",
          "message": "Parameter '_am' of ETH_VAULT.CashOut (patch_1.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_VAULT.MinDeposit' (patch_1.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_VAULT.TransferLog' (patch_1.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function AddMessage(address _adr, uint256 _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        History.push(newMessage);",
          "message": "Function 'Log.AddMessage' (patch_1.sol#37-45) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint256 _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_1.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint256 _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_1.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint256 _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_1.sol#37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_1.sol#35) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        }
      ]
    }
  }
}