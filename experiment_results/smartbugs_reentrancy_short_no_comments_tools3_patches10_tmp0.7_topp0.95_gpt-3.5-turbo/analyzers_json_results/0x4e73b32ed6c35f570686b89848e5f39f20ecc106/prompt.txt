/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract PRIVATE_ETH_CELL
{
    mapping (address=>uint256) public balances;   
   
    uint public MinSum;
    
    LogFile Log;
    
    bool intitalized;
    
    function SetMinSum(uint _val)
    public
    {
        require(!intitalized);
        MinSum = _val;
    }
    
    function SetLogFile(address _log)
    public
    {
        require(!intitalized);
        Log = LogFile(_log);
    }
    
    function Initialized()
    public
    {
        intitalized = true;
    }
    
    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,"Put");
    }
    
    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,"Collect");
            }
        }
    }
    
    function() 
    public 
    payable
    {
        Deposit();
    }
    
}



contract LogFile
{
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 37,
        "vulnerability_to_line": null,
        "vulnerability_code": "        balances[msg.sender]+= msg.value;",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 47,
        "vulnerability_to_line": null,
        "vulnerability_code": "            if(msg.sender.call.value(_am)())",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 50,
        "vulnerability_to_line": null,
        "vulnerability_code": "                Log.AddMessage(msg.sender,_am,\"Collect\");",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 49,
        "vulnerability_to_line": null,
        "vulnerability_code": "                balances[msg.sender]-=_am;",
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_26"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 41,
        "vulnerability_to_line": 53,
        "vulnerability_code": "    function Collect(uint _am)\n    public\n    payable\n    {\n        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                Log.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }",
        "message": "Reentrancy in PRIVATE_ETH_CELL.Collect (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#41-53):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#47-51)\n\tState variables written after the call(s):\n\t- balances (0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol#49)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract