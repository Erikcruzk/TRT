{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_8"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 11,
          "vulnerability_code": "  function donate(address _to) public payable {\n    require(!locked[_to]); // Check if the account is not locked\n    balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_9.sol#8-11) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 15,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];",
          "message": "Reentrance.balanceOf (patch_9.sol#13-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 25,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    require(!locked[msg.sender]); // Check if the account is not locked\n    require(balances[msg.sender] >= _amount);\n\n    locked[msg.sender] = true; // Lock the account\n    msg.sender.transfer(_amount);\n    balances[msg.sender] -= _amount;\n    locked[msg.sender] = false; // Unlock the account",
          "message": "Reentrance.withdraw (patch_9.sol#17-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function() public payable {}",
          "message": "Reentrance.fallback (patch_9.sol#27) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.18 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_9.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_9.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_9.sol#17) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_to] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    msg.sender.transfer(_amount);",
          "message": null
        }
      ]
    }
  }
}