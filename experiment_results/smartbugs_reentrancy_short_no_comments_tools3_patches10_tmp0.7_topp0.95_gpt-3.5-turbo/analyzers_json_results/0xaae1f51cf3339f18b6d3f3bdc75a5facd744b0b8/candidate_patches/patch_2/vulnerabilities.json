{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_25"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "DEP_BANK.SetMinSum (patch_2.sol#10-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "DEP_BANK.SetLogFile (patch_2.sol#15-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "DEP_BANK.Initialized (patch_2.sol#20-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && _am > 0 && _am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "DEP_BANK.Collect (patch_2.sol#30-35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function() public payable {\n        Deposit();",
          "message": "DEP_BANK.fallback (patch_2.sol#37-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "LogFile.AddMessage (patch_2.sol#52-60) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && _am > 0 && _am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Low level call in DEP_BANK.Collect (patch_2.sol#30-35):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_2.sol#34\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 40,
          "vulnerability_code": "contract DEP_BANK {\n    mapping (address => uint256) public balances;   \n    uint public MinSum;\n    LogFile Log;\n    bool initialized;\n    uint256 private constant MAX_UINT256 = 2**256 - 1;\n\n    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;\n    }\n    \n    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n    \n    function Initialized() public {\n        initialized = true;\n    }\n    \n    function Deposit() public payable {\n        require(msg.value > 0 && balances[msg.sender] + msg.value > balances[msg.sender]);\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && _am > 0 && _am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());\n    }\n    \n    function() public payable {\n        Deposit();\n    }",
          "message": "Contract 'DEP_BANK' (patch_2.sol#3-40) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 13,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "Function 'DEP_BANK.SetMinSum' (patch_2.sol#10-13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of DEP_BANK.SetMinSum (patch_2.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "Function 'DEP_BANK.SetLogFile' (patch_2.sol#15-18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of DEP_BANK.SetLogFile (patch_2.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "Function 'DEP_BANK.Initialized' (patch_2.sol#20-22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function Deposit() public payable {\n        require(msg.value > 0 && balances[msg.sender] + msg.value > balances[msg.sender]);\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'DEP_BANK.Deposit' (patch_2.sol#24-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 35,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && _am > 0 && _am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Function 'DEP_BANK.Collect' (patch_2.sol#30-35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of DEP_BANK.Collect (patch_2.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'DEP_BANK.MinSum' (patch_2.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'DEP_BANK.Log' (patch_2.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Function 'LogFile.AddMessage' (patch_2.sol#52-60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_2.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_2.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_2.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_2.sol#50) is not in mixedCase\n"
        },
        {
          "name": "unused-state",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant MAX_UINT256 = 2**256 - 1;",
          "message": "DEP_BANK.MAX_UINT256 (patch_2.sol#8) is never used in DEP_BANK\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        }
      ]
    }
  }
}