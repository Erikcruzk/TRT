{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized);\n        MinSum = _val;",
          "message": "PENNY_BY_PENNY.setMinSum (patch_7.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized);\n        Log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.setLogFile (patch_7.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function collect(uint _am) public {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.initialized = true;\n        acc.balance -= _am;\n        msg.sender.transfer(_am);\n        Log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "PENNY_BY_PENNY.collect (patch_7.sol#35-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 46,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "PENNY_BY_PENNY.fallback (patch_7.sol#44-46) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": 68,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        History.push(newMessage);",
          "message": "LogFile.addMessage (patch_7.sol#60-68) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 48,
          "vulnerability_code": "contract PENNY_BY_PENNY {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool initialized;\n    }\n    \n    mapping (address => Holder) public Acc;\n    \n    uint public MinSum;\n    \n    LogFile Log;\n    \n    function setMinSum(uint _val) public {\n        require(!Acc[msg.sender].initialized);\n        MinSum = _val;\n    }\n    \n    function setLogFile(address _log) public {\n        require(!Acc[msg.sender].initialized);\n        Log = LogFile(_log);\n    }\n    \n    function put(uint _lockTime) public payable {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now + _lockTime > acc.unlockTime) {\n            acc.unlockTime = now + _lockTime;\n        }\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am) public {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);\n        acc.initialized = true;\n        acc.balance -= _am;\n        msg.sender.transfer(_am);\n        Log.addMessage(msg.sender, _am, \"Collect\");\n    }\n    \n    function() public payable {\n        put(0);\n    }\n    ",
          "message": "Contract 'PENNY_BY_PENNY' (patch_7.sol#3-48) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of PENNY_BY_PENNY.setMinSum (patch_7.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of PENNY_BY_PENNY.setLogFile (patch_7.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.put (patch_7.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of PENNY_BY_PENNY.collect (patch_7.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'PENNY_BY_PENNY.Acc' (patch_7.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PENNY_BY_PENNY.MinSum' (patch_7.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PENNY_BY_PENNY.Log' (patch_7.sol#14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_7.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_7.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_7.sol#60) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_7.sol#58) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(now + _lockTime > acc.unlockTime) {",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "            acc.unlockTime = now + _lockTime;",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(acc.balance >= MinSum && acc.balance >= _am && now > acc.unlockTime);",
          "message": null
        }
      ]
    }
  }
}