{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function cashOut(uint _am) public payable {\n        require(_am <= balances[msg.sender], \"Amount should be less than or equal to balance\");\n        require(block.number > lastBlock, \"Cash out not allowed yet\");\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n        balances[msg.sender]-=_am;\n        TransferLog.addMessage(msg.sender,_am,\"CashOut\");",
          "message": "Reentrancy in ETH_FUND.cashOut (patch_5.sol#23-30):\n\tExternal calls:\n\t- (success) = msg.sender.call.value(_am)() (patch_5.sol#26)\n\tState variables written after the call(s):\n\t- balances (patch_5.sol#28)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > MinDeposit, \"Deposit amount should be greater than minimum deposit\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.addMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;",
          "message": "Reentrancy in ETH_FUND.deposit (patch_5.sol#16-21):\n\tExternal calls:\n\t- TransferLog.addMessage(msg.sender,msg.value,Deposit) (patch_5.sol#19)\n\tState variables written after the call(s):\n\t- lastBlock (patch_5.sol#20)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_FUND.MinDeposit should be constant (patch_5.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > MinDeposit, \"Deposit amount should be greater than minimum deposit\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.addMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;",
          "message": "ETH_FUND.deposit (patch_5.sol#16-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function cashOut(uint _am) public payable {\n        require(_am <= balances[msg.sender], \"Amount should be less than or equal to balance\");\n        require(block.number > lastBlock, \"Cash out not allowed yet\");\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n        balances[msg.sender]-=_am;\n        TransferLog.addMessage(msg.sender,_am,\"CashOut\");",
          "message": "ETH_FUND.cashOut (patch_5.sol#23-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 49,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {\n        Message memory lastMsg = Message(_adr, _data, _val, now);\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_5.sol#46-49) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.5.0 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function cashOut(uint _am) public payable {\n        require(_am <= balances[msg.sender], \"Amount should be less than or equal to balance\");\n        require(block.number > lastBlock, \"Cash out not allowed yet\");\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n        balances[msg.sender]-=_am;\n        TransferLog.addMessage(msg.sender,_am,\"CashOut\");",
          "message": "Low level call in ETH_FUND.cashOut (patch_5.sol#23-30):\n\t-(success) = msg.sender.call.value(_am)() patch_5.sol#26\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 34,
          "vulnerability_code": "contract ETH_FUND {\n    mapping (address => uint) public balances;\n\n    uint public MinDeposit = 1 ether;\n\n    Log TransferLog;\n\n    uint lastBlock;\n\n    constructor(address _log) public {\n        TransferLog = new Log();\n    }\n\n    function deposit() public payable {\n        require(msg.value > MinDeposit, \"Deposit amount should be greater than minimum deposit\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.addMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;\n    }\n\n    function cashOut(uint _am) public payable {\n        require(_am <= balances[msg.sender], \"Amount should be less than or equal to balance\");\n        require(block.number > lastBlock, \"Cash out not allowed yet\");\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n        balances[msg.sender]-=_am;\n        TransferLog.addMessage(msg.sender,_am,\"CashOut\");\n    }\n\n    function() external payable {}\n",
          "message": "Contract 'ETH_FUND' (patch_5.sol#3-34) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public payable {",
          "message": "Parameter '_am' of ETH_FUND.cashOut (patch_5.sol#23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_FUND.MinDeposit' (patch_5.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_FUND.TransferLog' (patch_5.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_5.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_5.sol#46) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_5.sol#46) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    }
  }
}