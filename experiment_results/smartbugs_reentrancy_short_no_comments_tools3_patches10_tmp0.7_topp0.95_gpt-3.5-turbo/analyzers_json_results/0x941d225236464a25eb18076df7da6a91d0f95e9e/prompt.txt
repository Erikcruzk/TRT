/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract ETH_FUND
{
    mapping (address => uint) public balances;
    
    uint public MinDeposit = 1 ether;
    
    Log TransferLog;
    
    uint lastBlock;
    
    function ETH_FUND(address _log)
    public 
    {
        TransferLog = Log(_log);
    }
    
    function Deposit()
    public
    payable
    {
        if(msg.value > MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");
            lastBlock = block.number;
        }
    }
    
    function CashOut(uint _am)
    public
    payable
    {
        if(_am<=balances[msg.sender]&&block.number>lastBlock)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,"CashOut");
            }
        }
    }
    
    function() public payable{}    
    
}

contract Log 
{
   
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "osiris": {
    "successfull_analysis": true,
    "errors": [
      "SYMBOLIC EXECUTION TIMEOUT"
    ],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 25,
        "vulnerability_to_line": null,
        "vulnerability_code": "            balances[msg.sender]+=msg.value;",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 37,
        "vulnerability_to_line": null,
        "vulnerability_code": "            if(msg.sender.call.value(_am)())",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 40,
        "vulnerability_to_line": null,
        "vulnerability_code": "                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 39,
        "vulnerability_to_line": null,
        "vulnerability_code": "                balances[msg.sender]-=_am;",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 1,
        "vulnerability_to_line": null,
        "vulnerability_code": "pragma solidity ^0.4.19;",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 71,
        "vulnerability_to_line": null,
        "vulnerability_code": "        History.push(LastMsg);",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 71,
        "vulnerability_to_line": null,
        "vulnerability_code": "        History.push(LastMsg);",
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_23"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 31,
        "vulnerability_to_line": 43,
        "vulnerability_code": "    function CashOut(uint _am)\n    public\n    payable\n    {\n        if(_am<=balances[msg.sender]&&block.number>lastBlock)\n        {\n            if(msg.sender.call.value(_am)())\n            {\n                balances[msg.sender]-=_am;\n                TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n            }\n        }",
        "message": "Reentrancy in ETH_FUND.CashOut (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#31-43):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#37-41)\n\tState variables written after the call(s):\n\t- balances (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#39)\n"
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 19,
        "vulnerability_to_line": 29,
        "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        if(msg.value > MinDeposit)\n        {\n            balances[msg.sender]+=msg.value;\n            TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n            lastBlock = block.number;\n        }",
        "message": "Reentrancy in ETH_FUND.Deposit (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#19-29):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#26)\n\tState variables written after the call(s):\n\t- lastBlock (0x941d225236464a25eb18076df7da6a91d0f95e9e.sol#27)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract