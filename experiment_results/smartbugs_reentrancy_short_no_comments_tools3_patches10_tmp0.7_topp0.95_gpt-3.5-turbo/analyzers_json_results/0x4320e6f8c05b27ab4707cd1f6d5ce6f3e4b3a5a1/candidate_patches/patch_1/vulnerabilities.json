{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_27"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory message;",
          "message": "message in LogFile.AddMessage (patch_1.sol#55) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "ACCURAL_DEPOSIT.SetMinSum (patch_1.sol#13-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "ACCURAL_DEPOSIT.SetLogFile (patch_1.sol#18-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "ACCURAL_DEPOSIT.Initialized (patch_1.sol#23-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "ACCURAL_DEPOSIT.Collect (patch_1.sol#32-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function() public payable {\n        Deposit();",
          "message": "ACCURAL_DEPOSIT.fallback (patch_1.sol#39-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory message;\n        message.Sender = _adr;\n        message.Time = now;\n        message.Val = _val;\n        message.Data = _data;\n        History.push(message);",
          "message": "LogFile.AddMessage (patch_1.sol#54-61) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Low level call in ACCURAL_DEPOSIT.Collect (patch_1.sol#32-37):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_1.sol#36\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 42,
          "vulnerability_code": "contract ACCURAL_DEPOSIT {\n    mapping (address => uint256) public balances;\n    uint public MinSum = 1 ether;\n    LogFile Log;\n    bool initialized;\n\n    function ACCURAL_DEPOSIT(address _log) public {\n        Log = LogFile(_log);\n    }\n\n    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;\n    }\n\n    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n\n    function Initialized() public {\n        initialized = true;\n    }\n\n    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());\n    }\n\n    function() public payable {\n        Deposit();\n    }",
          "message": "Contract 'ACCURAL_DEPOSIT' (patch_1.sol#3-42) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 11,
          "vulnerability_code": "    function ACCURAL_DEPOSIT(address _log) public {\n        Log = LogFile(_log);",
          "message": "Function 'ACCURAL_DEPOSIT.ACCURAL_DEPOSIT' (patch_1.sol#9-11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ACCURAL_DEPOSIT(address _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.ACCURAL_DEPOSIT (patch_1.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function SetMinSum(uint _val) public {\n        require(!initialized);\n        MinSum = _val;",
          "message": "Function 'ACCURAL_DEPOSIT.SetMinSum' (patch_1.sol#13-16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetMinSum(uint _val) public {",
          "message": "Parameter '_val' of ACCURAL_DEPOSIT.SetMinSum (patch_1.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function SetLogFile(address _log) public {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "Function 'ACCURAL_DEPOSIT.SetLogFile' (patch_1.sol#18-21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function SetLogFile(address _log) public {",
          "message": "Parameter '_log' of ACCURAL_DEPOSIT.SetLogFile (patch_1.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function Initialized() public {\n        initialized = true;",
          "message": "Function 'ACCURAL_DEPOSIT.Initialized' (patch_1.sol#23-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'ACCURAL_DEPOSIT.Deposit' (patch_1.sol#27-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function Collect(uint _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.AddMessage(msg.sender, _am, \"Collect\");\n        require(msg.sender.call.value(_am)());",
          "message": "Function 'ACCURAL_DEPOSIT.Collect' (patch_1.sol#32-37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public {",
          "message": "Parameter '_am' of ACCURAL_DEPOSIT.Collect (patch_1.sol#32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'ACCURAL_DEPOSIT.MinSum' (patch_1.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'ACCURAL_DEPOSIT.Log' (patch_1.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory message;\n        message.Sender = _adr;\n        message.Time = now;\n        message.Val = _val;\n        message.Data = _data;\n        History.push(message);",
          "message": "Function 'LogFile.AddMessage' (patch_1.sol#54-61) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.AddMessage (patch_1.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.AddMessage (patch_1.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.AddMessage (patch_1.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'LogFile.History' (patch_1.sol#52) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(message);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(message);",
          "message": null
        }
      ]
    }
  }
}