{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_13"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public minDeposit = 1 ether;",
          "message": "ETH_VAULT.minDeposit should be constant (patch_0.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > minDeposit, \"Deposit amount must be greater than minimum deposit\");\n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "ETH_VAULT.deposit (patch_0.sol#12-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function cashOut(uint256 _am) public {\n        require(_am <= balances[msg.sender], \"Insufficient balance\");\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        transferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": "ETH_VAULT.cashOut (patch_0.sol#18-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function getBalance() public view returns (uint256) {\n        return balances[msg.sender];",
          "message": "ETH_VAULT.getBalance (patch_0.sol#25-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 44,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {\n        history.push(Message(_adr, _data, _val, now));",
          "message": "Log.addMessage (patch_0.sol#42-44) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function getLastMessage() public view returns (address, string memory, uint256, uint256) {\n        uint256 lastIndex = history.length - 1;\n        Message memory lastMessage = history[lastIndex];\n        return (lastMessage.sender, lastMessage.data, lastMessage.val, lastMessage.time);",
          "message": "Log.getLastMessage (patch_0.sol#46-50) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.5.0 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 31,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping (address => uint256) private balances;\n    Log private transferLog;\n    uint256 public minDeposit = 1 ether;\n\n    constructor(address _log) public {\n        transferLog = Log(_log);\n    }\n\n    function deposit() public payable {\n        require(msg.value > minDeposit, \"Deposit amount must be greater than minimum deposit\");\n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function cashOut(uint256 _am) public {\n        require(_am <= balances[msg.sender], \"Insufficient balance\");\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        transferLog.addMessage(msg.sender, _am, \"CashOut\");\n    }\n\n    function getBalance() public view returns (uint256) {\n        return balances[msg.sender];\n    }\n\n    function() external payable {}\n",
          "message": "Contract 'ETH_VAULT' (patch_0.sol#3-31) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _log) public {",
          "message": "Parameter '_log' of ETH_VAULT. (patch_0.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint256 _am) public {",
          "message": "Parameter '_am' of ETH_VAULT.cashOut (patch_0.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_0.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_0.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_0.sol#42) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}