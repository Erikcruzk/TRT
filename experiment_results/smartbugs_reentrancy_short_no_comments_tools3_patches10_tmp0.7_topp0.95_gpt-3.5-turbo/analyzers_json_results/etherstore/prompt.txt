/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.0;

contract EtherStore {

    uint256 public withdrawalLimit = 1 ether;
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;

    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(_weiToWithdraw <= withdrawalLimit);
        // limit the time allowed to withdraw
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        require(msg.sender.call.value(_weiToWithdraw)());
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
    }
 }

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 10,
        "vulnerability_to_line": null,
        "vulnerability_code": "        balances[msg.sender] += msg.value;",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 18,
        "vulnerability_to_line": null,
        "vulnerability_code": "        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 19,
        "vulnerability_to_line": null,
        "vulnerability_code": "        require(msg.sender.call.value(_weiToWithdraw)());",
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_7"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 13,
        "vulnerability_to_line": 22,
        "vulnerability_code": "    function withdrawFunds (uint256 _weiToWithdraw) public {\n        require(balances[msg.sender] >= _weiToWithdraw);\n        // limit the withdrawal\n        require(_weiToWithdraw <= withdrawalLimit);\n        // limit the time allowed to withdraw\n        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);\n        require(msg.sender.call.value(_weiToWithdraw)());\n        balances[msg.sender] -= _weiToWithdraw;\n        lastWithdrawTime[msg.sender] = now;",
        "message": "Reentrancy in EtherStore.withdrawFunds (etherstore.sol#13-22):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_weiToWithdraw)()) (etherstore.sol#19)\n\tState variables written after the call(s):\n\t- balances (etherstore.sol#20)\n\t- lastWithdrawTime (etherstore.sol#21)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract