{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "        userBalances[msg.sender] += msg.value;",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked);\n        locked = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        msg.sender.transfer(amountToWithdraw);\n        locked = false;",
          "message": "Reentrancy_secure.withdrawBalance (patch_2.sol#7-14) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > 0);\n        userBalances[msg.sender] += msg.value;",
          "message": "Reentrancy_secure.deposit (patch_2.sol#16-19) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.0;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.0 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 20,
          "vulnerability_code": "contract Reentrancy_secure {\n    mapping (address => uint) private userBalances;\n    bool private locked;\n\n    function withdrawBalance() public {\n        require(!locked);\n        locked = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        msg.sender.transfer(amountToWithdraw);\n        locked = false;\n    }\n\n    function deposit() public payable {\n        require(msg.value > 0);\n        userBalances[msg.sender] += msg.value;\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_2.sol#3-20) is not in CapWords\n"
        }
      ]
    }
  }
}