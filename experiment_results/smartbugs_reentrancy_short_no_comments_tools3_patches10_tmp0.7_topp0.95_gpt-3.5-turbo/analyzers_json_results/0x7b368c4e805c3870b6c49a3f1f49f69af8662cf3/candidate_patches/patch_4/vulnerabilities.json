{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > acc.unlockTime, \"Unlock time has not passed yet.\");",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "W_WALLET.MinSum should be constant (patch_4.sol#12)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        require(_am > 0, \"Amount should be greater than zero.\");\n        Holder storage acc = Acc[msg.sender];\n        require(acc.exists, \"Account does not exist.\");\n        require(acc.balance >= MinSum, \"Balance is less than minimum sum.\");\n        require(acc.balance >= _am, \"Insufficient balance.\");\n        require(now > acc.unlockTime, \"Unlock time has not passed yet.\");\n        acc.balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "W_WALLET.Collect (patch_4.sol#27-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "W_WALLET.fallback (patch_4.sol#39-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMsg);",
          "message": "Log.AddMessage (patch_4.sol#54-62) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 42,
          "vulnerability_code": "contract W_WALLET {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n        bool exists;\n    }\n\n    mapping (address => Holder) public Acc;\n    Log LogFile;\n    uint public MinSum = 1 ether;\n\n    function W_WALLET(address log) public {\n        LogFile = Log(log);\n    }\n\n    function Put(uint _unlockTime) public payable {\n        require(msg.value > 0, \"Amount should be greater than zero.\");\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        acc.exists = true;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public payable {\n        require(_am > 0, \"Amount should be greater than zero.\");\n        Holder storage acc = Acc[msg.sender];\n        require(acc.exists, \"Account does not exist.\");\n        require(acc.balance >= MinSum, \"Balance is less than minimum sum.\");\n        require(acc.balance >= _am, \"Insufficient balance.\");\n        require(now > acc.unlockTime, \"Unlock time has not passed yet.\");\n        acc.balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'W_WALLET' (patch_4.sol#3-42) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function W_WALLET(address log) public {\n        LogFile = Log(log);",
          "message": "Function 'W_WALLET.W_WALLET' (patch_4.sol#14-16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        require(msg.value > 0, \"Amount should be greater than zero.\");\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        acc.exists = true;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'W_WALLET.Put' (patch_4.sol#18-25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of W_WALLET.Put (patch_4.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        require(_am > 0, \"Amount should be greater than zero.\");\n        Holder storage acc = Acc[msg.sender];\n        require(acc.exists, \"Account does not exist.\");\n        require(acc.balance >= MinSum, \"Balance is less than minimum sum.\");\n        require(acc.balance >= _am, \"Insufficient balance.\");\n        require(now > acc.unlockTime, \"Unlock time has not passed yet.\");\n        acc.balance -= _am;\n        LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "Function 'W_WALLET.Collect' (patch_4.sol#27-37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public payable {",
          "message": "Parameter '_am' of W_WALLET.Collect (patch_4.sol#27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'W_WALLET.Acc' (patch_4.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'W_WALLET.LogFile' (patch_4.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'W_WALLET.MinSum' (patch_4.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMsg);",
          "message": "Function 'Log.AddMessage' (patch_4.sol#54-62) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_4.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_4.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_4.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_4.sol#52) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}