/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.2;

contract SimpleDAO {
  mapping (address => uint) public credit;

  function donate(address to) payable {
    credit[to] += msg.value;
  }

  function withdraw(uint amount) {
    if (credit[msg.sender]>= amount) {
      bool res = msg.sender.call.value(amount)();
      credit[msg.sender]-=amount;
    }
  }

  function queryCredit(address to) returns (uint){
    return credit[to];
  }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.
{
  "osiris": {
    "successfull_analysis": true,
    "errors": [],
    "vulnerability_findings": [
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 7,
        "vulnerability_to_line": null,
        "vulnerability_code": "    credit[to] += msg.value;",
        "message": null
      },
      {
        "name": "reentrancy",
        "vulnerability_from_line": 12,
        "vulnerability_to_line": null,
        "vulnerability_code": "      bool res = msg.sender.call.value(amount)();",
        "message": null
      },
      {
        "name": "integer_over-underflow",
        "vulnerability_from_line": 13,
        "vulnerability_to_line": null,
        "vulnerability_code": "      credit[msg.sender]-=amount;",
        "message": null
      }
    ]
  },
  "slither": {
    "successfull_analysis": true,
    "errors": [
      "EXIT_CODE_6"
    ],
    "vulnerability_findings": [
      {
        "name": "reentrancy",
        "vulnerability_from_line": 10,
        "vulnerability_to_line": 15,
        "vulnerability_code": "  function withdraw(uint amount) {\n    if (credit[msg.sender]>= amount) {\n      bool res = msg.sender.call.value(amount)();\n      credit[msg.sender]-=amount;\n    }",
        "message": "Reentrancy in SimpleDAO.withdraw (simple_dao.sol#10-15):\n\tExternal calls:\n\t- res = msg.sender.call.value(amount)() (simple_dao.sol#12)\n\tState variables written after the call(s):\n\t- credit (simple_dao.sol#13)\n"
      }
    ]
  }
}

/// Repaired Solidity Smart Contract