/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract ACCURAL_DEPOSIT
{
    mapping (address=>uint256) public balances;   
   
    uint public MinSum = 1 ether;
    
    LogFile Log = LogFile(0x0486cF65A2F2F3A392CBEa398AFB7F5f0B72FF46);
    
    bool intitalized;
    
    function SetMinSum(uint _val)
    public
    {
        if(intitalized)revert();
        MinSum = _val;
    }
    
    function SetLogFile(address _log)
    public
    {
        if(intitalized)revert();
        Log = LogFile(_log);
    }
    
    function Initialized()
    public
    {
        intitalized = true;
    }
    
    function Deposit()
    public
    payable
    {
        balances[msg.sender]+= msg.value;
        Log.AddMessage(msg.sender,msg.value,"Put");
    }
    
    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,"Collect");
            }
        }
    }
    
    function() 
    public 
    payable
    {
        Deposit();
    }
    
}



contract LogFile
{
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 41-53:
    function Collect(uint _am)
    public
    payable
    {
        if(balances[msg.sender]>=MinSum && balances[msg.sender]>=_am)
        {
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                Log.AddMessage(msg.sender,_am,"Collect");
            }
        }
///  Message:Reentrancy in ACCURAL_DEPOSIT.Collect (0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#41-53):
///   	External calls:
///   	- msg.sender.call.value(_am)() (0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#47-51)
///   	State variables written after the call(s):
///   	- balances (0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol#49)

/// 2. Osiris Analysis Results
/// 2.1. Vulnerability: integer_over-underflow at Line 37:
        balances[msg.sender]+= msg.value;/// 2.2. Vulnerability: reentrancy at Line 47:
            if(msg.sender.call.value(_am)())/// 2.3. Vulnerability: reentrancy at Line 50:
                Log.AddMessage(msg.sender,_am,"Collect");/// 2.4. Vulnerability: integer_over-underflow at Line 49:
                balances[msg.sender]-=_am;


/// Repaired Solidity Smart Contract