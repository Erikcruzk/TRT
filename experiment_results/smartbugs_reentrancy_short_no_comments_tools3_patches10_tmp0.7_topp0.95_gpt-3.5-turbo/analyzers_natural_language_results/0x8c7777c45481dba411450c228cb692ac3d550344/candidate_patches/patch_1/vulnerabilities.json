{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(msg.sender.call.value(_am)()) // Checked the return value of the external call",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_VAULT.MinDeposit should be constant (patch_1.sol#9)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        if(msg.value >= MinDeposit) // Changed '>' to '>=' to allow deposit of exactly MinDeposit\n        {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "ETH_VAULT.Deposit (patch_1.sol#17-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function CashOut(uint _am)\n    public\n    {\n        if(_am <= balances[msg.sender])\n        {\n            balances[msg.sender] -= _am; // Moved this line before the external call\n            if(msg.sender.call.value(_am)()) // Checked the return value of the external call\n            {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "ETH_VAULT.CashOut (patch_1.sol#28-39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable{}    ",
          "message": "ETH_VAULT.fallback (patch_1.sol#41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data)\n    public\n    {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Log.AddMessage (patch_1.sol#57-67) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function CashOut(uint _am)\n    public\n    {\n        if(_am <= balances[msg.sender])\n        {\n            balances[msg.sender] -= _am; // Moved this line before the external call\n            if(msg.sender.call.value(_am)()) // Checked the return value of the external call\n            {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Low level call in ETH_VAULT.CashOut (patch_1.sol#28-39):\n\t-msg.sender.call.value(_am)() patch_1.sol#34-37\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 43,
          "vulnerability_code": "contract ETH_VAULT\n{\n    mapping (address => uint) public balances;\n    \n    Log TransferLog;\n    \n    uint public MinDeposit = 1 ether;\n    \n    function ETH_VAULT(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n    \n    function Deposit()\n    public\n    payable\n    {\n        if(msg.value >= MinDeposit) // Changed '>' to '>=' to allow deposit of exactly MinDeposit\n        {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }\n    }\n    \n    function CashOut(uint _am)\n    public\n    {\n        if(_am <= balances[msg.sender])\n        {\n            balances[msg.sender] -= _am; // Moved this line before the external call\n            if(msg.sender.call.value(_am)()) // Checked the return value of the external call\n            {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }\n    }\n    \n    function() public payable{}    \n    ",
          "message": "Contract 'ETH_VAULT' (patch_1.sol#3-43) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function ETH_VAULT(address _log)\n    public \n    {\n        TransferLog = Log(_log);",
          "message": "Function 'ETH_VAULT.ETH_VAULT' (patch_1.sol#11-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_VAULT(address _log)",
          "message": "Parameter '_log' of ETH_VAULT.ETH_VAULT (patch_1.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        if(msg.value >= MinDeposit) // Changed '>' to '>=' to allow deposit of exactly MinDeposit\n        {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Function 'ETH_VAULT.Deposit' (patch_1.sol#17-26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": 39,
          "vulnerability_code": "    function CashOut(uint _am)\n    public\n    {\n        if(_am <= balances[msg.sender])\n        {\n            balances[msg.sender] -= _am; // Moved this line before the external call\n            if(msg.sender.call.value(_am)()) // Checked the return value of the external call\n            {\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Function 'ETH_VAULT.CashOut' (patch_1.sol#28-39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am)",
          "message": "Parameter '_am' of ETH_VAULT.CashOut (patch_1.sol#28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_VAULT.TransferLog' (patch_1.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_VAULT.MinDeposit' (patch_1.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data)\n    public\n    {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Function 'Log.AddMessage' (patch_1.sol#57-67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_adr' of Log.AddMessage (patch_1.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_val' of Log.AddMessage (patch_1.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_data' of Log.AddMessage (patch_1.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_1.sol#55) is not in mixedCase\n"
        }
      ]
    }
  }
}