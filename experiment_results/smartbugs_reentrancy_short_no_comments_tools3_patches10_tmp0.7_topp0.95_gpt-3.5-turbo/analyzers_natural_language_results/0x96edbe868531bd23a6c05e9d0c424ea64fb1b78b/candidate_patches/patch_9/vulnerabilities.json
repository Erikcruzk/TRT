{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;",
          "message": "PENNY_BY_PENNY.setMinSum (patch_9.sol#19-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.setLogFile (patch_9.sol#26-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function initialize()\n    public\n    {\n        initialized = true;",
          "message": "PENNY_BY_PENNY.initialize (patch_9.sol#33-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 60,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        require(Acc[msg.sender].balance >= MinSum);\n        require(Acc[msg.sender].balance >= _am);\n        require(now > Acc[msg.sender].unlockTime);\n        \n        Acc[msg.sender].balance -= _am;\n        msg.sender.transfer(_am);\n        Log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "PENNY_BY_PENNY.collect (patch_9.sol#50-60) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function() \n    public \n    payable\n    {\n        put(0);",
          "message": "PENNY_BY_PENNY.fallback (patch_9.sol#62-67) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": 94,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)\n    public\n    {\n        Message memory lastMsg = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(lastMsg);",
          "message": "LogFile.addMessage (patch_9.sol#84-94) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.19 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 69,
          "vulnerability_code": "contract PENNY_BY_PENNY  \n{\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n    \n    mapping (address => Holder) public Acc;\n    \n    uint public MinSum;\n    \n    LogFile Log;\n    \n    bool initialized;\n    \n    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;\n    }\n    \n    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n    \n    function initialize()\n    public\n    {\n        initialized = true;\n    }\n    \n    function put(uint _lockTime)\n    public\n    payable\n    {\n        Acc[msg.sender].balance += msg.value;\n        if(now + _lockTime > Acc[msg.sender].unlockTime) {\n            Acc[msg.sender].unlockTime = now + _lockTime;\n        }\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am)\n    public\n    {\n        require(Acc[msg.sender].balance >= MinSum);\n        require(Acc[msg.sender].balance >= _am);\n        require(now > Acc[msg.sender].unlockTime);\n        \n        Acc[msg.sender].balance -= _am;\n        msg.sender.transfer(_am);\n        Log.addMessage(msg.sender, _am, \"Collect\");\n    }\n    \n    function() \n    public \n    payable\n    {\n        put(0);\n    }\n    ",
          "message": "Contract 'PENNY_BY_PENNY' (patch_9.sol#3-69) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val)",
          "message": "Parameter '_val' of PENNY_BY_PENNY.setMinSum (patch_9.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log)",
          "message": "Parameter '_log' of PENNY_BY_PENNY.setLogFile (patch_9.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime)",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.put (patch_9.sol#39) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am)",
          "message": "Parameter '_am' of PENNY_BY_PENNY.collect (patch_9.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'PENNY_BY_PENNY.Acc' (patch_9.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PENNY_BY_PENNY.MinSum' (patch_9.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PENNY_BY_PENNY.Log' (patch_9.sol#15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_9.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_val' of LogFile.addMessage (patch_9.sol#84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 84,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_data' of LogFile.addMessage (patch_9.sol#84) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 93,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        }
      ]
    }
  }
}