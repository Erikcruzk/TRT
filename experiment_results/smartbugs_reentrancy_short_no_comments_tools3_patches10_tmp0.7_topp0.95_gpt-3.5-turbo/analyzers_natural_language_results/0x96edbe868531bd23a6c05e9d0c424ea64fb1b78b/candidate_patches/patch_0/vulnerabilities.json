{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized, \"Contract already initialized\");\n        MinSum = _val;",
          "message": "PENNY_BY_PENNY.setMinSum (patch_0.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized, \"Contract already initialized\");\n        Log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.setLogFile (patch_0.sol#26-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "PENNY_BY_PENNY.initialize (patch_0.sol#31-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum, \"Insufficient balance\");\n        require(acc.balance >= _am, \"Insufficient balance\");\n        require(now > acc.unlockTime, \"Funds are locked\");\n\n        acc.balance -= _am;\n\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n\n        Log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "PENNY_BY_PENNY.collect (patch_0.sol#44-56) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 83,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {\n        Message memory lastMsg = Message({\n            sender: _adr,\n            data: _data,\n            val: _val,\n            time: now\n        });\n\n        history.push(lastMsg);",
          "message": "LogFile.addMessage (patch_0.sol#74-83) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.5.0 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum, \"Insufficient balance\");\n        require(acc.balance >= _am, \"Insufficient balance\");\n        require(now > acc.unlockTime, \"Funds are locked\");\n\n        acc.balance -= _am;\n\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n\n        Log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in PENNY_BY_PENNY.collect (patch_0.sol#44-56):\n\t-(success) = msg.sender.call.value(_am)() patch_0.sol#52\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 61,
          "vulnerability_code": "contract PENNY_BY_PENNY {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n\n    uint public MinSum;\n\n    LogFile Log;\n\n    bool initialized;\n\n    constructor() public {\n        initialized = false;\n    }\n\n    function setMinSum(uint _val) public {\n        require(!initialized, \"Contract already initialized\");\n        MinSum = _val;\n    }\n\n    function setLogFile(address _log) public {\n        require(!initialized, \"Contract already initialized\");\n        Log = LogFile(_log);\n    }\n\n    function initialize() public {\n        initialized = true;\n    }\n\n    function put(uint _lockTime) public payable {\n        Holder storage acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now + _lockTime > acc.unlockTime) {\n            acc.unlockTime = now + _lockTime;\n        }\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint _am) public {\n        Holder storage acc = Acc[msg.sender];\n        require(acc.balance >= MinSum, \"Insufficient balance\");\n        require(acc.balance >= _am, \"Insufficient balance\");\n        require(now > acc.unlockTime, \"Funds are locked\");\n\n        acc.balance -= _am;\n\n        (bool success, ) = msg.sender.call.value(_am)(\"\");\n        require(success, \"Transfer failed\");\n\n        Log.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() external payable {\n        put(0);\n    }",
          "message": "Contract 'PENNY_BY_PENNY' (patch_0.sol#3-61) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of PENNY_BY_PENNY.setMinSum (patch_0.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of PENNY_BY_PENNY.setLogFile (patch_0.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.put (patch_0.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of PENNY_BY_PENNY.collect (patch_0.sol#44) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'PENNY_BY_PENNY.Acc' (patch_0.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PENNY_BY_PENNY.MinSum' (patch_0.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PENNY_BY_PENNY.Log' (patch_0.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_0.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_0.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_0.sol#74) is not in mixedCase\n"
        }
      ]
    }
  }
}