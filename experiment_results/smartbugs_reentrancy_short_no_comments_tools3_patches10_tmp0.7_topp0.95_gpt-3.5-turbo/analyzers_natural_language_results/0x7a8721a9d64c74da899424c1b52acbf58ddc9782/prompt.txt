/// Your task is to repair the following Solidity Smart Contract
pragma solidity ^0.4.19;

contract PrivateDeposit
{
    mapping (address => uint) public balances;
        
    uint public MinDeposit = 1 ether;
    address public owner;
    
    Log TransferLog;
    
    modifier onlyOwner() {
        require(tx.origin == owner);
        _;
    }    
    
    function PrivateDeposit()
    {
        owner = msg.sender;
        TransferLog = new Log();
    }
    
    
    
    function setLog(address _lib) onlyOwner
    {
        TransferLog = Log(_lib);
    }    
    
    function Deposit()
    public
    payable
    {
        if(msg.value >= MinDeposit)
        {
            balances[msg.sender]+=msg.value;
            TransferLog.AddMessage(msg.sender,msg.value,"Deposit");
        }
    }
    
    function CashOut(uint _am)
    {
        if(_am<=balances[msg.sender])
        {            
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,"CashOut");
            }
        }
    }
    
    function() public payable{}    
    
}

contract Log 
{
   
    struct Message
    {
        address Sender;
        string  Data;
        uint Val;
        uint  Time;
    }
    
    Message[] public History;
    
    Message LastMsg;
    
    function AddMessage(address _adr,uint _val,string _data)
    public
    {
        LastMsg.Sender = _adr;
        LastMsg.Time = now;
        LastMsg.Val = _val;
        LastMsg.Data = _data;
        History.push(LastMsg);
    }
}

/// This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

/// 1. Slither Analysis Results
/// 1.1. Vulnerability: reentrancy at Line 41-51:
    function CashOut(uint _am)
    {
        if(_am<=balances[msg.sender])
        {            
            if(msg.sender.call.value(_am)())
            {
                balances[msg.sender]-=_am;
                TransferLog.AddMessage(msg.sender,_am,"CashOut");
            }
        }
///  Message:Reentrancy in PrivateDeposit.CashOut (0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#41-51):
///   	External calls:
///   	- msg.sender.call.value(_am)() (0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#45-49)
///   	State variables written after the call(s):
///   	- balances (0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol#47)

/// 2. Osiris Analysis Results
/// 2.1. Vulnerability: integer_over-underflow at Line 36:
            balances[msg.sender]+=msg.value;/// 2.2. Vulnerability: reentrancy at Line 45:
            if(msg.sender.call.value(_am)())/// 2.3. Vulnerability: reentrancy at Line 48:
                TransferLog.AddMessage(msg.sender,_am,"CashOut");/// 2.4. Vulnerability: integer_over-underflow at Line 47:
                balances[msg.sender]-=_am;


/// Repaired Solidity Smart Contract