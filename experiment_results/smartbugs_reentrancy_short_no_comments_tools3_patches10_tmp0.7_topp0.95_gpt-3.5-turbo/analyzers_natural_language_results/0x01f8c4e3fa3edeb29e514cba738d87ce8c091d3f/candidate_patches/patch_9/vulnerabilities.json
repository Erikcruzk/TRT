{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    },
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function setMinSum(uint256 _val) public {\n        require(!initialized, \"Contract already initialized\");\n        MinSum = _val;",
          "message": "PERSONAL_BANK.setMinSum (patch_9.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized, \"Contract already initialized\");\n        Log = LogFile(_log);",
          "message": "PERSONAL_BANK.setLogFile (patch_9.sol#21-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "PERSONAL_BANK.initialize (patch_9.sol#26-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 40,
          "vulnerability_code": "    function collect(uint256 _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am, \"Insufficient balance\");\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        Log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "PERSONAL_BANK.collect (patch_9.sol#35-40) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": 65,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {\n        Message memory newMsg = Message({\n            Sender: _adr,\n            Time: now,\n            Val: _val,\n            Data: _data\n        });\n        history.push(newMsg);",
          "message": "LogFile.addMessage (patch_9.sol#57-65) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.5.0 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 45,
          "vulnerability_code": "contract PERSONAL_BANK {\n    mapping(address => uint256) public balances;\n\n    uint256 public MinSum = 1 ether;\n\n    LogFile Log;\n\n    bool initialized;\n\n    constructor(address _log) public {\n        Log = LogFile(_log);\n    }\n\n    function setMinSum(uint256 _val) public {\n        require(!initialized, \"Contract already initialized\");\n        MinSum = _val;\n    }\n\n    function setLogFile(address _log) public {\n        require(!initialized, \"Contract already initialized\");\n        Log = LogFile(_log);\n    }\n\n    function initialize() public {\n        initialized = true;\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function collect(uint256 _am) public {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am, \"Insufficient balance\");\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        Log.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function() external payable {\n        deposit();\n    }",
          "message": "Contract 'PERSONAL_BANK' (patch_9.sol#3-45) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _log) public {",
          "message": "Parameter '_log' of PERSONAL_BANK. (patch_9.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint256 _val) public {",
          "message": "Parameter '_val' of PERSONAL_BANK.setMinSum (patch_9.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of PERSONAL_BANK.setLogFile (patch_9.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint256 _am) public {",
          "message": "Parameter '_am' of PERSONAL_BANK.collect (patch_9.sol#35) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public MinSum = 1 ether;",
          "message": "Variable 'PERSONAL_BANK.MinSum' (patch_9.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile Log;",
          "message": "Variable 'PERSONAL_BANK.Log' (patch_9.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_9.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_9.sol#57) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint256 _val, string memory _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_9.sol#57) is not in mixedCase\n"
        }
      ]
    }
  }
}