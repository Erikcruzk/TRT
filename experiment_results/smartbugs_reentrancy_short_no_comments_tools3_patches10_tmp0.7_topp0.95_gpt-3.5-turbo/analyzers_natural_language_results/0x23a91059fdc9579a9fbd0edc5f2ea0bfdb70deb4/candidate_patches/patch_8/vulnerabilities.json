{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(_am); // use transfer() instead of call.value() to prevent reentrancy vulnerability",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_18"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "PrivateBank.MinDeposit should be constant (patch_8.sol#7)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        require(msg.value >= MinDeposit); // add require statement to ensure minimum deposit is met\n        balances[msg.sender]+=msg.value;\n        TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");",
          "message": "PrivateBank.Deposit (patch_8.sol#16-23) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function CashOut(uint _am)\n    {\n        require(_am<=balances[msg.sender]); // add require statement to ensure user has sufficient balance\n        balances[msg.sender]-=_am;\n        TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n        msg.sender.transfer(_am); // use transfer() instead of call.value() to prevent reentrancy vulnerability",
          "message": "PrivateBank.CashOut (patch_8.sol#25-31) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable{}    ",
          "message": "PrivateBank.fallback (patch_8.sol#33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        Message memory newMsg = Message({Sender: _adr, Data: _data, Val: _val, Time: now}); // create new Message struct instead of reusing old one\n        History.push(newMsg);",
          "message": "Log.AddMessage (patch_8.sol#50-55) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.19 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 14,
          "vulnerability_code": "    function PrivateBank(address _log)\n    {\n        TransferLog = Log(_log);",
          "message": "Function 'PrivateBank.PrivateBank' (patch_8.sol#11-14) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function PrivateBank(address _log)",
          "message": "Parameter '_log' of PrivateBank.PrivateBank (patch_8.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 23,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        require(msg.value >= MinDeposit); // add require statement to ensure minimum deposit is met\n        balances[msg.sender]+=msg.value;\n        TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");",
          "message": "Function 'PrivateBank.Deposit' (patch_8.sol#16-23) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 31,
          "vulnerability_code": "    function CashOut(uint _am)\n    {\n        require(_am<=balances[msg.sender]); // add require statement to ensure user has sufficient balance\n        balances[msg.sender]-=_am;\n        TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n        msg.sender.transfer(_am); // use transfer() instead of call.value() to prevent reentrancy vulnerability",
          "message": "Function 'PrivateBank.CashOut' (patch_8.sol#25-31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am)",
          "message": "Parameter '_am' of PrivateBank.CashOut (patch_8.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'PrivateBank.MinDeposit' (patch_8.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'PrivateBank.TransferLog' (patch_8.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 55,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        Message memory newMsg = Message({Sender: _adr, Data: _data, Val: _val, Time: now}); // create new Message struct instead of reusing old one\n        History.push(newMsg);",
          "message": "Function 'Log.AddMessage' (patch_8.sol#50-55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_adr' of Log.AddMessage (patch_8.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_val' of Log.AddMessage (patch_8.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_data' of Log.AddMessage (patch_8.sol#50) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_8.sol#48) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Truncation bugs",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        }
      ]
    }
  }
}