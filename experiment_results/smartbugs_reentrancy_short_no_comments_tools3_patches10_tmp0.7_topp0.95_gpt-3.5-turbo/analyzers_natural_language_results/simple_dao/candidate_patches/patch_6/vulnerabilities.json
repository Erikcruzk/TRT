{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    credit[to] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bool res = msg.sender.call.value(amount)();",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_5"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "  function donate(address to) payable {\n    credit[to] += msg.value;",
          "message": "SimpleDAO.donate (patch_6.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 16,
          "vulnerability_code": "  function withdraw(uint amount) {\n    if (credit[msg.sender]>= amount) {\n      credit[msg.sender]-=amount;\n      bool res = msg.sender.call.value(amount)();\n      require(res);\n    }",
          "message": "SimpleDAO.withdraw (patch_6.sol#10-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "  function queryCredit(address to) public view returns (uint){\n    return credit[to];",
          "message": "SimpleDAO.queryCredit (patch_6.sol#18-20) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.2;",
          "message": "Detected issues with version pragma in patch_6.sol:\n\t- pragma solidity^0.4.2 (patch_6.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 16,
          "vulnerability_code": "  function withdraw(uint amount) {\n    if (credit[msg.sender]>= amount) {\n      credit[msg.sender]-=amount;\n      bool res = msg.sender.call.value(amount)();\n      require(res);\n    }",
          "message": "Low level call in SimpleDAO.withdraw (patch_6.sol#10-16):\n\t-res = msg.sender.call.value(amount)() patch_6.sol#13\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "      bool res = msg.sender.call.value(amount)();",
          "message": null
        }
      ]
    }
  }
}