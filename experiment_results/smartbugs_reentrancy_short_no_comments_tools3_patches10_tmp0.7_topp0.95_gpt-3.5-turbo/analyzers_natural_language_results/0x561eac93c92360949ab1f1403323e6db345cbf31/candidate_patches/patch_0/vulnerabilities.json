{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 44,
          "vulnerability_to_line": null,
          "vulnerability_code": "        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        minSum = _val;",
          "message": "BANK_SAFE.setMinSum (patch_0.sol#10-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        log = LogFile(_log);",
          "message": "BANK_SAFE.setLogFile (patch_0.sol#17-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function initialize()\n    public\n    {\n        initialized = true;",
          "message": "BANK_SAFE.initialize (patch_0.sol#24-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        require(msg.sender.call.value(_am)());\n        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "BANK_SAFE.collect (patch_0.sol#38-45) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 52,
          "vulnerability_code": "    function()\n    public \n    payable\n    {\n        deposit();",
          "message": "BANK_SAFE.fallback (patch_0.sol#47-52) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 77,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)\n    public\n    {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMessage);",
          "message": "LogFile.addMessage (patch_0.sol#67-77) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": 45,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        require(msg.sender.call.value(_am)());\n        log.addMessage(msg.sender, _am, \"Collect\");",
          "message": "Low level call in BANK_SAFE.collect (patch_0.sol#38-45):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_0.sol#43\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 53,
          "vulnerability_code": "contract BANK_SAFE\n{\n    mapping (address => uint256) public balances;   \n    uint public minSum;\n    LogFile public log;\n    bool public initialized;\n\n    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        minSum = _val;\n    }\n\n    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        log = LogFile(_log);\n    }\n\n    function initialize()\n    public\n    {\n        initialized = true;\n    }\n\n    function deposit()\n    public\n    payable\n    {\n        balances[msg.sender] += msg.value;\n        log.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        require(msg.sender.call.value(_am)());\n        log.addMessage(msg.sender, _am, \"Collect\");\n    }\n\n    function()\n    public \n    payable\n    {\n        deposit();\n    }",
          "message": "Contract 'BANK_SAFE' (patch_0.sol#3-53) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val)",
          "message": "Parameter '_val' of BANK_SAFE.setMinSum (patch_0.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log)",
          "message": "Parameter '_log' of BANK_SAFE.setLogFile (patch_0.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 38,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am)",
          "message": "Parameter '_am' of BANK_SAFE.collect (patch_0.sol#38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_0.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_val' of LogFile.addMessage (patch_0.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_data' of LogFile.addMessage (patch_0.sol#67) is not in mixedCase\n"
        }
      ]
    }
  }
}