{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[_to] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_amount)()) {",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "external-function",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": 8,
          "vulnerability_code": "    function donate(address _to) public payable {\n        balances[_to] += msg.value;",
          "message": "Reentrance.donate (patch_6.sol#6-8) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {\n        return balances[_who];",
          "message": "Reentrance.balanceOf (patch_6.sol#10-12) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] -= _amount;\n        if(msg.sender.call.value(_amount)()) {\n            // do nothing\n        }",
          "message": "Reentrance.withdraw (patch_6.sol#14-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}",
          "message": "Reentrance.fallback (patch_6.sol#22) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in patch_6.sol:\n\t- pragma solidity^0.4.18 (patch_6.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function withdraw(uint _amount) public {\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] -= _amount;\n        if(msg.sender.call.value(_amount)()) {\n            // do nothing\n        }",
          "message": "Low level call in Reentrance.withdraw (patch_6.sol#14-20):\n\t-msg.sender.call.value(_amount)() patch_6.sol#17-19\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (patch_6.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (patch_6.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (patch_6.sol#14) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_amount)()) {",
          "message": null
        }
      ]
    }
  }
}