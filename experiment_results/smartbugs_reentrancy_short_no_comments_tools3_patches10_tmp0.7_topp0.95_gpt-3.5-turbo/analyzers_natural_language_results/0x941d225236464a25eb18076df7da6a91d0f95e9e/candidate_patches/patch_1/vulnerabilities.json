{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        require(msg.value > MinDeposit, \"Minimum deposit amount not met\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;",
          "message": "Reentrancy in ETH_FUND.Deposit (patch_1.sol#19-27):\n\tExternal calls:\n\t- TransferLog.AddMessage(msg.sender,msg.value,Deposit) (patch_1.sol#25)\n\tState variables written after the call(s):\n\t- lastBlock (patch_1.sol#26)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "ETH_FUND.MinDeposit should be constant (patch_1.sol#7)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        require(msg.value > MinDeposit, \"Minimum deposit amount not met\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;",
          "message": "ETH_FUND.Deposit (patch_1.sol#19-27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function CashOut(uint _am)\n    public\n    {\n        require(_am<=balances[msg.sender], \"Insufficient balance\");\n        require(block.number>lastBlock, \"Cannot withdraw before the last deposit block\");\n        balances[msg.sender]-=_am;\n        msg.sender.transfer(_am);\n        TransferLog.AddMessage(msg.sender,_am,\"CashOut\");",
          "message": "ETH_FUND.CashOut (patch_1.sol#29-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable{}    ",
          "message": "ETH_FUND.fallback (patch_1.sol#39) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_1.sol#58-66) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_1.sol:\n\t- pragma solidity^0.4.19 (patch_1.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 41,
          "vulnerability_code": "contract ETH_FUND\n{\n    mapping (address => uint) public balances;\n    \n    uint public MinDeposit = 1 ether;\n    \n    Log TransferLog;\n    \n    uint lastBlock;\n    \n    constructor(address _log)\n    public \n    {\n        TransferLog = Log(_log);\n    }\n    \n    function Deposit()\n    public\n    payable\n    {\n        require(msg.value > MinDeposit, \"Minimum deposit amount not met\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;\n    }\n    \n    function CashOut(uint _am)\n    public\n    {\n        require(_am<=balances[msg.sender], \"Insufficient balance\");\n        require(block.number>lastBlock, \"Cannot withdraw before the last deposit block\");\n        balances[msg.sender]-=_am;\n        msg.sender.transfer(_am);\n        TransferLog.AddMessage(msg.sender,_am,\"CashOut\");\n    }\n    \n    function() public payable{}    \n    ",
          "message": "Contract 'ETH_FUND' (patch_1.sol#3-41) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _log)",
          "message": "Parameter '_log' of ETH_FUND. (patch_1.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 27,
          "vulnerability_code": "    function Deposit()\n    public\n    payable\n    {\n        require(msg.value > MinDeposit, \"Minimum deposit amount not met\");\n        balances[msg.sender]+=msg.value;\n        TransferLog.AddMessage(msg.sender,msg.value,\"Deposit\");\n        lastBlock = block.number;",
          "message": "Function 'ETH_FUND.Deposit' (patch_1.sol#19-27) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function CashOut(uint _am)\n    public\n    {\n        require(_am<=balances[msg.sender], \"Insufficient balance\");\n        require(block.number>lastBlock, \"Cannot withdraw before the last deposit block\");\n        balances[msg.sender]-=_am;\n        msg.sender.transfer(_am);\n        TransferLog.AddMessage(msg.sender,_am,\"CashOut\");",
          "message": "Function 'ETH_FUND.CashOut' (patch_1.sol#29-37) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am)",
          "message": "Parameter '_am' of ETH_FUND.CashOut (patch_1.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'ETH_FUND.MinDeposit' (patch_1.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'ETH_FUND.TransferLog' (patch_1.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 66,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_1.sol#58-66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_adr' of Log.AddMessage (patch_1.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_val' of Log.AddMessage (patch_1.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr,uint _val,string _data)",
          "message": "Parameter '_data' of Log.AddMessage (patch_1.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_1.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 56,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message LastMsg;",
          "message": "Variable 'Log.LastMsg' (patch_1.sol#56) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "        msg.sender.transfer(_am);",
          "message": null
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender]+=msg.value;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(LastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(LastMsg);",
          "message": null
        }
      ]
    }
  }
}