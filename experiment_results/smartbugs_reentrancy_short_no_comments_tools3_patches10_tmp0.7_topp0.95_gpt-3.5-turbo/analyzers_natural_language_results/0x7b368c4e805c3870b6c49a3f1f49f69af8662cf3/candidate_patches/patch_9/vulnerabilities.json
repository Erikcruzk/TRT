{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 62,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMsg);",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 37,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)(), \"Error: withdrawal failed.\");",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(now > acc.unlockTime, \"Funds are locked and cannot be withdrawn yet.\");",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "constable-states",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "W_WALLET.MinSum should be constant (patch_9.sol#13)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function withdraw(uint _am) public {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum, \"Account balance must be greater than or equal to minimum sum.\");\n        require(acc.balance >= _am, \"Requested withdrawal amount must be less than or equal to account balance.\");\n        require(now > acc.unlockTime, \"Funds are locked and cannot be withdrawn yet.\");\n        acc.balance -= _am;\n        emit Withdrawal(msg.sender, _am);\n        require(msg.sender.call.value(_am)(), \"Error: withdrawal failed.\");",
          "message": "W_WALLET.withdraw (patch_9.sol#30-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function() public payable {\n        deposit(0);",
          "message": "W_WALLET.fallback (patch_9.sol#40-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMsg);",
          "message": "Log.addMessage (patch_9.sol#55-63) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function withdraw(uint _am) public {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum, \"Account balance must be greater than or equal to minimum sum.\");\n        require(acc.balance >= _am, \"Requested withdrawal amount must be less than or equal to account balance.\");\n        require(now > acc.unlockTime, \"Funds are locked and cannot be withdrawn yet.\");\n        acc.balance -= _am;\n        emit Withdrawal(msg.sender, _am);\n        require(msg.sender.call.value(_am)(), \"Error: withdrawal failed.\");",
          "message": "Low level call in W_WALLET.withdraw (patch_9.sol#30-38):\n\t-require(bool,string)(msg.sender.call.value(_am)(),Error: withdrawal failed.) patch_9.sol#37\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 43,
          "vulnerability_code": "contract W_WALLET {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n\n    Log LogFile;\n\n    uint public MinSum = 1 ether;\n\n    event Deposit(address indexed depositor, uint value);\n    event Withdrawal(address indexed withdrawer, uint value);\n\n    function W_WALLET(address log) public{\n        LogFile = Log(log);\n    }\n\n    function deposit(uint _unlockTime) public payable {\n        require(msg.value > 0, \"Deposit amount must be greater than 0.\");\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        acc.unlockTime = _unlockTime > now ? _unlockTime : now;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint _am) public {\n        var acc = Acc[msg.sender];\n        require(acc.balance >= MinSum, \"Account balance must be greater than or equal to minimum sum.\");\n        require(acc.balance >= _am, \"Requested withdrawal amount must be less than or equal to account balance.\");\n        require(now > acc.unlockTime, \"Funds are locked and cannot be withdrawn yet.\");\n        acc.balance -= _am;\n        emit Withdrawal(msg.sender, _am);\n        require(msg.sender.call.value(_am)(), \"Error: withdrawal failed.\");\n    }\n\n    function() public payable {\n        deposit(0);\n    }",
          "message": "Contract 'W_WALLET' (patch_9.sol#3-43) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function W_WALLET(address log) public{\n        LogFile = Log(log);",
          "message": "Function 'W_WALLET.W_WALLET' (patch_9.sol#18-20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function deposit(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of W_WALLET.deposit (patch_9.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdraw(uint _am) public {",
          "message": "Parameter '_am' of W_WALLET.withdraw (patch_9.sol#30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'W_WALLET.Acc' (patch_9.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log LogFile;",
          "message": "Variable 'W_WALLET.LogFile' (patch_9.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 13,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 1 ether;",
          "message": "Variable 'W_WALLET.MinSum' (patch_9.sol#13) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_9.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_9.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_9.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_9.sol#53) is not in mixedCase\n"
        }
      ]
    }
  }
}