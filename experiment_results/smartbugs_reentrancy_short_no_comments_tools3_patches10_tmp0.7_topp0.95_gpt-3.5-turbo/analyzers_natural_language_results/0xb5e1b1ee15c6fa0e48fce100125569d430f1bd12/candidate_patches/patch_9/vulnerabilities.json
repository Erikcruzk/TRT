{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_14"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory newMsg;",
          "message": "newMsg in Log.addMessage (patch_9.sol#55) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minDeposit = 1 ether;",
          "message": "Private_Bank.minDeposit should be constant (patch_9.sol#7)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function deposit()\n    public\n    payable\n    {\n        require(msg.value > minDeposit);\n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "Private_Bank.deposit (patch_9.sol#17-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 33,
          "vulnerability_code": "    function cashOut(uint _am)\n    public\n    {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        transferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": "Private_Bank.cashOut (patch_9.sol#26-33) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable{}    ",
          "message": "Private_Bank.fallback (patch_9.sol#35) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": 61,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)\n    public\n    {\n        Message memory newMsg;\n        newMsg.sender = _adr;\n        newMsg.time = now;\n        newMsg.val = _val;\n        newMsg.data = _data;\n        history.push(newMsg);",
          "message": "Log.addMessage (patch_9.sol#52-61) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.19 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 37,
          "vulnerability_code": "contract Private_Bank\n{\n    mapping (address => uint) public balances;\n    \n    uint public minDeposit = 1 ether;\n    \n    Log transferLog;\n    \n    function Private_Bank(address _log)\n    public\n    {\n        transferLog = Log(_log);\n    }\n    \n    function deposit()\n    public\n    payable\n    {\n        require(msg.value > minDeposit);\n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n    \n    function cashOut(uint _am)\n    public\n    {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        msg.sender.transfer(_am);\n        transferLog.addMessage(msg.sender, _am, \"CashOut\");\n    }\n    \n    function() public payable{}    \n    ",
          "message": "Contract 'Private_Bank' (patch_9.sol#3-37) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function Private_Bank(address _log)\n    public\n    {\n        transferLog = Log(_log);",
          "message": "Function 'Private_Bank.Private_Bank' (patch_9.sol#11-15) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Private_Bank(address _log)",
          "message": "Parameter '_log' of Private_Bank.Private_Bank (patch_9.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am)",
          "message": "Parameter '_am' of Private_Bank.cashOut (patch_9.sol#26) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_adr' of Log.addMessage (patch_9.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_val' of Log.addMessage (patch_9.sol#52) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 52,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_data' of Log.addMessage (patch_9.sol#52) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 60,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        }
      ]
    }
  }
}