{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Concurrency bug",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "        recipient.transfer(amountToWithdraw);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        rewardsForA[recipient] += 100;",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_3"
      ],
      "vulnerability_findings": [
        {
          "name": "arbitrary-send",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(amountToWithdraw > 0);\n        recipient.transfer(amountToWithdraw);",
          "message": "Reentrancy_bonus.withdrawReward (patch_4.sol#11-16) sends eth to arbitrary user\n\tDangerous calls:\n\t- recipient.transfer(amountToWithdraw) (patch_4.sol#15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        rewardsForA[recipient] += 100;\n        claimedBonus[recipient] = true;\n        withdrawReward(recipient); // FIXED: Withdrawal is now called after the claimedBonus flag is set",
          "message": "Reentrancy_bonus.getFirstWithdrawalBonus (patch_4.sol#18-24) should be declared external\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 25,
          "vulnerability_code": "contract Reentrancy_bonus{\n\n    // FIXED: Added \"public\" to ensure visibility\n    mapping (address => uint) public userBalances;\n    mapping (address => bool) public claimedBonus;\n    mapping (address => uint) public rewardsForA;\n\n    // FIXED: Use of \"transfer\" instead of \"call.value\" to prevent reentrancy attacks\n    function withdrawReward(address recipient) public {\n        uint amountToWithdraw = rewardsForA[recipient];\n        rewardsForA[recipient] = 0;\n        require(amountToWithdraw > 0);\n        recipient.transfer(amountToWithdraw);\n    }\n\n    function getFirstWithdrawalBonus(address recipient) public {\n        require(!claimedBonus[recipient]); // Each recipient should only be able to claim the bonus once\n\n        rewardsForA[recipient] += 100;\n        claimedBonus[recipient] = true;\n        withdrawReward(recipient); // FIXED: Withdrawal is now called after the claimedBonus flag is set\n    }",
          "message": "Contract 'Reentrancy_bonus' (patch_4.sol#3-25) is not in CapWords\n"
        }
      ]
    }
  }
}