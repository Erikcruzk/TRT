{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": false,
      "errors": [
        "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
      ],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > minDeposit, \"Deposit amount should be greater than minimum deposit amount.\");\n        \n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "Reentrancy in ETH_FUND.deposit (patch_2.sol#16-22):\n\tExternal calls:\n\t- transferLog.addMessage(msg.sender,msg.value,Deposit) (patch_2.sol#20)\n\tState variables written after the call(s):\n\t- lastBlock (patch_2.sol#21)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minDeposit = 1 ether;",
          "message": "ETH_FUND.minDeposit should be constant (patch_2.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > minDeposit, \"Deposit amount should be greater than minimum deposit amount.\");\n        \n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;",
          "message": "ETH_FUND.deposit (patch_2.sol#16-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender], \"Cash out amount should be less than or equal to user's balance.\");\n        require(block.number > lastBlock, \"Cash out not allowed. Please try after some time.\");\n        \n        balances[msg.sender] -= _am;\n        if(msg.sender.send(_am)) {\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        }",
          "message": "ETH_FUND.cashOut (patch_2.sol#24-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {\n        history.push(Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        }));",
          "message": "Log.addMessage (patch_2.sol#47-54) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.5.0;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.5.0 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 35,
          "vulnerability_code": "contract ETH_FUND {\n    mapping (address => uint) public balances;\n    \n    uint public minDeposit = 1 ether;\n    \n    Log transferLog;\n    \n    uint lastBlock;\n    \n    constructor(address _log) public {\n        transferLog = Log(_log);\n    }\n    \n    function deposit() public payable {\n        require(msg.value > minDeposit, \"Deposit amount should be greater than minimum deposit amount.\");\n        \n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n        lastBlock = block.number;\n    }\n    \n    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender], \"Cash out amount should be less than or equal to user's balance.\");\n        require(block.number > lastBlock, \"Cash out not allowed. Please try after some time.\");\n        \n        balances[msg.sender] -= _am;\n        if(msg.sender.send(_am)) {\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        }\n    }\n    \n    function() external payable {}    ",
          "message": "Contract 'ETH_FUND' (patch_2.sol#3-35) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    constructor(address _log) public {",
          "message": "Parameter '_log' of ETH_FUND. (patch_2.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of ETH_FUND.cashOut (patch_2.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_2.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_2.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string memory _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#47) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": false,
      "errors": [
        "Solidity compilation failed"
      ],
      "vulnerability_findings": []
    }
  }
}