{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "            transferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory newMessage;",
          "message": "newMessage in Log.addMessage (patch_9.sol#42) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minDeposit = 1 ether;",
          "message": "ETH_VAULT.minDeposit should be constant (patch_9.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > minDeposit);\n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "ETH_VAULT.deposit (patch_9.sol#12-16) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        } else {\n            balances[msg.sender] += _am;\n        }",
          "message": "ETH_VAULT.cashOut (patch_9.sol#18-26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}    ",
          "message": "ETH_VAULT.fallback (patch_9.sol#28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": 48,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage;\n        newMessage.sender = _adr;\n        newMessage.time = now;\n        newMessage.val = _val;\n        newMessage.data = _data;\n        history.push(newMessage);",
          "message": "Log.addMessage (patch_9.sol#41-48) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_9.sol:\n\t- pragma solidity^0.4.19 (patch_9.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 26,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        } else {\n            balances[msg.sender] += _am;\n        }",
          "message": "Low level call in ETH_VAULT.cashOut (patch_9.sol#18-26):\n\t-msg.sender.call.value(_am)() patch_9.sol#21-25\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 29,
          "vulnerability_code": "contract ETH_VAULT {\n    mapping (address => uint) public balances;\n    uint public minDeposit = 1 ether;\n    Log transferLog;\n\n    function ETH_VAULT(address _log) public {\n        transferLog = Log(_log);\n    }\n\n    function deposit() public payable {\n        require(msg.value > minDeposit);\n        balances[msg.sender] += msg.value;\n        transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n\n    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        balances[msg.sender] -= _am;\n        if (msg.sender.call.value(_am)()) {\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        } else {\n            balances[msg.sender] += _am;\n        }\n    }\n\n    function() public payable {}    ",
          "message": "Contract 'ETH_VAULT' (patch_9.sol#3-29) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {\n        transferLog = Log(_log);",
          "message": "Function 'ETH_VAULT.ETH_VAULT' (patch_9.sol#8-10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function ETH_VAULT(address _log) public {",
          "message": "Parameter '_log' of ETH_VAULT.ETH_VAULT (patch_9.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of ETH_VAULT.cashOut (patch_9.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_9.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_9.sol#41) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_9.sol#41) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}