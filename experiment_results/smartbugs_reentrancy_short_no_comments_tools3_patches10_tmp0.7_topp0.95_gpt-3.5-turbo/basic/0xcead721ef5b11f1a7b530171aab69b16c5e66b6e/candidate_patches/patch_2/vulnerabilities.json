{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_12"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        Holder storage holder = acc[msg.sender];\n        if (holder.balance >= minSum && holder.balance >= _am && now > holder.unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                holder.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Reentrancy in Wallet.collect (patch_2.sol#24-32):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_2.sol#27-30)\n\tState variables written after the call(s):\n\t- acc (patch_2.sol#28)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_2.sol#50) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public minSum = 1 ether;    ",
          "message": "Wallet.minSum should be constant (patch_2.sol#10)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        Holder storage holder = acc[msg.sender];\n        if (holder.balance >= minSum && holder.balance >= _am && now > holder.unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                holder.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Wallet.collect (patch_2.sol#24-32) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": 36,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "Wallet.fallback (patch_2.sol#34-36) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 56,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_2.sol#49-56) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function collect(uint _am) public payable {\n        Holder storage holder = acc[msg.sender];\n        if (holder.balance >= minSum && holder.balance >= _am && now > holder.unlockTime) {\n            if (msg.sender.call.value(_am)()) {\n                holder.balance -= _am;\n                logFile.addMessage(msg.sender, _am, \"Collect\");\n            }\n        }",
          "message": "Low level call in Wallet.collect (patch_2.sol#24-32):\n\t-msg.sender.call.value(_am)() patch_2.sol#27-30\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of Wallet.put (patch_2.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public payable {",
          "message": "Parameter '_am' of Wallet.collect (patch_2.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_2.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_2.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#49) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "                logFile.addMessage(msg.sender, _am, \"Collect\");",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "                holder.balance -= _am;",
          "message": null
        }
      ]
    }
  }
}