{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(amountToWithdraw)());",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_4"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;",
          "message": "Reentrancy in Reentrancy_secure.withdrawBalance (patch_3.sol#9-16):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(amountToWithdraw)()) (patch_3.sol#14)\n\tState variables written after the call(s):\n\t- locked (patch_3.sol#15)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;",
          "message": "Reentrancy_secure.withdrawBalance (patch_3.sol#9-16) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": 16,
          "vulnerability_code": "    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;",
          "message": "Low level call in Reentrancy_secure.withdrawBalance (patch_3.sol#9-16):\n\t-require(bool)(msg.sender.call.value(amountToWithdraw)()) patch_3.sol#14\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 17,
          "vulnerability_code": "contract Reentrancy_secure {\n\n    // SECURE\n    mapping (address => uint) private userBalances;\n    mapping (address => bool) private locked;\n\n    function withdrawBalance() public {\n        require(!locked[msg.sender]);\n        locked[msg.sender] = true;\n        uint amountToWithdraw = userBalances[msg.sender];\n        userBalances[msg.sender] = 0;\n        require(msg.sender.call.value(amountToWithdraw)());\n        locked[msg.sender] = false;\n    }",
          "message": "Contract 'Reentrancy_secure' (patch_3.sol#3-17) is not in CapWords\n"
        }
      ]
    }
  }
}