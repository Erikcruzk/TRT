{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_10"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 22,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }",
          "message": "Reentrancy in Reentrance.withdraw (reentrance.sol#15-22):\n\tExternal calls:\n\t- msg.sender.call.value(_amount)() (reentrance.sol#17-19)\n\tState variables written after the call(s):\n\t- balances (reentrance.sol#20)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "  function donate(address _to) public payable {\n    balances[_to] += msg.value;",
          "message": "Reentrance.donate (reentrance.sol#7-9) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": 13,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {\n    return balances[_who];",
          "message": "Reentrance.balanceOf (reentrance.sol#11-13) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 22,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }",
          "message": "Reentrance.withdraw (reentrance.sol#15-22) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function() public payable {}",
          "message": "Reentrance.fallback (reentrance.sol#24) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.18;",
          "message": "Detected issues with version pragma in reentrance.sol:\n\t- pragma solidity^0.4.18 (reentrance.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": 22,
          "vulnerability_code": "  function withdraw(uint _amount) public {\n    if(balances[msg.sender] >= _amount) {\n      if(msg.sender.call.value(_amount)()) {\n        _amount;\n      }\n      balances[msg.sender] -= _amount;\n    }",
          "message": "Low level call in Reentrance.withdraw (reentrance.sol#15-22):\n\t-msg.sender.call.value(_amount)() reentrance.sol#17-19\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function donate(address _to) public payable {",
          "message": "Parameter '_to' of Reentrance.donate (reentrance.sol#7) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function balanceOf(address _who) public view returns (uint balance) {",
          "message": "Parameter '_who' of Reentrance.balanceOf (reentrance.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 15,
          "vulnerability_to_line": null,
          "vulnerability_code": "  function withdraw(uint _amount) public {",
          "message": "Parameter '_amount' of Reentrance.withdraw (reentrance.sol#15) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack Depth Attack Vulnerability",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if(msg.sender.call.value(_amount)()) {",
          "message": null
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Callstack bug",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if(msg.sender.call.value(_amount)()) {",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    balances[_to] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "      if(msg.sender.call.value(_amount)()) {",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "      balances[msg.sender] -= _amount;",
          "message": null
        }
      ]
    }
  }
}