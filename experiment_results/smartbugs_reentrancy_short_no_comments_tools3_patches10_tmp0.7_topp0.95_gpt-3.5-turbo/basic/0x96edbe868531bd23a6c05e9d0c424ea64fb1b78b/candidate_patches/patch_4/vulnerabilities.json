{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMsg);",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        if(msg.sender.call.value(_am)()) {\n            account.balance -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in PENNY_BY_PENNY.collect (patch_4.sol#40-47):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_4.sol#43-46)\n\tState variables written after the call(s):\n\t- acc (patch_4.sol#44)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;",
          "message": "PENNY_BY_PENNY.setMinSum (patch_4.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);",
          "message": "PENNY_BY_PENNY.setLogFile (patch_4.sol#22-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": 29,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "PENNY_BY_PENNY.initialize (patch_4.sol#27-29) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        if(msg.sender.call.value(_am)()) {\n            account.balance -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "PENNY_BY_PENNY.collect (patch_4.sol#40-47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function() public payable {\n        put(0);",
          "message": "PENNY_BY_PENNY.fallback (patch_4.sol#49-51) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": 74,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMsg = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMsg);",
          "message": "LogFile.addMessage (patch_4.sol#66-74) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_4.sol:\n\t- pragma solidity^0.4.19 (patch_4.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        if(msg.sender.call.value(_am)()) {\n            account.balance -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in PENNY_BY_PENNY.collect (patch_4.sol#40-47):\n\t-msg.sender.call.value(_am)() patch_4.sol#43-46\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 53,
          "vulnerability_code": "contract PENNY_BY_PENNY {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n    \n    mapping (address => Holder) public acc;\n    \n    uint public minSum;\n    \n    LogFile log;\n    \n    bool initialized;\n    \n    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;\n    }\n    \n    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);\n    }\n    \n    function initialize() public {\n        initialized = true;\n    }\n    \n    function put(uint _lockTime) public payable {\n        Holder storage account = acc[msg.sender];\n        account.balance += msg.value;\n        if(now + _lockTime > account.unlockTime) {\n            account.unlockTime = now + _lockTime;\n        }\n        log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am) public {\n        Holder storage account = acc[msg.sender];\n        require(account.balance >= minSum && account.balance >= _am && now > account.unlockTime);\n        if(msg.sender.call.value(_am)()) {\n            account.balance -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n    \n    function() public payable {\n        put(0);\n    }\n    ",
          "message": "Contract 'PENNY_BY_PENNY' (patch_4.sol#3-53) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of PENNY_BY_PENNY.setMinSum (patch_4.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of PENNY_BY_PENNY.setLogFile (patch_4.sol#22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function put(uint _lockTime) public payable {",
          "message": "Parameter '_lockTime' of PENNY_BY_PENNY.put (patch_4.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of PENNY_BY_PENNY.collect (patch_4.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_4.sol#66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_4.sol#66) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_4.sol#66) is not in mixedCase\n"
        }
      ]
    }
  }
}