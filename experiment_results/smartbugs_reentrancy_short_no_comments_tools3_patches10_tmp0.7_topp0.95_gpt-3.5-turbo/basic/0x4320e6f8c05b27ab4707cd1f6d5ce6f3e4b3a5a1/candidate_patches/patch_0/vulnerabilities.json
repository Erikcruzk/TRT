{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_am)()) {",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        \n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in ACCRUAL_DEPOSIT.collect (patch_0.sol#31-38):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_0.sol#34-37)\n\tState variables written after the call(s):\n\t- balances (patch_0.sol#35)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;",
          "message": "ACCRUAL_DEPOSIT.setMinSum (patch_0.sol#12-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);",
          "message": "ACCRUAL_DEPOSIT.setLogFile (patch_0.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "ACCRUAL_DEPOSIT.initialize (patch_0.sol#22-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        \n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "ACCRUAL_DEPOSIT.collect (patch_0.sol#31-38) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "ACCRUAL_DEPOSIT.fallback (patch_0.sol#40-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": 67,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        \n        history.push(newMessage);",
          "message": "LogFile.addMessage (patch_0.sol#58-67) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        \n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in ACCRUAL_DEPOSIT.collect (patch_0.sol#31-38):\n\t-msg.sender.call.value(_am)() patch_0.sol#34-37\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 44,
          "vulnerability_code": "contract ACCRUAL_DEPOSIT {\n    mapping (address=>uint256) public balances;   \n   \n    uint public minSum = 1 ether;\n    \n    LogFile public log;\n    \n    bool public initialized;\n    \n    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;\n    }\n    \n    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);\n    }\n    \n    function initialize() public {\n        initialized = true;\n    }\n    \n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        \n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n    \n    function() public payable {\n        deposit();\n    }\n    ",
          "message": "Contract 'ACCRUAL_DEPOSIT' (patch_0.sol#3-44) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of ACCRUAL_DEPOSIT.setMinSum (patch_0.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of ACCRUAL_DEPOSIT.setLogFile (patch_0.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of ACCRUAL_DEPOSIT.collect (patch_0.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_0.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_0.sol#58) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 58,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_0.sol#58) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT",
        "DOCKER_TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "            log.addMessage(msg.sender, _am, \"Collect\");",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] -= _am;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 66,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        }
      ]
    }
  }
}