{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_am)()) {",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_15"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in AccrualDeposit.collect (patch_2.sol#31-37):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_2.sol#33-36)\n\tState variables written after the call(s):\n\t- balances (patch_2.sol#34)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function setMinSum(uint _val) public {\n        require(!initialized);\n        minSum = _val;",
          "message": "AccrualDeposit.setMinSum (patch_2.sol#12-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 20,
          "vulnerability_code": "    function setLogFile(address _log) public {\n        require(!initialized);\n        log = LogFile(_log);",
          "message": "AccrualDeposit.setLogFile (patch_2.sol#17-20) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function initialize() public {\n        initialized = true;",
          "message": "AccrualDeposit.initialize (patch_2.sol#22-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "AccrualDeposit.collect (patch_2.sol#31-37) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 39,
          "vulnerability_to_line": 41,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "AccrualDeposit.fallback (patch_2.sol#39-41) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": 62,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMessage);",
          "message": "LogFile.addMessage (patch_2.sol#54-62) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": 37,
          "vulnerability_code": "    function collect(uint _am) public {\n        require(balances[msg.sender] >= minSum && balances[msg.sender] >= _am);\n        if(msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            log.addMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in AccrualDeposit.collect (patch_2.sol#31-37):\n\t-msg.sender.call.value(_am)() patch_2.sol#33-36\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val) public {",
          "message": "Parameter '_val' of AccrualDeposit.setMinSum (patch_2.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log) public {",
          "message": "Parameter '_log' of AccrualDeposit.setLogFile (patch_2.sol#17) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 31,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am) public {",
          "message": "Parameter '_am' of AccrualDeposit.collect (patch_2.sol#31) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_2.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of LogFile.addMessage (patch_2.sol#54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 54,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of LogFile.addMessage (patch_2.sol#54) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 33,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": null,
          "vulnerability_code": "            log.addMessage(msg.sender, _am, \"Collect\");",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 34,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] -= _am;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        }
      ]
    }
  }
}