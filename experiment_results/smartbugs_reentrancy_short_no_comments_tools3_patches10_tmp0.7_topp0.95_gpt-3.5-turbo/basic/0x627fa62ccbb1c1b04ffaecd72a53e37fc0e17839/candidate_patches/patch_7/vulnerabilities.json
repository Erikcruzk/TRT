{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holders[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_addr.call.value(_wei)());",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 57,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(_addr.call.value(_wei)());",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr.call.value(_wei)());\n        holders[_addr] -= _wei;",
          "message": "Reentrancy in TokenBank.withdrawToHolder (patch_7.sol#55-59):\n\tExternal calls:\n\t- require(bool)(_addr.call.value(_wei)()) (patch_7.sol#57)\n\tState variables written after the call(s):\n\t- holders (patch_7.sol#58)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 15,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;",
          "message": "Ownable.changeOwner (patch_7.sol#12-15) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 17,
          "vulnerability_to_line": 21,
          "vulnerability_code": "    function confirmOwner() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n        newOwner = address(0);",
          "message": "Ownable.confirmOwner (patch_7.sol#17-21) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 42,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_7.sol#40-42) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {\n        require(holders[_to] > 0);\n        holders[_to] = 0;\n        withdrawToken(_token, _amount, _to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_7.sol#49-53) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr.call.value(_wei)());\n        holders[_addr] -= _wei;",
          "message": "TokenBank.withdrawToHolder (patch_7.sol#55-59) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_7.sol:\n\t- pragma solidity^0.4.19 (patch_7.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {\n        require(_to != address(0));\n        require(_token.call(bytes4(keccak256(\"transfer(address,uint256)\")), _to, _amount));",
          "message": "Low level call in Token.withdrawToken (patch_7.sol#25-28):\n\t-require(bool)(_token.call(bytes4(keccak256()(transfer(address,uint256))),_to,_amount)) patch_7.sol#27\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 59,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr.call.value(_wei)());\n        holders[_addr] -= _wei;",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_7.sol#55-59):\n\t-require(bool)(_addr.call.value(_wei)()) patch_7.sol#57\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function changeOwner(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Ownable.changeOwner (patch_7.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {",
          "message": "Parameter '_token' of Token.withdrawToken (patch_7.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {",
          "message": "Parameter '_amount' of Token.withdrawToken (patch_7.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {",
          "message": "Parameter '_to' of Token.withdrawToken (patch_7.sol#25) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 35,
          "vulnerability_to_line": 38,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_7.sol#35-38) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_7.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_7.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_7.sol#49) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_7.sol#55) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_7.sol#55) is not in mixedCase\n"
        }
      ]
    }
  }
}