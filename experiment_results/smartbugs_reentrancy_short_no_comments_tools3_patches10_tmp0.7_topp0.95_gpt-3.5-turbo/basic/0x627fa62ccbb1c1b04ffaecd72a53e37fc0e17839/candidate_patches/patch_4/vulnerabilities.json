{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(_addr.call.value(_wei)()) {",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 80,
          "vulnerability_to_line": null,
          "vulnerability_code": "            holders[_addr] -= _wei;",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(_addr.call.value(_wei)()) {",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_19"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr != address(0));\n        require(_wei > 0);\n\n        if(_addr.call.value(_wei)()) {\n            holders[_addr] -= _wei;\n        }",
          "message": "Reentrancy in TokenBank.withdrawToHolder (patch_4.sol#74-82):\n\tExternal calls:\n\t- _addr.call.value(_wei)() (patch_4.sol#79-81)\n\tState variables written after the call(s):\n\t- holders (patch_4.sol#80)\n"
        },
        {
          "name": "assembly",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {\n        require(_to != address(0));\n        require(_token != address(0));\n\n        bool success = false;\n        bytes4 sig = bytes4(keccak256(\"transfer(address,uint256)\"));\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, sig)\n            mstore(add(ptr, 0x04), _to)\n            mstore(add(ptr, 0x24), _amount)\n            success := call(sub(gas, 10000), _token, 0, ptr, 0x44, 0, 0)\n        }\n        require(success);",
          "message": "Token.withdrawToken uses assembly (patch_4.sol#29-43)\n\t- patch_4.sol#35-42\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;",
          "message": "Ownable.transferOwnership (patch_4.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n        newOwner = address(0);",
          "message": "Ownable.acceptOwnership (patch_4.sol#21-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_4.sol#55-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": 72,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {\n        require(holders[_to] > 0);\n        require(_to != address(0));\n        require(_token != address(0));\n\n        holders[_to] = 0;\n        withdrawToken(_token, _amount, _to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_4.sol#65-72) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr != address(0));\n        require(_wei > 0);\n\n        if(_addr.call.value(_wei)()) {\n            holders[_addr] -= _wei;\n        }",
          "message": "TokenBank.withdrawToHolder (patch_4.sol#74-82) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_4.sol:\n\t- pragma solidity^0.4.19 (patch_4.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": 82,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {\n        require(holders[_addr] > 0);\n        require(_addr != address(0));\n        require(_wei > 0);\n\n        if(_addr.call.value(_wei)()) {\n            holders[_addr] -= _wei;\n        }",
          "message": "Low level call in TokenBank.withdrawToHolder (patch_4.sol#74-82):\n\t-_addr.call.value(_wei)() patch_4.sol#79-81\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_4.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {",
          "message": "Parameter '_newOwner' of Ownable.transferOwnership (patch_4.sol#16) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {",
          "message": "Parameter '_token' of Token.withdrawToken (patch_4.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToken(address _token, uint256 _amount, address _to) public onlyOwner {",
          "message": "Parameter '_to' of Token.withdrawToken (patch_4.sol#29) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_4.sol#50-53) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_to' of TokenBank.withdrawTokenToHolder (patch_4.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_token' of TokenBank.withdrawTokenToHolder (patch_4.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawTokenToHolder(address _to, address _token, uint _amount) public onlyOwner {",
          "message": "Parameter '_amount' of TokenBank.withdrawTokenToHolder (patch_4.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {",
          "message": "Parameter '_addr' of TokenBank.withdrawToHolder (patch_4.sol#74) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function withdrawToHolder(address _addr, uint _wei) public onlyOwner {",
          "message": "Parameter '_wei' of TokenBank.withdrawToHolder (patch_4.sol#74) is not in mixedCase\n"
        }
      ]
    }
  }
}