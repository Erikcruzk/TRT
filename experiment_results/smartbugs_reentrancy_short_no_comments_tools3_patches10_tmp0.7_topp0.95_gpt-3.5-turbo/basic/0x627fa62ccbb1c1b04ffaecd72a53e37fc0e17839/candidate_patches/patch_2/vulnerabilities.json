{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 61,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holders[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 78,
          "vulnerability_to_line": null,
          "vulnerability_code": "        holders[addr] -= weiAmount;",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 79,
          "vulnerability_to_line": null,
          "vulnerability_code": "        addr.transfer(weiAmount);",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_9"
      ],
      "vulnerability_findings": [
        {
          "name": "assembly",
          "vulnerability_from_line": 29,
          "vulnerability_to_line": 43,
          "vulnerability_code": "    function withdrawToken(address token, uint256 amount, address to) public onlyOwner {\n        require(token != address(0));\n        require(to != address(0));\n\n        bool success = false;\n        bytes4 sig = bytes4(keccak256(\"transfer(address,uint256)\"));\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr,sig)\n            mstore(add(ptr,0x04),to)\n            mstore(add(ptr,0x24),amount)\n            success := call(sub(gas, 5000), token, 0, ptr, 0x44, 0, 0)\n        }\n        require(success);",
          "message": "Token.withdrawToken uses assembly (patch_2.sol#29-43)\n\t- patch_2.sol#35-42\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function changeOwner(address addr) public onlyOwner {\n        require(addr != address(0));\n        newOwner = addr;",
          "message": "Ownable.changeOwner (patch_2.sol#16-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function confirmOwner() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n        newOwner = address(0);",
          "message": "Ownable.confirmOwner (patch_2.sol#21-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 55,
          "vulnerability_to_line": 57,
          "vulnerability_code": "    function() public payable {\n        deposit();",
          "message": "TokenBank.fallback (patch_2.sol#55-57) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 64,
          "vulnerability_to_line": 71,
          "vulnerability_code": "    function withdrawTokenToHolder(address to, address token, uint amount) public onlyOwner {\n        require(to != address(0));\n        require(token != address(0));\n        require(holders[to] > 0);\n\n        holders[to] = 0;\n        withdrawToken(token, amount, to);",
          "message": "TokenBank.withdrawTokenToHolder (patch_2.sol#64-71) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 73,
          "vulnerability_to_line": 80,
          "vulnerability_code": "    function withdrawToHolder(address addr, uint weiAmount) public onlyOwner payable {\n        require(addr != address(0));\n        require(holders[addr] > 0);\n        require(weiAmount <= this.balance);\n\n        holders[addr] -= weiAmount;\n        addr.transfer(weiAmount);",
          "message": "TokenBank.withdrawToHolder (patch_2.sol#73-80) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 7,
          "vulnerability_to_line": 9,
          "vulnerability_code": "    function Ownable() public {\n        owner = msg.sender;",
          "message": "Function 'Ownable.Ownable' (patch_2.sol#7-9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": 53,
          "vulnerability_code": "    function TokenBank() public {\n        owner = msg.sender;\n        minDeposit = 1 ether;",
          "message": "Function 'TokenBank.TokenBank' (patch_2.sol#50-53) is not in mixedCase\n"
        }
      ]
    }
  }
}