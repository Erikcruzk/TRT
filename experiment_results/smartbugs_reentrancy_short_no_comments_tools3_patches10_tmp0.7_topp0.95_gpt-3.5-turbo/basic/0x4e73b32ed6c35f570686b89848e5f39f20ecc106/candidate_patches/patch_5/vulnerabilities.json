{
  "smartbugs_completed": true,
  "analyzer_results": {
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 70,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in LogFile.addMessage (patch_5.sol#70) is a local variable never initialiazed\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;",
          "message": "PRIVATE_ETH_CELL.setMinSum (patch_5.sol#12-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        Log = LogFile(_log);",
          "message": "PRIVATE_ETH_CELL.setLogFile (patch_5.sol#19-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function initialize()\n    public\n    {\n        initialized = true;",
          "message": "PRIVATE_ETH_CELL.initialize (patch_5.sol#26-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.addMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);",
          "message": "PRIVATE_ETH_CELL.collect (patch_5.sol#40-47) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function() \n    public \n    payable\n    {\n        deposit();",
          "message": "PRIVATE_ETH_CELL.fallback (patch_5.sol#49-54) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": 76,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)\n    public\n    {\n        Message memory lastMsg;\n        lastMsg.Sender = _adr;\n        lastMsg.Time = now;\n        lastMsg.Val = _val;\n        lastMsg.Data = _data;\n        history.push(lastMsg);",
          "message": "LogFile.addMessage (patch_5.sol#67-76) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_5.sol:\n\t- pragma solidity^0.4.19 (patch_5.sol#1): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 55,
          "vulnerability_code": "contract PRIVATE_ETH_CELL {\n    mapping (address => uint256) public balances;   \n   \n    uint public MinSum;\n    \n    LogFile public Log;\n    \n    bool public initialized;\n    \n    function setMinSum(uint _val)\n    public\n    {\n        require(!initialized);\n        MinSum = _val;\n    }\n    \n    function setLogFile(address _log)\n    public\n    {\n        require(!initialized);\n        Log = LogFile(_log);\n    }\n    \n    function initialize()\n    public\n    {\n        initialized = true;\n    }\n    \n    function deposit()\n    public\n    payable\n    {\n        balances[msg.sender] += msg.value;\n        Log.addMessage(msg.sender, msg.value, \"Put\");\n    }\n    \n    function collect(uint _am)\n    public\n    {\n        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);\n        balances[msg.sender] -= _am;\n        Log.addMessage(msg.sender, _am, \"Collect\");\n        msg.sender.transfer(_am);\n    }\n    \n    function() \n    public \n    payable\n    {\n        deposit();\n    }",
          "message": "Contract 'PRIVATE_ETH_CELL' (patch_5.sol#3-55) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setMinSum(uint _val)",
          "message": "Parameter '_val' of PRIVATE_ETH_CELL.setMinSum (patch_5.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLogFile(address _log)",
          "message": "Parameter '_log' of PRIVATE_ETH_CELL.setLogFile (patch_5.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function collect(uint _am)",
          "message": "Parameter '_am' of PRIVATE_ETH_CELL.collect (patch_5.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum;",
          "message": "Variable 'PRIVATE_ETH_CELL.MinSum' (patch_5.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    LogFile public Log;",
          "message": "Variable 'PRIVATE_ETH_CELL.Log' (patch_5.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_adr' of LogFile.addMessage (patch_5.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_val' of LogFile.addMessage (patch_5.sol#67) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 67,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data)",
          "message": "Parameter '_data' of LogFile.addMessage (patch_5.sol#67) is not in mixedCase\n"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 75,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 36,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        }
      ]
    }
  }
}