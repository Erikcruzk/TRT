{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 46,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(lastMsg);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if(_am <= balances[msg.sender] && msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "            transferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] -= _am;",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_16"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if(_am <= balances[msg.sender] && msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        }",
          "message": "Reentrancy in PrivateBank.cashOut (patch_0.sol#19-24):\n\tExternal calls:\n\t- _am <= balances[msg.sender] && msg.sender.call.value(_am)() (patch_0.sol#20-23)\n\tState variables written after the call(s):\n\t- balances (patch_0.sol#21)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory lastMsg;",
          "message": "lastMsg in Log.addMessage (patch_0.sol#41) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "PrivateBank.MinDeposit should be constant (patch_0.sol#5)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": 17,
          "vulnerability_code": "    function deposit() public payable {\n        if(msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            transferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "PrivateBank.deposit (patch_0.sol#12-17) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if(_am <= balances[msg.sender] && msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        }",
          "message": "PrivateBank.cashOut (patch_0.sol#19-24) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}    ",
          "message": "PrivateBank.fallback (patch_0.sol#26) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": 47,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory lastMsg;\n        lastMsg.sender = _adr;\n        lastMsg.time = now;\n        lastMsg.val = _val;\n        lastMsg.data = _data;\n        history.push(lastMsg);",
          "message": "Log.addMessage (patch_0.sol#40-47) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_0.sol:\n\t- pragma solidity^0.4.19 (patch_0.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": 24,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        if(_am <= balances[msg.sender] && msg.sender.call.value(_am)()) {\n            balances[msg.sender] -= _am;\n            transferLog.addMessage(msg.sender, _am, \"CashOut\");\n        }",
          "message": "Low level call in PrivateBank.cashOut (patch_0.sol#19-24):\n\t-_am <= balances[msg.sender] && msg.sender.call.value(_am)() patch_0.sol#20-23\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": 10,
          "vulnerability_code": "    function PrivateBank(address _log) public {\n        transferLog = Log(_log);",
          "message": "Function 'PrivateBank.PrivateBank' (patch_0.sol#8-10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function PrivateBank(address _log) public {",
          "message": "Parameter '_log' of PrivateBank.PrivateBank (patch_0.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 19,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of PrivateBank.cashOut (patch_0.sol#19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'PrivateBank.MinDeposit' (patch_0.sol#5) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_0.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_0.sol#40) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 40,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_0.sol#40) is not in mixedCase\n"
        }
      ]
    }
  }
}