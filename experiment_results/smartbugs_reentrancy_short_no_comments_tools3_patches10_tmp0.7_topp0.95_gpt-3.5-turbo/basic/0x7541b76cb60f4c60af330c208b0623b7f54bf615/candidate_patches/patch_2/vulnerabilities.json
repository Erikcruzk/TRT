{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.25;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(LastMsg);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 53,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(LastMsg);",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "            LogFile.AddMessage(msg.sender, _am, \"Collect\");",
          "message": null
        },
        {
          "name": "Time dependency bug",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "            Acc[msg.sender].balance -= _am;",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Reentrancy in U_BANK.Collect (patch_2.sol#24-30):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_2.sol#26-29)\n\tState variables written after the call(s):\n\t- Acc (patch_2.sol#27)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 48,
          "vulnerability_to_line": null,
          "vulnerability_code": "        Message memory LastMsg;",
          "message": "LastMsg in Log.AddMessage (patch_2.sol#48) is a local variable never initialiazed\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;",
          "message": "U_BANK.MinSum should be constant (patch_2.sol#12)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "U_BANK.Collect (patch_2.sol#24-30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 32,
          "vulnerability_to_line": 34,
          "vulnerability_code": "    function() public payable {\n        Put(0);",
          "message": "U_BANK.fallback (patch_2.sol#32-34) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Log.AddMessage (patch_2.sol#47-54) should be declared external\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Low level call in U_BANK.Collect (patch_2.sol#24-30):\n\t-msg.sender.call.value(_am)() patch_2.sol#26-29\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 35,
          "vulnerability_code": "contract U_BANK {\n    struct Holder {\n        uint unlockTime;\n        uint balance;\n    }\n\n    mapping (address => Holder) public Acc;\n\n    Log public LogFile;\n    uint public MinSum = 2 ether;\n\n    constructor(address log) public {\n        LogFile = Log(log);\n    }\n\n    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");\n    }\n\n    function Collect(uint _am) public payable {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }\n    }\n\n    function() public payable {\n        Put(0);\n    }",
          "message": "Contract 'U_BANK' (patch_2.sol#3-35) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": 22,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {\n        Acc[msg.sender].balance += msg.value;\n        Acc[msg.sender].unlockTime = _unlockTime > now ? _unlockTime : now;\n        LogFile.AddMessage(msg.sender, msg.value, \"Put\");",
          "message": "Function 'U_BANK.Put' (patch_2.sol#18-22) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 18,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Put(uint _unlockTime) public payable {",
          "message": "Parameter '_unlockTime' of U_BANK.Put (patch_2.sol#18) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": 30,
          "vulnerability_code": "    function Collect(uint _am) public payable {\n        require(Acc[msg.sender].balance >= MinSum && Acc[msg.sender].balance >= _am && now > Acc[msg.sender].unlockTime);\n        if (msg.sender.call.value(_am)()) {\n            Acc[msg.sender].balance -= _am;\n            LogFile.AddMessage(msg.sender, _am, \"Collect\");\n        }",
          "message": "Function 'U_BANK.Collect' (patch_2.sol#24-30) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Collect(uint _am) public payable {",
          "message": "Parameter '_am' of U_BANK.Collect (patch_2.sol#24) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 9,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping (address => Holder) public Acc;",
          "message": "Variable 'U_BANK.Acc' (patch_2.sol#9) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 11,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log public LogFile;",
          "message": "Variable 'U_BANK.LogFile' (patch_2.sol#11) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 12,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinSum = 2 ether;",
          "message": "Variable 'U_BANK.MinSum' (patch_2.sol#12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": 54,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory LastMsg;\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);",
          "message": "Function 'Log.AddMessage' (patch_2.sol#47-54) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_2.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_2.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 47,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_2.sol#47) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 45,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_2.sol#45) is not in mixedCase\n"
        }
      ]
    }
  }
}