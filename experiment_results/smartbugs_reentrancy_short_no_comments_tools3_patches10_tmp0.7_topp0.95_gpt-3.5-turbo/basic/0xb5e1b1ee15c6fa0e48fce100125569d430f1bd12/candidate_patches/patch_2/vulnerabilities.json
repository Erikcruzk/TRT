{
  "smartbugs_completed": true,
  "analyzer_results": {
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 49,
          "vulnerability_to_line": null,
          "vulnerability_code": "        history.push(newMessage);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "        balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 22,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(msg.sender.call.value(_am)());",
          "message": null
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_17"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        require(msg.sender.call.value(_am)());\n        balances[msg.sender] -= _am;\n        TransferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": "Reentrancy in Private_Bank.cashOut (patch_2.sol#20-25):\n\tExternal calls:\n\t- require(bool)(msg.sender.call.value(_am)()) (patch_2.sol#22)\n\tState variables written after the call(s):\n\t- balances (patch_2.sol#23)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Private_Bank.MinDeposit should be constant (patch_2.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 18,
          "vulnerability_code": "    function deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.addMessage(msg.sender, msg.value, \"Deposit\");",
          "message": "Private_Bank.deposit (patch_2.sol#14-18) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        require(msg.sender.call.value(_am)());\n        balances[msg.sender] -= _am;\n        TransferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": "Private_Bank.cashOut (patch_2.sol#20-25) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 27,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}    ",
          "message": "Private_Bank.fallback (patch_2.sol#27) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": 50,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            sender: _adr,\n            time: now,\n            val: _val,\n            data: _data\n        });\n        history.push(newMessage);",
          "message": "Log.addMessage (patch_2.sol#42-50) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_2.sol:\n\t- pragma solidity^0.4.19 (patch_2.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": 25,
          "vulnerability_code": "    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        require(msg.sender.call.value(_am)());\n        balances[msg.sender] -= _am;\n        TransferLog.addMessage(msg.sender, _am, \"CashOut\");",
          "message": "Low level call in Private_Bank.cashOut (patch_2.sol#20-25):\n\t-require(bool)(msg.sender.call.value(_am)()) patch_2.sol#22\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 29,
          "vulnerability_code": "contract Private_Bank {\n    mapping (address => uint) public balances;\n    \n    uint public MinDeposit = 1 ether;\n    \n    Log TransferLog;\n    \n    function Private_Bank(address _log) public {\n        TransferLog = Log(_log);\n    }\n    \n    function deposit() public payable {\n        require(msg.value > MinDeposit);\n        balances[msg.sender] += msg.value;\n        TransferLog.addMessage(msg.sender, msg.value, \"Deposit\");\n    }\n    \n    function cashOut(uint _am) public {\n        require(_am <= balances[msg.sender]);\n        require(msg.sender.call.value(_am)());\n        balances[msg.sender] -= _am;\n        TransferLog.addMessage(msg.sender, _am, \"CashOut\");\n    }\n    \n    function() public payable {}    \n    ",
          "message": "Contract 'Private_Bank' (patch_2.sol#3-29) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function Private_Bank(address _log) public {\n        TransferLog = Log(_log);",
          "message": "Function 'Private_Bank.Private_Bank' (patch_2.sol#10-12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Private_Bank(address _log) public {",
          "message": "Parameter '_log' of Private_Bank.Private_Bank (patch_2.sol#10) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 20,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function cashOut(uint _am) public {",
          "message": "Parameter '_am' of Private_Bank.cashOut (patch_2.sol#20) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'Private_Bank.MinDeposit' (patch_2.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log TransferLog;",
          "message": "Variable 'Private_Bank.TransferLog' (patch_2.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 42,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function addMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.addMessage (patch_2.sol#42) is not in mixedCase\n"
        }
      ]
    }
  }
}