{
  "smartbugs_completed": true,
  "analyzer_results": {
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_20"
      ],
      "vulnerability_findings": [
        {
          "name": "reentrancy-eth",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        if(_am <= balances[msg.sender]) {\n            if(msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Reentrancy in Private_Bank.CashOut (patch_8.sol#21-28):\n\tExternal calls:\n\t- msg.sender.call.value(_am)() (patch_8.sol#23-26)\n\tState variables written after the call(s):\n\t- balances (patch_8.sol#24)\n"
        },
        {
          "name": "constable-states",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Private_Bank.MinDeposit should be constant (patch_8.sol#6)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function Deposit() public payable {\n        if(msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Private_Bank.Deposit (patch_8.sol#14-19) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        if(_am <= balances[msg.sender]) {\n            if(msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Private_Bank.CashOut (patch_8.sol#21-28) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function() public payable {}    ",
          "message": "Private_Bank.fallback (patch_8.sol#30) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Log.AddMessage (patch_8.sol#43-51) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": "Detected issues with version pragma in patch_8.sol:\n\t- pragma solidity^0.4.19 (patch_8.sol#1): it allows old versions\n"
        },
        {
          "name": "low-level-calls",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        if(_am <= balances[msg.sender]) {\n            if(msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Low level call in Private_Bank.CashOut (patch_8.sol#21-28):\n\t-msg.sender.call.value(_am)() patch_8.sol#23-26\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 3,
          "vulnerability_to_line": 31,
          "vulnerability_code": "contract Private_Bank {\n    mapping (address => uint) public balances;\n    \n    uint public MinDeposit = 1 ether;\n    \n    Log public TransferLog;\n    \n    function Private_Bank(address _log) public {\n        TransferLog = new Log();\n    }\n    \n    function Deposit() public payable {\n        if(msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }\n    }\n    \n    function CashOut(uint _am) public {\n        if(_am <= balances[msg.sender]) {\n            if(msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }\n    }\n    \n    function() public payable {}    ",
          "message": "Contract 'Private_Bank' (patch_8.sol#3-31) is not in CapWords\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 10,
          "vulnerability_to_line": 12,
          "vulnerability_code": "    function Private_Bank(address _log) public {\n        TransferLog = new Log();",
          "message": "Function 'Private_Bank.Private_Bank' (patch_8.sol#10-12) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 14,
          "vulnerability_to_line": 19,
          "vulnerability_code": "    function Deposit() public payable {\n        if(msg.value >= MinDeposit) {\n            balances[msg.sender] += msg.value;\n            TransferLog.AddMessage(msg.sender, msg.value, \"Deposit\");\n        }",
          "message": "Function 'Private_Bank.Deposit' (patch_8.sol#14-19) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": 28,
          "vulnerability_code": "    function CashOut(uint _am) public {\n        if(_am <= balances[msg.sender]) {\n            if(msg.sender.call.value(_am)()) {\n                balances[msg.sender] -= _am;\n                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");\n            }\n        }",
          "message": "Function 'Private_Bank.CashOut' (patch_8.sol#21-28) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 21,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function CashOut(uint _am) public {",
          "message": "Parameter '_am' of Private_Bank.CashOut (patch_8.sol#21) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 6,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint public MinDeposit = 1 ether;",
          "message": "Variable 'Private_Bank.MinDeposit' (patch_8.sol#6) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 8,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Log public TransferLog;",
          "message": "Variable 'Private_Bank.TransferLog' (patch_8.sol#8) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": 51,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {\n        Message memory newMessage = Message({\n            Sender: _adr,\n            Data: _data,\n            Val: _val,\n            Time: now\n        });\n        History.push(newMessage);",
          "message": "Function 'Log.AddMessage' (patch_8.sol#43-51) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_adr' of Log.AddMessage (patch_8.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_val' of Log.AddMessage (patch_8.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 43,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function AddMessage(address _adr, uint _val, string _data) public {",
          "message": "Parameter '_data' of Log.AddMessage (patch_8.sol#43) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 41,
          "vulnerability_to_line": null,
          "vulnerability_code": "    Message[] public History;",
          "message": "Variable 'Log.History' (patch_8.sol#41) is not in mixedCase\n"
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Re-Entrancy Vulnerability",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(msg.sender.call.value(_am)()) {",
          "message": null
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [
        "SYMBOLIC EXECUTION TIMEOUT"
      ],
      "vulnerability_findings": [
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 1,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.19;",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 50,
          "vulnerability_to_line": null,
          "vulnerability_code": "        History.push(newMessage);",
          "message": null
        },
        {
          "name": "Overflow bugs",
          "vulnerability_from_line": 16,
          "vulnerability_to_line": null,
          "vulnerability_code": "            balances[msg.sender] += msg.value;",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 23,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if(msg.sender.call.value(_am)()) {",
          "message": null
        },
        {
          "name": "Reentrancy bug",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "                TransferLog.AddMessage(msg.sender, _am, \"CashOut\");",
          "message": null
        },
        {
          "name": "Underflow bugs",
          "vulnerability_from_line": 24,
          "vulnerability_to_line": null,
          "vulnerability_code": "                balances[msg.sender] -= _am;",
          "message": null
        }
      ]
    }
  }
}