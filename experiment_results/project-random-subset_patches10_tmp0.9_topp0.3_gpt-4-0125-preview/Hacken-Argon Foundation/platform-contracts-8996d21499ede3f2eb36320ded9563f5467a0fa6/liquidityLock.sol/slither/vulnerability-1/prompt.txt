
This Solidity Smart Contract has been analyzed by smart contract analyzers. Here are the results from these analyzers.

slither Analysis Results
Vulnerability: reentrancy-benign found in the following piece of code:

    function lockTokens(

        uint256 _endDate,

        uint256 _amount,

        address _tokenAddress

    ) external nonReentrant {

        require(now < _endDate, "endDate should be bigger than now");

        require(_amount != 0, "amount cannot 0");

        require(

            _tokenAddress != address(0),

            "Token adress cannot be address(0)"

        );

        require(

            IERC20(_tokenAddress).transferFrom(

                msg.sender,

                address(this),

                _amount

            ),

            "Transaction failed"

        );

        require(poolCount == 0, "Pool count must be 0");

        pool = LockInfo(now, _endDate, _amount, _tokenAddress, msg.sender);

        poolCount = poolCount.safeAdd(1);


The contract is among the source code below:



pragma solidity ^0.4.24;

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() public {
        _status = _NOT_ENTERED;
    }

    






    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}

library SafeMath {
    function safeAdd(uint256 a, uint256 b) external pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
    }

    function safeSub(uint256 a, uint256 b) external pure returns (uint256 c) {
        require(b <= a);
        c = a - b;
    }

    function safeMul(uint256 a, uint256 b) external pure returns (uint256 c) {
        c = a * b;
        require(a == 0 || c / a == b);
    }

    function safeDiv(uint256 a, uint256 b) external pure returns (uint256 c) {
        require(b > 0);
        c = a / b;
    }
}

contract Lock is ReentrancyGuard {
    using SafeMath for uint256;
    struct LockInfo {
        uint256 startedDate;
        uint256 endDate;
        uint256 amount;
        address tokenAddress;
        address managerAddress;
    }

    uint256 public poolCount = 0;
    LockInfo public pool;

    modifier onlyManager() {
        require(msg.sender == pool.managerAddress);
        _;
    }

    function lockTokens(
        uint256 _endDate,
        uint256 _amount,
        address _tokenAddress
    ) external nonReentrant {
        require(now < _endDate, "endDate should be bigger than now");
        require(_amount != 0, "amount cannot 0");
        require(
            _tokenAddress != address(0),
            "Token adress cannot be address(0)"
        );
        require(
            IERC20(_tokenAddress).transferFrom(
                msg.sender,
                address(this),
                _amount
            ),
            "Transaction failed"
        );
        require(poolCount == 0, "Pool count must be 0");
        pool = LockInfo(now, _endDate, _amount, _tokenAddress, msg.sender);
        poolCount = poolCount.safeAdd(1);
    }

    function getPoolData()
        external
        view
        returns (
            uint256,
            uint256,
            uint256,
            address,
            address
        )
    {
        return (
            pool.startedDate,
            pool.endDate,
            pool.amount,
            pool.tokenAddress,
            pool.managerAddress
        );
    }

    function getTokens() external onlyManager nonReentrant {
        require(now > pool.endDate);
        IERC20(pool.tokenAddress).transfer(msg.sender, pool.amount);
    }
}

DO NOT return natural language for explanations, only the Solidity code of the vulnerable function (if it is a function otherwise whole contract). 
"""