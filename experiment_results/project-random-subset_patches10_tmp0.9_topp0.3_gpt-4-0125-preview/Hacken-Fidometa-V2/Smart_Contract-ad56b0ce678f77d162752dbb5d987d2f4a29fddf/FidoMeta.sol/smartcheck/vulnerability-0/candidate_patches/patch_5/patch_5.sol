pragma solidity ^0.8.11;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    


    function balanceOf(address account) external view returns (uint256);

    






    function transfer(address recipient, uint256 amount) external returns (bool);

    






    function allowance(address owner, address spender) external view returns (uint256);

    













    function approve(address spender, uint256 amount) external returns (bool);

    








    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    





    event Transfer(address indexed from, address indexed to, uint256 value);

    



    event Approval(address indexed owner, address indexed spender, uint256 value);
}
















 
library SafeMath {
    









    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    









    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    









    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    









    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    











    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    











    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    











    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    











    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}





library Address {
    
















    function isContract(address account) internal view returns (bool) {
        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    















    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    

















    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    





    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    










    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    





    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}













contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;
    mapping (address => bool) public frozenAccount;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    event FrozenFunds(address target, bool frozen);

    


    constructor ()  {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    


    function owner() public view returns (address) {
        return _owner;
    }

    


    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

     






    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    



    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    
    
    
    function freezeAccount(address target, bool freeze) onlyOwner public {
        frozenAccount[target] = freeze;
        emit FrozenFunds(target, freeze);
    }
}

contract Fidometa is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;


    mapping (address => uint256) private _rOwned;
    mapping (address => uint256) private _tOwned;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromCommunity_charge;

    mapping (address => bool) private _isExcludedFromReward;

    mapping (address => bool) private _isExcludedFromEcoSysFee;

    mapping (address => bool) private _isExcludedFromSurcharge1;

    mapping (address => bool) private _isExcludedFromSurcharge2;

    mapping (address => bool) private _isExcludedFromSurcharge3;

    address[] private _excludedFromReward;
   
    uint256 private constant MAX = ~uint256(0);


    string private _name = "Fido Meta";
    string private _symbol = "FIDO";
    uint8  private _decimals = 9;
    uint256 private _tTotal = 15000000000  * 10 ** uint256(_decimals);
    uint256 private  _cap;
    uint256 private _rTotal = (MAX - (MAX % _tTotal));
    uint256 private _tCommunityChargeTotal;


    address private _ecoSysWallet;
    address private _surcharge_1_Wallet;
    address private _surcharge_2_Wallet;
    address private _surcharge_3_Wallet;

    uint256 public _community_charge = 3 * 10 ** uint256(_decimals);
    uint256 public _ecoSysFee = 15 * 10 ** 8;
    uint256 public _surcharge1 = 5 * 10 ** 8;
    uint256 public _surcharge2 = 0;
    uint256 public _surcharge3 = 0;

    uint256 private _previousCommunityCharge = _community_charge;
    uint256 private _previousEcoSysFee  = _ecoSysFee;
    uint256 private _previousSurcharge1 = _surcharge1;
    uint256 private _previousSurcharge2 = _surcharge2;
    uint256 private _previousSurcharge3 = _surcharge3;
    
    uint256 public _maxTxAmount = 5000000 * 10 ** uint256(_decimals);

      struct LockDetails {
        uint256 startTime;
        uint256 initialLock;
        uint256 lockedToken;
        uint256 remainedToken;
        uint256 monthCount;
    }

    struct TValues {
        uint256 tTransferAmount;
        uint256 tCommunityCharge;
        uint256 tEcoSysFee;
        uint256 tSurcharge1;
        uint256 tSurcharge2;
        uint256 tSurcharge3;
    }

    struct MValues {
        uint256 rAmount;
        uint256 rTransferAmount;
        uint256 rCommunityCharge;
        uint256 tTransferAmount;
        uint256 tCommunityCharge;
        uint256 tEcoSysFee;
        uint256 tSurcharge1;
        uint256 tSurcharge2;
        uint256 tSurcharge3;
    }

    mapping(address => LockDetails) public locks;




    


     function setCommunityCharge(uint256 community_charge)  public onlyOwner{
        require(community_charge <= (100 * 10 ** uint256(_decimals)), "Community Charge % should be less than equal to 100%");
        _community_charge = community_charge;
    }

   


    function setEcoSysFee(uint256 ecoSysFee)  public onlyOwner{
        require(ecoSysFee <= (100 * 10 ** uint256(_decimals)), "EcoSysFee % should be less than equal to 100%");
        _ecoSysFee = ecoSysFee;
    }

    



    function setSurcharge1(uint256 surcharge1)  public onlyOwner{
        require(surcharge1 <= (100 * 10 ** uint256(_decimals)), "surcharge1 % should be less than equal to 100%");
        _surcharge1 = surcharge1;
    }

    


    function setSurcharge2(uint256 surcharge2)  public onlyOwner{
        require(surcharge2 <= (100 * 10 ** uint256(_decimals)), "surcharge2 % should be less than equal to 100%");
        _surcharge2 = surcharge2;
    }

    


    function setSurcharge3(uint256 surcharge3)  public onlyOwner{
        require(surcharge3 <= (100 * 10 ** uint256(_decimals)), "surcharge3 % should be less than equal to 100%");
        _surcharge3 = surcharge3;
    }

    


    function setEcoSysWallet(address ecoSysWallet) public onlyOwner {
        require(ecoSysWallet != address(0), "Ecosystem wallet wallet is not valid");
        _ecoSysWallet = ecoSysWallet;
        _isExcludedFromCommunity_charge[_ecoSysWallet] = true;
        _isExcludedFromEcoSysFee[_ecoSysWallet] =   true;
        _isExcludedFromReward[_ecoSysWallet]    =   true;
        _isExcludedFromSurcharge1[_ecoSysWallet] =  true;
        _isExcludedFromSurcharge2[_ecoSysWallet] =  true;
        _isExcludedFromSurcharge3[_ecoSysWallet] =  true;
    }

    


    function setSurcharge_1_Wallet(address surcharge_1_wallet) public onlyOwner {
        _surcharge_1_Wallet = surcharge_1_wallet;
        _isExcludedFromCommunity_charge[_surcharge_1_Wallet] = true;
        _isExcludedFromEcoSysFee[_surcharge_1_Wallet] = true;
        _isExcludedFromReward[_surcharge_1_Wallet] = true;
        _isExcludedFromSurcharge1[_surcharge_1_Wallet] = true;
        _isExcludedFromSurcharge2[_surcharge_1_Wallet] = true;
        _isExcludedFromSurcharge3[_surcharge_1_Wallet] = true;
    }

    


    function setSurcharge_2_Wallet(address surcharge_2_wallet) public onlyOwner {
        _surcharge_2_Wallet = surcharge_2_wallet;
        _isExcludedFromCommunity_charge[_surcharge_2_Wallet] = true;
        _isExcludedFromEcoSysFee[_surcharge_2_Wallet] = true;
        _isExcludedFromReward[_surcharge_2_Wallet] = true;
        _isExcludedFromSurcharge1[_surcharge_2_Wallet] = true;
        _isExcludedFromSurcharge2[_surcharge_2_Wallet] = true;
        _isExcludedFromSurcharge3[_surcharge_2_Wallet] = true;
    }

    


    function setSurcharge_3_Wallet(address surcharge_3_wallet) public onlyOwner {
        _surcharge_3_Wallet = surcharge_3_wallet;
        _isExcludedFromCommunity_charge[_surcharge_3_Wallet] = true;
        _isExcludedFromEcoSysFee[_surcharge_3_Wallet] = true;
        _isExcludedFromReward[_surcharge_3_Wallet] = true;
        _isExcludedFromSurcharge1[_surcharge_3_Wallet] = true;
        _isExcludedFromSurcharge2[_surcharge_3_Wallet] = true;
        _isExcludedFromSurcharge3[_surcharge_3_Wallet] = true;
    }

    

     function viewSurcharge_1_Wallet() public view  returns (address) {
        return _surcharge_1_Wallet;
    }

    

        function viewSurcharge_2_Wallet() public view  returns (address) {
        return _surcharge_2_Wallet;
    }

    

        function viewSurcharge_3_Wallet() public view  returns (address) {
        return _surcharge_3_Wallet;
    }

    

         function viewEcoSysWallet() public view  returns (address) {
        return _ecoSysWallet;
    }


   


    function burn(uint256 value) public onlyOwner {
      _burn(msg.sender, value);
    }
    
    
     


    function mint(uint256 value) public onlyOwner {
      _mint(msg.sender, value);
    }
  
    
   
	function _burn(address account, uint256 amount) internal onlyOwner {
    require(account != address(0), "ERC20: burn from the zero address");
    require(amount <= balanceOf(account), "ERC20: burn amount exceeds balance");
    _tTotal = _tTotal.sub(amount);
    emit Transfer(account, address(0), amount);
  }

   function cap() public view returns (uint256) {
        return _cap;
    }

     
 
    function _mint(address account, uint256 amount) internal onlyOwner {
        require(account != address(0), "ERC20: mint to the zero address");
        require(totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");
        _tTotal = _tTotal.add(amount);
        emit Transfer(address(0), account, amount);
    }
 

    constructor ()  {
        _rOwned[_msgSender()] = _rTotal;
        
        
        _isExcludedFromCommunity_charge[owner()] = true;
        _isExcludedFromCommunity_charge[address(this)] = true;

        _isExcludedFromEcoSysFee[owner()] = true;
        _isExcludedFromEcoSysFee[address(this)] = true;

        _isExcludedFromSurcharge1[owner()] = true;
        _isExcludedFromSurcharge1[address(this)] = true;

        _isExcludedFromSurcharge2[owner()] = true;
        _isExcludedFromSurcharge2[address(this)] = true;

        _isExcludedFromSurcharge3[owner()] = true;
        _isExcludedFromSurcharge3[address(this)] = true;

        _cap = _tTotal;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcludedFromReward[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

function approve(address spender, uint256 amount) public override returns (bool) {
    require((amount == 0) || (_allowances[msg.sender][spender] == 0), "Fidometa: approve from non-zero to non-zero allowance");
    _approve(_msgSender(), spender, amount);
    return true;
}

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function isExcludedFromReward(address account) public view returns (bool) {
        return _isExcludedFromReward[account];
    }

    
    function totalCommunityCharge() public view returns (uint256) {
        return _tCommunityChargeTotal;
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) private view returns(uint256) {
        require(tAmount <= _tTotal, "Amount must be less than supply");
        if (!deductTransferFee) {
            (MValues memory m) = _getValues(tAmount);
            return m.rAmount;
        } else {
            (MValues memory m) = _getValues(tAmount);
            return m.rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {
        require(rAmount <= _rTotal, "Amount must be less than total reflections");
        uint256 currentRate =  _getRate();
        return rAmount.div(currentRate);
    }

    
    function excludeFromReward(address account) public onlyOwner() {
        require(!_isExcludedFromReward[account], "Account is already excluded");
        if(_rOwned[account] > 0) {
            _tOwned[account] = tokenFromReflection(_rOwned[account]);
        }
        _isExcludedFromReward[account] = true;
        _excludedFromReward.push(account);
    }

    
    function includeInReward(address account) external onlyOwner() {
        require(_isExcludedFromReward[account], "Account is already excluded");
        for (uint256 i = 0; i < _excludedFromReward.length; i++) {
            if (_excludedFromReward[i] == account) {
                _excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];
                _tOwned[account] = 0;
                _isExcludedFromReward[account] = false;
                _excludedFromReward.pop();
                break;
            }
        }
    }
    
    function excludeFromCommunityCharge(address account) public onlyOwner {
        _isExcludedFromCommunity_charge[account] = true;
    }
    
    function includeInCommunityCharge(address account) public onlyOwner {
        _isExcludedFromCommunity_charge[account] = false;
    }


    
    function excludedFromEcoSysFee(address account) public onlyOwner {
        _isExcludedFromEcoSysFee[account] = true;
    }

   
    function includeInEcoSysFee(address account) public onlyOwner {
        _isExcludedFromEcoSysFee[account] = false;
    }

 


    
    function excludedFromSurcharge1(address account) public onlyOwner {
        _isExcludedFromSurcharge1[account] = true;
    }
    
    function includeInSurcharge1(address account) public onlyOwner {
        _isExcludedFromSurcharge1[account] = false;
    }


    
    function excludedFromSurcharge2(address account) public onlyOwner {
        _isExcludedFromSurcharge2[account] = true;
    }
    
    function includeInSurcharge2(address account) public onlyOwner {
        _isExcludedFromSurcharge2[account] = false;
    }


    
    function excludedFromSurcharge3(address account) public onlyOwner {
        _isExcludedFromSurcharge3[account] = true;
    }
    
    function includeInSurcharge3(address account) public onlyOwner {
        _isExcludedFromSurcharge3[account] = false;
    }

    
    

    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {
        _maxTxAmount = _tTotal.mul(maxTxPercent).div(
            10**2
        );
    }

  
    
        function calculateEcoSysFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_ecoSysFee).div(10**11);
    }

    
    function calculateCommunityCharge(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_community_charge).div(10**11);
    }

    
        function calculateSurcharge1(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_surcharge1).div(10**11);
    }

    
        function calculateSurcharge2(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_surcharge2).div(10**11);
    }
    
    
        function calculateSurcharge3(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_surcharge3).div(10**11);
    }

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tCommunityChargeTotal = _tCommunityChargeTotal.add(tFee);
    }


    function _getValues(uint256 tAmount) private view returns (MValues memory) {
       uint256 currentRate = _getRate();
        (TValues memory value) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rCommunityCharge) = _getRValues(tAmount, value.tCommunityCharge, currentRate);
        uint256 rEcoSysFee =   value.tEcoSysFee.mul(currentRate);
        uint256 rSurcharge1 =  value.tSurcharge1.mul(currentRate);
        uint256 rSurcharge2 =  value.tSurcharge2.mul(currentRate);
        uint256 rSurcharge3 =  value.tSurcharge3.mul(currentRate);
        rTransferAmount =  rTransferAmount.sub(rEcoSysFee).sub(rSurcharge1).sub(rSurcharge2).sub(rSurcharge3);
        MValues memory mValues = MValues({rAmount:rAmount,rTransferAmount:rTransferAmount, rCommunityCharge:rCommunityCharge, tTransferAmount:value.tTransferAmount,tCommunityCharge: value.tCommunityCharge,tEcoSysFee:value.tEcoSysFee,tSurcharge1:value.tSurcharge1,tSurcharge2:value.tSurcharge2,tSurcharge3:value.tSurcharge3 });
        return (mValues);
    }


    function _getTValues(uint256 tAmount) private view returns (TValues memory) {
        uint256   tCommunityCharge = calculateCommunityCharge(tAmount);
        uint256   tEcoSysFee = calculateEcoSysFee(tAmount);
        uint256   tSurcharge1 = calculateSurcharge1(tAmount);
        uint256   tSurcharge2 = calculateSurcharge2(tAmount);
        uint256   tSurcharge3 = calculateSurcharge3(tAmount);
         uint256 tTransferAmountEco = tAmount.sub(tCommunityCharge).sub(tEcoSysFee);
         uint256 tTransferAmount =  tTransferAmountEco.sub(tSurcharge1).sub(tSurcharge2).sub(tSurcharge3);
        TValues memory tvalue = TValues({tTransferAmount:tTransferAmount, tCommunityCharge:tCommunityCharge, tEcoSysFee:tEcoSysFee,tSurcharge1:tSurcharge1,tSurcharge2:tSurcharge2,tSurcharge3:tSurcharge3});
        return (tvalue);
    }

    function _getRValues(uint256 tAmount, uint256 tFee,uint256 currentRate) private pure returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee);
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns(uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns(uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;      
        for (uint256 i = 0; i < _excludedFromReward.length; i++) {
            if (_rOwned[_excludedFromReward[i]] > rSupply || _tOwned[_excludedFromReward[i]] > tSupply) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excludedFromReward[i]]);
            tSupply = tSupply.sub(_tOwned[_excludedFromReward[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

 function removeEcosysFee() private {
        if(_ecoSysFee == 0) return;
        _previousEcoSysFee = _ecoSysFee;
        _ecoSysFee = 0;
    }

     function removeSurcharge1() private {
        if(_surcharge1 == 0) return;
        _previousSurcharge1 = _surcharge1;
        _surcharge1 = 0;
    }

     function removeSurcharge2() private {
        if(_surcharge2 == 0) return;
        _previousSurcharge2 = _surcharge2;
        _surcharge2 = 0;
    }
     function removeSurcharge3() private {
        if(_surcharge3 == 0) return;
        _previousSurcharge3 = _surcharge3;
        _surcharge3 = 0;
    }
   
    
    function removeCommunityCharge() private {
        if(_community_charge == 0) return;
        _previousCommunityCharge = _community_charge;
        _community_charge = 0;
    }
    
    function restoreCommunityCharge() private {
        _community_charge = _previousCommunityCharge;
    }

     function restoreEcosysFee() private {
        _ecoSysFee = _previousEcoSysFee;
    }

     function restoreSurcharge1() private {
        _surcharge1 = _previousSurcharge1;
    }

         function restoreSurcharge2() private {
        _surcharge2 = _previousSurcharge2;
    }

         function restoreSurcharge3() private {
        _surcharge3 = _previousSurcharge3;
    }

    
    function isExcludedFromCommunityCharge(address account) public view returns(bool) {
        return _isExcludedFromCommunity_charge[account];
    }

     function isExcludedFromEcoSysFee(address account) public view returns(bool) {
        return _isExcludedFromEcoSysFee[account];
    }

     function isExcludedFromSurcharge1(address account) public view returns(bool) {
        return _isExcludedFromSurcharge1[account];
    }
    function isExcludedFromSurcharge2(address account) public view returns(bool) {
        return _isExcludedFromSurcharge2[account];
    }
    function isExcludedFromSurcharge3(address account) public view returns(bool) {
        return _isExcludedFromSurcharge3[account];
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

 

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(!frozenAccount[from], "Sender account is frozen");
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(balanceOf(from) > amount, "ERC20: Insufficient Fund ");
        require(amount > 0, "Transfer amount must be greater than zero");
        if(from != owner() && to != owner())
            require(amount <= _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
    

        if(locks[from].lockedToken > 0){
            uint256 withdrawable = balanceOf(from) - locks[from].remainedToken;
            require(amount <= withdrawable, "Not enough Unlocked token Available");
        }

        
        bool takeCommunityCharge = true;
        bool takeEcosysFee = true;
        bool takeSurcharge1 = true;
        bool takeSurcharge2 = true;
        bool takeSurcharge3 = true;
        
        
        if(_isExcludedFromCommunity_charge[from]){
            takeCommunityCharge = false;
        }
         
        if(_isExcludedFromEcoSysFee[from]){
            takeEcosysFee = false;
        }
         
        if(_isExcludedFromSurcharge1[from]){
            takeSurcharge1 = false;
        }
           
        if(_isExcludedFromSurcharge2[from]){
            takeSurcharge2 = false;
        }
           
        if(_isExcludedFromSurcharge3[from]){
            takeSurcharge3 = false;
        }

        _tokenTransfer(from,to,amount,takeCommunityCharge,takeEcosysFee,takeSurcharge1,takeSurcharge2,takeSurcharge3);

    }

     function _takeEcoSysCharge(uint256 tEcoSys) private {
        if (tEcoSys > 0) {
            uint256 currentRate = _getRate();
            uint256 rEcosys = tEcoSys.mul(currentRate);
            _rOwned[_ecoSysWallet] = _rOwned[_ecoSysWallet].add(rEcosys);
            if (_isExcludedFromEcoSysFee[_ecoSysWallet])
                _tOwned[_ecoSysWallet] = _tOwned[_ecoSysWallet].add(tEcoSys);
            emit Transfer(_msgSender(), _ecoSysWallet, tEcoSys);
        }
    }

     function _takeSurcharge1(uint256 tSurcharge1) private {
        if (tSurcharge1 > 0) {
            uint256 currentRate = _getRate();
            uint256 rSurcharge1 = tSurcharge1.mul(currentRate);
            _rOwned[_surcharge_1_Wallet] = _rOwned[_surcharge_1_Wallet].add(rSurcharge1);
            if (_isExcludedFromSurcharge1[_surcharge_1_Wallet])
                _tOwned[_surcharge_1_Wallet] = _tOwned[_surcharge_1_Wallet].add(tSurcharge1);
            emit Transfer(_msgSender(), _surcharge_1_Wallet, tSurcharge1);
        }
    }

    function _takeSurcharge2(uint256 tSurcharge2) private {
        if (tSurcharge2 > 0) {
            uint256 currentRate = _getRate();
            uint256 rSurcharge2 = tSurcharge2.mul(currentRate);
            _rOwned[_surcharge_2_Wallet] = _rOwned[_surcharge_2_Wallet].add(rSurcharge2);
            if (_isExcludedFromSurcharge1[_surcharge_2_Wallet])
                _tOwned[_surcharge_2_Wallet] = _tOwned[_surcharge_2_Wallet].add(tSurcharge2);
            emit Transfer(_msgSender(), _surcharge_2_Wallet, tSurcharge2);
        }
    }


        function _takeSurcharge3(uint256 tSurcharge3) private {
        if (tSurcharge3 > 0) {
            uint256 currentRate = _getRate();
            uint256 rSurcharge3 = tSurcharge3.mul(currentRate);
            _rOwned[_surcharge_3_Wallet] = _rOwned[_surcharge_3_Wallet].add(rSurcharge3);
            if (_isExcludedFromSurcharge3[_surcharge_3_Wallet])
                _tOwned[_surcharge_3_Wallet] = _tOwned[_surcharge_3_Wallet].add(tSurcharge3);
            emit Transfer(_msgSender(), _surcharge_3_Wallet, tSurcharge3);
        }
    }

    

    
    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeCommunityCharge,bool takeEcosysFee,bool takeSurcharge1,bool takeSurcharge2,bool takeSurcharge3) private {
        if(!takeCommunityCharge)
            removeCommunityCharge();

        if(!takeEcosysFee)
            removeEcosysFee();

        if(!takeSurcharge1)
            removeSurcharge1();

        if(!takeSurcharge2)
            removeSurcharge2();

        if(!takeSurcharge3)
            removeSurcharge3();

         if (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }
        
        if(!takeCommunityCharge)
            restoreCommunityCharge();
        if(!takeEcosysFee)
            restoreEcosysFee();
        if(!takeSurcharge1)
            restoreSurcharge1();
        if(!takeSurcharge2)
            restoreSurcharge2();
        if(!takeSurcharge3)
            restoreSurcharge3();
    }

   function unlock(address target_) external {
        require(target_ != address(0), "Invalid target");
        uint256 startTime     = locks[target_].startTime;
        uint256 lockedToken   = locks[target_].lockedToken;
        uint256 remainedToken = locks[target_].remainedToken;
        uint256 monthCount    = locks[target_].monthCount;
        uint256 initialLock    = locks[target_].initialLock;
        

        require(remainedToken != 0, "All tokens are unlocked");
        
        require(block.timestamp > startTime + (initialLock * 1   ), "UnLocking period is not opened");
        uint256 timePassed = block.timestamp - (startTime + (initialLock * 1 days)); 

        uint256 monthNumber = (uint256(timePassed) + (uint256(30 days) - 1)) / uint256(30 days); 

        uint256 remainedMonth = monthNumber - monthCount;
        
        if(remainedMonth > 10)
            remainedMonth = 10;
        require(remainedMonth > 0, "Releasable token till now is released");

        uint256 receivableToken = (lockedToken * (remainedMonth*10))/ 100;

        locks[target_].monthCount    += remainedMonth;
        locks[target_].remainedToken -= receivableToken;
        
    } 

    





  function transferWithLock(address recipient, uint256 tAmount, uint256 initialLock)  public onlyOwner {
        require(recipient != address(0), "Invalid target");
        require(locks[recipient].lockedToken == 0, "This address is already in vesting period");
        require(tAmount >= 0, "Amount should be greater than or equal to 0");
        require(initialLock >= 0, "timeindays should be greater than or equal to 0");
        _transfer(_msgSender(),recipient,tAmount);
        locks[recipient] = LockDetails(block.timestamp, initialLock, tAmount, tAmount, 0);
        emit Transfer(_msgSender(), recipient, tAmount);
    }

     function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {
        (MValues memory mvalues) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(mvalues.rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(mvalues.rTransferAmount); 
        _takeEcoSysCharge(mvalues.tEcoSysFee);
        _takeSurcharge1(mvalues.tSurcharge1);
        _takeSurcharge2(mvalues.tSurcharge2);
        _takeSurcharge3(mvalues.tSurcharge3);
        _reflectFee(mvalues.rCommunityCharge, mvalues.tCommunityCharge);
        emit Transfer(sender, recipient, mvalues.tTransferAmount);
    }

      function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {
        (MValues memory mvalues) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(mvalues.rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(mvalues.tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(mvalues.rTransferAmount); 
        _takeEcoSysCharge(mvalues.tEcoSysFee);
        _takeSurcharge1(mvalues.tSurcharge1);
        _takeSurcharge2(mvalues.tSurcharge2);
        _takeSurcharge3(mvalues.tSurcharge3);
        _reflectFee(mvalues.rCommunityCharge, mvalues.tCommunityCharge);
        emit Transfer(sender, recipient, mvalues.tTransferAmount);
    }

      function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (MValues memory mvalues) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(mvalues.rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(mvalues.rTransferAmount);
        _takeEcoSysCharge(mvalues.tEcoSysFee);
        _takeSurcharge1(mvalues.tSurcharge1);
        _takeSurcharge2(mvalues.tSurcharge2);
        _takeSurcharge3(mvalues.tSurcharge3);
        _reflectFee(mvalues.rCommunityCharge, mvalues.tCommunityCharge);
        emit Transfer(sender, recipient, mvalues.tTransferAmount);
    }  


    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {
         (MValues memory mvalues) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(mvalues.rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(mvalues.tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(mvalues.rTransferAmount);
        _takeEcoSysCharge(mvalues.tEcoSysFee);
        _takeSurcharge1(mvalues.tSurcharge1);
        _takeSurcharge2(mvalues.tSurcharge2);
        _takeSurcharge3(mvalues.tSurcharge3);
        _reflectFee(mvalues.rCommunityCharge, mvalues.tCommunityCharge);
        emit Transfer(sender, recipient, mvalues.tTransferAmount);
    }

}