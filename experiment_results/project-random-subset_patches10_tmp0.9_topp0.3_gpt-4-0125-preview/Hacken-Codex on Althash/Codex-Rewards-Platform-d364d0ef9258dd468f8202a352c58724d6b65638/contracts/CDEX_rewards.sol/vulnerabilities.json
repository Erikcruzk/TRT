{
  "smartbugs_completed": true,
  "analyzer_results": {
    "semgrep": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "inefficient-state-variable-increment",
          "vulnerability_from_line": 378,
          "vulnerability_to_line": null,
          "vulnerability_code": "            totalMembers += 1;\n",
          "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 247,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public periodFinish = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 248,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public rewardRate = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "init-variables-with-default-value",
          "vulnerability_from_line": 249,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 public rewardsDuration = 0;\n",
          "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 435,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (reward > 0 && depositedRewardTokens >= reward) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 436,
          "vulnerability_to_line": null,
          "vulnerability_code": "            /// The withdraw is always for the full accrued reward amount\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 437,
          "vulnerability_to_line": null,
          "vulnerability_code": "            rewards[msg.sender] = 0;\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 438,
          "vulnerability_to_line": null,
          "vulnerability_code": "            /// Decrements the deposited reward tokens balance\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 439,
          "vulnerability_to_line": null,
          "vulnerability_code": "            depositedRewardTokens = depositedRewardTokens.sub(reward);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 440,
          "vulnerability_to_line": null,
          "vulnerability_code": "            /// Defines the bonus amount based on the sender's reward tier\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 441,
          "vulnerability_to_line": null,
          "vulnerability_code": "            if (_balances[msg.sender] >= loyaltyTier1) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 442,
          "vulnerability_to_line": null,
          "vulnerability_code": "                loyaltyBonus = reward.mul(loyaltyTier1Bonus).div(10000);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 443,
          "vulnerability_to_line": null,
          "vulnerability_code": "            } else if (_balances[msg.sender] >= loyaltyTier2) {\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        },
        {
          "name": "use-nested-if",
          "vulnerability_from_line": 444,
          "vulnerability_to_line": null,
          "vulnerability_code": "                loyaltyBonus = reward.mul(loyaltyTier2Bonus).div(10000);\n",
          "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
        }
      ]
    },
    "slither": {
      "successfull_analysis": true,
      "errors": [
        "EXIT_CODE_37"
      ],
      "vulnerability_findings": [
        {
          "name": "erc20-interface",
          "vulnerability_from_line": 225,
          "vulnerability_to_line": 231,
          "vulnerability_code": "interface CDEXTokenContract {\n\n\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address _to, uint256 _value) external;\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n\n",
          "message": "CDEXTokenContract (CDEX_rewards.sol#225-231) has incorrect ERC20 function interface(s):\n\t-transfer (CDEX_rewards.sol#228)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 462,
          "vulnerability_to_line": 465,
          "vulnerability_code": "    function exit() external {\n\n        withdraw(_balances[msg.sender]);\n\n        getReward();\n",
          "message": "Reentrancy in CDEXStakingPool.exit (CDEX_rewards.sol#462-465):\n\tExternal calls:\n\t- withdraw(_balances[msg.sender]) (CDEX_rewards.sol#463)\n\t- getReward() (CDEX_rewards.sol#464)\n\tState variables written after the call(s):\n\t- _status (CDEX_rewards.sol#464)\n\t- lastUpdateTime (CDEX_rewards.sol#464)\n\t- rewardPerTokenStored (CDEX_rewards.sol#464)\n\t- rewards (CDEX_rewards.sol#464)\n\t- userRewardPerTokenPaid (CDEX_rewards.sol#464)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": 394,
          "vulnerability_code": "    function stake(uint256 amount)\n\n        external\n\n        nonReentrant\n\n        notPaused\n\n        updateReward(msg.sender)\n\n    {\n\n        require(amount > 0);\n\n        /// Increments the total staked balance\n\n        _totalSupply = _totalSupply.add(amount);\n\n        \n\n        if(_balances[msg.sender] == 0) {\n\n            /// Increments the totalMembers if the sending address didn't have any previous balance\n\n            totalMembers += 1;\n\n            /// Adds the user address to the ranking tree\n\n            CDEXRanking.insert(amount, msg.sender);\n\n        } else {\n\n            /// Removes the user address from its current ranking node in the tree\n\n            CDEXRanking.remove(_balances[msg.sender], msg.sender);\n\n            /// Adds it again with the new value\n\n            CDEXRanking.insert(_balances[msg.sender].add(amount), msg.sender);\n\n        }\n\n        /// Increments the sender's staked balance\n\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n\n        /// Transfer the tokens from the sender's balance into the contract\n\n        /// The amount needs to be previously approved in the token contract\n\n        CDEXToken.transferFrom(msg.sender, address(this), amount);\n\n        /// Emits the event\n\n        emit Staked(msg.sender, amount);\n",
          "message": "Reentrancy in CDEXStakingPool.stake (CDEX_rewards.sol#366-394):\n\tExternal calls:\n\t- CDEXRanking.insert(amount,msg.sender) (CDEX_rewards.sol#380)\n\t- CDEXRanking.remove(_balances[msg.sender],msg.sender) (CDEX_rewards.sol#383)\n\t- CDEXRanking.insert(_balances[msg.sender].add(amount),msg.sender) (CDEX_rewards.sol#385)\n\tState variables written after the call(s):\n\t- _balances (CDEX_rewards.sol#388)\n"
        },
        {
          "name": "reentrancy-no-eth",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": 423,
          "vulnerability_code": "    function withdraw(uint256 amount)\n\n        public\n\n        nonReentrant\n\n        updateReward(msg.sender)\n\n    {\n\n        require(amount > 0);\n\n        /// Decrements the total staked balance\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        /// Removes the user address from its current ranking node in the tree\n\n        CDEXRanking.remove(_balances[msg.sender], msg.sender);\n\n        /// Decrements the sender's staked balance\n\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n\n        /// If the balance is zero after decremented, decrements the totalMembers\n\n        if(_balances[msg.sender] == 0) {\n\n            totalMembers -= 1;\n\n        } else {\n\n            /// If not, adds the user address back into the ranking tree with the new balance\n\n            CDEXRanking.insert(_balances[msg.sender], msg.sender);\n\n        }\n\n        /// Transfers the tokens into the sender's address\n\n        // SWC-Unchecked Call Return Value: L415\n\n        CDEXToken.transfer(msg.sender, amount);\n\n        /// Emits the event\n\n        emit Withdrawn(msg.sender, amount);\n",
          "message": "Reentrancy in CDEXStakingPool.withdraw (CDEX_rewards.sol#399-423):\n\tExternal calls:\n\t- CDEXRanking.remove(_balances[msg.sender],msg.sender) (CDEX_rewards.sol#408)\n\tState variables written after the call(s):\n\t- _balances (CDEX_rewards.sol#410)\n"
        },
        {
          "name": "uninitialized-local",
          "vulnerability_from_line": 433,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 loyaltyBonus;\n",
          "message": "loyaltyBonus in CDEXStakingPool.getReward (CDEX_rewards.sol#433) is a local variable never initialiazed\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 366,
          "vulnerability_to_line": 394,
          "vulnerability_code": "    function stake(uint256 amount)\n\n        external\n\n        nonReentrant\n\n        notPaused\n\n        updateReward(msg.sender)\n\n    {\n\n        require(amount > 0);\n\n        /// Increments the total staked balance\n\n        _totalSupply = _totalSupply.add(amount);\n\n        \n\n        if(_balances[msg.sender] == 0) {\n\n            /// Increments the totalMembers if the sending address didn't have any previous balance\n\n            totalMembers += 1;\n\n            /// Adds the user address to the ranking tree\n\n            CDEXRanking.insert(amount, msg.sender);\n\n        } else {\n\n            /// Removes the user address from its current ranking node in the tree\n\n            CDEXRanking.remove(_balances[msg.sender], msg.sender);\n\n            /// Adds it again with the new value\n\n            CDEXRanking.insert(_balances[msg.sender].add(amount), msg.sender);\n\n        }\n\n        /// Increments the sender's staked balance\n\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n\n        /// Transfer the tokens from the sender's balance into the contract\n\n        /// The amount needs to be previously approved in the token contract\n\n        CDEXToken.transferFrom(msg.sender, address(this), amount);\n\n        /// Emits the event\n\n        emit Staked(msg.sender, amount);\n",
          "message": "CDEXStakingPool.stake (CDEX_rewards.sol#366-394) does not use the value returned by external calls:\n\t-CDEXToken.transferFrom(msg.sender,address(this),amount) (CDEX_rewards.sol#391)\n"
        },
        {
          "name": "unused-return",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": 501,
          "vulnerability_code": "    function depositTokens(uint256 amount) public onlyOwner {\n\n        /// Adding the decimal places to the amount\n\n        amount = amount.mul(1e8);\n\n        /// Calculating the total loyalty bonus percentage from the total\n\n        depositedLoyaltyBonus = depositedLoyaltyBonus.add(amount.mul(loyaltyBonusTotal).div(10000));\n\n        /// Increasing the total deposited tokens with the amount\n\n        depositedRewardTokens = depositedRewardTokens.add(amount);\n\n        /// Transferring the whole amount to the contract\n\n        CDEXToken.transferFrom(owner, address(this), amount);\n\n        /// Emits the event\n\n        emit RewardsDeposited(owner, address(this), amount);\n",
          "message": "CDEXStakingPool.depositTokens (CDEX_rewards.sol#490-501) does not use the value returned by external calls:\n\t-CDEXToken.transferFrom(owner,address(this),amount) (CDEX_rewards.sol#498)\n"
        },
        {
          "name": "reentrancy-benign",
          "vulnerability_from_line": 399,
          "vulnerability_to_line": 423,
          "vulnerability_code": "    function withdraw(uint256 amount)\n\n        public\n\n        nonReentrant\n\n        updateReward(msg.sender)\n\n    {\n\n        require(amount > 0);\n\n        /// Decrements the total staked balance\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        /// Removes the user address from its current ranking node in the tree\n\n        CDEXRanking.remove(_balances[msg.sender], msg.sender);\n\n        /// Decrements the sender's staked balance\n\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n\n        /// If the balance is zero after decremented, decrements the totalMembers\n\n        if(_balances[msg.sender] == 0) {\n\n            totalMembers -= 1;\n\n        } else {\n\n            /// If not, adds the user address back into the ranking tree with the new balance\n\n            CDEXRanking.insert(_balances[msg.sender], msg.sender);\n\n        }\n\n        /// Transfers the tokens into the sender's address\n\n        // SWC-Unchecked Call Return Value: L415\n\n        CDEXToken.transfer(msg.sender, amount);\n\n        /// Emits the event\n\n        emit Withdrawn(msg.sender, amount);\n",
          "message": "Reentrancy in CDEXStakingPool.withdraw (CDEX_rewards.sol#399-423):\n\tExternal calls:\n\t- CDEXRanking.remove(_balances[msg.sender],msg.sender) (CDEX_rewards.sol#408)\n\tState variables written after the call(s):\n\t- totalMembers (CDEX_rewards.sol#413)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 343,
          "vulnerability_to_line": 345,
          "vulnerability_code": "    function min(uint256 a, uint256 b) public pure returns (uint256) {\n\n        return a < b ? a : b;\n",
          "message": "CDEXStakingPool.min (CDEX_rewards.sol#343-345) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- a < b (CDEX_rewards.sol#344)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 537,
          "vulnerability_code": "    function notifyRewardAmount(uint256 reward)\n\n        public\n\n        onlyOwner\n\n        updateReward(address(0))\n\n    {\n\n        /// Adding the decimal places to the reward\n\n        reward = reward.mul(1e8);\n\n        /// The total deposited amount should cater for the rewards and the loyalty bonus.\n\n        /// Therefore, the notified reward must be equal to total deposited minus total possible bonus over the reward.\n\n        require(reward <= depositedRewardTokens.sub(reward.mul(loyaltyBonusTotal).div(10000)));\n\n        /// If not during staking period, calculates the new reward rate per second.\n\n        /// Else, adds the new reward to current non-distributed rewards.\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n        /// Ensure the provided reward amount is not more than the balance in the contract.\n\n        /// This keeps the reward rate in the right range, preventing overflows due to\n\n        /// very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        /// Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        require(rewardRate <= depositedRewardTokens.div(rewardsDuration));\n\n        /// Updates the last updated time\n\n        lastUpdateTime = block.timestamp;\n\n        /// Resets the staking period\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        /// Emits the event\n\n        emit RewardAdded(reward);\n",
          "message": "CDEXStakingPool.notifyRewardAmount (CDEX_rewards.sol#507-537) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= periodFinish (CDEX_rewards.sol#519-525)\n\t- require(bool)(rewardRate <= depositedRewardTokens.div(rewardsDuration)) (CDEX_rewards.sol#530)\n"
        },
        {
          "name": "timestamp",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": 549,
          "vulnerability_code": "    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n\n        /// Checks if the previously defined period has already finished\n\n        require(block.timestamp > periodFinish);\n\n        /// Updates the duration\n\n        rewardsDuration = _rewardsDuration;\n\n        /// Emits the event\n\n        emit RewardsDurationUpdated(rewardsDuration);\n",
          "message": "CDEXStakingPool.setRewardsDuration (CDEX_rewards.sol#542-549) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp > periodFinish) (CDEX_rewards.sol#544)\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": 474,
          "vulnerability_code": "    function setTokenContract(address _contractAddress) public onlyOwner {\n\n        CDEXToken = CDEXTokenContract(_contractAddress);\n",
          "message": "CDEXStakingPool.setTokenContract (CDEX_rewards.sol#472-474) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": 481,
          "vulnerability_code": "    function setRankingContract(address _contractAddress) public onlyOwner {\n\n        CDEXRanking = CDEXRankingContract(_contractAddress);\n",
          "message": "CDEXStakingPool.setRankingContract (CDEX_rewards.sol#479-481) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 490,
          "vulnerability_to_line": 501,
          "vulnerability_code": "    function depositTokens(uint256 amount) public onlyOwner {\n\n        /// Adding the decimal places to the amount\n\n        amount = amount.mul(1e8);\n\n        /// Calculating the total loyalty bonus percentage from the total\n\n        depositedLoyaltyBonus = depositedLoyaltyBonus.add(amount.mul(loyaltyBonusTotal).div(10000));\n\n        /// Increasing the total deposited tokens with the amount\n\n        depositedRewardTokens = depositedRewardTokens.add(amount);\n\n        /// Transferring the whole amount to the contract\n\n        CDEXToken.transferFrom(owner, address(this), amount);\n\n        /// Emits the event\n\n        emit RewardsDeposited(owner, address(this), amount);\n",
          "message": "CDEXStakingPool.depositTokens (CDEX_rewards.sol#490-501) should be declared external\n"
        },
        {
          "name": "external-function",
          "vulnerability_from_line": 507,
          "vulnerability_to_line": 537,
          "vulnerability_code": "    function notifyRewardAmount(uint256 reward)\n\n        public\n\n        onlyOwner\n\n        updateReward(address(0))\n\n    {\n\n        /// Adding the decimal places to the reward\n\n        reward = reward.mul(1e8);\n\n        /// The total deposited amount should cater for the rewards and the loyalty bonus.\n\n        /// Therefore, the notified reward must be equal to total deposited minus total possible bonus over the reward.\n\n        require(reward <= depositedRewardTokens.sub(reward.mul(loyaltyBonusTotal).div(10000)));\n\n        /// If not during staking period, calculates the new reward rate per second.\n\n        /// Else, adds the new reward to current non-distributed rewards.\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n        /// Ensure the provided reward amount is not more than the balance in the contract.\n\n        /// This keeps the reward rate in the right range, preventing overflows due to\n\n        /// very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        /// Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        require(rewardRate <= depositedRewardTokens.div(rewardsDuration));\n\n        /// Updates the last updated time\n\n        lastUpdateTime = block.timestamp;\n\n        /// Resets the staking period\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        /// Emits the event\n\n        emit RewardAdded(reward);\n",
          "message": "CDEXStakingPool.notifyRewardAmount (CDEX_rewards.sol#507-537) should be declared external\n"
        },
        {
          "name": "solc-version",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": "Detected issues with version pragma in CDEX_rewards.sol:\n\t- pragma solidity^0.4.21 (CDEX_rewards.sol#5): it allows old versions\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 30,
          "vulnerability_to_line": 32,
          "vulnerability_code": "    function ReentrancyGuard() internal {\n\n        _status = _NOT_ENTERED;\n",
          "message": "Function 'ReentrancyGuard.ReentrancyGuard' (CDEX_rewards.sol#30-32) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": 63,
          "vulnerability_code": "    function Owned(address _owner) public {\n\n        require(_owner != address(0));\n\n        owner = _owner;\n\n        emit OwnerChanged(address(0), _owner);\n",
          "message": "Function 'Owned.Owned' (CDEX_rewards.sol#59-63) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 59,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function Owned(address _owner) public {\n",
          "message": "Parameter '_owner' of Owned.Owned (CDEX_rewards.sol#59) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 65,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function nominateNewOwner(address _owner) external onlyOwner {\n",
          "message": "Parameter '_owner' of Owned.nominateNewOwner (CDEX_rewards.sol#65) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 82,
          "vulnerability_to_line": 84,
          "vulnerability_code": "    function _onlyOwner() private view {\n\n        require(msg.sender == owner);\n",
          "message": "Function 'Owned._onlyOwner' (CDEX_rewards.sol#82-84) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 94,
          "vulnerability_to_line": 98,
          "vulnerability_code": "    function Pausable() internal {\n\n        /// This contract is abstract, and thus cannot be instantiated directly\n\n        require(owner != address(0));\n\n        /// Paused will be false, and lastPauseTime will be 0 upon initialisation\n",
          "message": "Function 'Pausable.Pausable' (CDEX_rewards.sol#94-98) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPaused(bool _paused) external onlyOwner {\n",
          "message": "Parameter '_paused' of Pausable.setPaused (CDEX_rewards.sol#104) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 279,
          "vulnerability_to_line": 286,
          "vulnerability_code": "    function CDEXStakingPool(\n\n        address _owner,\n\n        address _CDEXTokenContractAddress,\n\n        address _rankingContractAddress\n\n    ) public Owned(_owner) {\n\n        CDEXToken = CDEXTokenContract(_CDEXTokenContractAddress);\n\n        CDEXRanking = CDEXRankingContract(_rankingContractAddress);\n",
          "message": "Function 'CDEXStakingPool.CDEXStakingPool' (CDEX_rewards.sol#279-286) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 281,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _CDEXTokenContractAddress,\n",
          "message": "Parameter '_CDEXTokenContractAddress' of CDEXStakingPool.CDEXStakingPool (CDEX_rewards.sol#281) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 282,
          "vulnerability_to_line": null,
          "vulnerability_code": "        address _rankingContractAddress\n",
          "message": "Parameter '_rankingContractAddress' of CDEXStakingPool.CDEXStakingPool (CDEX_rewards.sol#282) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenContract(address _contractAddress) public onlyOwner {\n",
          "message": "Parameter '_contractAddress' of CDEXStakingPool.setTokenContract (CDEX_rewards.sol#472) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRankingContract(address _contractAddress) public onlyOwner {\n",
          "message": "Parameter '_contractAddress' of CDEXStakingPool.setRankingContract (CDEX_rewards.sol#479) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n",
          "message": "Parameter '_rewardsDuration' of CDEXStakingPool.setRewardsDuration (CDEX_rewards.sol#542) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 556,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _loyaltyTier1, \n",
          "message": "Parameter '_loyaltyTier1' of CDEXStakingPool.setLoyaltyTiers (CDEX_rewards.sol#556) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 557,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _loyaltyTier2, \n",
          "message": "Parameter '_loyaltyTier2' of CDEXStakingPool.setLoyaltyTiers (CDEX_rewards.sol#557) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 558,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _loyaltyTier3\n",
          "message": "Parameter '_loyaltyTier3' of CDEXStakingPool.setLoyaltyTiers (CDEX_rewards.sol#558) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 576,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _loyaltyTier1Bonus, \n",
          "message": "Parameter '_loyaltyTier1Bonus' of CDEXStakingPool.setLoyaltyTiersBonus (CDEX_rewards.sol#576) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 577,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _loyaltyTier2Bonus, \n",
          "message": "Parameter '_loyaltyTier2Bonus' of CDEXStakingPool.setLoyaltyTiersBonus (CDEX_rewards.sol#577) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 578,
          "vulnerability_to_line": null,
          "vulnerability_code": "        uint256 _loyaltyTier3Bonus\n",
          "message": "Parameter '_loyaltyTier3Bonus' of CDEXStakingPool.setLoyaltyTiersBonus (CDEX_rewards.sol#578) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 245,
          "vulnerability_to_line": null,
          "vulnerability_code": "    CDEXTokenContract public CDEXToken;\n",
          "message": "Variable 'CDEXStakingPool.CDEXToken' (CDEX_rewards.sol#245) is not in mixedCase\n"
        },
        {
          "name": "naming-convention",
          "vulnerability_from_line": 246,
          "vulnerability_to_line": null,
          "vulnerability_code": "    CDEXRankingContract public CDEXRanking;\n",
          "message": "Variable 'CDEXStakingPool.CDEXRanking' (CDEX_rewards.sol#246) is not in mixedCase\n"
        }
      ]
    },
    "smartcheck": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 74,
          "vulnerability_to_line": null,
          "vulnerability_code": "        nominatedOwner = address(0);\n",
          "message": null
        },
        {
          "name": "SOLIDITY_ADDRESS_HARDCODED",
          "vulnerability_from_line": 510,
          "vulnerability_to_line": null,
          "vulnerability_code": "        updateReward(address(0))\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 104,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setPaused(bool _paused) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 472,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setTokenContract(address _contractAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 479,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRankingContract(address _contractAddress) public onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 542,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 555,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLoyaltyTiers(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_OVERPOWERED_ROLE",
          "vulnerability_from_line": 575,
          "vulnerability_to_line": null,
          "vulnerability_code": "    function setLoyaltyTiersBonus(\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRAGMAS_VERSION",
          "vulnerability_from_line": 5,
          "vulnerability_to_line": null,
          "vulnerability_code": "pragma solidity ^0.4.21;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 25,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 26,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private constant _ENTERED = 2;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 28,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _status;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 269,
          "vulnerability_to_line": null,
          "vulnerability_code": "    uint256 private _totalSupply;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
          "vulnerability_from_line": 270,
          "vulnerability_to_line": null,
          "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
          "message": null
        },
        {
          "name": "SOLIDITY_SAFEMATH",
          "vulnerability_from_line": 242,
          "vulnerability_to_line": null,
          "vulnerability_code": "    using SafeMath for uint256;\n",
          "message": null
        }
      ]
    },
    "oyente": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    },
    "mythril": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": [
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 519,
          "vulnerability_to_line": null,
          "vulnerability_code": "        if (block.timestamp >= periodFinish) {\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 344,
          "vulnerability_to_line": null,
          "vulnerability_code": "        return a < b ? a : b;\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 380,
          "vulnerability_to_line": null,
          "vulnerability_code": "            CDEXRanking.insert(amount, msg.sender);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _balances[msg.sender] = _balances[msg.sender].add(amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 388,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _balances[msg.sender] = _balances[msg.sender].add(amount);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CDEXToken.transferFrom(msg.sender, address(this), amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CDEXToken.transferFrom(msg.sender, address(this), amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "Multiple Calls in a Single Transaction (SWC 113)",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CDEXToken.transferFrom(msg.sender, address(this), amount);\n",
          "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 391,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CDEXToken.transferFrom(msg.sender, address(this), amount);\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 51,
          "vulnerability_to_line": null,
          "vulnerability_code": "        _status = _NOT_ENTERED;\n",
          "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        },
        {
          "name": "Dependence on predictable environment variable (SWC 116)",
          "vulnerability_from_line": 544,
          "vulnerability_to_line": null,
          "vulnerability_code": "        require(block.timestamp > periodFinish);\n",
          "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
        },
        {
          "name": "External Call To User-Supplied Address (SWC 107)",
          "vulnerability_from_line": 498,
          "vulnerability_to_line": null,
          "vulnerability_code": "        CDEXToken.transferFrom(owner, address(this), amount);\n",
          "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
        },
        {
          "name": "State access after external call (SWC 107)",
          "vulnerability_from_line": 500,
          "vulnerability_to_line": null,
          "vulnerability_code": "        emit RewardsDeposited(owner, address(this), amount);\n",
          "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
        }
      ]
    },
    "osiris": {
      "successfull_analysis": true,
      "errors": [],
      "vulnerability_findings": []
    }
  }
}