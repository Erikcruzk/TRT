{
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "External Call To User-Supplied Address (SWC 107)",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    upgraded.setCompleted(lastCompletedMigration);\n",
                    "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
                }
            ]
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/mocks/core/lib/EIP712LibraryMock.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/mocks/lib/ERC20WrapperMock.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/mocks/lib/CommonMathMock.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/mocks/lib/Bytes32Mock.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/extensions/CoreFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            state.validFactories[_factory],\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Core.create: Invalid or disabled factory address\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            state.validFactories[_factory],\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Core.create: Invalid or disabled factory address\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": 641,
                    "vulnerability_code": "    function create(\n\n        address _factory,\n\n        address[] _components,\n\n        uint256[] _units,\n\n        uint256 _naturalUnit,\n\n        bytes32 _name,\n\n        bytes32 _symbol,\n\n        bytes _callData\n\n    )\n\n        external\n\n        returns (address)\n\n    {\n\n        // Verify Factory is linked to Core\n\n        require(\n\n            state.validFactories[_factory],\n\n            \"Core.create: Invalid or disabled factory address\"\n\n        );\n\n\n\n        // Create the Set\n\n        address newSetTokenAddress = ISetFactory(_factory).create(\n\n            _components,\n\n            _units,\n\n            _naturalUnit,\n\n            _name,\n\n            _symbol,\n\n            _callData\n\n        );\n\n\n\n        // Add Set to the mapping of tracked Sets\n\n        state.validSets[newSetTokenAddress] = true;\n\n\n\n        // Add Set to the array of tracked Sets\n\n        state.setTokens.push(newSetTokenAddress);\n\n\n\n        // Emit Set Token creation log\n\n        emit SetTokenCreated(\n\n            newSetTokenAddress,\n\n            _factory,\n\n            _components,\n\n            _units,\n\n            _naturalUnit,\n\n            _name,\n\n            _symbol\n\n        );\n\n\n\n        return newSetTokenAddress;\n",
                    "message": "Reentrancy in CoreFactory.create (CoreFactory.sol#595-641):\n\tExternal calls:\n\t- newSetTokenAddress = ISetFactory(_factory).create(_components,_units,_naturalUnit,_name,_symbol,_callData) (CoreFactory.sol#614-621)\n\tState variables written after the call(s):\n\t- state (CoreFactory.sol#624)\n\t- state (CoreFactory.sol#627)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _exchangeId\n",
                    "message": "Parameter '_exchangeId' of CoreState.exchanges (CoreFactory.sol#333) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _factory\n",
                    "message": "Parameter '_factory' of CoreState.validFactories (CoreFactory.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _module\n",
                    "message": "Parameter '_module' of CoreState.validModules (CoreFactory.sol#404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _set\n",
                    "message": "Parameter '_set' of CoreState.validSets (CoreFactory.sol#420) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _set\n",
                    "message": "Parameter '_set' of CoreState.disabledSets (CoreFactory.sol#436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _priceLibrary\n",
                    "message": "Parameter '_priceLibrary' of CoreState.validPriceLibraries (CoreFactory.sol#465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _factory,\n",
                    "message": "Parameter '_factory' of CoreFactory.create (CoreFactory.sol#596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _components,\n",
                    "message": "Parameter '_components' of CoreFactory.create (CoreFactory.sol#597) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _units,\n",
                    "message": "Parameter '_units' of CoreFactory.create (CoreFactory.sol#598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": "Parameter '_naturalUnit' of CoreFactory.create (CoreFactory.sol#599) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": "Parameter '_name' of CoreFactory.create (CoreFactory.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": "Parameter '_symbol' of CoreFactory.create (CoreFactory.sol#601) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes _callData\n",
                    "message": "Parameter '_callData' of CoreFactory.create (CoreFactory.sol#602) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Overflow",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address newSetTokenAddress = ISetFactory(_factory).create(\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 1,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Trail_of_Bits-setprotocol/set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ITransferProxy.sol\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokens()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.setTokens;\n",
                    "message": null
                },
                {
                    "name": "Underflow bugs",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address newSetTokenAddress = ISetFactory(_factory).create(\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokens()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.setTokens;\n",
                    "message": null
                }
            ]
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/lib/CoreState.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/lib/SignatureValidator.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/lib/EIP712Library.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/lib/ExchangeValidationLibrary.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/modules/lib/ModuleCoreState.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ICore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function validSets(address)\n",
                    "message": "Parameter '' of ICore.validSets (ICore.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function validModules(address)\n",
                    "message": "Parameter '' of ICore.validModules (ICore.sol#78) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/IWhiteList.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ISetFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/IRebalancingSetFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ITransferProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/IVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ISignatureValidator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/IRebalancingSetToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function balanceOf(\n\n        address owner\n\n    ) \n\n        public\n\n        view\n",
                    "message": "IRebalancingSetToken.balanceOf (IRebalancingSetToken.sol#47-52) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ICoreIssuance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ISetToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "interface ISetToken {\n\n\n\n    /* ============ External Functions ============ */\n\n\n\n    /*\n\n     * Get natural unit of Set\n\n     *\n\n     * @return  uint256       Natural unit of Set\n\n     */\n\n    function naturalUnit()\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /*\n\n     * Get addresses of all components in the Set\n\n     *\n\n     * @return  componentAddresses       Array of component tokens\n\n     */\n\n    function getComponents()\n\n        external\n\n        view\n\n        returns(address[]);\n\n\n\n    /*\n\n     * Get units of all tokens in Set\n\n     *\n\n     * @return  units       Array of component units\n\n     */\n\n    function getUnits()\n\n        external\n\n        view\n\n        returns(uint256[]);\n\n\n\n    /*\n\n     * Checks to make sure token is component of Set\n\n     *\n\n     * @param  _tokenAddress     Address of token being checked\n\n     * @return  bool             True if token is component of Set\n\n     */\n\n    function tokenIsComponent(\n\n        address _tokenAddress\n\n    )\n\n        external\n\n        view\n\n        returns (bool);\n\n\n\n    /*\n\n     * Mint set token for given address.\n\n     * Can only be called by authorized contracts.\n\n     *\n\n     * @param  _issuer      The address of the issuing account\n\n     * @param  _quantity    The number of sets to attribute to issuer\n\n     */\n\n    function mint(\n\n        address _issuer,\n\n        uint256 _quantity\n\n    )\n\n        external;\n\n\n\n    /*\n\n     * Burn set token for given address\n\n     * Can only be called by authorized contracts\n\n     *\n\n     * @param  _from        The address of the redeeming account\n\n     * @param  _quantity    The number of sets to burn from redeemer\n\n     */\n\n    function burn(\n\n        address _from,\n\n        uint256 _quantity\n\n    )\n\n        external;\n\n\n\n    /**\n\n    * Transfer token for a specified address\n\n    *\n\n    * @param to The address to transfer to.\n\n    * @param value The amount to be transferred.\n\n    */\n\n    function transfer(\n\n        address to,\n\n        uint256 value\n\n    )\n\n        external;\n",
                    "message": "ISetToken (ISetToken.sol#28-112) has incorrect ERC20 function interface(s):\n\t-transfer (ISetToken.sol#107-111)\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/core/interfaces/ICoreAccounting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _tokens,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] _quantities\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _tokens,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _quantities\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/lib/Bytes32.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/lib/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/lib/AddressArrayUtils.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/lib/CommonMath.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/lib/ERC20Wrapper.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/LibBytes.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 4,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 32,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            from <= to,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"FROM_LESS_THAN_TO_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // NOTE: Set Protocol changed from `to < b.length` so that the last byte can be sliced off\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            to <= b.length,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 4,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 32,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function contentAddress(bytes memory input)\n\n        internal\n\n        pure\n\n        returns (uint256 memoryAddress)\n\n    {\n\n        assembly {\n\n            memoryAddress := add(input, 32)\n\n        }\n\n        return memoryAddress;\n",
                    "message": "LibBytes.contentAddress (LibBytes.sol#25-34) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function readBytes4(\n\n        bytes memory b,\n\n        uint256 index)\n\n        internal\n\n        pure\n\n        returns (bytes4 result)\n\n    {\n\n        require(\n\n            b.length >= index + 4,\n\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n\n        );\n\n        assembly {\n\n            result := mload(add(b, 32))\n\n            // Solidity does not require us to clean the trailing bytes.\n\n            // We do it anyway\n\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes4 (LibBytes.sol#40-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function readBytes32(\n\n        bytes memory b,\n\n        uint256 index\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        require(\n\n            b.length >= index + 32,\n\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n\n        );\n\n\n\n        // Arrays are prefixed by a 256 bit length parameter\n\n        index += 32;\n\n\n\n        // Read the bytes32 from array memory\n\n        assembly {\n\n            result := mload(add(b, index))\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes32 (LibBytes.sol#65-86) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function memCopy(\n\n        uint256 dest,\n\n        uint256 source,\n\n        uint256 length\n\n    )\n\n        internal\n\n        pure\n\n    {\n\n        if (length < 32) {\n\n            // Handle a partial word by reading destination and masking\n\n            // off the bits we are interested in.\n\n            // This correctly handles overlap, zero lengths and source == dest\n\n            assembly {\n\n                let mask := sub(exp(256, sub(32, length)), 1)\n\n                let s := and(mload(source), not(mask))\n\n                let d := and(mload(dest), mask)\n\n                mstore(dest, or(s, d))\n\n            }\n\n        } else {\n\n            // Skip the O(length) loop when source == dest.\n\n            if (source == dest) {\n\n                return;\n\n            }\n\n\n\n            // For large copies we copy whole words at a time. The final\n\n            // word is aligned to the end of the range (instead of after the\n\n            // previous) to handle partial words. So a copy will look like this:\n\n            //\n\n            //  ####\n\n            //      ####\n\n            //          ####\n\n            //            ####\n\n            //\n\n            // We handle overlap in the source and destination range by\n\n            // changing the copying direction. This prevents us from\n\n            // overwriting parts of source that we still need to copy.\n\n            //\n\n            // This correctly handles source == dest\n\n            //\n\n            if (source > dest) {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n\n                    // is easier to compare with in the loop, and these\n\n                    // are also the addresses we need for copying the\n\n                    // last bytes.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the last 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the last bytes in\n\n                    // source already due to overlap.\n\n                    let last := mload(sEnd)\n\n\n\n                    // Copy whole words front to back\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} lt(source, sEnd) {} {\n\n                        mstore(dest, mload(source))\n\n                        source := add(source, 32)\n\n                        dest := add(dest, 32)\n\n                    }\n\n\n\n                    // Write the last 32 bytes\n\n                    mstore(dEnd, last)\n\n                }\n\n            } else {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n\n                    // are the starting points when copying a word at the end.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the first 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the first bytes in\n\n                    // source already due to overlap.\n\n                    let first := mload(source)\n\n\n\n                    // Copy whole words back to front\n\n                    // We use a signed comparisson here to allow dEnd to become\n\n                    // negative (happens when source and dest < 32). Valid\n\n                    // addresses in local memory will never be larger than\n\n                    // 2**255, so they can be safely re-interpreted as signed.\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} slt(dest, dEnd) {} {\n\n                        mstore(dEnd, mload(sEnd))\n\n                        sEnd := sub(sEnd, 32)\n\n                        dEnd := sub(dEnd, 32)\n\n                    }\n\n\n\n                    // Write the first 32 bytes\n\n                    mstore(dest, first)\n\n                }\n\n            }\n\n        }\n",
                    "message": "LibBytes.memCopy (LibBytes.sol#92-191) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function contentAddress(bytes memory input)\n\n        internal\n\n        pure\n\n        returns (uint256 memoryAddress)\n\n    {\n\n        assembly {\n\n            memoryAddress := add(input, 32)\n\n        }\n\n        return memoryAddress;\n",
                    "message": "LibBytes.contentAddress uses assembly (LibBytes.sol#25-34)\n\t- LibBytes.sol#30-33\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function readBytes4(\n\n        bytes memory b,\n\n        uint256 index)\n\n        internal\n\n        pure\n\n        returns (bytes4 result)\n\n    {\n\n        require(\n\n            b.length >= index + 4,\n\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n\n        );\n\n        assembly {\n\n            result := mload(add(b, 32))\n\n            // Solidity does not require us to clean the trailing bytes.\n\n            // We do it anyway\n\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes4 uses assembly (LibBytes.sol#40-58)\n\t- LibBytes.sol#51-57\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function readBytes32(\n\n        bytes memory b,\n\n        uint256 index\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        require(\n\n            b.length >= index + 32,\n\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n\n        );\n\n\n\n        // Arrays are prefixed by a 256 bit length parameter\n\n        index += 32;\n\n\n\n        // Read the bytes32 from array memory\n\n        assembly {\n\n            result := mload(add(b, index))\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes32 uses assembly (LibBytes.sol#65-86)\n\t- LibBytes.sol#82-85\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function memCopy(\n\n        uint256 dest,\n\n        uint256 source,\n\n        uint256 length\n\n    )\n\n        internal\n\n        pure\n\n    {\n\n        if (length < 32) {\n\n            // Handle a partial word by reading destination and masking\n\n            // off the bits we are interested in.\n\n            // This correctly handles overlap, zero lengths and source == dest\n\n            assembly {\n\n                let mask := sub(exp(256, sub(32, length)), 1)\n\n                let s := and(mload(source), not(mask))\n\n                let d := and(mload(dest), mask)\n\n                mstore(dest, or(s, d))\n\n            }\n\n        } else {\n\n            // Skip the O(length) loop when source == dest.\n\n            if (source == dest) {\n\n                return;\n\n            }\n\n\n\n            // For large copies we copy whole words at a time. The final\n\n            // word is aligned to the end of the range (instead of after the\n\n            // previous) to handle partial words. So a copy will look like this:\n\n            //\n\n            //  ####\n\n            //      ####\n\n            //          ####\n\n            //            ####\n\n            //\n\n            // We handle overlap in the source and destination range by\n\n            // changing the copying direction. This prevents us from\n\n            // overwriting parts of source that we still need to copy.\n\n            //\n\n            // This correctly handles source == dest\n\n            //\n\n            if (source > dest) {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n\n                    // is easier to compare with in the loop, and these\n\n                    // are also the addresses we need for copying the\n\n                    // last bytes.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the last 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the last bytes in\n\n                    // source already due to overlap.\n\n                    let last := mload(sEnd)\n\n\n\n                    // Copy whole words front to back\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} lt(source, sEnd) {} {\n\n                        mstore(dest, mload(source))\n\n                        source := add(source, 32)\n\n                        dest := add(dest, 32)\n\n                    }\n\n\n\n                    // Write the last 32 bytes\n\n                    mstore(dEnd, last)\n\n                }\n\n            } else {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n\n                    // are the starting points when copying a word at the end.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the first 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the first bytes in\n\n                    // source already due to overlap.\n\n                    let first := mload(source)\n\n\n\n                    // Copy whole words back to front\n\n                    // We use a signed comparisson here to allow dEnd to become\n\n                    // negative (happens when source and dest < 32). Valid\n\n                    // addresses in local memory will never be larger than\n\n                    // 2**255, so they can be safely re-interpreted as signed.\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} slt(dest, dEnd) {} {\n\n                        mstore(dEnd, mload(sEnd))\n\n                        sEnd := sub(sEnd, 32)\n\n                        dEnd := sub(dEnd, 32)\n\n                    }\n\n\n\n                    // Write the first 32 bytes\n\n                    mstore(dest, first)\n\n                }\n\n            }\n\n        }\n",
                    "message": "LibBytes.memCopy uses assembly (LibBytes.sol#92-191)\n\t- LibBytes.sol#104-110\n\t- LibBytes.sol#132-159\n\t- LibBytes.sol#160-189\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function contentAddress(bytes memory input)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes4(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function memCopy(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/libs/LibExchangeErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                              // Order cannot be filled.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_MAKER = \"INVALID_MAKER\";                                    // Invalid makerAddress.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TAKER = \"INVALID_TAKER\";                                    // Invalid takerAddress.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_SENDER = \"INVALID_SENDER\";                                  // Invalid `msg.sender`.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";                // Signature validation failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";                      // takerAssetFillAmount cannot equal 0.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ROUNDING_ERROR = \"ROUNDING_ERROR\";                                  // Rounding error greater than 0.1% of takerAssetFillAmount.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                            // Signature validation failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                            // Signature type is illegal.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";                    // Signature type unsupported.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_NEW_ORDER_EPOCH = \"INVALID_NEW_ORDER_EPOCH\";                // Specified salt must be greater than or equal to existing orderEpoch.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";                      // Desired takerAssetFillAmount could not be completely filled.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";              // Matched orders must have a negative spread.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";                          // Recursive reentrancy is not allowed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TX_HASH = \"INVALID_TX_HASH\";                                // Transaction has already been executed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";                      // Signature validation failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant FAILED_EXECUTION = \"FAILED_EXECUTION\";                              // Transaction execution failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ASSET_PROXY_MISMATCH = \"ASSET_PROXY_MISMATCH\";                      // oldAssetProxy proxy does not match currentAssetProxy.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ASSET_PROXY_ID_MISMATCH = \"ASSET_PROXY_ID_MISMATCH\";                // newAssetProxyId does not match given assetProxyId.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ASSET_PROXY_DOES_NOT_EXIST = \"ASSET_PROXY_DOES_NOT_EXIST\";          // No assetProxy registered at given id.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                // Asset transfer unsuccesful.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\";  // Byte array must have a length greater than 0.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_GREATER_THAN_3_REQUIRED = \"LENGTH_GREATER_THAN_3_REQUIRED\";  // Byte array must have a length greater than 3.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_0_REQUIRED = \"LENGTH_0_REQUIRED\";                            // Byte array must have a length of 0.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_65_REQUIRED = \"LENGTH_65_REQUIRED\";                          // Byte array must have a length of 65.\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/libs/LibOrder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (LibOrder.sol#43)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (LibOrder.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Overflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Overflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/libs/LibConstants.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes public ZRX_ASSET_DATA;\n",
                    "message": "LibConstants.ZRX_ASSET_DATA should be constant (LibConstants.sol#28)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes public ZRX_ASSET_DATA;\n",
                    "message": "Variable 'LibConstants.ZRX_ASSET_DATA' (LibConstants.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes public ZRX_ASSET_DATA;\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/libs/LibEIP712.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (LibEIP712.sol#43)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (LibEIP712.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Overflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/libs/LibFillResults.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/ITransactions.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/IWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/IWrapperFunctions.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IWrapperFunctions.sol#43)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.4.25;\n",
                    "message": "Different versions of Solidity is used in IWrapperFunctions.sol:\n\t- Version used: ['0.4.25', 'ABIEncoderV2']\n\t- IWrapperFunctions.sol#21 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#66 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#144 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#182 declares pragma solidity0.4.25\n\t- IWrapperFunctions.sol#183 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "    function fillOrKillOrder(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.fillOrKillOrder (IWrapperFunctions.sol#191-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function fillOrderNoThrow(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.fillOrderNoThrow (IWrapperFunctions.sol#205-211) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function batchFillOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.batchFillOrders (IWrapperFunctions.sol#218-224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "    function batchFillOrKillOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.batchFillOrKillOrders (IWrapperFunctions.sol#231-237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "    function batchFillOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.batchFillOrdersNoThrow (IWrapperFunctions.sol#245-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function marketSellOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 takerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketSellOrders (IWrapperFunctions.sol#258-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function marketSellOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 takerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketSellOrdersNoThrow (IWrapperFunctions.sol#272-278) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function marketBuyOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 makerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketBuyOrders (IWrapperFunctions.sol#285-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function marketBuyOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 makerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketBuyOrdersNoThrow (IWrapperFunctions.sol#299-305) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "    function batchCancelOrders(LibOrder.Order[] memory orders)\n",
                    "message": "IWrapperFunctions.batchCancelOrders (IWrapperFunctions.sol#309-310) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IWrapperFunctions.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/IValidator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/ISignatureValidator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function isValidSignature(\n\n        bytes32 hash,\n\n        address signerAddress,\n\n        bytes memory signature\n\n    )\n\n        public\n\n        view\n",
                    "message": "ISignatureValidator.isValidSignature (ISignatureValidator.sol#50-57) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/IExchangeCore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IExchangeCore.sol#43)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.4.25;\n",
                    "message": "Different versions of Solidity is used in IExchangeCore.sol:\n\t- Version used: ['0.4.25', 'ABIEncoderV2']\n\t- IExchangeCore.sol#21 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#66 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#144 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#182 declares pragma solidity0.4.25\n\t- IExchangeCore.sol#183 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 205,
                    "vulnerability_code": "    function fillOrder(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
                    "message": "IExchangeCore.fillOrder (IExchangeCore.sol#199-205) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function cancelOrder(LibOrder.Order memory order)\n",
                    "message": "IExchangeCore.cancelOrder (IExchangeCore.sol#209-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "    function getOrderInfo(LibOrder.Order memory order)\n\n        public\n\n        view\n",
                    "message": "IExchangeCore.getOrderInfo (IExchangeCore.sol#216-219) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IExchangeCore.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/IMatchOrders.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IMatchOrders.sol#43)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.4.25;\n",
                    "message": "Different versions of Solidity is used in IMatchOrders.sol:\n\t- Version used: ['0.4.25', 'ABIEncoderV2']\n\t- IMatchOrders.sol#21 declares pragma solidity0.4.25\n\t- IMatchOrders.sol#66 declares pragma solidity0.4.25\n\t- IMatchOrders.sol#144 declares pragma solidity0.4.25\n\t- IMatchOrders.sol#181 declares pragma solidity0.4.25\n\t- IMatchOrders.sol#182 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "    function matchOrders(\n\n        LibOrder.Order memory leftOrder,\n\n        LibOrder.Order memory rightOrder,\n\n        bytes memory leftSignature,\n\n        bytes memory rightSignature\n\n    )\n\n        public\n",
                    "message": "IMatchOrders.matchOrders (IMatchOrders.sol#197-204) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IMatchOrders.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                },
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/Exchange/interfaces/IAssetProxyDispatcher.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/AssetProxy/libs/LibAssetProxyErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant SENDER_NOT_AUTHORIZED = \"SENDER_NOT_AUTHORIZED\";                        // Sender not authorized to call this method.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TARGET_NOT_AUTHORIZED = \"TARGET_NOT_AUTHORIZED\";                        // Target address not authorized to call this method.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TARGET_ALREADY_AUTHORIZED = \"TARGET_ALREADY_AUTHORIZED\";                // Target address must not already be authorized.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INDEX_OUT_OF_BOUNDS = \"INDEX_OUT_OF_BOUNDS\";                            // Specified array index is out of bounds.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant AUTHORIZED_ADDRESS_MISMATCH = \"AUTHORIZED_ADDRESS_MISMATCH\";            // Address at index does not match given target address.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_AMOUNT = \"INVALID_AMOUNT\";                                      // Transfer amount must equal 1.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                    // Transfer failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_GREATER_THAN_131_REQUIRED = \"LENGTH_GREATER_THAN_131_REQUIRED\";  // Byte array must have a length greater than 0.\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/AssetProxy/interfaces/IAuthorizable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.4.25;\n",
                    "message": "Different versions of Solidity is used in IAuthorizable.sol:\n\t- Version used: ['0.4.25', 'ABIEncoderV2']\n\t- IAuthorizable.sol#21 declares pragma solidity0.4.25\n\t- IAuthorizable.sol#22 declares pragma experimentalABIEncoderV2\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/0x/AssetProxy/interfaces/IAssetData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "    function ERC20Token(\n\n        address tokenContract)\n",
                    "message": "Function 'IAssetData.ERC20Token' (IAssetData.sol#28-30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function ERC721Token(\n\n        address tokenContract,\n\n        uint256 tokenId,\n\n        bytes receiverData)\n",
                    "message": "Function 'IAssetData.ERC721Token' (IAssetData.sol#32-36) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-d7ab276464b2cff163db55a9d4c5408e80e5594a/contracts/external/KyberNetwork/KyberNetworkProxyInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity0.5.4 (Migrations.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/mocks/lib/Bytes32LibraryMock.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/mocks/lib/CommonValidationsLibraryMock.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/extensions/CoreFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            state.validFactories[_factory],\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Invalid factory\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": 690,
                    "vulnerability_code": "    function createSet(\n\n        address _factory,\n\n        address[] calldata _components,\n\n        uint256[] calldata _units,\n\n        uint256 _naturalUnit,\n\n        bytes32 _name,\n\n        bytes32 _symbol,\n\n        bytes calldata _callData\n\n    )\n\n        external\n\n        returns (address)\n\n    {\n\n        // Verify Factory is linked to Core\n\n        require(\n\n            state.validFactories[_factory],\n\n            \"Invalid factory\"\n\n        );\n\n\n\n        // Create the Set\n\n        address newSetTokenAddress = ISetFactory(_factory).createSet(\n\n            _components,\n\n            _units,\n\n            _naturalUnit,\n\n            _name,\n\n            _symbol,\n\n            _callData\n\n        );\n\n\n\n        // Add Set to the mapping of tracked Sets\n\n        state.validSets[newSetTokenAddress] = true;\n\n\n\n        // Add Set to the array of tracked Sets\n\n        state.setTokens.push(newSetTokenAddress);\n\n\n\n        // Emit Set Token creation log\n\n        emit SetTokenCreated(\n\n            newSetTokenAddress,\n\n            _factory,\n\n            _components,\n\n            _units,\n\n            _naturalUnit,\n\n            _name,\n\n            _symbol\n\n        );\n\n\n\n        return newSetTokenAddress;\n",
                    "message": "Reentrancy in CoreFactory.createSet (CoreFactory.sol#644-690):\n\tExternal calls:\n\t- newSetTokenAddress = ISetFactory(_factory).createSet(_components,_units,_naturalUnit,_name,_symbol,_callData) (CoreFactory.sol#663-670)\n\tState variables written after the call(s):\n\t- state (CoreFactory.sol#673)\n\t- state (CoreFactory.sol#676)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in CoreFactory.sol:\n\t- pragma solidity0.5.4 (CoreFactory.sol#19): it allows old versions\n\t- pragma solidity0.5.4 (CoreFactory.sol#85): it allows old versions\n\t- pragma solidity0.5.4 (CoreFactory.sol#253): it allows old versions\n\t- pragma solidity0.5.4 (CoreFactory.sol#542): it allows old versions\n\t- pragma solidity0.5.4 (CoreFactory.sol#606): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _exchangeId\n",
                    "message": "Parameter '_exchangeId' of CoreState.exchangeIds (CoreFactory.sol#343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _factory\n",
                    "message": "Parameter '_factory' of CoreState.validFactories (CoreFactory.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _module\n",
                    "message": "Parameter '_module' of CoreState.validModules (CoreFactory.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _set\n",
                    "message": "Parameter '_set' of CoreState.validSets (CoreFactory.sol#417) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _set\n",
                    "message": "Parameter '_set' of CoreState.disabledSets (CoreFactory.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _priceLibrary\n",
                    "message": "Parameter '_priceLibrary' of CoreState.validPriceLibraries (CoreFactory.sol#449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _factory,\n",
                    "message": "Parameter '_factory' of CoreFactory.createSet (CoreFactory.sol#645) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _components,\n",
                    "message": "Parameter '_components' of CoreFactory.createSet (CoreFactory.sol#646) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _units,\n",
                    "message": "Parameter '_units' of CoreFactory.createSet (CoreFactory.sol#647) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": "Parameter '_naturalUnit' of CoreFactory.createSet (CoreFactory.sol#648) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": "Parameter '_name' of CoreFactory.createSet (CoreFactory.sol#649) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": "Parameter '_symbol' of CoreFactory.createSet (CoreFactory.sol#650) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _callData\n",
                    "message": "Parameter '_callData' of CoreFactory.createSet (CoreFactory.sol#651) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function batchTransfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createSet(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createSet(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _quantities,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _callData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _components,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _callData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address newSetTokenAddress = ISetFactory(_factory).createSet(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        state.validSets[newSetTokenAddress] = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        state.setTokens.push(newSetTokenAddress);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit SetTokenCreated(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit SetTokenCreated(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _components,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _naturalUnit,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _symbol\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return newSetTokenAddress;\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 1,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Trail_of_Bits-setprotocol/set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ITransferProxy.sol\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 1,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "// File: ../sc_datasets/DAppSCAN/Trail_of_Bits-setprotocol/set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ITransferProxy.sol\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokens()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.setTokens;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function modules()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.modules;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function factories()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.factories;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchanges()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.exchanges;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function priceLibraries()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.priceLibraries;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokens()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.setTokens;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function modules()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.modules;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function factories()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.factories;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchanges()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.exchanges;\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function priceLibraries()\n",
                    "message": null
                },
                {
                    "name": "Overflow bugs",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return state.priceLibraries;\n",
                    "message": null
                }
            ]
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/lib/CoreState.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/modules/lib/ModuleCoreState.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ICore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ICore.sol:\n\t- pragma solidity0.5.4 (ICore.sol#19): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function validSets(address)\n",
                    "message": "Parameter '' of ICore.validSets (ICore.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function validModules(address)\n",
                    "message": "Parameter '' of ICore.validModules (ICore.sol#78) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createSet(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function batchDepositModule(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function batchWithdrawModule(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function batchTransferModule(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _components,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _callData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _tokens,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _quantities\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _tokens,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _quantities\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _quantities,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/IWhiteList.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IWhiteList.sol:\n\t- pragma solidity0.5.4 (IWhiteList.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ISetFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ISetFactory.sol:\n\t- pragma solidity0.5.4 (ISetFactory.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createSet(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _callData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address);\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/IRebalancingSetFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IRebalancingSetFactory.sol:\n\t- pragma solidity0.5.4 (IRebalancingSetFactory.sol#19): it allows old versions\n\t- pragma solidity0.5.4 (IRebalancingSetFactory.sol#83): it allows old versions\n\t- pragma solidity0.5.4 (IRebalancingSetFactory.sol#140): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createSet(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] calldata _units,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _naturalUnit,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _callData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address);\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ITransferProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ITransferProxy.sol:\n\t- pragma solidity0.5.4 (ITransferProxy.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function batchTransfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata _quantities,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/IVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IVault.sol:\n\t- pragma solidity0.5.4 (IVault.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ICoreIssuance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ICoreIssuance.sol:\n\t- pragma solidity0.5.4 (ICoreIssuance.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ISetToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "interface ISetToken {\n\n\n\n    /* ============ External Functions ============ */\n\n\n\n    /*\n\n     * Get natural unit of Set\n\n     *\n\n     * @return  uint256       Natural unit of Set\n\n     */\n\n    function naturalUnit()\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /*\n\n     * Get addresses of all components in the Set\n\n     *\n\n     * @return  componentAddresses       Array of component tokens\n\n     */\n\n    function getComponents()\n\n        external\n\n        view\n\n        returns (address[] memory);\n\n\n\n    /*\n\n     * Get units of all tokens in Set\n\n     *\n\n     * @return  units       Array of component units\n\n     */\n\n    function getUnits()\n\n        external\n\n        view\n\n        returns (uint256[] memory);\n\n\n\n    /*\n\n     * Checks to make sure token is component of Set\n\n     *\n\n     * @param  _tokenAddress     Address of token being checked\n\n     * @return  bool             True if token is component of Set\n\n     */\n\n    function tokenIsComponent(\n\n        address _tokenAddress\n\n    )\n\n        external\n\n        view\n\n        returns (bool);\n\n\n\n    /*\n\n     * Mint set token for given address.\n\n     * Can only be called by authorized contracts.\n\n     *\n\n     * @param  _issuer      The address of the issuing account\n\n     * @param  _quantity    The number of sets to attribute to issuer\n\n     */\n\n    function mint(\n\n        address _issuer,\n\n        uint256 _quantity\n\n    )\n\n        external;\n\n\n\n    /*\n\n     * Burn set token for given address\n\n     * Can only be called by authorized contracts\n\n     *\n\n     * @param  _from        The address of the redeeming account\n\n     * @param  _quantity    The number of sets to burn from redeemer\n\n     */\n\n    function burn(\n\n        address _from,\n\n        uint256 _quantity\n\n    )\n\n        external;\n\n\n\n    /**\n\n    * Transfer token for a specified address\n\n    *\n\n    * @param to The address to transfer to.\n\n    * @param value The amount to be transferred.\n\n    */\n\n    function transfer(\n\n        address to,\n\n        uint256 value\n\n    )\n\n        external;\n",
                    "message": "ISetToken (ISetToken.sol#28-112) has incorrect ERC20 function interface(s):\n\t-transfer (ISetToken.sol#107-111)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ISetToken.sol:\n\t- pragma solidity0.5.4 (ISetToken.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/core/interfaces/ICoreAccounting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ICoreAccounting.sol:\n\t- pragma solidity0.5.4 (ICoreAccounting.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/lib/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/lib/AddressArrayUtils.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/lib/IWETH.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/lib/CommonValidationsLibrary.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/lib/Bytes32Library.sol": {
        "semgrep": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Smartbugs results not found"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/LibBytes.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 4,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 32,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            from <= to,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"FROM_LESS_THAN_TO_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // NOTE: Set Protocol changed from `to < b.length` so that the last byte can be sliced off\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            to <= b.length,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"TO_LESS_THAN_LENGTH_REQUIRED\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 4,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            b.length >= index + 32,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function contentAddress(bytes memory input)\n\n        internal\n\n        pure\n\n        returns (uint256 memoryAddress)\n\n    {\n\n        assembly {\n\n            memoryAddress := add(input, 32)\n\n        }\n\n        return memoryAddress;\n",
                    "message": "LibBytes.contentAddress (LibBytes.sol#25-34) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function readBytes4(\n\n        bytes memory b,\n\n        uint256 index)\n\n        internal\n\n        pure\n\n        returns (bytes4 result)\n\n    {\n\n        require(\n\n            b.length >= index + 4,\n\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n\n        );\n\n        assembly {\n\n            result := mload(add(b, 32))\n\n            // Solidity does not require us to clean the trailing bytes.\n\n            // We do it anyway\n\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes4 (LibBytes.sol#40-58) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function readBytes32(\n\n        bytes memory b,\n\n        uint256 index\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        require(\n\n            b.length >= index + 32,\n\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n\n        );\n\n\n\n        // Arrays are prefixed by a 256 bit length parameter\n\n        index += 32;\n\n\n\n        // Read the bytes32 from array memory\n\n        assembly {\n\n            result := mload(add(b, index))\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes32 (LibBytes.sol#65-86) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function memCopy(\n\n        uint256 dest,\n\n        uint256 source,\n\n        uint256 length\n\n    )\n\n        internal\n\n        pure\n\n    {\n\n        if (length < 32) {\n\n            // Handle a partial word by reading destination and masking\n\n            // off the bits we are interested in.\n\n            // This correctly handles overlap, zero lengths and source == dest\n\n            assembly {\n\n                let mask := sub(exp(256, sub(32, length)), 1)\n\n                let s := and(mload(source), not(mask))\n\n                let d := and(mload(dest), mask)\n\n                mstore(dest, or(s, d))\n\n            }\n\n        } else {\n\n            // Skip the O(length) loop when source == dest.\n\n            if (source == dest) {\n\n                return;\n\n            }\n\n\n\n            // For large copies we copy whole words at a time. The final\n\n            // word is aligned to the end of the range (instead of after the\n\n            // previous) to handle partial words. So a copy will look like this:\n\n            //\n\n            //  ####\n\n            //      ####\n\n            //          ####\n\n            //            ####\n\n            //\n\n            // We handle overlap in the source and destination range by\n\n            // changing the copying direction. This prevents us from\n\n            // overwriting parts of source that we still need to copy.\n\n            //\n\n            // This correctly handles source == dest\n\n            //\n\n            if (source > dest) {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n\n                    // is easier to compare with in the loop, and these\n\n                    // are also the addresses we need for copying the\n\n                    // last bytes.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the last 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the last bytes in\n\n                    // source already due to overlap.\n\n                    let last := mload(sEnd)\n\n\n\n                    // Copy whole words front to back\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} lt(source, sEnd) {} {\n\n                        mstore(dest, mload(source))\n\n                        source := add(source, 32)\n\n                        dest := add(dest, 32)\n\n                    }\n\n\n\n                    // Write the last 32 bytes\n\n                    mstore(dEnd, last)\n\n                }\n\n            } else {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n\n                    // are the starting points when copying a word at the end.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the first 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the first bytes in\n\n                    // source already due to overlap.\n\n                    let first := mload(source)\n\n\n\n                    // Copy whole words back to front\n\n                    // We use a signed comparisson here to allow dEnd to become\n\n                    // negative (happens when source and dest < 32). Valid\n\n                    // addresses in local memory will never be larger than\n\n                    // 2**255, so they can be safely re-interpreted as signed.\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} slt(dest, dEnd) {} {\n\n                        mstore(dEnd, mload(sEnd))\n\n                        sEnd := sub(sEnd, 32)\n\n                        dEnd := sub(dEnd, 32)\n\n                    }\n\n\n\n                    // Write the first 32 bytes\n\n                    mstore(dest, first)\n\n                }\n\n            }\n\n        }\n",
                    "message": "LibBytes.memCopy (LibBytes.sol#92-191) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function contentAddress(bytes memory input)\n\n        internal\n\n        pure\n\n        returns (uint256 memoryAddress)\n\n    {\n\n        assembly {\n\n            memoryAddress := add(input, 32)\n\n        }\n\n        return memoryAddress;\n",
                    "message": "LibBytes.contentAddress uses assembly (LibBytes.sol#25-34)\n\t- LibBytes.sol#30-33\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function readBytes4(\n\n        bytes memory b,\n\n        uint256 index)\n\n        internal\n\n        pure\n\n        returns (bytes4 result)\n\n    {\n\n        require(\n\n            b.length >= index + 4,\n\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\n\n        );\n\n        assembly {\n\n            result := mload(add(b, 32))\n\n            // Solidity does not require us to clean the trailing bytes.\n\n            // We do it anyway\n\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes4 uses assembly (LibBytes.sol#40-58)\n\t- LibBytes.sol#51-57\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function readBytes32(\n\n        bytes memory b,\n\n        uint256 index\n\n    )\n\n        internal\n\n        pure\n\n        returns (bytes32 result)\n\n    {\n\n        require(\n\n            b.length >= index + 32,\n\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\n\n        );\n\n\n\n        // Arrays are prefixed by a 256 bit length parameter\n\n        index += 32;\n\n\n\n        // Read the bytes32 from array memory\n\n        assembly {\n\n            result := mload(add(b, index))\n\n        }\n\n        return result;\n",
                    "message": "LibBytes.readBytes32 uses assembly (LibBytes.sol#65-86)\n\t- LibBytes.sol#82-85\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function memCopy(\n\n        uint256 dest,\n\n        uint256 source,\n\n        uint256 length\n\n    )\n\n        internal\n\n        pure\n\n    {\n\n        if (length < 32) {\n\n            // Handle a partial word by reading destination and masking\n\n            // off the bits we are interested in.\n\n            // This correctly handles overlap, zero lengths and source == dest\n\n            assembly {\n\n                let mask := sub(exp(256, sub(32, length)), 1)\n\n                let s := and(mload(source), not(mask))\n\n                let d := and(mload(dest), mask)\n\n                mstore(dest, or(s, d))\n\n            }\n\n        } else {\n\n            // Skip the O(length) loop when source == dest.\n\n            if (source == dest) {\n\n                return;\n\n            }\n\n\n\n            // For large copies we copy whole words at a time. The final\n\n            // word is aligned to the end of the range (instead of after the\n\n            // previous) to handle partial words. So a copy will look like this:\n\n            //\n\n            //  ####\n\n            //      ####\n\n            //          ####\n\n            //            ####\n\n            //\n\n            // We handle overlap in the source and destination range by\n\n            // changing the copying direction. This prevents us from\n\n            // overwriting parts of source that we still need to copy.\n\n            //\n\n            // This correctly handles source == dest\n\n            //\n\n            if (source > dest) {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n\n                    // is easier to compare with in the loop, and these\n\n                    // are also the addresses we need for copying the\n\n                    // last bytes.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the last 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the last bytes in\n\n                    // source already due to overlap.\n\n                    let last := mload(sEnd)\n\n\n\n                    // Copy whole words front to back\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} lt(source, sEnd) {} {\n\n                        mstore(dest, mload(source))\n\n                        source := add(source, 32)\n\n                        dest := add(dest, 32)\n\n                    }\n\n\n\n                    // Write the last 32 bytes\n\n                    mstore(dEnd, last)\n\n                }\n\n            } else {\n\n                assembly {\n\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n\n                    // are the starting points when copying a word at the end.\n\n                    length := sub(length, 32)\n\n                    let sEnd := add(source, length)\n\n                    let dEnd := add(dest, length)\n\n\n\n                    // Remember the first 32 bytes of source\n\n                    // This needs to be done here and not after the loop\n\n                    // because we may have overwritten the first bytes in\n\n                    // source already due to overlap.\n\n                    let first := mload(source)\n\n\n\n                    // Copy whole words back to front\n\n                    // We use a signed comparisson here to allow dEnd to become\n\n                    // negative (happens when source and dest < 32). Valid\n\n                    // addresses in local memory will never be larger than\n\n                    // 2**255, so they can be safely re-interpreted as signed.\n\n                    // Note: the first check is always true,\n\n                    // this could have been a do-while loop.\n\n                    for {} slt(dest, dEnd) {} {\n\n                        mstore(dEnd, mload(sEnd))\n\n                        sEnd := sub(sEnd, 32)\n\n                        dEnd := sub(dEnd, 32)\n\n                    }\n\n\n\n                    // Write the first 32 bytes\n\n                    mstore(dest, first)\n\n                }\n\n            }\n\n        }\n",
                    "message": "LibBytes.memCopy uses assembly (LibBytes.sol#92-191)\n\t- LibBytes.sol#104-110\n\t- LibBytes.sol#132-159\n\t- LibBytes.sol#160-189\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibBytes.sol:\n\t- pragma solidity0.5.4 (LibBytes.sol#16): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function contentAddress(bytes memory input)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes4(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function readBytes32(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function memCopy(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/libs/LibExchangeErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibExchangeErrors.sol:\n\t- pragma solidity0.5.4 (LibExchangeErrors.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ORDER_UNFILLABLE = \"ORDER_UNFILLABLE\";                              // Order cannot be filled.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_MAKER = \"INVALID_MAKER\";                                    // Invalid makerAddress.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TAKER = \"INVALID_TAKER\";                                    // Invalid takerAddress.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_SENDER = \"INVALID_SENDER\";                                  // Invalid `msg.sender`.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_ORDER_SIGNATURE = \"INVALID_ORDER_SIGNATURE\";                // Signature validation failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TAKER_AMOUNT = \"INVALID_TAKER_AMOUNT\";                      // takerAssetFillAmount cannot equal 0.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ROUNDING_ERROR = \"ROUNDING_ERROR\";                                  // Rounding error greater than 0.1% of takerAssetFillAmount.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_SIGNATURE = \"INVALID_SIGNATURE\";                            // Signature validation failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant SIGNATURE_ILLEGAL = \"SIGNATURE_ILLEGAL\";                            // Signature type is illegal.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant SIGNATURE_UNSUPPORTED = \"SIGNATURE_UNSUPPORTED\";                    // Signature type unsupported.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_NEW_ORDER_EPOCH = \"INVALID_NEW_ORDER_EPOCH\";                // Specified salt must be greater than or equal to existing orderEpoch.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant COMPLETE_FILL_FAILED = \"COMPLETE_FILL_FAILED\";                      // Desired takerAssetFillAmount could not be completely filled.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant NEGATIVE_SPREAD_REQUIRED = \"NEGATIVE_SPREAD_REQUIRED\";              // Matched orders must have a negative spread.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant REENTRANCY_ILLEGAL = \"REENTRANCY_ILLEGAL\";                          // Recursive reentrancy is not allowed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TX_HASH = \"INVALID_TX_HASH\";                                // Transaction has already been executed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_TX_SIGNATURE = \"INVALID_TX_SIGNATURE\";                      // Signature validation failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant FAILED_EXECUTION = \"FAILED_EXECUTION\";                              // Transaction execution failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ASSET_PROXY_MISMATCH = \"ASSET_PROXY_MISMATCH\";                      // oldAssetProxy proxy does not match currentAssetProxy.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ASSET_PROXY_ID_MISMATCH = \"ASSET_PROXY_ID_MISMATCH\";                // newAssetProxyId does not match given assetProxyId.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant ASSET_PROXY_DOES_NOT_EXIST = \"ASSET_PROXY_DOES_NOT_EXIST\";          // No assetProxy registered at given id.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                // Asset transfer unsuccesful.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_GREATER_THAN_0_REQUIRED = \"LENGTH_GREATER_THAN_0_REQUIRED\";  // Byte array must have a length greater than 0.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_GREATER_THAN_3_REQUIRED = \"LENGTH_GREATER_THAN_3_REQUIRED\";  // Byte array must have a length greater than 3.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_0_REQUIRED = \"LENGTH_0_REQUIRED\";                            // Byte array must have a length of 0.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_65_REQUIRED = \"LENGTH_65_REQUIRED\";                          // Byte array must have a length of 65.\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/libs/LibOrder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (LibOrder.sol#43)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibOrder.sol:\n\t- pragma solidity0.5.4 (LibOrder.sol#21): it allows old versions\n\t- pragma solidity0.5.4 (LibOrder.sol#66): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (LibOrder.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/libs/LibConstants.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes public ZRX_ASSET_DATA;\n",
                    "message": "LibConstants.ZRX_ASSET_DATA should be constant (LibConstants.sol#28)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibConstants.sol:\n\t- pragma solidity0.5.4 (LibConstants.sol#21): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes public ZRX_ASSET_DATA;\n",
                    "message": "Variable 'LibConstants.ZRX_ASSET_DATA' (LibConstants.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Integer Underflow",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes public ZRX_ASSET_DATA;\n",
                    "message": null
                }
            ]
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/libs/LibEIP712.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (LibEIP712.sol#43)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibEIP712.sol:\n\t- pragma solidity0.5.4 (LibEIP712.sol#21): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (LibEIP712.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/libs/LibFillResults.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibFillResults.sol:\n\t- pragma solidity0.5.4 (LibFillResults.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/ITransactions.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ITransactions.sol:\n\t- pragma solidity0.5.4 (ITransactions.sol#20): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function executeTransaction(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata signature\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/IWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IWallet.sol:\n\t- pragma solidity0.5.4 (IWallet.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/IWrapperFunctions.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IWrapperFunctions.sol#43)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in IWrapperFunctions.sol:\n\t- Version used: ['0.5.4', 'ABIEncoderV2']\n\t- IWrapperFunctions.sol#21 declares pragma solidity0.5.4\n\t- IWrapperFunctions.sol#66 declares pragma solidity0.5.4\n\t- IWrapperFunctions.sol#144 declares pragma solidity0.5.4\n\t- IWrapperFunctions.sol#182 declares pragma solidity0.5.4\n\t- IWrapperFunctions.sol#183 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "    function fillOrKillOrder(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.fillOrKillOrder (IWrapperFunctions.sol#191-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function fillOrderNoThrow(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.fillOrderNoThrow (IWrapperFunctions.sol#205-211) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function batchFillOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.batchFillOrders (IWrapperFunctions.sol#218-224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "    function batchFillOrKillOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.batchFillOrKillOrders (IWrapperFunctions.sol#231-237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "    function batchFillOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256[] memory takerAssetFillAmounts,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.batchFillOrdersNoThrow (IWrapperFunctions.sol#245-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function marketSellOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 takerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketSellOrders (IWrapperFunctions.sol#258-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function marketSellOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 takerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketSellOrdersNoThrow (IWrapperFunctions.sol#272-278) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function marketBuyOrders(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 makerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketBuyOrders (IWrapperFunctions.sol#285-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function marketBuyOrdersNoThrow(\n\n        LibOrder.Order[] memory orders,\n\n        uint256 makerAssetFillAmount,\n\n        bytes[] memory signatures\n\n    )\n\n        public\n",
                    "message": "IWrapperFunctions.marketBuyOrdersNoThrow (IWrapperFunctions.sol#299-305) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "    function batchCancelOrders(LibOrder.Order[] memory orders)\n",
                    "message": "IWrapperFunctions.batchCancelOrders (IWrapperFunctions.sol#309-310) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IWrapperFunctions.sol:\n\t- pragma solidity0.5.4 (IWrapperFunctions.sol#21): it allows old versions\n\t- pragma solidity0.5.4 (IWrapperFunctions.sol#66): it allows old versions\n\t- pragma solidity0.5.4 (IWrapperFunctions.sol#144): it allows old versions\n\t- pragma solidity0.5.4 (IWrapperFunctions.sol#182): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IWrapperFunctions.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/IValidator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IValidator.sol:\n\t- pragma solidity0.5.4 (IValidator.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/ISignatureValidator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function isValidSignature(\n\n        bytes32 hash,\n\n        address signerAddress,\n\n        bytes memory signature\n\n    )\n\n        public\n\n        view\n",
                    "message": "ISignatureValidator.isValidSignature (ISignatureValidator.sol#50-57) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in ISignatureValidator.sol:\n\t- pragma solidity0.5.4 (ISignatureValidator.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/IExchangeCore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IExchangeCore.sol#43)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in IExchangeCore.sol:\n\t- Version used: ['0.5.4', 'ABIEncoderV2']\n\t- IExchangeCore.sol#21 declares pragma solidity0.5.4\n\t- IExchangeCore.sol#66 declares pragma solidity0.5.4\n\t- IExchangeCore.sol#144 declares pragma solidity0.5.4\n\t- IExchangeCore.sol#182 declares pragma solidity0.5.4\n\t- IExchangeCore.sol#183 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 205,
                    "vulnerability_code": "    function fillOrder(\n\n        LibOrder.Order memory order,\n\n        uint256 takerAssetFillAmount,\n\n        bytes memory signature\n\n    )\n\n        public\n",
                    "message": "IExchangeCore.fillOrder (IExchangeCore.sol#199-205) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function cancelOrder(LibOrder.Order memory order)\n",
                    "message": "IExchangeCore.cancelOrder (IExchangeCore.sol#209-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "    function getOrderInfo(LibOrder.Order memory order)\n\n        public\n\n        view\n",
                    "message": "IExchangeCore.getOrderInfo (IExchangeCore.sol#216-219) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IExchangeCore.sol:\n\t- pragma solidity0.5.4 (IExchangeCore.sol#21): it allows old versions\n\t- pragma solidity0.5.4 (IExchangeCore.sol#66): it allows old versions\n\t- pragma solidity0.5.4 (IExchangeCore.sol#144): it allows old versions\n\t- pragma solidity0.5.4 (IExchangeCore.sol#182): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IExchangeCore.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/IMatchOrders.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "LibEIP712.EIP712_DOMAIN_HASH should be constant (IMatchOrders.sol#43)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in IMatchOrders.sol:\n\t- Version used: ['0.5.4', 'ABIEncoderV2']\n\t- IMatchOrders.sol#21 declares pragma solidity0.5.4\n\t- IMatchOrders.sol#66 declares pragma solidity0.5.4\n\t- IMatchOrders.sol#144 declares pragma solidity0.5.4\n\t- IMatchOrders.sol#181 declares pragma solidity0.5.4\n\t- IMatchOrders.sol#182 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "    function matchOrders(\n\n        LibOrder.Order memory leftOrder,\n\n        LibOrder.Order memory rightOrder,\n\n        bytes memory leftSignature,\n\n        bytes memory rightSignature\n\n    )\n\n        public\n",
                    "message": "IMatchOrders.matchOrders (IMatchOrders.sol#197-204) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IMatchOrders.sol:\n\t- pragma solidity0.5.4 (IMatchOrders.sol#21): it allows old versions\n\t- pragma solidity0.5.4 (IMatchOrders.sol#66): it allows old versions\n\t- pragma solidity0.5.4 (IMatchOrders.sol#144): it allows old versions\n\t- pragma solidity0.5.4 (IMatchOrders.sol#181): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public EIP712_DOMAIN_HASH;\n",
                    "message": "Variable 'LibEIP712.EIP712_DOMAIN_HASH' (IMatchOrders.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP191_HEADER = \"\\x19\\x01\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_NAME = \"0x Protocol\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant EIP712_DOMAIN_VERSION = \"2\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EIP712_ORDER_SCHEMA_HASH = keccak256(abi.encodePacked(\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "exception (IndexError: pop from empty list)"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "exception (IndexError: pop from empty list)"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/Exchange/interfaces/IAssetProxyDispatcher.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IAssetProxyDispatcher.sol:\n\t- pragma solidity0.5.4 (IAssetProxyDispatcher.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/AssetProxy/libs/LibAssetProxyErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in LibAssetProxyErrors.sol:\n\t- pragma solidity0.5.4 (LibAssetProxyErrors.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant SENDER_NOT_AUTHORIZED = \"SENDER_NOT_AUTHORIZED\";                        // Sender not authorized to call this method.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TARGET_NOT_AUTHORIZED = \"TARGET_NOT_AUTHORIZED\";                        // Target address not authorized to call this method.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TARGET_ALREADY_AUTHORIZED = \"TARGET_ALREADY_AUTHORIZED\";                // Target address must not already be authorized.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INDEX_OUT_OF_BOUNDS = \"INDEX_OUT_OF_BOUNDS\";                            // Specified array index is out of bounds.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant AUTHORIZED_ADDRESS_MISMATCH = \"AUTHORIZED_ADDRESS_MISMATCH\";            // Address at index does not match given target address.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant INVALID_AMOUNT = \"INVALID_AMOUNT\";                                      // Transfer amount must equal 1.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant TRANSFER_FAILED = \"TRANSFER_FAILED\";                                    // Transfer failed.\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string constant LENGTH_GREATER_THAN_131_REQUIRED = \"LENGTH_GREATER_THAN_131_REQUIRED\";  // Byte array must have a length greater than 0.\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/AssetProxy/interfaces/IAuthorizable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in IAuthorizable.sol:\n\t- Version used: ['0.5.4', 'ABIEncoderV2']\n\t- IAuthorizable.sol#21 declares pragma solidity0.5.4\n\t- IAuthorizable.sol#22 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IAuthorizable.sol:\n\t- pragma solidity0.5.4 (IAuthorizable.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/0x/AssetProxy/interfaces/IAssetData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IAssetData.sol:\n\t- pragma solidity0.5.4 (IAssetData.sol#21): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "    function ERC20Token(\n\n        address tokenContract)\n",
                    "message": "Function 'IAssetData.ERC20Token' (IAssetData.sol#28-30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function ERC721Token(\n\n        address tokenContract,\n\n        uint256 tokenId,\n\n        bytes calldata receiverData)\n",
                    "message": "Function 'IAssetData.ERC721Token' (IAssetData.sol#32-36) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/KyberNetwork/KyberNetworkProxyInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in KyberNetworkProxyInterface.sol:\n\t- pragma solidity0.5.4 (KyberNetworkProxyInterface.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      returns (uint256 expectedRate, uint256 slippageRate);\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/auth.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (auth.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (auth.sol#38-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (auth.sol#46-52) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in auth.sol:\n\t- pragma solidity0.5.4 (auth.sol#16): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "UNKNOWN INSTRUCTION: STATICCALL"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/note.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in note.sol:\n\t- pragma solidity0.5.4 (note.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/thing.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in thing.sol:\n\t- Version used: ['0.5.4', '^0.5.4']\n\t- thing.sol#16 declares pragma solidity0.5.4\n\t- thing.sol#89 declares pragma solidity0.5.4\n\t- thing.sol#138 declares pragma solidity0.5.4\n\t- thing.sol#227 declares pragma solidity^0.5.4\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (thing.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (thing.sol#38-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (thing.sol#46-52) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in thing.sol:\n\t- pragma solidity0.5.4 (thing.sol#16): it allows old versions\n\t- pragma solidity0.5.4 (thing.sol#89): it allows old versions\n\t- pragma solidity0.5.4 (thing.sol#138): it allows old versions\n\t- pragma solidity^0.5.4 (thing.sol#227): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (thing.sol#233-235) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "UNKNOWN INSTRUCTION: STATICCALL"
            ],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/median.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address signer = recover(val_[i], age_[i], v[i], r[i], s[i], wat);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint j = 0; j < i; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(val > 0, \"Invalid price feed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(l >= min, \"Not enough signed messages\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(l % 2 != 0, \"Need odd number of messages\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                require(signers[j] != signer, \"Oracle already signed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a != address(0x0), \"No oracle 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(min_ > 0, \"Minimum valid oracles cannot be 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint j = 0; j < i; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(min_ > 0, \"Minimum valid oracles cannot be 0\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function poke(\n\n        uint256[] calldata val_, uint256[] calldata age_,\n\n        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n\n    {\n\n        uint256 l = val_.length;\n\n        require(l >= min, \"Not enough signed messages\");\n\n        require(l % 2 != 0, \"Need odd number of messages\");\n\n\n\n        // Array to store signer addresses, to check for uniqueness later\n\n        address[] memory signers = new address[](l);\n\n\n\n        for (uint i = 0; i < l; i++) {\n\n            // Validate the values were signed by an authorized oracle\n\n            address signer = recover(val_[i], age_[i], v[i], r[i], s[i], wat);\n\n            // Check that signer is an oracle\n\n            require(orcl[signer], \"Signature by invalid oracle\");\n\n\n\n            // Price feed age greater than last medianizer age\n\n            require(age_[i] > uint256(age), \"Stale message\");\n\n\n\n            // Check for ordered values (TODO: better out of bounds check?)\n\n            if ((i + 1) < l) {\n\n                // require(val_[i] <= val_[i + 1], \"Messages not in order\");\n\n            }\n\n\n\n            // Check for uniqueness (TODO: is this the best we can do?)\n\n            for (uint j = 0; j < i; j++) {\n\n                require(signers[j] != signer, \"Oracle already signed\");\n\n            }\n\n            signers[i] = signer;\n\n        }\n\n\n\n        // Write the value and timestamp to storage\n\n        // require(med_ == val_[(l - 1) / 2], \"Sanity check fail\");\n\n        val = uint128(val_[(l - 1) / 2]);\n\n        age = uint48(block.timestamp);\n\n\n\n        emit LogPrice(val, age); // some event\n",
                    "message": "Median.poke (median.sol#289-327) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(age_[i] > uint256(age),Stale message) (median.sol#307)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public wat = \"ETHUSD\";\n",
                    "message": "Median.wat should be constant (median.sol#265)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in median.sol:\n\t- Version used: ['0.5.4', '^0.5.4']\n\t- median.sol#16 declares pragma solidity0.5.4\n\t- median.sol#89 declares pragma solidity0.5.4\n\t- median.sol#138 declares pragma solidity0.5.4\n\t- median.sol#227 declares pragma solidity^0.5.4\n\t- median.sol#258 declares pragma solidity0.5.4\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (median.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (median.sol#38-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (median.sol#46-52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "    function read() public view returns (bytes32) {\n\n        require(val > 0, \"Invalid price feed\");\n\n        return bytes32(uint256(val));\n",
                    "message": "Median.read (median.sol#273-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "    function peek() public view returns (bytes32,bool) {\n\n        return (bytes32(uint256(val)), val > 0);\n",
                    "message": "Median.peek (median.sol#278-280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function lift(address a) public auth {\n\n        require(a != address(0x0), \"No oracle 0\");\n\n        orcl[a] = true;\n",
                    "message": "Median.lift (median.sol#329-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "    function drop(address a) public auth {\n\n        orcl[a] = false;\n",
                    "message": "Median.drop (median.sol#334-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function setMin(uint256 min_) public auth {\n\n        require(min_ > 0, \"Minimum valid oracles cannot be 0\");\n\n        min = min_;\n",
                    "message": "Median.setMin (median.sol#338-341) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in median.sol:\n\t- pragma solidity0.5.4 (median.sol#16): it allows old versions\n\t- pragma solidity0.5.4 (median.sol#89): it allows old versions\n\t- pragma solidity0.5.4 (median.sol#138): it allows old versions\n\t- pragma solidity^0.5.4 (median.sol#227): it allows old versions\n\t- pragma solidity0.5.4 (median.sol#258): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (median.sol#233-235) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() public view returns (bytes32,bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function poke(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint128        val;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata val_, uint256[] calldata age_,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 l = val_.length;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(l >= min, \"Not enough signed messages\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(l >= min, \"Not enough signed messages\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(l % 2 != 0, \"Need odd number of messages\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory signers = new address[](l);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < l; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address signer = recover(val_[i], age_[i], v[i], r[i], s[i], wat);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(orcl[signer], \"Signature by invalid oracle\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(age_[i] > uint256(age), \"Stale message\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if ((i + 1) < l) {\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [
                "UNKNOWN INSTRUCTION: STATICCALL"
            ],
            "vulnerability_findings": [
                {
                    "name": "Truncation bugs",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint48  public age;\n",
                    "message": null
                }
            ]
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/price-feed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in price-feed.sol:\n\t- Version used: ['0.5.4', '^0.5.4']\n\t- price-feed.sol#16 declares pragma solidity0.5.4\n\t- price-feed.sol#89 declares pragma solidity0.5.4\n\t- price-feed.sol#138 declares pragma solidity0.5.4\n\t- price-feed.sol#227 declares pragma solidity^0.5.4\n\t- price-feed.sol#258 declares pragma solidity0.5.4\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (price-feed.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (price-feed.sol#38-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (price-feed.sol#46-52) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in price-feed.sol:\n\t- pragma solidity0.5.4 (price-feed.sol#16): it allows old versions\n\t- pragma solidity0.5.4 (price-feed.sol#89): it allows old versions\n\t- pragma solidity0.5.4 (price-feed.sol#138): it allows old versions\n\t- pragma solidity^0.5.4 (price-feed.sol#227): it allows old versions\n\t- pragma solidity0.5.4 (price-feed.sol#258): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (price-feed.sol#233-235) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external view returns (bytes32,bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint128       val;\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Dependence on predictable environment variable (SWC 116)",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < zzz);\n",
                    "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
                },
                {
                    "name": "External Call To User-Supplied Address (SWC 107)",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        med_.poke();\n",
                    "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
                },
                {
                    "name": "Multiple Calls in a Single Transaction (SWC 113)",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        med_.poke();\n",
                    "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
                }
            ]
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [
                "UNKNOWN INSTRUCTION: STATICCALL"
            ],
            "vulnerability_findings": [
                {
                    "name": "Truncation bugs",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint32 public zzz;\n",
                    "message": null
                }
            ]
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/feed-factory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function create() public returns (PriceFeed) {\n\n        PriceFeed feed = new PriceFeed();\n\n        emit Created(msg.sender, address(feed));\n\n        feed.setOwner(msg.sender);\n\n        isFeed[address(feed)] = true;\n\n        return feed;\n",
                    "message": "Reentrancy in FeedFactory.create (feed-factory.sol#325-331):\n\tExternal calls:\n\t- feed.setOwner(msg.sender) (feed-factory.sol#328)\n\tState variables written after the call(s):\n\t- isFeed (feed-factory.sol#329)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Different versions of Solidity is used in feed-factory.sol:\n\t- Version used: ['0.5.4', '^0.5.4']\n\t- feed-factory.sol#16 declares pragma solidity0.5.4\n\t- feed-factory.sol#89 declares pragma solidity0.5.4\n\t- feed-factory.sol#138 declares pragma solidity0.5.4\n\t- feed-factory.sol#227 declares pragma solidity^0.5.4\n\t- feed-factory.sol#258 declares pragma solidity0.5.4\n\t- feed-factory.sol#319 declares pragma solidity0.5.4\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (feed-factory.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        auth\n\n    {\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (feed-factory.sol#38-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        auth\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (feed-factory.sol#46-52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function create() public returns (PriceFeed) {\n\n        PriceFeed feed = new PriceFeed();\n\n        emit Created(msg.sender, address(feed));\n\n        feed.setOwner(msg.sender);\n\n        isFeed[address(feed)] = true;\n\n        return feed;\n",
                    "message": "FeedFactory.create (feed-factory.sol#325-331) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in feed-factory.sol:\n\t- pragma solidity0.5.4 (feed-factory.sol#16): it allows old versions\n\t- pragma solidity0.5.4 (feed-factory.sol#89): it allows old versions\n\t- pragma solidity0.5.4 (feed-factory.sol#138): it allows old versions\n\t- pragma solidity^0.5.4 (feed-factory.sol#227): it allows old versions\n\t- pragma solidity0.5.4 (feed-factory.sol#258): it allows old versions\n\t- pragma solidity0.5.4 (feed-factory.sol#319): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (feed-factory.sol#233-235) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external view returns (bytes32,bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint128       val;\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "State access after external call (SWC 107)",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        isFeed[address(feed)] = true;\n",
                    "message": "Read of persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
                },
                {
                    "name": "State access after external call (SWC 107)",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        isFeed[address(feed)] = true;\n",
                    "message": "Write to persistent state following external call\nThe contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.\nClassification: SWC-107"
                },
                {
                    "name": "Dependence on predictable environment variable (SWC 116)",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < zzz);\n",
                    "message": "A control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\nClassification: SWC-116"
                },
                {
                    "name": "External Call To User-Supplied Address (SWC 107)",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        med_.poke();\n",
                    "message": "A call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\nClassification: SWC-107"
                },
                {
                    "name": "Multiple Calls in a Single Transaction (SWC 113)",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        med_.poke();\n",
                    "message": "Multiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\nClassification: SWC-113"
                }
            ]
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [
                "UNKNOWN INSTRUCTION: STATICCALL"
            ],
            "vulnerability_findings": [
                {
                    "name": "Truncation bugs",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint32 public zzz;\n",
                    "message": null
                }
            ]
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/math.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in math.sol:\n\t- pragma solidity0.5.4 (math.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant RAY = 10 ** 27;\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "set-protocol-contracts-b4acf144c10b1d9f3ecde4ee2820931df1cb8e4a/contracts/external/DappHub/interfaces/IMedian.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.4;\n",
                    "message": "Detected issues with version pragma in IMedian.sol:\n\t- pragma solidity0.5.4 (IMedian.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32, bool);\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "execution failed"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": false,
            "errors": [
                "input files do not contain any valid contracts"
            ],
            "vulnerability_findings": []
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "Solidity compilation failed"
            ],
            "vulnerability_findings": []
        }
    }
}