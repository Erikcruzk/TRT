// File: ../sc_datasets/DAppSCAN/Runtime_Vеrification-StakeWise/contracts-19da824f44079c2b94c8cca84de77f5bdf3f0e54/contracts/interfaces/IDepositContract.sol

// SPDX-License-Identifier: AGPL-3.0-only

pragma solidity 0.7.5;

// This interface is designed to be compatible with the Vyper version.
/// @notice This is the Ethereum 2.0 deposit contract interface.
/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs
/// https://github.com/ethereum/eth2.0-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol
interface IDepositContract {
    /// @notice A processed deposit event.
    event DepositEvent(
        bytes pubkey,
        bytes withdrawal_credentials,
        bytes amount,
        bytes signature,
        bytes index
    );

    /// @notice Submit a Phase 0 DepositData object.
    /// @param pubkey A BLS12-381 public key.
    /// @param withdrawal_credentials Commitment to a public key for withdrawals.
    /// @param signature A BLS12-381 signature.
    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.
    /// Used as a protection against malformed input.
    function deposit(
        bytes calldata pubkey,
        bytes calldata withdrawal_credentials,
        bytes calldata signature,
        bytes32 deposit_data_root
    ) external payable;

    /// @notice Query the current deposit root hash.
    /// @return The deposit root hash.
    function get_deposit_root() external view returns (bytes32);

    /// @notice Query the current deposit count.
    /// @return The deposit count encoded as a little endian 64-bit number.
    function get_deposit_count() external view returns (bytes memory);
}

// File: ../sc_datasets/DAppSCAN/Runtime_Vеrification-StakeWise/contracts-19da824f44079c2b94c8cca84de77f5bdf3f0e54/contracts/interfaces/IPool.sol

// SPDX-License-Identifier: AGPL-3.0-only

pragma solidity 0.7.5;
pragma abicoder v2;

/**
 * @dev Interface of the Pool contract.
 */
interface IPool {
    /**
    * @dev Event for tracking new pool withdrawal credentials.
    * @param withdrawalCredentials - new withdrawal credentials for the pool validators.
    */
    event WithdrawalCredentialsUpdated(bytes32 withdrawalCredentials);

    /**
    * @dev Event for tracking registered validators.
    * @param publicKey - validator public key.
    * @param operator - address of the validator operator.
    */
    event ValidatorRegistered(bytes publicKey, address operator);

    /**
    * @dev Structure for passing information about new Validator.
    * @param publicKey - BLS public key of the validator, generated by the operator.
    * @param signature - BLS signature of the validator, generated by the operator.
    * @param depositDataRoot - hash tree root of the deposit data, generated by the operator.
    */
    struct Validator {
        bytes publicKey;
        bytes signature;
        bytes32 depositDataRoot;
    }

    /**
    * @dev Constructor for initializing the Pool contract.
    * @param _admin - address of the contract admin.
    * @param _stakedEthToken - address of the StakedEthToken contract.
    * @param _validatorRegistration - address of the VRC (deployed by Ethereum).
    * @param _validators - address of the Validators contract.
    * @param _withdrawalCredentials - withdrawal credentials for the pool validators.
    */
    function initialize(
        address _admin,
        address _stakedEthToken,
        address _validatorRegistration,
        address _validators,
        bytes32 _withdrawalCredentials
    ) external;

    /**
    * @dev Function for retrieving the total collected amount.
    */
    function collectedAmount() external view returns (uint256);

    /**
    * @dev Function for getting the withdrawal credentials used to
    * initiate pool validators withdrawal from the beacon chain.
    */
    function withdrawalCredentials() external view returns (bytes32);

    /**
    * @dev Function for changing withdrawal credentials.
    * @param _withdrawalCredentials - new withdrawal credentials for the pool validators.
    */
    function setWithdrawalCredentials(bytes32 _withdrawalCredentials) external;

    /**
    * @dev Function for retrieving the validator registration contract address.
    */
    function validatorRegistration() external view returns (IDepositContract);

    /**
    * @dev Function for adding deposits to the pool.
    */
    function addDeposit() external payable;

    /**
    * @dev Function for registering new pool validator.
    * @param _validator - validator to register.
    */
    function registerValidator(Validator calldata _validator) external;
}
