{
    "polymath-core-dev-3.1.0/contracts/datastore/DataStore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == address(securityToken) ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == IOwnable(address(securityToken)).owner() ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            securityToken.checkPermission(msg.sender, address(this), MANAGEDATA) ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            securityToken.isModule(msg.sender, DATA_KEY),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Unauthorized\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_key != bytes32(0), \"bad key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyLength == _dataLength, \"bad length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == IOwnable(address(securityToken)).owner(), \"Unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_securityToken != address(0), \"Invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(uintArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bytes32ArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(addressArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(boolArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uintArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32ArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        addressArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        boolArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_194"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getAddressArrayElements (DataStore.sol#1284) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getBoolArrayElements (DataStore.sol#1296) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getUint256ArrayElements (DataStore.sol#1260) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getBytes32ArrayElements (DataStore.sol#1272) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ DataStore.sol#14) shadows:\n\t- ISecurityToken.owner (function @ DataStore.sol#737)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ DataStore.sol#15) shadows:\n\t- ISecurityToken.owner (function @ DataStore.sol#737)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": 1107,
                    "vulnerability_code": "    function deleteAddress(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteAddress(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteAddress (DataStore.sol#1104-1107):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1105)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1106)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": 1112,
                    "vulnerability_code": "    function deleteBool(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteBool(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteBool (DataStore.sol#1109-1112):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1110)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1111)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": 1102,
                    "vulnerability_code": "    function deleteBytes32(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteBytes32(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteBytes32 (DataStore.sol#1099-1102):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1100)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1101)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": 1097,
                    "vulnerability_code": "    function deleteUint256(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteUint(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteUint256 (DataStore.sol#1094-1097):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1095)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1096)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1078,
                    "vulnerability_to_line": 1081,
                    "vulnerability_code": "    function insertAddress(bytes32 _key, address _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertAddress (DataStore.sol#1078-1081):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1079)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1080)\n\t- addressData (DataStore.sol#1080)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1171,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertAddressMulti (DataStore.sol#1166-1171):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1167)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1169)\n\t- addressData (DataStore.sol#1169)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": 1086,
                    "vulnerability_code": "    function insertBool(bytes32 _key, bool _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertBool (DataStore.sol#1083-1086):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1084)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1085)\n\t- boolData (DataStore.sol#1085)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": 1178,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertBoolMulti (DataStore.sol#1173-1178):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1174)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1176)\n\t- boolData (DataStore.sol#1176)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "    function insertBytes32(bytes32 _key, bytes32 _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertBytes32 (DataStore.sol#1073-1076):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1074)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1075)\n\t- bytes32Data (DataStore.sol#1075)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": 1164,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertBytes32Multi (DataStore.sol#1159-1164):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1160)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1162)\n\t- bytes32Data (DataStore.sol#1162)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": 1071,
                    "vulnerability_code": "    function insertUint256(bytes32 _key, uint256 _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertUint256 (DataStore.sol#1068-1071):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1069)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1070)\n\t- uintData (DataStore.sol#1070)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": 1157,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertUint256Multi (DataStore.sol#1152-1157):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1153)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1155)\n\t- uintData (DataStore.sol#1155)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1018,
                    "vulnerability_to_line": 1021,
                    "vulnerability_code": "    function setAddress(bytes32 _key, address _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, false);\n",
                    "message": "Reentrancy in DataStore.setAddress (DataStore.sol#1018-1021):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1019)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1020)\n\t- addressData (DataStore.sol#1020)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "DataStoreStorage.__implementation should be constant (DataStore.sol#934)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": 1124,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setUint256Multi (DataStore.sol#1119-1124) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 862,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\n",
                    "message": "IDataStore.setUint256Multi (DataStore.sol#862) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": 1131,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setBytes32Multi (DataStore.sol#1126-1131) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\n",
                    "message": "IDataStore.setBytes32Multi (DataStore.sol#864) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": 1138,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setAddressMulti (DataStore.sol#1133-1138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\n",
                    "message": "IDataStore.setAddressMulti (DataStore.sol#866) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1145,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setBoolMulti (DataStore.sol#1140-1145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\n",
                    "message": "IDataStore.setBoolMulti (DataStore.sol#868) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\n",
                    "message": "IDataStore.insertUint256Multi (DataStore.sol#875) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": 1157,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertUint256Multi (DataStore.sol#1152-1157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": 1164,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertBytes32Multi (DataStore.sol#1159-1164) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\n",
                    "message": "IDataStore.insertBytes32Multi (DataStore.sol#877) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\n",
                    "message": "IDataStore.insertAddressMulti (DataStore.sol#879) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1171,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertAddressMulti (DataStore.sol#1166-1171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": 1178,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertBoolMulti (DataStore.sol#1173-1178) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\n",
                    "message": "IDataStore.insertBoolMulti (DataStore.sol#881) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": 1262,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n\n        uint256 size = uintArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new uint256[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = uintArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getUint256ArrayElements (DataStore.sol#1252-1262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(uint256[] memory);\n",
                    "message": "IDataStore.getUint256ArrayElements (DataStore.sol#919) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n\n        uint256 size = bytes32ArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new bytes32[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = bytes32ArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getBytes32ArrayElements (DataStore.sol#1264-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bytes32[] memory);\n",
                    "message": "IDataStore.getBytes32ArrayElements (DataStore.sol#921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": 1286,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n\n        uint256 size = addressArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new address[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = addressArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getAddressArrayElements (DataStore.sol#1276-1286) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(address[] memory);\n",
                    "message": "IDataStore.getAddressArrayElements (DataStore.sol#923) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 925,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bool[] memory);\n",
                    "message": "IDataStore.getBoolArrayElements (DataStore.sol#925) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": 1298,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n\n        uint256 size = boolArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new bool[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = boolArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getBoolArrayElements (DataStore.sol#1288-1298) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DataStore.sol:\n\t- pragma solidity0.5.8 (DataStore.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#763): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#791): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#930): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#955): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "Variable 'DataStoreStorage.__implementation' (DataStore.sol#934) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSecurityToken(address _securityToken) external onlyOwner {\n",
                    "message": "Parameter '_securityToken' of DataStore.setSecurityToken (DataStore.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setUint256 (DataStore.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setUint256 (DataStore.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBytes32 (DataStore.sol#1013) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBytes32 (DataStore.sol#1013) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1018,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setAddress (DataStore.sol#1018) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1018,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setAddress (DataStore.sol#1018) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setString(bytes32 _key, string calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setString (DataStore.sol#1028) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setString(bytes32 _key, string calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setString (DataStore.sol#1028) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes(bytes32 _key, bytes calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBytes (DataStore.sol#1033) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes(bytes32 _key, bytes calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBytes (DataStore.sol#1033) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBool (DataStore.sol#1023) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBool (DataStore.sol#1023) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1043,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Array(bytes32 _key, uint256[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setUint256Array (DataStore.sol#1043) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1043,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Array(bytes32 _key, uint256[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setUint256Array (DataStore.sol#1043) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBytes32Array (DataStore.sol#1048) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBytes32Array (DataStore.sol#1048) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressArray(bytes32 _key, address[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setAddressArray (DataStore.sol#1053) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressArray(bytes32 _key, address[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setAddressArray (DataStore.sol#1053) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolArray(bytes32 _key, bool[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBoolArray (DataStore.sol#1058) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolArray(bytes32 _key, bool[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBoolArray (DataStore.sol#1058) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertUint256 (DataStore.sol#1068) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertUint256 (DataStore.sol#1068) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertBytes32 (DataStore.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertBytes32 (DataStore.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1078,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertAddress (DataStore.sol#1078) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1078,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertAddress (DataStore.sol#1078) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertBool (DataStore.sol#1083) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertBool (DataStore.sol#1083) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteUint256(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteUint256 (DataStore.sol#1094) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteUint256(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteUint256 (DataStore.sol#1094) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBytes32(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteBytes32 (DataStore.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBytes32(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteBytes32 (DataStore.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteAddress(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteAddress (DataStore.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteAddress(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteAddress (DataStore.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBool(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteBool (DataStore.sol#1109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBool(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteBool (DataStore.sol#1109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setUint256Multi (DataStore.sol#1119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setUint256Multi (DataStore.sol#1119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setBytes32Multi (DataStore.sol#1126) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setBytes32Multi (DataStore.sol#1126) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setAddressMulti (DataStore.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setAddressMulti (DataStore.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setBoolMulti (DataStore.sol#1140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setBoolMulti (DataStore.sol#1140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertUint256Multi (DataStore.sol#1152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertUint256Multi (DataStore.sol#1152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertBytes32Multi (DataStore.sol#1159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertBytes32Multi (DataStore.sol#1159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertAddressMulti (DataStore.sol#1166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertAddressMulti (DataStore.sol#1166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertBoolMulti (DataStore.sol#1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertBoolMulti (DataStore.sol#1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256 (DataStore.sol#1180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32(bytes32 _key) external view returns(bytes32) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32 (DataStore.sol#1184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddress(bytes32 _key) external view returns(address) {\n",
                    "message": "Parameter '_key' of DataStore.getAddress (DataStore.sol#1188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getString(bytes32 _key) external view returns(string memory) {\n",
                    "message": "Parameter '_key' of DataStore.getString (DataStore.sol#1192) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes32 _key) external view returns(bytes memory) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes (DataStore.sol#1196) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBool(bytes32 _key) external view returns(bool) {\n",
                    "message": "Parameter '_key' of DataStore.getBool (DataStore.sol#1200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256Array(bytes32 _key) external view returns(uint256[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256Array (DataStore.sol#1204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32Array(bytes32 _key) external view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32Array (DataStore.sol#1208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArray(bytes32 _key) external view returns(address[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArray (DataStore.sol#1212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArray(bytes32 _key) external view returns(bool[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArray (DataStore.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256ArrayLength (DataStore.sol#1220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32ArrayLength (DataStore.sol#1224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArrayLength (DataStore.sol#1228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArrayLength (DataStore.sol#1232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256ArrayElement (DataStore.sol#1236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256) {\n",
                    "message": "Parameter '_index' of DataStore.getUint256ArrayElement (DataStore.sol#1236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32ArrayElement (DataStore.sol#1240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32) {\n",
                    "message": "Parameter '_index' of DataStore.getBytes32ArrayElement (DataStore.sol#1240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArrayElement (DataStore.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address) {\n",
                    "message": "Parameter '_index' of DataStore.getAddressArrayElement (DataStore.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArrayElement (DataStore.sol#1248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool) {\n",
                    "message": "Parameter '_index' of DataStore.getBoolArrayElement (DataStore.sol#1248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256ArrayElements (DataStore.sol#1252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getUint256ArrayElements (DataStore.sol#1252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getUint256ArrayElements (DataStore.sol#1252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32ArrayElements (DataStore.sol#1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getBytes32ArrayElements (DataStore.sol#1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getBytes32ArrayElements (DataStore.sol#1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArrayElements (DataStore.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getAddressArrayElements (DataStore.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getAddressArrayElements (DataStore.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArrayElements (DataStore.sol#1288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getBoolArrayElements (DataStore.sol#1288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getBoolArrayElements (DataStore.sol#1288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": 976,
                    "vulnerability_code": "    function _isAuthorized() internal view {\n\n        require(msg.sender == address(securityToken) ||\n\n            msg.sender == IOwnable(address(securityToken)).owner() ||\n\n            securityToken.checkPermission(msg.sender, address(this), MANAGEDATA) ||\n\n            securityToken.isModule(msg.sender, DATA_KEY),\n\n            \"Unauthorized\"\n\n        );\n",
                    "message": "Function 'DataStore._isAuthorized' (DataStore.sol#969-976) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": 1305,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            uintArrayData[_key].push(_data);\n\n        else\n\n            uintData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1300-1305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": 1312,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            bytes32ArrayData[_key].push(_data);\n\n        else\n\n            bytes32Data[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1307-1312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": 1319,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            addressArrayData[_key].push(_data);\n\n        else\n\n            addressData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1314-1319) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": 1326,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            boolArrayData[_key].push(_data);\n\n        else\n\n            boolData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1321-1326) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": 1330,
                    "vulnerability_code": "    function _setData(bytes32 _key, string memory _data) internal validKey(_key) {\n\n        stringData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1328-1330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, string memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, string memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": 1334,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes memory _data) internal validKey(_key) {\n\n        bytesData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1332-1334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": 1338,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256[] memory _data) internal validKey(_key) {\n\n        uintArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1336-1338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": 1342,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32[] memory _data) internal validKey(_key) {\n\n        bytes32ArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1340-1342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1340) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1340) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": 1346,
                    "vulnerability_code": "    function _setData(bytes32 _key, address[] memory _data) internal validKey(_key) {\n\n        addressArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1344-1346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": 1350,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool[] memory _data) internal validKey(_key) {\n\n        boolArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1348-1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": 1356,
                    "vulnerability_code": "    function _deleteUint(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(uintArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        uintArrayData[_key][_index] = uintArrayData[_key][uintArrayData[_key].length - 1];\n\n        uintArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteUint' (DataStore.sol#1352-1356) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteUint(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteUint (DataStore.sol#1352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteUint(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteUint (DataStore.sol#1352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": 1362,
                    "vulnerability_code": "    function _deleteBytes32(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(bytes32ArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        bytes32ArrayData[_key][_index] = bytes32ArrayData[_key][bytes32ArrayData[_key].length - 1];\n\n        bytes32ArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteBytes32' (DataStore.sol#1358-1362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBytes32(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteBytes32 (DataStore.sol#1358) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBytes32(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteBytes32 (DataStore.sol#1358) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function _deleteAddress(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(addressArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        addressArrayData[_key][_index] = addressArrayData[_key][addressArrayData[_key].length - 1];\n\n        addressArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteAddress' (DataStore.sol#1364-1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteAddress(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteAddress (DataStore.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteAddress(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteAddress (DataStore.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1370,
                    "vulnerability_to_line": 1374,
                    "vulnerability_code": "    function _deleteBool(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(boolArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        boolArrayData[_key][_index] = boolArrayData[_key][boolArrayData[_key].length - 1];\n\n        boolArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteBool' (DataStore.sol#1370-1374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBool(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteBool (DataStore.sol#1370) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBool(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteBool (DataStore.sol#1370) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "DataStoreStorage.__implementation (DataStore.sol#934) is never used in DataStore\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uintArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32ArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        addressArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        boolArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSecurityToken(address _securityToken) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                }
            ]
        },
        "oyente": {
            "successfull_analysis": false,
            "errors": [
                "exception (RuntimeError: Source map error, unknown name(SHR) or instr_name(INVALID))"
            ],
            "vulnerability_findings": []
        },
        "mythril": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_endIndex >= size) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_endIndex >= size) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_endIndex >= size) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_endIndex >= size) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                },
                {
                    "name": "Exception State (SWC 110)",
                    "vulnerability_from_line": 1236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256) {\n",
                    "message": "An assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\nClassification: SWC-110"
                }
            ]
        },
        "osiris": {
            "successfull_analysis": false,
            "errors": [
                "UNKNOWN INSTRUCTION: SHR"
            ],
            "vulnerability_findings": []
        }
    }
}